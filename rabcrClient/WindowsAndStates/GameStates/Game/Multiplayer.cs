//using System;
//using System.Collections.Generic;
//using System.Diagnostics;
//using System.IO;
//using System.Net;
//using System.Net.Sockets;
//using Microsoft.Xna.Framework;
//using Microsoft.Xna.Framework.Graphics;
//using Microsoft.Xna.Framework.Input;
//using Microsoft.Xna.Framework.Media;

//namespace rabcrClient {
//    class MultiPlayer : Screen {
//        	bool easter;
//        	Texture2D[] TextureEggDropE;
//        Texture2D[] TextureRocks;
//        #region Varibles
       
//        #region Clothes
//		ClothesTypeUnderwearDown
//			ClothesUnderwearDown,

//			ClothesUnderpants,
//			ClothesBoxerShorts,
//			ClothesPanties,
//			ClothesSwimsuit,
//			ClothesBikiniDown;

//		ClothesTypeUnderwearUp
//			ClothesUnderwearUp,

//			ClothesBra,
//			ClothesBikiniTop;

//		ClothesTypeBoots
//			ClothesFeet,

//			ClothesFormalShoes,
//			ClothesPumps,
//			ClothesSneakers,
//			ClothesSpaceBoots;

//		ClothesTypeTrousers
//			ClothesLegs,

//			ClothesJeans,
//			ClothesShorts,
//			ClothesSkirt,
//			ClothesArmyTrousers,
//			ClothesSpaceTrousers;

//		ClothesTypeTShirt
//			ClothesChest,

//			ClothesTShirt,
//			ClothesShirt,
//			ClothesDress,
//			ClothesTop;

//		ClothesTypeCoat
//			ClothesChestTop,

//			ClothesCoatArmy,
//			ClothesCoat,
//			ClothesJacketDenim,
//			ClothesJacketFormal,
//			ClothesJacketShort,
//			ClothesSpaceSuit;

//		ClothesTypeHelmet
//			ClothesHead,

//			ClothesCap,
//			ClothesHad,
//			ClothesCrown,
//			ClothesSpaceHelmet;
//		#endregion
//        Color
//			ColorWhite,
//			ColorSmokeWhite=new Color(240,240,240);
//        // Texture2D TextureBarBarrel, pixel;
    
//        bool radioplaying = false;
//        int PopUpWindowSelectedItem;
//        int PopUpWindowChoosingPotencialdItem;
//        CraftingRecipe[] CurrentDeskCrafting;
//        int SelectedCraftingRecipe = -1;
//        bool displayPopUpWindow;
//      GameScrollbar inventoryScrollbar, creativeScrollbar, craftingScrollbar;
//        bool exit = false;
//        bool inventoryChanged;
//        DInt wantedBlocksInv = new DInt();
//        bool getFromServerInv = false;
//        readonly DInt[] InventoryClothes = new DInt[] { new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt() };


//        #region Items
//        List<Item> DroppedItems;
//        float itemAnimationPos, itemAnimationPos2 = 3.1f;
//        #endregion

//        #region Blocks in lists
//        List<ShortAndByte> FurnaceStone, Chargers, windable, Miners, Composters, bucketRubber;
//        List<int> chunksWithPlants;
//        List<MashineBlockBasic> lightsLamp;
//        List<Mob> movingAnimals;
//        #endregion

//        #region Player
//        bool died = false;
//        int timerStayDied;
//        string diedInfo;

//        bool rocket;
//        bool swimming, waterDown;
//        bool rocketDown;
//        float gravity;

//        bool notNeedScafander;

//        int PlayerX, PlayerY;

//        int playerImg;
//        int playerState;
//        int distanceToGround = 0;
//        float gravitySpeed = 0;
//        bool playerLight = false;
//        #endregion

//        #region Textures
      
//		#region Dye
//        Texture2D 
//            TextureBin,
//			TextureEggDrop,TextureOxygenMachine, TextureAirTank, TextureAirTank2, TextureBarrel, TextureIngotSteel,
//			TextureItemEgg, TextureItemBoiledEgg, TextureWaterGraystyle, TextureChristmasStar,
//			TextureBarBarrel, pixel,
//			TextureClouds,
//			TextureSunGradient,
          
//			TextureChristmasBall, 
//			TextureChristmasBallYellow, 
//			TextureChristmasBallOrange, 
//			TextureChristmasBallRed, 
//			TextureChristmasBallPurple, 
//			TextureChristmasBallPink, 
//			TextureChristmasBallLightGreen, 
//			TextureChristmasBallBlue, 
//			TextureChristmasBallTeal,
//			TextureAngelHair,
//			TextureAngelHairWithSpruceLeaves,
			
//			TextureChristmasBallGrayWithLeaves,
//			TextureChristmasBallYellowWithLeaves,
//			TextureChristmasBallOrangeWithLeaves,
//			TextureChristmasBallRedWithLeaves,
//			TextureChristmasBallPurpleWithLeaves,
//			TextureChristmasBallPinkWithLeaves,
//			TextureChristmasBallLightGreenWithLeaves,
//			TextureChristmasBallBlueWithLeaves,
//			TextureChristmasBallTealWithLeaves,

//			TextureDyeWhite,
//			TextureDyeYellow,
//			TextureDyeGold,
//			TextureDyeOrange,
//			TextureDyeRed,
//			TextureDyeDarkRed,
//			TextureDyePink,
//			TextureDyePurple,
//			TextureDyeLightBlue,
//			TextureDyeBlue,
//			TextureDyeDarkBlue,
//			TextureDyeTeal,
//			TextureDyeLightGreen,
//			TextureDyeGreen,
//			TextureDyeDarkGreen,
//			TextureDyeBrown,
//			TextureDyeLightGray,
//			TextureDyeGray,
//			TextureDyeDarkGray,
//			TextureDyeBlack,
//			TextureDyeArmy,
//			TextureDyeMagenta,
//			TextureDyeRoseQuartz,
//			TextureDyeSpringGreen,
//			TextureDyeViolet,
//			TextureDyeOlive,
//		#endregion

//			TextureTestTube,

//		#region Ore
//			TextureOreCoal,
//			TextureOreCopper,
//			TextureOreTin,
//			TextureOreGold,
//			TextureOreIron,
//			TextureOreSilver,
//			TextureOreAluminium,
//			TextureOreSulfur,
//			TextureOreSaltpeter,
//		#endregion

//		#region Back blocks
//			TextureBackSulfurOre,
//			TextureBackSaltpeterOre,

//			backgroundDirtTexture,
//			backgroundGravelTexture,
//			backgroundSandTexture,
//			backgroundCobblestoneTexture,
//			backgroundRegoliteTexture,
//			backgroundRedSandTexture,
//			backgroundClayTexture,

//			backgroundAnorthositeTexture,
//			backgroundBasaltTexture,
//			backgroundDioritTexture,
//			backgroundDolomiteTexture,
//			backgroundFlintTexture,
//			backgroundGabbroTexture,
//			backgroundGneissTexture,
//			backgroundLimestoneTexture,
//			backgroundMudstoneTexture,
//			backgroundRhyoliteTexture,
//			backgroundSandstoneTexture,
//			backgroundSchistTexture,

//			backgroundCoalTexture,
//			backgroundCopperTexture,
//			backgroundTinTexture,
//			backgroundIronTexture,
//			backgroundAluminiumTexture,
//			backgroundSilverTexture,
//			backgroundGoldTexture,
//		#endregion

//		#region Tools
//			// Axe
//			TextureAxeStone,
//			TextureAxeCopper,
//			TextureAxeBronze,
//			TextureAxeGold,
//			TextureAxeIron,
//			TextureAxeSteel,
//			TextureAxeAluminium,

//			// Pickaxe
//			TexturePickaxeStone,
//			TexturePickaxeCopper,
//			TexturePickaxeBronze,
//			TexturePickaxeGold,
//			TexturePickaxeIron,
//			TexturePickaxeSteel,
//			TexturePickaxeAluminium,

//			// Shovel
//			TextureShovelStone,
//			TextureShovelCopper,
//			TextureShovelBronze,
//			TextureShovelGold,
//			TextureShovelIron,
//			TextureShovelSteel,
//			TextureShovelAluminium,

//			// Hoe
//			TextureHoeStone,
//			TextureHoeCopper,
//			TextureHoeBronze,
//			TextureHoeGold,
//			TextureHoeIron,
//			TextureHoeSteel,
//			TextureHoeAluminium,

//			// Saw
//			TextureSawCopper,
//			TextureSawBronze,
//			TextureSawIron,
//			TextureSawSteel,
//			TextureSawAluminium,
//			TextureSawGold,

//			// Hammer
//			TextureHammerCopper,
//			TextureHammerBronze,
//			TextureHammerGold,
//			TextureHammerIron,
//			TextureHammerSteel,
//			TextureHammerAluminium,

//			// Shears
//			TextureShearsCopper,
//			TextureShearsBronze,
//			TextureShearsGold,
//			TextureShearsIron,
//			TextureShearsSteel,
//			TextureShearsAluminium,

//			// Knife
//		   // TextureKnifeStone,
//			TextureKnifeCopper,
//			TextureKnifeBronze,
//			TextureKnifeGold,
//			TextureKnifeIron,
//			TextureKnifeSteel,
//			TextureKnifeAluminium,

//			// Electric
//			TextureDrillElectric,
//			TextureGun,
//			TextureTorchOff,
//			electricSawTexture,
//		#endregion

//		#region Tools head
//			// Pickaxe
//			TexturePickaxeHeadCopper,
//			TexturePickaxeHeadBronze,
//			TexturePickaxeHeadGold,
//			TexturePickaxeHeadIron,
//			TexturePickaxeHeadSteel,
//			TexturePickaxeHeadAluminium,

//			// Shovel
//			TextureShovelHeadCopper,
//			TextureShovelHeadBronze,
//			TextureShovelHeadGold,
//			TextureShovelHeadIron,
//			TextureShovelHeadSteel,
//			TextureShovelHeadAluminium,

//			// Axe
//			TextureAxeHeadCopper,
//			TextureAxeHeadBronze,
//			TextureAxeHeadGold,
//			TextureAxeHeadIron,
//			TextureAxeHeadSteel,
//			TextureAxeHeadAluminium,

//			// Hoe
//			TextureHoeHeadCopper,
//			TextureHoeHeadBronze,
//			TextureHoeHeadGold,
//			TextureHoeHeadIron,
//			TextureHoeHeadSteel,
//			TextureHoeHeadAluminium,

//			// Shears
//			TextureShearsHeadCopper,
//			TextureShearsHeadBronze,
//			TextureShearsHeadGold,
//			TextureShearsHeadIron,
//			TextureShearsHeadSteel,
//			TextureShearsHeadAluminium,

//			// Knife
//			TextureKnifeHeadCopper,
//			TextureKnifeHeadBronze,
//			TextureKnifeHeadGold,
//			TextureKnifeHeadIron,
//			TextureKnifeHeadSteel,
//			TextureKnifeHeadAluminium,



//		#endregion

//		#region player
//			TextureHand,
//		 //   TextureHandDown,

//			// Static
//			TexturePlayerStaticFeet,
//			TexturePlayerStaticLegs,
//			TexturePlayerStaticChest,
//		   // TexturePlayerStaticHead,
//			TexturePlayerStaticHair,
//			TexturePlayerStaticFace,
//			TexturePlayerStaticMoustage,
//			TexturePlayerStaticMouth,
//			TexturePlayerStaticEyes,

//			// Walking
//			TexturePlayerWalkingFeet,
//			TexturePlayerWalkingFeetForShoes,
//			TexturePlayerWalkingLegs,
//			TexturePlayerWalkingChest,
//			TexturePlayerWalkingFace,
//			TexturePlayerWalkingHair,
//			TexturePlayerWalkingMoustage,
//			TexturePlayerWalkingMouth,
//			TexturePlayerWalkingEyes,
//		  //  TexturePlayerWalkingLegsWoman,

//			// Swimming
//		   TexturePlayerSwimmingFeet,
//			TexturePlayerSwimmingLegs,
//		  //  TexturePlayerSwimmingChest,
//		 //   TexturePlayerSwimmingLegsWoman,


//			TextureInventoryClothes,
//			//TextureWalkingClothesHead,
//			//TextureWalkingClothesFeet,
//			//TextureWalkingClothesChest,
//			//TextureWalkingClothesChestTop,
//			//TextureWalkingClothesLegs,
//			//TextureWalkingClothesUnderwearUp,
//			//TextureWalkingClothesUnderwearDown,
//			 //ClothesHead,
//			 //ClothesFeet,
//			 //ClothesChest,
//			 //ClothesChestTop,
//			 //ClothesLegs,
//			 //ClothesUnderwearUp,
//			 //ClothesUnderwearDown,
//			//TextureSwimmingClothesFeet,
//			//TextureSwimmingClothesChest,
//			//TextureSwimmingClothesChestTop,
//			//TextureSwimmingClothesLegs,
//			//TextureSwimmingClothesUnderwearUp,
//			//TextureSwimmingClothesUnderwearDown,


//			TextureWalkingUpCensored,
//			TextureWalkingDownCensored,

//			TextureStaticUpCensored,
//			TextureStaticDownCensored,

//			TextureSwimmingUpCensored,
//			TextureSwimmingDownCensored,


//			//TextureWalkingFormalShoes,
//			//TextureWalkingPumps,
//			//TextureWalkingSneakers,
//			//TextureWalkingSpaceBoots,

//			//TextureWalkingJeans,
//			//TextureWalkingShorts,
//			//TextureWalkingSkirt,
//			//TextureWalkingArmyTrousers,
//			//TextureWalkingSpaceTrousers,

//			//TextureWalkingTShirt,
//			//TextureWalkingSpaceSuit,
//			//TextureWalkingShirt,
//			//TextureWalkingDress,

//			//TextureWalkingCap,
//			//TextureWalkingHad,
//			//TextureWalkingCrown,
//			//TextureWalkingSpaceHelmet,

//			//TextureWalkingUnderpants,
//			//TextureWalkingBoxerShorts,
//			//TextureWalkingPanties,
//			//TextureWalkingSwimsuit,
//			//TextureWalkingBikiniDown,

//			//TextureWalkingCoatArmy,
//			//TextureWalkingCoat,
//			//TextureWalkingJacketDenim,
//			//TextureWalkingJacketFormal,
//			//TextureWalkingJacketShort,

//			//TextureWalkingBra,
//			//TextureWalkingBikiniTop,

//		  //  TextureStaticFormalShoes,
//		  //  TextureStaticPumps,
//		  //  TextureStaticSneakers,
//		  //  TextureStaticSpaceBoots,

//		  //  TextureStaticJeans,
//		  //  TextureStaticShorts,
//		  //  TextureStaticSkirt,
//		  //  TextureStaticArmyTrousers,
//		  //  TextureStaticSpaceTrousers,

//		  //  TextureStaticTShirt,
//		  //  TextureStaticSpaceSuit,
//		  //  TextureStaticShirt,
//		  //  TextureStaticDress,

//		  //  TextureStaticCap,
//		  //  TextureStaticHad,
//		  //  TextureStaticCrown,
//		  //  TextureStaticSpaceHelmet,

//		  //  TextureStaticUnderpants,
//		  //  TextureStaticBoxerShorts,
//		  //  TextureStaticPanties,
//		  //  TextureStaticSwimsuit,
//		  //  TextureStaticBikiniDown,

//		  //  TextureStaticCoatArmy,
//		  //  TextureStaticCoat,
//		  //  TextureStaticJacketDenim,
//		  //  TextureStaticJacketFormal,
//		  ////  TextureStaticJacket,
//		  //  TextureStaticJacketShort,

//		  //  TextureStaticBra,
//		  //  TextureStaticBikiniTop,

//		  //  TextureSwimmingFormalShoes,
//		  //  TextureSwimmingPumps,
//		  //  TextureSwimmingSneakers,
//		  //  TextureSwimmingSpaceBoots,

//		  //  TextureSwimmingJeans,
//		  //  TextureSwimmingShorts,
//		  //  TextureSwimmingSkirt,
//		  //  TextureSwimmingArmyTrousers,
//		  //  TextureSwimmingSpaceTrousers,

//		  //  TextureSwimmingTShirt,
//		  //  TextureSwimmingSpaceSuit,
//		  //  TextureSwimmingShirt,
//		  //  TextureSwimmingDress,

//		  //  TextureSwimmingUnderpants,
//		  //  TextureSwimmingBoxerShorts,
//		  //  TextureSwimmingPanties,
//		  //  TextureSwimmingSwimsuit,
//		  //  TextureSwimmingBikiniDown,

//		  //  TextureSwimmingCoatArmy,
//		  //  TextureSwimmingCoat,
//		  //  TextureSwimmingJacketDenim,
//		  //  TextureSwimmingJacketFormal,
//		  ////  TextureSwimmingJacket,
//		  //  TextureSwimmingJacketShort,

//		  //  TextureSwimmingBra,
//		  //  TextureSwimmingBikiniTop,
//		#endregion

//		#region Trees
//			TextureBranches,

//			//  Oak
//			TextureOakWood,
//			TextureOakLeaves,
//			oakSaplingTexture,

//			// Pine
//			pineWoodTexture,
//			pineLeavesTexture,
//			pineSaplingTexture,

//			//Spruce
//			spruceWoodTexture,
//			spruceLeavesTexture,
//			spruceSaplingTexture,

//			// Linden
//			TextureLindenWood,
//			TextureLindenLeaves,
//			TextureLindenSapling,

//			// Apple
//			TextureAppleWood,
//			TextureAppleLeaves,
//			TextureAppleBlossom,
//			TextureAppleSapling,
//			TextureAppleLeavesWithApples,

//			// Plum
//			TexturePlumWood,
//			TexturePlumLeaves,
//			TexturePlumBlossom,
//			plumSaplingTexture,
//			TexturePlumLeavesWithPlums,

//			// Cherry
//			cherryWoodTexture,
//			TextureCherryBlossom,
//			TextureCherryLeaves,
//			cherrySaplingTexture,
//			TextureCherryLeavesWithCherries,

//			// Orange
//			TextureOrangeWood,
//			TextureOrangeLeaves,
//			TextureOrangeLeavesWithOranges,
//			orangeSaplingTexture,

//			// Lemon
//			TextureLemonWood,
//			TextureLemonLeaves,
//			lemonLeavesWithLemonsTexture,
//			lemonSaplingTexture,

//			// Willow
//			TextureWillowLeaves,
//			TextureWillowWood,
//			TextureWillowSapling,

//			// Mangrove
//			TextureMangroveLeaves,
//			TextureMangroveWood,
//			TextureMangroveSapling,

//			// Eucalyptus
//			TextureEucalyptusLeaves,
//			TextureEucalyptusWood,
//			TextureEucalyptusSapling,

//			// Olive
//			TextureOliveLeavesWithOlives,
//			TextureOliveLeaves,
//			TextureOliveWood,
//			TextureOliveSapling,

//			// Rubber
//			TextureRubberTreeLeaves,
//			TextureRubberTreeWood,
//			TextureRubberTreeSapling,

//			// Accacia
//			TextureAcaciaLeaves,
//			TextureAcaciaWood,
//			TextureAcaciaSapling,

//			// Kapok
//			TextureKapokBlossom,
//			TextureKapokLeavesFibre,
//			TextureKapokLeaves,
//			TextureKapokSapling,
//			TextureKapokWood,
//		#endregion

//		#region Clothes
//			// Shoes
//			TextureItemFormalShoes,
//			TextureItemPumps,
//			TextureItemSneakers,
//			TextureItemSpaceBoots,

//			// Trousers + skirt
//			TextureItemJeans,
//			TextureItemShorts,
//			TextureItemSpaceTrousers,
//			TextureItemArmyTrousers,
//			TextureItemSkirt,

//			// T-shirts + dress
//			TextureItemTShirt,
//			TextureItemSpaceSuit,
//			TextureItemDress,
//			TextureItemShirt,

//			// head
//			TextureItemCap,
//			TextureItemHat,
//			TextureItemCrown,
//			TextureItemSpaceHelmet,

//			// bottom
//			TextureItemUnderpants,
//			TextureItemBoxerShorts,
//			TextureItemPanties,
//			TextureItemSwimsuit,
//			TextureItemBikiniDown,

//			// Top
//			TextureItemBra,
//			TextureItemBikiniTop,

//			// Coat
//			TextureItemCoatArmy,
//			TextureItemCoat,
//			ItemJacketDenimTexture,
//			ItemJacketFormalTexture,
//		  //  ItemJacketTexture,
//			TextureItemJacketShort,
//		#endregion

//		#region Foods

//			// Fruit
//			ItemOrangeTexture,
//			ItemLemonTexture,
//			ItemAppleTexture,
//			ItemBananaTexture,
//			ItemCherryTexture,
//			ItemPlumTexture,

//			rashberryTexture,
//			strawberryTexture,
//			blueberryTexture,

//			// Wegetable
//			ItemOnionTexture,

//			// Meat
//			ItemRabbtCookedMeatTexture,
//			ItemRabbitMeatTexture,


//		#endregion

//			TextureSulfur,
//			TextureSaltpeter,
//			TextureGunpowder,
//			TextureAmmo,


//			TextureBucketForRubber,
//			TextureBucketWithLatex,
//			TextureResin,
//			TextureSelectCrafting,
//			RadioButtonPause,
//			RadioButtonPlay,
//			sewingMachineTexture,

//			ItemOliveTexture,
//			ItemKapokFibreTexture,

//			CompostTexture,
//			ComposterTexture,
//			ComposterFullTexture,
//			LightElectricTexture,
//			lightMaskLineTexture,
//			lightMaskRoundTexture,
//			rabbitStillTexture,
//			chickenStillTexture,
//			lightMaskTexture,
//			RodTexture,
//			chargerTexture,
//			TextureRedSand,
//			mudstoneTexture,
//			flintTexture,
//			stoneHeadTexture,

//			rocketTexture,
//			anorthositeTexture,
//			regoliteTexture,
//			solidFuelSmokeTexture,
//			mobileTexture,
//			bucketOilTexture,
//			bottleOilTexture,
//			bowlEmptyTexture,
//			bowlMushroomsTexture,
//			bowlVegetablesTexture,
//			messageLeft,
//			bottleEmptyTexture,
//			bottleWaterTexture,
//			boxWoodenTexture,
//			messageCenter,
//			messageRight,
//			flaxSeedsTexture,
//			fishCookedTexture,
//			flaxInvTexture,
//			invStrawberryTexture,
//			invRashberryTexture,
//			invBlueberryTexture,
//			shelfTexture,
//			boxAdvTexture,
//			nailTexture,
//			siliciumTexture,

//			//Items
//			condenserTexture,
//			diodeTexture,
//			tranzistorTexture,
//			resistanceTexture,
//			motorTexture,
//			bareLabelTexture,

//			//Blocks
//			roof1Texture,
//			roof2Texture,
//			scrollbarUpTexture,
//			scrollbarBetweenTexture,
//			scrollbarDownTexture,
//			inventoryNeedTexture,
//			inventorySlotTexture,
//			inventorySlotInTexture,
//			inventorySlotOutTexture,

//			clothTexture,
//			yarnTexture,
//			chickenEatTexture,
//			chickenWalkTexture,
//			rabbitEatTexture,
//			rabbitJumpTexture,
//			rabbitWalkTexture,
//			sunTexture,

//			barEnergyTexture,

//			plateCopperTexture,
//			plateIronTexture,
//			plateBronzeTexture,
//			plateAluminiumTexture,
//			plateGoldTexture,

//			oneBrickTexture,
//			oneMudBrickTexture,

//			boletusTexture,

//			coralTexture,
//			flaxTexture,
//			toadstoolTexture,
//			champignonTexture,
//			sugarCaneTexture,
//			seaweedTexture,
//			heatherTexture,

//			dolomiteTexture,
//			basaltTexture,
//			limestoneTexture,
//			rhyoliteTexture,
//			gneissTexture,
//			sandstoneTexture,
//			schistTexture,
//			gabbroTexture,
//			dioritTexture,

//			lavaTexture,

//			radioInvTexture,
//			advancedSpaceBackTexture,
//			advancedSpaceWindowTexture,
//			advancedSpaceBlockTexture,
//			advancedSpacePart1Texture,
//			advancedSpacePart2Texture,
//			advancedSpacePart3Texture,
//			advancedSpacePart4Texture,
//			advancedSpaceFloorTexture,
//			doorInvTexture,

//			oilTexture,
//			lianaTexture,

//			branchWithoutTexture,
//			branchALittle1Texture,
//			branchALittle2Texture,
//			branchFullTexture,

//			// Still Items
//			furnaceStoneOneTexture,
//			maceratorOneTexture,
//			furnaceElectricOneTexture,
//			labelOneTexture,
//			ashTexture,
//			coalWoodTexture,
//			snowTopTexture,

//			// Bars
//			barEatTexture,
//			barWaterTexture,
//			barOxygenTexture,
//			barHeartTexture,

//			// Textures blocks
//			//rocks0Texture,
//			//rocks1Texture,
//			//rocks2Texture,
//			//rocks3Texture,
//			TextureDirt,
//			gravelTexture,
//			sandTexture,
//			waterTexture,
//			snowTexture,
//			iceTexture,
//			cobblestoneTexture,

//			//GrassBlock
//			TextureGrassBlockPlains,
//			TextureGrassBlockHills,
//			TextureGrassBlockForest,
//			TextureGrassBlockDesert,
//			TextureGrassBlockJungle,
//			TextureGrassBlockClay,
//			TextureGrassBlockCompost,
//			TextureGrassBlockSnow,

//			//CraftingBlocks
//			bricksTexture,
//			deskTexture,
//			doorOpenTexture,
//			doorCloseTexture,
//			furnaceElectricTexture,
//			furnaceStoneTexture,
//			glassTexture,
//			hayBlockTexture,
//			labelTexture,
//			ladderTexture,
//			lampTexture,

//			maceratorTexture,
//			minerTexture,
//			TextureMoon,
//			radioTexture,

//			solarPanelTexture,
//			planksTexture,

//			torchTexture,
//			flagTexture,
//			waterMillTexture,
//			windMillTexture,

//			// Plants
//			plantAloreTexture,
//			plantCarrotTexture,
//			plantOnionTexture,
//			plantPeasTexture,

//			ItemPeasTexture,
//			ItemCarrotTexture,

//			blueberryPlantTexture,
//			strawberryPlantTexture,
//			rashberryPlantTexture,

//			wheatTexture,

//			cactusBigTexture,
//			cactusLittleTexture,

//			grassJungleTexture,
//			grassDesertTexture,
//			grassForestTexture,
//			grassHillsTexture,
//			grassPlainsTexture,

//			plantVioletTexture,
//			plantRoseTexture,
//			plantOrchidTexture,
//			plantDandelionTexture,

//			torchInvTexture,
//			clayTexture,



//			// Animals
//			fishTexture0,
//			fishTexture1,

//			// Animations
//			destructionTexture,

//			//Dusts
//			ItemAluminiumDustTexture,
//			ItemBronzeDustTexture,
//			ItemCoalDustTexture,
//			ItemCopperDustTexture,
//			ItemGoldDustTexture,
//			ItemIronDustTexture,
//			ItemSilverDustTexture,
//			ItemStoneDustTexture,
//			ItemTinDustTexture,
//			ItemWoodDustTexture,

//			//Electronic
//			ItemBatteryTexture,
//			ItemBigCircuitTexture,
//			ItemBulbTexture,
//			ItemCircuitTexture,
//			ItemRubberTexture,



//		#region Ingots
//			ItemAluminiumIngotTexture,
//			ItemBronzeIngotTexture,
//			ItemCopperIngotTexture,
//			ItemGoldIngotTexture,
//			ItemIronIngotTexture,
//			ItemSilverIngotTexture,
//			ItemTinIngotTexture,
//		#endregion

//			// MashinesBlocks
//			ItemDoorTexture,
//			ItemFlagTexture,
//			ItemRocketTexture,
//			ItemWaterMillTexture,
//			ItemWindMillTexture,

//			//Nature
//			ItemHayTexture,
//			ItemLeaveTexture,
//			ItemSeedsTexture,
//			ItemStickTexture,
//			ItemSticksTexture,
//			ItemWheatSeedsTexture,
//			ItemWheatStrawTexture,

//		#region Rocks
//			ItemCoalTexture,
//			ItemCopperTexture,
//			ItemDiamondTexture,
//			ItemAluminiumTexture,
//			ItemGoldTexture,
//			ItemIronTexture,
//			ItemPlasticTexture,
//			ItemRubyTexture,
//			ItemSaphiriteTexture,
//			ItemSilverTexture,
//			ItemSmaragdTexture,
//			ItemBigStoneTexture,
//			ItemMediumStoneTexture,
//			ItemSmallStoneTexture,
//			ItemTinTexture,
//		#endregion

//			ItemBackpackTexture,
//			ItemBucketTexture,
//			ItemBucketWaterTexture,
//			ItemRopeTexture;
//        #endregion

//        #region Weather & time (day/night)
//        float windForce;
//        int dayLenght = 4800;
//        const int hour = 200;


//        List<Rectangle> lights = new List<Rectangle>();

//        // Rain
//        int rainDuration;
//        int changeRain = 1250;
//        List<DInt> rainDots;
//        bool wind, rain;

//        //Time
//        int day, timeToChageWind, timer5 = 10;
//        int time;
//        int _secondTimer = 60;
//        int timerDraw60 = 60;

//        // Day / night
//        float dayAlpha;
//        float moonSpeed;
//        #endregion

//        #region Inventory
//        InventoryType lastMashineType;
//        InventoryType inventory = InventoryType.Normal;
//        Mobile.System mobileOS;
//        string[] radioSongs;
//        int inventoryScrollbarValue = 0;
//        int selectedCraftingItem;
//        int inventoryScrollbarValueCrafting = 0;
//        int inventoryScrollbarValueCraftingMax = 0;
//        int boxSelected;

//        bool mouseDraw = false;
//        bool invMove;
//        int invStart;
//        DInt invStartDInt;
//        bool leftMove;
//        int maxInvCount;

//        DInt selectedMashine;

//        GeDo gedo;
//        List<DInt> Inventory;
//        List<DInt> Crafting;
//        List<DInt> Need;

//        int diserpeard = 255;
//        string text = "";

//        //  int craftingType;

//        bool hold;
//        int timeHold;
//        string lastKey;
//        #endregion

//        #region Buttons
//        GameButtonSmall
//            buttonNext,
//            buttonRocket,
//            buttonRadio,
//            buttonPrev,
//            buttonCraft1x,
//            buttonCraft10x,
//            buttonCraft100x;

//        ImgButton
//            buttonClose,
//             buttonClosePopUp,
//            buttonInvTabBlocks,
//            buttonInvTabPlants,
//            buttonInvTabTools,
//            buttonInvTabMashines,
//            buttonInvTabItems,
//            buttonInvTabCeramics,
//            buttonInvTabFood,
//            buttonInvTabGlass,
//            buttonInvTabMaterials,
//            buttonInvAnimals,


//            buttonInvHead,
//            buttonInvChest,
//            buttonInvLegs,
//            buttonInvShoes,
//            buttonInvUnderwear;
//        #endregion

//        #region Window
//        Matrix camera, ZoomMatrix, Translation;

//        int WindowXWithout, WindowYWithout,
//            WindowCenterX, WindowCenterY,
//            WindowX, WindowY;

//        float WindowXPlayer, WindowYPlayer;

//        RenderTarget2D sunLightTarget, modificatedLightTarget;

//        readonly BlendState Multiply = new BlendState() {
//            AlphaSourceBlend=Blend.Zero,
//            AlphaDestinationBlend=Blend.SourceColor,
//            ColorSourceBlend=Blend.Zero,
//            ColorDestinationBlend=Blend.SourceColor
//        };

//        //        readonly int Zoom16=(int)(16*Setting.Zoom);

//        int terrainStartIndexX, terrainStartIndexY, terrainStartIndexW, terrainStartIndexH;
//        #endregion

//        #region Mouse & keyboard
//        bool mouseLeftPress,
//            mouseLeftRelease,
//            mouseLeftDown,

//            mouseRightPress,
//            mouseRightRelease,
//            mouseRightDown;

//        MouseState newMouseState, oldMouseState;
//        KeyboardState oldKeyboardState, newKeyboardState;

//        int previousScrollValue;

//        Vector2 mousePos;
//        DInt mousePosDiv16 = new DInt(),
//               mouseRealPos = new DInt(),
//            mousePosRound = new DInt();
//        #endregion

//        #region Bars
//        float barWater = 16;
//        float barEat = 16;
//        float barOxygen = 0;
//        float barHeart = 16;
//        float barEnergy = 0;
//        #endregion

//        #region Debug
//        bool debug;
//        float fps;
//        float fpss = 0;
//        PerformanceCounter cpu;
//        PerformanceCounter ram;
//        PerformanceCounter cpuUsage;
//        PerformanceCounter freeRam;

//        float usageCpuProcess;
//        float usageCpu;
//        float usageRamProcess;
//        float usageRam;

//        bool showInventory = true;
//        bool showPlayer = true;
//        #endregion

//        #region World
//        int TerrainLenght;

//        public string pathToWorld;
//        readonly string world = "Earth";
//        int autoSave = 300;
//        List<Energy> energy;
//        #endregion

//        #region Block destruction
//        DInt destroyBlock;

//        float destroingIndex;
//        float destringMaxIndex;

//        bool destroing;

//        BlockType destroingBlockDepth;
//        byte destroingBlockType;

//        const int DistanceBlockEdit = 200;
//        #endregion

//        #region Fonts
//        SpriteFont
//            spriteFont_small,
//            spriteFont_small_italic,
//            spriteFont_medium,
//            spriteFont_big,
//            spriteFont_biggest;
//        #endregion

//        #region Colors
//        readonly Color
//            color_r200_g200_b200_a100 = new Color(200, 200, 200, 100),
//            color_r0_g0_b0_a200 = new Color(0, 0, 0, 200),
//            color_r10_g140_b255 = new Color(10, 140, 255),
//            color_r128_g128_b128 = new Color(128, 128, 128),
//            color_r128_g128_b128_a128 = new Color(128, 128, 128, 128),
//            color_r150_g150_b150 = new Color(150, 150, 150),
//            color_r0_g0_b0_a100 = new Color(0, 0, 0, 100),
//            color_r255_g0_b0_a100 = new Color(255, 0, 0, 100),
//            color_r200_g200_b200 = new Color(200, 200, 200),
//            lampColorLight = new Color(255, 255, 220, 255);
//        #endregion

//        #region Other
//        int walkingSoundDuration;
//        #endregion

//        #endregion

//        #region Multiplayer
//   List<SendedBlockToRemove> sendedBlockToRemove = new List<SendedBlockToRemove>();
    	  
//        List<DataToSend> Queue = new List<DataToSend>();
//        const string toServer = "{Server}";
//        const string toEveryone = "{Everyone}";
//        string SomeoneWantTeleportToYouName;

//        Password password;

//        enum LoginType {
//            Null,

//            Banned,
//            BannedWithInfo,

//            FirstConnectPassword,
//            FirstConnect,

//            NotOnWhitelistNoInfo,
//            NotOnWhitelist,

//            LoginWithPassword,
//            BasicLogin,
//        }
//        int state = 0;
//        volatile MTerrain[] terrain;
//        //  string web;

//        const int downloadingSpawnAreaMax = 53;
//        int downloadedSpawnArea = 0;
//        //  bool cmdWeb;
//        byte[] byteData = new byte[1024];
//        Current current;
//        bool Error = false;
//        int joinedPlayers = 0;
//        Socket clientSocket;
//        string serverName = "";
//        int maxplayers = 10;
//        DateTime tpPlayerTime;
//        string tpPlayerMsgWaiting;
//        int safeSpawn = 0;
//        List<Player> players = new List<Player>();
//        //   bool UseBackColor;
//        //    Color BackColor;
//        // bool UseGedo;
//        GameButtonMedium menu;
//        float Process {
//            get { return state/496f; }
//        }
//        string sn = "";

//        // public string playedWorld = "";


//        //  const int hour=3000;
//        //const int dayLenght=72000;
//        // List<Item> DroppedItems=new List<Item>();
//        //#region Mouse & keyboard
//        //bool mouseLeftPress;
//        //bool mouseLeftRelease;
//        //bool mouseLeftDown;

//        //bool mouseRightPress;
//        //bool mouseRightRelease;
//        //bool mouseRightDown;

//        //Vector2 mousePos;

//        //MouseState newMouseState;
//        //MouseState oldMouseState;
//        //int previousScrollValue;
//        //KeyboardState oldKeyboardState;
//        //KeyboardState newKeyboardState;
//        //#endregion
//        // #region Weather & time (day/night)
//        // Rain
//        //int rainDuration;
//        //int changeRain = 1250;
//        //List<DInt> rainDots;
//        //bool wind, rain;

//        ////Time
//        //int day, timeToChageWind, timer5;
//        //int time;
//        //int _secondTimer=60;

//        //// Day / night
//        //float dayAlpha;
//        //float moonSpeed;
//        //#endregion
//        //       #region Debug
//        //bool debug;
//        //  List<Energy> energy;
//        //PerformanceCounter cpu;
//        //PerformanceCounter ram;
//        //PerformanceCounter cpuUsage;
//        //PerformanceCounter freeRam;

//        //float usageCpuProcess;
//        //float usageCpu;
//        //float usageRamProcess;
//        //float usageRam;

//        //bool show;
//        //bool showBlocks;
//        //#endregion
//        //   #region
//        //   int inventory =0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf

//        //   int inventoryScrollbarValue=0;
//        //   int selectedCraftingItem;
//        //   int inventoryScrollbarValueCrafting=0;
//        //   int inventoryScrollbarValueCraftingMax=0;
//        //   int boxSelected;

//        //   bool mouseDraw =false;
//        //   bool invMove;
//        //   int invStart;
//        //   DInt invStartDInt;
//        //   bool leftMove;
//        //   int maxInvCount;

//        //   DInt selectedMashine;

//        //   GeDo gedo;
//        //   List<DInt> Inventory;
//        //   List<DInt> Crafting;
//        //   List<DInt> Need;

//        //   int diserpeard=255;
//        //   string text="";

//        //   int craftingType;

//        ////   string newKey;
//        //   bool hold;
//        //   int timeHold;
//        //   string lastKey;
//        // string olderKey;
//        // #endregion
//        //  #region Bars
//        //float barWater = 16;
//        //float barEat = 16;
//        //readonly float barOxygen=0;
//        //float barHeart=16;
//        //float barEnergy=0;
//        //#endregion
//        //  #region Player
//        // int PlayerX, PlayerY;

//        //  int playerImg;
//        //  int playerState;
//        //  int distanceToGround=0;
//        //  float gravitySpeed=0;
//        // #endregion

//        //  #region Block destruction
//        //DInt destroyBlock;

//        //float destroingIndex;
//        //float destringMaxIndex;

//        //bool destroing;

//        //int destroingBlockDepth;
//        //byte destroingBlockType;
//        //#endregion

//        //    #region Varibles
//        // RenderTarget2D fogTarget;
//        //         #region Inventory

//        //        int terrainStartIndexX, terrainStartIndexY, terrainStartIndexW, terrainStartIndexH;

//        //      #endregion
//        //       //    float itemAnimationPos;
//        //      #region Buttons
//        //      Button
//        //          buttonNext,
//        //          buttonPrev,
//        //          buttonCraft1x,
//        //          buttonCraft10x,
//        //          buttonCraft100x;

//        //ImgButton

//        //          buttonClose,
//        //          buttonInvTabBlocks,
//        //          buttonInvTabPlants,
//        //          buttonInvTabTools,
//        //          buttonInvTabMashines,
//        //          buttonInvTabItems,
//        //          buttonInvTabCeramics,
//        //          buttonInvTabFood,
//        //          buttonInvTabGlass,
//        //          buttonInvTabMaterials;
//        //      #endregion

//        //      int WindowXWithout;
//        //      int WindowYWithout;

//        //      int WindowCenterX;
//        //      int WindowCenterY;

//        //      float WindowXPlayer;
//        //      float WindowYPlayer;

//        //      int WindowX;
//        //      int WindowY;

//        //      readonly BlendState Multiply = new BlendState() {
//        //          AlphaSourceBlend = Blend.Zero,
//        //          AlphaDestinationBlend = Blend.SourceColor,
//        //          ColorSourceBlend = Blend.Zero,
//        //          ColorDestinationBlend = Blend.SourceColor
//        //      };

//        // readonly int Zoom16=(int)(16*Setting.Zoom);


//        //List<MashineBlockBasic> lightsLamp;
//        //  #region Inventory
//        //int inventory =0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf

//        //int inventoryScrollbarValue=0;
//        //int selectedCraftingItem;
//        //int inventoryScrollbarValueCrafting=0;
//        //int inventoryScrollbarValueCraftingMax=0;
//        //int boxSelected;

//        //bool mouseDraw =false;
//        //bool invMove;
//        //int invStart;
//        //DInt invStartDInt;
//        //bool leftMove;
//        //int maxInvCount;

//        //DInt selectedMashine;

//        //GeDo gedo;
//        //List<DInt> Inventory;
//        //List<DInt> Crafting;
//        //List<DInt> Need;

//        //int diserpeard=255;
//        //string text="";

//        //int craftingType;

//        //string newKey;
//        //bool hold;
//        //int timeHold;
//        //string lastKey;
//        //string olderKey;
//        // #endregion
//        //         #region Textures
//        //        Texture2D
//        //messageLeft,
//        //            bottleFullTexture,
//        //            boxWoodenTexture,
//        //            messageCenter,
//        //            messageRight,
//        //           // pixel,
//        //            lightmap,
//        //            jugTexture,
//        //            jugWithWaterTexture,
//        //            //backDolomiteTexture,
//        //            //backBasaltTexture,
//        //            //backLimestoneTexture,
//        //            //backRhyoliteTexture,
//        //            //backGneissTexture,
//        //            //backSandstoneTexture,
//        //            //backSchistTexture,
//        //            //backGabbroTexture,
//        //            //backDioritTexture,
//        //       //     boxTexture,
//        //            flaxSeedsTexture,
//        //            fishCookedTexture,
//        //            flaxInvTexture,
//        //            invStrawberryTexture,
//        //            invRashberryTexture,
//        //            invBlueberryTexture,
//        //            //ItemPlantBlueberryTexture,
//        //            shelfTexture,
//        //            boxAdvTexture,
//        //            nailTexture,
//        //            siliciumTexture,
//        //            //Player
//        //	        playerTexture,
//        //            playerLeftTexture,
//        //            playerRightTexture,

//        //            //Items
//        //            condenserTexture,
//        //            diodeTexture,
//        //            tranzistorTexture,
//        //            resistanceTexture,
//        //            motorTexture,
//        //            bareLabelTexture,

//        //            //Blocks
//        //            roof1Texture,
//        //            roof2Texture,
//        //            scrollbarUpTexture,
//        //            scrollbarBetweenTexture,
//        //            scrollbarDownTexture,
//        //            // Inventories
//        //            inventoryNeedTexture,
//        //            //inventoryChooseTexture,
//        //            //inventoryCreativeTexture,
//        //            inventorySlotTexture,
//        //            inventoryBasicTexture,
//        //           // inventoryClothesTexture,

//        //            //deskInventoryTexture,
//        //			//maceratorInventoryTexture,
//        //			//furnaceInventoryStoneTexture,
//        //			//furnaceInventoryElectricTexture,
//        //            clothTexture,
//        //            yarnTexture,
//        //            chickenEatTexture,
//        //            chickenWalkTexture,
//        //            rabbitEatTexture,
//        //            rabbitJumpTexture,
//        //            rabbitWalkTexture, sunTexture,

//        //              sawCopperTexture,
//        //        sawBronzeTexture,
//        //        sawIronTexture,


//        //        electricDrillTexture,

//        //        electricSawTexture,

//        //        //Fonts
//        // //hammerBronzeTexture,
//        //        hammerBronzeTexture,
//        //            hammerIronTexture,
//        //            barEnergyTexture,
//        //            shearsCopperTexture,
//        //            shearsBronzeTexture,
//        //            shearsIronTexture,

//        //            plateCopperTexture,
//        //            plateIronTexture,
//        //            plateBronzeTexture,
//        //            plateAluminiumTexture,
//        //            plateGoldTexture,

//        //            oneBrickTexture,
//        //            oneMudBrickTexture,

//        //            //buttonCraftTexture,


//        //            boletusTexture,
//        //          //  onionTexture,
//        //            coralTexture,
//        //            flaxTexture,
//        //            toadstoolTexture,
//        //            champignonTexture,
//        //            sugarCaneTexture,
//        //            seaweedTexture,
//        //            heatherTexture,
//        //            clayTexture,

//        //            dolomiteTexture,
//        //            basaltTexture,
//        //            limestoneTexture,
//        //            rhyoliteTexture,
//        //            gneissTexture,
//        //            sandstoneTexture,
//        //            schistTexture,
//        //            gabbroTexture,
//        //            dioritTexture,

//        //            lavaTexture,

//        //          //  dolomiteBrickTexture,
//        //          //  basaltBrickTexture,
//        //          //  limestoneBrickTexture,
//        //          //  rhyoliteBrickTexture,
//        //         //   gneissBrickTexture,
//        //           // sandstoneBrickTexture,
//        //           // schistBrickTexture,
//        //           // gabbroBrickTexture,
//        //            //dioritBrickTexture,

//        //            radioInvTexture,
//        //            advancedSpaceBackTexture,
//        //            advancedSpaceWindowTexture,
//        //            advancedSpaceBlockTexture,
//        //            advancedSpacePart1Texture,
//        //            advancedSpacePart2Texture,
//        //            advancedSpacePart3Texture,
//        //            advancedSpacePart4Texture,
//        //            advancedSpaceFloorTexture,
//        //            doorInvTexture,


//        //            orangeWoodTexture,
//        //            lemonWoodTexture,
//        //           ItemOrangeWoodTexture,
//        //           ItemLemonWoodTexture,
//        //            orangeLeavesTexture,
//        //            orangeLeavesWithOrangesTexture,
//        //            lemonLeavesTexture,
//        //            lemonLeavesWithLemonsTexture,
//        //            orangeSaplingTexture,
//        //            lemonSaplingTexture,
//        //            ItemOrangeTexture,
//        //            ItemLemonTexture,

//        //			ItemIronAxeTexture,
//        //			ItemIronShovelTexture,
//        //			ItemIronPickaxeTexture,
//        //            Snow,
//        //			branchesTexture,
//        //			oilTexture,
//        //			lianaTexture,
//        //			ItemStoneAxeTexture,
//        //			ItemStoneShovelTexture,
//        //			ItemStonePickaxeTexture,

//        //			//ItemStoneHeadAxeTexture,
//        //			//ItemStoneHeadShovelTexture,
//        //			//ItemStoneHeadPickaxeTexture,

//        //			ItemIronHeadAxeTexture,
//        //			ItemIronHeadShovelTexture,
//        //			ItemIronHeadPickaxeTexture,

//        //			//ItemFrameworkAxeTexture,
//        //			//ItemFrameworkShovelTexture,
//        //			//ItemFrameworkPickaxeTexture,


//        //			//shelfInventoryTexture,

//        //			//logo,

//        //            branchWithoutTexture,
//        //            branchALittle1Texture,
//        //            branchALittle2Texture,
//        //            branchFullTexture,

//        //			// Still Items
//        //			furnaceStoneOneTexture,
//        //			maceratorOneTexture,
//        //			furnaceElectricOneTexture,
//        //			labelOneTexture,
//        //			ashTexture,
//        //			coalWoodTexture,
//        //			snowTopTexture,

//        //			// Bars
//        //			barEatTexture,
//        //			barWaterTexture,
//        //			barOxygenTexture,
//        //			barHeartTexture,

//        //			// Textures blocks
//        //			//stoneTexture,
//        //			rocks0Texture,
//        //            rocks1Texture,
//        //            rocks2Texture,
//        //            rocks3Texture,
//        //            dirtTexture,
//        //			gravelTexture,
//        //			//lavaTexture,
//        //			sandTexture,
//        //			waterTexture,
//        //			snowTexture,
//        //			iceTexture,
//        //			cobblestoneTexture,

//        //			//Oak
//        //			oakWoodTexture,
//        //			oakLeavesTexture,
//        //			oakSaplingTexture,

//        //			//Pine
//        //			pineWoodTexture,
//        //			pineLeavesTexture,
//        //			pineSaplingTexture,

//        //			//Spruce
//        //			spruceWoodTexture,
//        //			spruceLeavesTexture,
//        //			spruceSaplingTexture,

//        //			//Linden
//        //			lindenWoodTexture,
//        //			lindenLeavesTexture,
//        //			lindenSaplingTexture,

//        //			//Apple
//        //			appleWoodTexture,
//        //			appleLeavesTexture,
//        //			appleSaplingTexture,
//        //			appleLeavesWithApplesTexture,

//        //			//Plum
//        //			plumWoodTexture,
//        //			plumLeavesTexture,
//        //			plumSaplingTexture,
//        //			plumLeavesWithPlumsTexture,

//        //			//Cherry
//        //			cherryWoodTexture,
//        //			cherryLeavesTexture,
//        //			cherrySaplingTexture,
//        //			cherryLeavesWithCherriesTexture,

//        //			//Ores
//        //			ironOreTexture,
//        //			coalOreTexture,
//        //			goldOreTexture,
//        //			silverOreTexture,
//        //			aluminiumOreTexture,
//        //			copperOreTexture,
//        //			tinOreTexture,

//        //			//GrassBlock
//        //			grassBlockPlainsTexture,
//        //			grassBlockHillsTexture,
//        //			grassBlockForestTexture,
//        //			grassBlockDesertTexture,
//        //			grassBlockJungleTexture,

//        //			//CraftingBlocks
//        //			bricksTexture,
//        //			deskTexture,
//        //			doorOpenTexture,
//        //            doorCloseTexture,
//        //			furnaceElectricTexture,
//        //			furnaceStoneTexture,
//        //			glassTexture,
//        //			hayBlockTexture,
//        //			labelTexture,
//        //			ladderTexture,
//        //			lampTexture,
//        //			//lindenPlanksTexture,
//        //			maceratorTexture,
//        //			minerTexture,
//        //			//oakPlanksTexture,
//        //			moonTexture,
//        //			//pinePlanksTexture,
//        //			//potatoesTexture,
//        //			radioTexture,

//        //			solarPanelTexture,
//        //			planksTexture,

//        //			torchTexture,
//        //			flagTexture,
//        //			fenceTexture,
//        //			//rocketTexture,
//        //			waterMillTexture,
//        //			windMillTexture,
//        //			//bonfireTexture,

//        //			// Plants
//        //			plantAloreTexture,
//        //			plantCarrotTexture,
//        //			plantOnionTexture,
//        //			plantPeasTexture,

//        //            ItemPeasTexture,
//        //            ItemCarrotTexture,

//        //            blueberryPlantTexture,
//        //			strawberryPlantTexture,
//        //			rashberryPlantTexture,

//        //			wheatTexture,

//        //			cactusBigTexture,
//        //			cactusLittleTexture,

//        //			grassJungleTexture,
//        //			grassDesertTexture,
//        //			grassForestTexture,
//        //			grassHillsTexture,
//        //			grassPlainsTexture,

//        //			plantVioletTexture,
//        //			plantRoseTexture,
//        //			plantOrchidTexture,
//        //			plantDandelionTexture,

//        //			// Inventory
//        //			//boxInventoryTexture,
//        //			//boxBackpackTexture,
//        //			//boxCraftingTexture,
//        //			//boxSelectedTexture,

//        //			torchInvTexture,

//        //			// Background
//        //			backgroundDirtTexture,
//        //			backgroundGravelTexture,
//        //			//backgroundStoneTexture,
//        //			backgroundSandTexture,

//        //			// Animals
//        //			fishTexture0,
//        //			fishTexture1,

//        //			// Animations
//        //			BoublesTexture,
//        //			WaterSquirtTexture,
//        //			destructionTexture,

//        //            // Textures Other

//        //            //scrollbarTexture,
//        //            //buttonPlayTexture,
//        //            //buttonSettingTexture,
//        //            //buttonNewWorldTexture,
//        //            //ButtonOkTexture,

//        //            //// BackGround
//        //            //backgroundTexture0,
//        //            //backgroundTexture1,
//        //            //backgroundTexture2,
//        //            //backgroundTexture3,
//        //            //backgroundTexture4,
//        //            //backgroundTexture5,
//        //            //backgroundTexture6,
//        //            //backgroundTexture7,
//        //            //backgroundTexture8,
//        //            //backgroundTexture9,

//        //            // Blocks - Items
//        //            //ItemBlockLeavesTexture,
//        //            //ItemBricksTexture,
//        //            //ItemDirtTexture,
//        //            //ItemGlassTexture,
//        //            //ItemGravelTexture,
//        //            //ItemHayBlockTexture,
//        //            //ItemSandTexture,

//        //            //Dusts
//        //            ItemAluminiumDustTexture,
//        //            ItemBronzeDustTexture,
//        //            ItemCoalDustTexture,
//        //            ItemCopperDustTexture,
//        //            ItemGoldDustTexture,
//        //            ItemIronDustTexture,
//        //            ItemSilverDustTexture,
//        //            ItemStoneDustTexture,
//        //            //ItemDustSulfidTexture,
//        //            ItemTinDustTexture,
//        //            //ItemUranDustTexture,
//        //            ItemWoodDustTexture,

//        //            //Electronic
//        //            ItemBatteryTexture,
//        //            ItemBigCircuitTexture,
//        //            ItemBulbTexture,
//        //            ItemCircuitTexture,
//        //            ItemRubberTexture,

//        //            //Food
//        //            ItemAppleTexture,
//        //            ItemBananaTexture,
//        //            ItemCherryTexture,
//        //            ItemOnionTexture,
//        //            ItemPlumTexture,
//        //            ItemRabbtCookedMeatTexture,
//        //            ItemRabbitMeatTexture,
//        //            rashberryTexture,
//        //            strawberryTexture,
//        //            blueberryTexture,

//        //            //Ingots
//        //            ItemAluminiumIngotTexture,
//        //            ItemBronzeIngotTexture,
//        //            ItemCopperIngotTexture,
//        //            ItemGoldIngotTexture,
//        //            ItemIronIngotTexture,
//        //            ItemSilverIngotTexture,
//        //            ItemTinIngotTexture,
//        //          //  ItemUranIngotTexture,

//        //            //MashinesBlocks
//        //            //ItemDeskTexture,
//        //            ItemDoorTexture,
//        //            ItemFlagTexture,
//        //            //ItemFurnaceElectricTexture,
//        //            //ItemFurnaceStoneTexture,
//        //            //ItemLabelTexture,
//        //            //ItemLadderTexture,
//        //            //ItemLampTexture,
//        //            //ItemMaceratorTexture,
//        //            //ItemMinerTexture,
//        //            //ItemRadioTexture,
//        //            ItemRocketTexture,
//        //            //ItemSolarPanelTexture,
//        //            //ItemTorchTexture,
//        //            ItemWaterMillTexture,
//        //            ItemWindMillTexture,

//        //            //Nature
//        //            //ItemCactusTexture,
//        //            //ItemDandelionTexture,
//        //            ItemHayTexture,
//        //            ItemLeatherTexture,
//        //            ItemLeaveTexture,
//        //            //ItemOrchidTexture,
//        //            //ItemRoseTexture,
//        //            ItemSeedsTexture,
//        //            ItemStickTexture,
//        //            ItemSticksTexture,
//        //            //ItemVioletTexture,
//        //            ItemWheatSeedsTexture,
//        //            ItemWheatStrawTexture,

//        //            ItemOakSaplingTexture,
//        //            ItemPineSaplingTexture,
//        //            ItemLindenSaplingTexture,
//        //            ItemPlumSaplingTexture,
//        //            ItemCherrySaplingTexture,
//        //            ItemAppleSaplingTexture,
//        //            ItemSpruceSaplingTexture,


//        //            //Rocks
//        //            ItemCoalTexture,
//        //            ItemCopperTexture,
//        //            ItemDiamondTexture,
//        //			ItemAluminiumTexture,
//        //            ItemGoldTexture,
//        //            ItemIronTexture,
//        //            ItemPlasticTexture,
//        //            ItemRubyTexture,
//        //            ItemSaphiriteTexture,
//        //            ItemSilverTexture,
//        //            ItemSmaragdTexture,
//        //            ItemBigStoneTexture,
//        //            ItemMediumStoneTexture,
//        //            ItemSmallStoneTexture,
//        //            ItemTinTexture,
//        //         //   ItemUranTexture,

//        //            //Tools
//        //            ItemBackpackTexture,
//        //            ItemBucketTexture,
//        //            ItemBucketWaterTexture,
//        //            ItemRopeTexture,

//        //            //Wood
//        //            //ItemLindenPlanksTexture,
//        //            ItemLindenWoodTexture,
//        //            //ItemSprucePlanksTexture,
//        //            ItemSpruceWoodTexture,
//        //            //ItemOakPlanksTexture,
//        //            ItemOakWoodTexture,
//        //            //ItemPinePlanksTexture,
//        //            ItemPineWoodTexture,
//        //            //ItemCherryPlanksTexture,
//        //            ItemCherryWoodTexture,
//        //            //ItemPlumPlanksTexture,
//        //            ItemPlumWoodTexture,
//        //            //ItemApplePlanksTexture,
//        //            buttleTexture,
//        //            ItemAppleWoodTexture;
//        //        #endregion

//        //Chunk[] terrain;
//        //bool geft = false;

//        //List<Energy> energy;

//        //List<DInt> rainDots;


//        //Vector2 mousePos;
//        // readonly List<WaterSquirtAnimation> waterSquirt;
//        //Texture2D playerTexture, playerLeftTexture, playerRightTexture;
//        //int timer = 10;
//        //List<bool> world = new List<bool>();



//        #region Keyboard and Mouse
//        //bool mouseLeftPress;
//        //      bool mouseLeftRelease;
//        //      bool mouseLeftDown;


//        #endregion

//        //  bool invMove =false;


//        //  GeDo gedo;

//        //float barOxygen=16;
//        // int invStart=0;
//        //      bool leftMove=true;
//        //      string newKey;
//        //bool hold;
//        //int timeHold;
//        //string lastKey;
//        //string olderKey;
//        // int walkingSoundDuration;
//        //  SoundEffect walking,rainEffect,eating;
//        //   Song songHappend, songMedium, songRoot, songStorm;

//        //     CheckPassword chp;
//        //  #region Interworking
//        //MouseState oldMouseState, newMouseState;
//        //KeyboardState oldKeyboardState, newKeyboardState;

//        //Texture2D Pixel;
//        //enum Step {
//        //    Checking,
//        //    Logining,
//        //    Terrain,
//        //    Assets,
//        //}
//        //MouseState ms=new MouseState();
//        // int PlayerX = 200;
//        //  float PlayerY = 200;

//        // public Matrix Translation;




//        //List<DInt> lightPos;



//        //bool first=true;  public ContentManager cm;
//        //KeyboardState ks=new KeyboardState();
//        //KeyboardState oks=new KeyboardState();
//        //  SoundEffect walking, eating, rainEffect;
//        //Step step=Step.Checking;
//        // SpriteFont spriteFont_small, spriteFont_small_italic, spriteFont_medium, spriteFont_big, spritefontBiggest;
//        //SpriteBatch spriteBatch; /*List<int> LightPos=new List<int>();*/
//        //   #endregion


//        //    #region Blocks type

//        //#region Block
//        //List<Block>
//        //    roof1,
//        //    roof2,
//        //rocket,
//        //    heather,
//        //    boletus,
//        //    //onion,
//        //    coral,
//        //    //blueberriesFlowers,
//        //    //blueberriesNone,
//        //    //blueberriesFoodtable,
//        //    seaweed,
//        //    sugarCane,
//        //    champignon,
//        //    toadstool,


//        //    dolomite,
//        //    basalt,
//        //    limestone,
//        //    rhyolite,
//        //    gneiss,
//        //    sandstone,
//        //    schist,
//        //    gabbro,
//        //    diorit,

//        //    lava,

//        //    dolomiteBrick,
//        //    basaltBrick,
//        //    limestoneBrick,
//        //    rhyoliteBrick,
//        //    gneissBrick,
//        //    sandstoneBrick,
//        //    schistBrick,
//        //    gabbroBrick,
//        //    dioritBrick,


//        //    doorOpen,
//        //doorClose,
//        //    //Blocks
//        //    advancedSpaceFloor,
//        //     advancedSpaceBack,
//        //    advancedSpaceWindow,
//        //    advancedSpaceBlok,
//        //    advancedSpacePart1,
//        //    advancedSpacePart2,
//        //    advancedSpacePart3,
//        //    advancedSpacePart4,

//        //     orangeWood,
//        //     orangeSapling,
//        //     lemonSapling,
//        //    lemonWood,
//        //    orangeLeaves,
//        //    orangeLeavesWithOranges,
//        //    lemonLeaves,
//        //    lemonLeavesWithLemons,
//        //    sand,
//        //    liana,
//        //    dirt,
//        //    ice,
//        //    snow,
//        //    //strawberryNone,
//        //    //rashberryNone,
//        //    //         strawberryFoodtable,
//        //    //rashberryFoodtable,
//        //    //         strawberryWithFlowers,
//        //    //rashberryWithFlowers,
//        //    cobblestone,
//        //    gravel,
//        //    //stone,
//        //    oil,
//        //    snowTop,
//        //    branches,
//        //    branchWithout,
//        //    branchALittle1,
//        //    branchALittle2,
//        //    branchFull,

//        //    grassPlainsBlock,
//        //    grassHillsBlock,
//        //    grassJungleBlock,
//        //    grassDesertBlock,
//        //    grassForestBlock,

//        //    //Plants
//        //    plantViolet,
//        //    plantRose,
//        //    plantOrchid,
//        //    plantDandelion,

//        //    grassPlains,
//        //    grassDesert,
//        //    grassJungle,
//        //    grassHills,
//        //    grassForest,

//        //    cactusBig,
//        //    cactusLittle,
//        //    plantAlore,

//        //    //plantCarrot,
//        //    //plantChives,

//        //    //plantOnion,
//        //    //plantPeas,

//        //    //Ores
//        //    ironOre,
//        //    coalOre,
//        //    goldOre,
//        //    aluminiumOre,
//        //    //  stoneOre,
//        //    copperOre,
//        //    silverOre,
//        //    tinOre,

//        //    //Apple
//        //    appleWood,
//        //    appleLeaves,
//        //    appleSapling,
//        //    appleLeavesWithApples,

//        //    //Plum
//        //    plumWood,
//        //    plumLeaves,
//        //    plumSapling,
//        //    plumLeavesWithPlums,

//        //    //Cherry
//        //    cherryWood,
//        //    cherryLeaves,
//        //    cherrySapling,
//        //    cherryLeavesWithCherries,

//        //    //Oak
//        //    oakWood,
//        //    oakLeaves,
//        //    oakSapling,

//        //    //Spruce
//        //    spruceWood,
//        //    spruceLeaves,
//        //    spruceSapling,

//        //    //Pine
//        //    pineWood,
//        //    pineLeaves,
//        //    pineSapling,

//        //    //Linden
//        //    lindenWood,
//        //    lindenLeaves,
//        //    lindenSapling,

//        //    //Crafted
//        //    bricks,
//        //    glass,
//        //    hayBlock,
//        //    desk,
//        //    ladder,

//        //    oakPlanks,
//        //    lindenPlanks,
//        //    sprucePlanks,
//        //    pinePlanks,

//        //    solarPanel,

//        //    //BackBlocks
//        //    backgroundDirt,
//        //    backgroundGravel,
//        //    backgroundStone,
//        //    backgroundSand;
//        //#endregion

//        //#region Animated Blocks
//        //List<AnimatedBlock>
//        //    torch,
//        //    flag,
//        //    windmill,
//        //    watermill;
//        //#endregion

//        //#region Plants
//        //List<Plant>
//        //wheat,
//        //strawberry,
//        //rashberry,
//        //blueberry,
//        //onion,
//        //flax,
//        //carrot,
//        //chives,
//        //peas;
//        //#endregion

//        //#region ScreenBlocks
//        //List<ScreenBlock> fence, rocks, label;
//        //#endregion

//        //#region MashinesBlocks
//        //List<MashineBlock>
//        //    macerator,
//        //    furnaceElectric,
//        //    radio,
//        //    furnaceStone,
//        //    lamp,
//        //    miner;
//        //#endregion

//        //#region BoxBlocks
//        //List<BoxBlock>
//        //    shelf,
//        //    box;
//        //#endregion

//        //#region Water
//        //List<Water> waterBlock;
//        //#endregion

//        //#region Animals
//        //List<Animal> chicken, rabbit;
//        //#endregion

//        //#region Fishs
//        //List<Fish> fish;
//        //#endregion

//        //#endregion

//        //Random random;
//        //bool existsWDown;
//        //bool existsWRight;
//        //bool existsWLeft;
//        //int playerImg;
//        //int playerState;
//        //float playerGravity;
//        // private bool geft;
//        //private int playerJump;
//        //private float barEat;
//        //private float barWater;
//        //private int walkingSoundDuration;
//        //private bool wind;
//        //private bool debug;
//        // private bool destruction;
//        //private bool notAnimated;
//        //private AnimatedBlock destructionBlockIndexA;
//        //   private Block destructionBlockIndex;
//        //private float destructionIndex;
//        //private float destructionTime;
//        //private bool show=true;
//        //private float time;
//        // private int day;
//        //int inventory = 0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf
//        //List<DInt> Inventory;
//        //private int moonSpeed;
//        //bool smd = false;
//        public int port;
//        public IPAddress ip;
//        string ErrorHeader = "";
//        string ErrorText = "";
//        //string password = "";
//        //bool waitingPassword = false;
//        //DateTime start;


//        //string name;
//        //bool active;
//        //  bool backColor;
//        //Color color;
//        // public bool gedo;

//        //bool autoJoinGroup;
//        //string newGroup;
//        //DateTime daysGoTo;

//        //bool editMoreGroups;
//        //string[] moreGroups;

//        bool tpSpawn;
//        bool tpEverywhere;
//        bool tpPlayer;
//        bool tpPlayerMessage;

//        bool changeSpawn;
//        bool changeTerrainSpawn;
//        bool changeWarps;
//        //bool otherWarpsDoNotChange;

//        //public bool freeItems;
//        // bool cmdRemoveItems;

//        //  bool allowFly;
//        bool allowChangeGametype;

//        //bool paswords;
//        //  bool doNotConnect;
//        //bool kickOtherPlayerIfFull;
//        //bool cannotBeKickedIfFull;

//        bool cmdPing;
//        bool cmdMsg;
//        bool cmdMsgAll;
//        bool cmdLog;
//        bool cmdKick;

//        bool cmdServerEnd;
//        bool cmdServerReset;
//        bool cmdServerBackup;

//        // bool kit;

//        int spawnX;
//        int spawnY;
//        #endregion

//        public override void Init() {
//            buttonRadio=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
//                Text="Otevřít",
//            };

//            current=Current.Checking;

//            Connect();

//            CountGravity(new GeneratePlanetSystem().SunSystem());
            
//			#region Load textures
//			TextureTestTube=GetDataTexture(@"Items\Dye\TestTube");

//			TextureChristmasBall=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBall");
//			TextureChristmasBallYellow=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallYellow"); 
//			TextureChristmasBallOrange=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallOrange"); 
//			TextureChristmasBallRed=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallRed"); 
//			TextureChristmasBallPurple=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallPurple");
//			TextureChristmasBallPink=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallPink");
//			TextureChristmasBallLightGreen=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallLightGreen");
//			TextureChristmasBallBlue=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallBlue");
//			TextureChristmasBallTeal=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallTeal");

//			TextureAngelHair=GetDataTexture(@"Items/Decorations/AngelHair");
//			TextureAngelHairWithSpruceLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/AngelHair");
			
//			TextureChristmasBallGrayWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Gray"); 
//			TextureChristmasBallYellowWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Yellow"); 
//			TextureChristmasBallOrangeWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Orange"); 
//			TextureChristmasBallRedWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Red"); 
//			TextureChristmasBallPurpleWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Purple");
//			TextureChristmasBallPinkWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Pink");
//			TextureChristmasBallLightGreenWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/LightGreen");
//			TextureChristmasBallBlueWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Blue");
//			TextureChristmasBallTealWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Teal");

//			CreateGradientTexture();
		
//			#region Imventory
//			TextureBin=GetDataTexture("Inventories/bin");
//			TextureSelectCrafting=GetDataTexture("Buttons/Other/SelectyCrafting");

//			inventoryNeedTexture=GetDataTexture("Inventories/InventoryNeed");
//			inventorySlotTexture=GetDataTexture("Inventories/Slot");
//			inventorySlotInTexture=GetDataTexture("Inventories/SlotIn");
//			inventorySlotOutTexture=GetDataTexture("Inventories/SlotOut");

//			TextureInventoryClothes=GetDataTexture("Inventories/InventoryClothes");
//			TextureBarBarrel=GetDataTexture("Inventories/BarBarrel");
//			#endregion
//			TextureClouds=GetDataTexture("Animations\\Clouds");
//			#region Items
//			#region Tools
//			// Axe
//			TextureAxeStone = GetDataTexture("Items/Tools/Axe/AxeStone");
//			TextureAxeCopper = GetDataTexture("Items/Tools/Axe/AxeCopper");
//			TextureAxeBronze = GetDataTexture("Items/Tools/Axe/AxeBronze");
//			TextureAxeGold = GetDataTexture("Items/Tools/Axe/AxeGold");
//			TextureAxeIron = GetDataTexture("Items/Tools/Axe/AxeIron");
//			TextureAxeSteel = GetDataTexture("Items/Tools/Axe/AxeSteel");
//			TextureAxeAluminium = GetDataTexture("Items/Tools/Axe/AxeAluminium");

//			// Pickaxe
//			TexturePickaxeStone = GetDataTexture("Items/Tools/Pickaxe/PickaxeStone");
//			TexturePickaxeCopper = GetDataTexture("Items/Tools/Pickaxe/PickaxeCopper");
//			TexturePickaxeBronze = GetDataTexture("Items/Tools/Pickaxe/PickaxeBronze");
//			TexturePickaxeGold = GetDataTexture("Items/Tools/Pickaxe/PickaxeGold");
//			TexturePickaxeIron = GetDataTexture("Items/Tools/Pickaxe/PickaxeIron");
//			TexturePickaxeSteel = GetDataTexture("Items/Tools/Pickaxe/PickaxeSteel");
//			TexturePickaxeAluminium = GetDataTexture("Items/Tools/Pickaxe/PickaxeAluminium");

//			// Shovel
//			TextureShovelStone = GetDataTexture("Items/Tools/Shovel/ShovelStone");
//			TextureShovelBronze = GetDataTexture("Items/Tools/Shovel/ShovelBronze");
//			TextureShovelCopper = GetDataTexture("Items/Tools/Shovel/ShovelCopper");
//			TextureShovelGold = GetDataTexture("Items/Tools/Shovel/ShovelGold");
//			TextureShovelIron = GetDataTexture("Items/Tools/Shovel/ShovelIron");
//			TextureShovelSteel = GetDataTexture("Items/Tools/Shovel/ShovelSteel");
//			TextureShovelAluminium = GetDataTexture("Items/Tools/Shovel/ShovelAluminium");

//			//Hoe
//			TextureHoeStone=GetDataTexture("Items/Tools/Hoe/StoneHoe");
//			TextureHoeCopper=GetDataTexture("Items/Tools/Hoe/CopperHoe");
//			TextureHoeBronze=GetDataTexture("Items/Tools/Hoe/BronzeHoe");
//			TextureHoeGold=GetDataTexture("Items/Tools/Hoe/GoldHoe");
//			TextureHoeIron=GetDataTexture("Items/Tools/Hoe/IronHoe");
//			TextureHoeSteel=GetDataTexture("Items/Tools/Hoe/SteelHoe");
//			TextureHoeAluminium=GetDataTexture("Items/Tools/Hoe/AluminiumHoe");

//			// Saw
//			TextureSawCopper=GetDataTexture("Items/Tools/Saw/SawCopper");
//			TextureSawBronze=GetDataTexture("Items/Tools/Saw/SawBronze");
//			TextureSawGold=GetDataTexture("Items/Tools/Saw/SawGold");
//			TextureSawIron=GetDataTexture("Items/Tools/Saw/SawIron");
//			TextureSawSteel=GetDataTexture("Items/Tools/Saw/SawSteel");
//			TextureSawAluminium=GetDataTexture("Items/Tools/Saw/SawAluminium");

//			// Shears
//			TextureShearsCopper=GetDataTexture("Items/Tools/Shears/ShearsCopper");
//			TextureShearsBronze=GetDataTexture("Items/Tools/Shears/ShearsBronze");
//			TextureShearsGold=GetDataTexture("Items/Tools/Shears/ShearsGold");
//			TextureShearsIron=GetDataTexture("Items/Tools/Shears/ShearsIron");
//			TextureShearsSteel=GetDataTexture("Items/Tools/Shears/ShearsSteel");
//			TextureShearsAluminium=GetDataTexture("Items/Tools/Shears/ShearsAluminium");

//			// Hammer
//			TextureHammerCopper=GetDataTexture("Items/Tools/Hammer/HammerCopper");
//			TextureHammerBronze=GetDataTexture("Items/Tools/Hammer/HammerBronze");
//			TextureHammerGold=GetDataTexture("Items/Tools/Hammer/HammerGold");
//			TextureHammerIron=GetDataTexture("Items/Tools/Hammer/HammerIron");
//			TextureHammerSteel=GetDataTexture("Items/Tools/Hammer/HammerSteel");
//			TextureHammerAluminium=GetDataTexture("Items/Tools/Hammer/HammerAluminium");

//			// Knife
//			//TextureKnifeStone = GetDataTexture("Items/Tools/Knife/KnifeStone");
//			TextureKnifeCopper = GetDataTexture("Items/Tools/Knife/KnifeCopper");
//			TextureKnifeBronze = GetDataTexture("Items/Tools/Knife/KnifeBronze");
//			TextureKnifeGold = GetDataTexture("Items/Tools/Knife/KnifeGold");
//			TextureKnifeIron = GetDataTexture("Items/Tools/Knife/KnifeIron");
//			TextureKnifeSteel = GetDataTexture("Items/Tools/Knife/KnifeSteel");
//			TextureKnifeAluminium = GetDataTexture("Items/Tools/Knife/KnifeAluminium");

//			// Electronics
//			TextureTorchOff=GetDataTexture("Blocks/ForInventory/TorchOFF");
//			LightElectricTexture=GetDataTexture("Items/Tools/Electric/Light");
//			TextureDrillElectric=GetDataTexture("Items/Tools/Electric/Drill");
//			electricSawTexture=GetDataTexture("Items/Tools/Electric/Saw");
//			mobileTexture=GetDataTexture("Items/NonTools/mobile");

//			// Air tank
//			TextureAirTank=GetDataTexture("Items/NonTools/OxygenTank");
//			TextureAirTank2=GetDataTexture("Items/NonTools/OxygenTank2");

//			// Gun
//			TextureAmmo = GetDataTexture("Items/NonTools/Ammo");
//			TextureGun = GetDataTexture("Items/NonTools/Gun");

//			// Other
//			stoneHeadTexture = GetDataTexture("Items/Tools/StoneAxe");
//			#endregion

//			#region Tool heads
//			// Axe
//			TextureAxeHeadCopper = GetDataTexture("Items/ToolsHeads/Axe/Copper");
//			TextureAxeHeadBronze = GetDataTexture("Items/ToolsHeads/Axe/Bronze");
//			TextureAxeHeadGold = GetDataTexture("Items/ToolsHeads/Axe/Gold");
//			TextureAxeHeadIron = GetDataTexture("Items/ToolsHeads/Axe/Iron");
//			TextureAxeHeadSteel = GetDataTexture("Items/ToolsHeads/Axe/Steel");
//			TextureAxeHeadAluminium = GetDataTexture("Items/ToolsHeads/Axe/Aluminium");

//			// Shovel
//			TextureShovelHeadCopper = GetDataTexture("Items/ToolsHeads/Shovel/Copper");
//			TextureShovelHeadBronze = GetDataTexture("Items/ToolsHeads/Shovel/Bronze");
//			TextureShovelHeadGold = GetDataTexture("Items/ToolsHeads/Shovel/Gold");
//			TextureShovelHeadIron = GetDataTexture("Items/ToolsHeads/Shovel/Iron");
//			TextureShovelHeadSteel = GetDataTexture("Items/ToolsHeads/Shovel/Steel");
//			TextureShovelHeadAluminium = GetDataTexture("Items/ToolsHeads/Shovel/Aluminium");

//			// Pickaxe
//			TexturePickaxeHeadCopper= GetDataTexture("Items/ToolsHeads/Pickaxe/Copper");
//			TexturePickaxeHeadBronze= GetDataTexture("Items/ToolsHeads/Pickaxe/Bronze");
//			TexturePickaxeHeadGold= GetDataTexture("Items/ToolsHeads/Pickaxe/Gold");
//			TexturePickaxeHeadIron= GetDataTexture("Items/ToolsHeads/Pickaxe/Iron");
//			TexturePickaxeHeadSteel= GetDataTexture("Items/ToolsHeads/Pickaxe/Steel");
//			TexturePickaxeHeadAluminium= GetDataTexture("Items/ToolsHeads/Pickaxe/Aluminium");

//			// Shears
//			TextureShearsHeadCopper= GetDataTexture("Items/ToolsHeads/Shears/Copper");
//			TextureShearsHeadBronze= GetDataTexture("Items/ToolsHeads/Shears/Bronze");
//			TextureShearsHeadGold= GetDataTexture("Items/ToolsHeads/Shears/Gold");
//			TextureShearsHeadIron= GetDataTexture("Items/ToolsHeads/Shears/Iron");
//			TextureShearsHeadSteel= GetDataTexture("Items/ToolsHeads/Shears/Steel");
//			TextureShearsHeadAluminium= GetDataTexture("Items/ToolsHeads/Shears/Aluminium");

//			// Knife
//			TextureKnifeHeadCopper= GetDataTexture("Items/ToolsHeads/Knife/Copper");
//			TextureKnifeHeadBronze= GetDataTexture("Items/ToolsHeads/Knife/Bronze");
//			TextureKnifeHeadGold= GetDataTexture("Items/ToolsHeads/Knife/Gold");
//			TextureKnifeHeadIron= GetDataTexture("Items/ToolsHeads/Knife/Iron");
//			TextureKnifeHeadSteel= GetDataTexture("Items/ToolsHeads/Knife/Steel");
//			TextureKnifeHeadAluminium= GetDataTexture("Items/ToolsHeads/Knife/Aluminium");

//			// Hoe
//			TextureHoeHeadCopper=GetDataTexture("Items/ToolsHeads/Hoe/Copper");
//			TextureHoeHeadBronze=GetDataTexture("Items/ToolsHeads/Hoe/Bronze");
//			TextureHoeHeadGold=GetDataTexture("Items/ToolsHeads/Hoe/Gold");
//			TextureHoeHeadIron=GetDataTexture("Items/ToolsHeads/Hoe/Iron");
//			TextureHoeHeadSteel=GetDataTexture("Items/ToolsHeads/Hoe/Steel");
//			TextureHoeHeadAluminium=GetDataTexture("Items/ToolsHeads/Hoe/Aluminium");
//			#endregion

//			#region Clothes
//			// Head
//			TextureItemCap=GetDataTexture("Items/Clothes/Head/Cap");
//			TextureItemHat=GetDataTexture("Items/Clothes/Head/Hat");
//			TextureItemCrown=GetDataTexture("Items/Clothes/Head/Crown");
//			TextureItemSpaceHelmet=GetDataTexture("Items/Clothes/Head/SpaceHelmet");

//			// Feet
//			TextureItemFormalShoes=GetDataTexture("Items/Clothes/Feet/FormalShoes");
//			TextureItemPumps=GetDataTexture("Items/Clothes/Feet/Pumps");
//			TextureItemSneakers=GetDataTexture("Items/Clothes/Feet/Sneakers");
//			TextureItemSpaceBoots=GetDataTexture("Items/Clothes/Feet/SpaceBoots");

//			// Chest top
//			TextureItemCoatArmy=GetDataTexture("Items/Clothes/ChestTop/CoatArmy");
//			TextureItemCoat=GetDataTexture("Items/Clothes/ChestTop/Coat");
//			ItemJacketDenimTexture=GetDataTexture("Items/Clothes/ChestTop/JacketDenim");
//			ItemJacketFormalTexture=GetDataTexture("Items/Clothes/ChestTop/JacketFormal");
//			TextureItemJacketShort=GetDataTexture("Items/Clothes/ChestTop/JacketShort");

//			// Legs
//			TextureItemJeans=GetDataTexture("Items/Clothes/Legs/Jeans");
//			TextureItemShorts=GetDataTexture("Items/Clothes/Legs/Shorts");
//			TextureItemSpaceTrousers=GetDataTexture("Items/Clothes/Legs/SpaceTrousers");
//			TextureItemArmyTrousers=GetDataTexture("Items/Clothes/Legs/ArmyTrousers");
//			TextureItemSkirt=GetDataTexture("Items/Clothes/Legs/Skirt");
//			TextureItemTShirt=GetDataTexture("Items/Clothes/Chest/TShirt");
//			TextureItemSpaceSuit=GetDataTexture("Items/Clothes/ChestTop/SpaceSuit");
//			TextureItemDress=GetDataTexture("Items/Clothes/Chest/Dress");
//			TextureItemShirt=GetDataTexture("Items/Clothes/Chest/Shirt");

//			// Underwear Down
//			TextureItemUnderpants=GetDataTexture("Items/Clothes/DownUnderwear/Underpants");
//			TextureItemBoxerShorts=GetDataTexture("Items/Clothes/DownUnderwear/BoxerShorts");
//			TextureItemPanties=GetDataTexture("Items/Clothes/DownUnderwear/Panties");
//			TextureItemSwimsuit=GetDataTexture("Items/Clothes/DownUnderwear/Swimsuit");
//			TextureItemBikiniDown=GetDataTexture("Items/Clothes/DownUnderwear/Bikini");

//			// Underwear Up
//			TextureItemBra=GetDataTexture("Items/Clothes/UpUnderwear/Bra");
//			TextureItemBikiniTop=GetDataTexture("Items/Clothes/UpUnderwear/TopBikini");

//			#endregion

//			#region Electronics
//			condenserTexture=GetDataTexture("Items/Electronic/Condenser");
//			diodeTexture=GetDataTexture("Items/Electronic/Diode");
//			tranzistorTexture=GetDataTexture("Items/Electronic/Transistor");
//			resistanceTexture=GetDataTexture("Items/Electronic/Resistance");
//			motorTexture=GetDataTexture("Items/Electronic/Motor");
//			ItemBatteryTexture = GetDataTexture("Items/Electronic/Battery");
//			ItemBigCircuitTexture = GetDataTexture("Items/Electronic/BigCircuit");
//			ItemBulbTexture = GetDataTexture("Items/Electronic/Bulb");
//			ItemCircuitTexture = GetDataTexture("Items/Electronic/Circuit");
//			bareLabelTexture=GetDataTexture("Items/Electronic/label");
//			#endregion

//			#region Nature
//			// From plants
//			flaxSeedsTexture=GetDataTexture("Items/Nature/FlaxSeeds");
//			ItemHayTexture = GetDataTexture("Items/Nature/Hay");
//			ItemLeaveTexture = GetDataTexture("Items/Nature/Leave");
//			ItemSeedsTexture = GetDataTexture("Items/Nature/Seeds");
//			ItemStickTexture = GetDataTexture("Items/Nature/Stick");
//			ItemSticksTexture = GetDataTexture("Items/Nature/Sticks");
//			ItemWheatSeedsTexture = GetDataTexture("Items/Nature/WheatSeeds");
//			ItemWheatStrawTexture = GetDataTexture("Items/Nature/WheatStraw");
//			ItemKapokFibreTexture=GetDataTexture("Items/Nature/KapokFibre");

//			// Crafted
//			clothTexture=GetDataTexture("Items/Nature/Cloth");
//			yarnTexture=GetDataTexture("Items/Nature/Yarn");
//			TextureResin=GetDataTexture("Items/Nature/Resin");
//			#endregion

//			#region Rocks
//			ItemAluminiumTexture = GetDataTexture("Items/Rocks/Aluminium");
//			ItemCoalTexture = GetDataTexture("Items/Rocks/Coal");
//			ItemCopperTexture = GetDataTexture("Items/Rocks/Copper");
//			ItemDiamondTexture = GetDataTexture("Items/Rocks/Diamond");
//			ItemGoldTexture = GetDataTexture("Items/Rocks/Gold");
//			ItemIronTexture = GetDataTexture("Items/Rocks/Iron");
//			ItemPlasticTexture= GetDataTexture("Items/Rocks/Plastic");
//			ItemRubyTexture = GetDataTexture("Items/Rocks/Ruby");
//			ItemSaphiriteTexture = GetDataTexture("Items/Rocks/Saphirite");
//			ItemSilverTexture = GetDataTexture("Items/Rocks/Silver");
//			ItemSmaragdTexture = GetDataTexture("Items/Rocks/Smaragd");
//			ItemBigStoneTexture = GetDataTexture("Items/Rocks/StoneBig");
//			ItemMediumStoneTexture = GetDataTexture("Items/Rocks/StoneMedium");
//			ItemSmallStoneTexture = GetDataTexture("Items/Rocks/StoneSmall");
//			ItemTinTexture = GetDataTexture("Items/Rocks/Tin");
//			#endregion

//			#region Dye
//			TextureDyeWhite= GetDataTexture("Items/Dye/White");
//			TextureDyeYellow = GetDataTexture("Items/Dye/Yellow");
//			TextureDyeGold = GetDataTexture("Items/Dye/Gold");
//			TextureDyeOrange = GetDataTexture("Items/Dye/Orange");
//			TextureDyeRed = GetDataTexture("Items/Dye/Red");
//			TextureDyeDarkRed = GetDataTexture("Items/Dye/DarkRed");
//			TextureDyePink = GetDataTexture("Items/Dye/Pink");
//			TextureDyePurple = GetDataTexture("Items/Dye/Purple");
//			TextureDyeLightBlue = GetDataTexture("Items/Dye/LightBlue");
//			TextureDyeBlue = GetDataTexture("Items/Dye/Blue");
//			TextureDyeDarkBlue = GetDataTexture("Items/Dye/DarkBlue");
//			TextureDyeTeal = GetDataTexture("Items/Dye/Teal");
//			TextureDyeLightGreen = GetDataTexture("Items/Dye/LightGreen");
//			TextureDyeGreen = GetDataTexture("Items/Dye/Green");
//			TextureDyeDarkGreen = GetDataTexture("Items/Dye/DarkGreen");
//			TextureDyeBrown = GetDataTexture("Items/Dye/Brown");
//			TextureDyeLightGray = GetDataTexture("Items/Dye/LightGray");
//			TextureDyeGray = GetDataTexture("Items/Dye/Gray");
//			TextureDyeDarkGray = GetDataTexture("Items/Dye/DarkGray");
//			TextureDyeBlack = GetDataTexture("Items/Dye/Black");
//			TextureDyeArmy = GetDataTexture("Items/Dye/Army");
//			TextureDyeMagenta = GetDataTexture("Items/Dye/Magenta");
//			TextureDyeRoseQuartz = GetDataTexture("Items/Dye/RoseQuartz");
//			TextureDyeSpringGreen = GetDataTexture("Items/Dye/SpringGreen");
//			TextureDyeViolet = GetDataTexture("Items/Dye/Violet");
//			TextureDyeOlive = GetDataTexture("Items/Dye/Olive");
//			#endregion

//			#region Food
//			// Raw vegetable
//			ItemPeasTexture=GetDataTexture("Items/Food/Peas");
//			ItemCarrotTexture=GetDataTexture("Items/Food/Carrot");

//			// Raw fruit
//			ItemOrangeTexture=GetDataTexture("Items/Food/Orange");
//			ItemLemonTexture=GetDataTexture("Items/Food/Lemon");
//			ItemOliveTexture=GetDataTexture("Items/Food/Olive");
//			ItemAppleTexture = GetDataTexture("Items/Food/Apple");
//			ItemBananaTexture = GetDataTexture("Items/Food/Banana");
//			ItemCherryTexture = GetDataTexture("Items/Food/Cherry");
//			ItemOnionTexture = GetDataTexture("Items/Food/Onion");
//			ItemPlumTexture = GetDataTexture("Items/Food/Plum");
//			rashberryTexture = GetDataTexture("Items/Food/Rashberry");
//			blueberryTexture=GetDataTexture("Items/Food/Blueberry");
//			strawberryTexture = GetDataTexture("Items/Food/Strawberry");

//			// Raw other
//			TextureItemEgg=GetDataTexture("Items/Food/egg");
//			ItemRabbitMeatTexture = GetDataTexture("Items/Food/RabbitMeat");

//			// Boiled
//			TextureItemBoiledEgg=GetDataTexture("Items/Food/eggboiled");
//			fishCookedTexture=GetDataTexture("Items/Food/FishCooked");
//			ItemRabbtCookedMeatTexture = GetDataTexture("Items/Food/RabbitCookedMeat");

//			// Combined
//			bowlMushroomsTexture=GetDataTexture("Items/Food/BowlWithMushrooms");
//			bowlVegetablesTexture=GetDataTexture("Items/Food/BowlWithVegetable");
//			#endregion

//			#region Other
//			RodTexture=GetDataTexture("Items/NonTools/Rod");
//			nailTexture=GetDataTexture("Items/NonTools/Nail");
//			plateCopperTexture=GetDataTexture("Items/Plates/PlateCopper");
//			plateIronTexture=GetDataTexture("Items/Plates/PlateIron");
//			plateBronzeTexture=GetDataTexture("Items/Plates/PlateBronze");
//			plateAluminiumTexture=GetDataTexture("Items/Plates/PlateAluminium");
//			plateGoldTexture=GetDataTexture("Items/Plates/PlateGold");
//			#endregion



//			bottleWaterTexture=GetDataTexture("Items/NonTools/BottleWater");
//			bottleEmptyTexture=GetDataTexture("Items/NonTools/BottleEmpty");
//			bottleOilTexture=GetDataTexture("Items/NonTools/BottleOil");
//			bucketOilTexture=GetDataTexture("Items/NonTools/BucketOil");

//			coalWoodTexture = GetDataTexture("Items/Rocks/CoalWood");
//			ItemBackpackTexture = GetDataTexture("Items/Clothes/Backpack");
//			ItemBucketTexture = GetDataTexture("Items/NonTools/Bucket");
//			ItemBucketWaterTexture = GetDataTexture("Items/NonTools/BucketWater");
//			ItemRopeTexture = GetDataTexture("Items/NonTools/Rope");

//			#region Ingots
//			ItemAluminiumIngotTexture= GetDataTexture("Items/Ingots/Aluminium");
//			ItemBronzeIngotTexture = GetDataTexture("Items/Ingots/Bronze");
//			ItemCopperIngotTexture = GetDataTexture("Items/Ingots/Copper");
//			ItemGoldIngotTexture = GetDataTexture("Items/Ingots/Gold");
//			ItemIronIngotTexture = GetDataTexture("Items/Ingots/Iron");
//			ItemSilverIngotTexture = GetDataTexture("Items/Ingots/Silver");
//			ItemTinIngotTexture = GetDataTexture("Items/Ingots/Tin");
//			TextureIngotSteel=GetDataTexture("Items/Ingots/Steel");

//			siliciumTexture=GetDataTexture("Items/Ingots/Silicium");

//			oneBrickTexture=GetDataTexture("Items/Ingots/Brick");
//			oneMudBrickTexture=GetDataTexture("Items/Ingots/Mud");
//			#endregion

//			#region Dusts
//			// Metal
//			ItemCopperDustTexture = GetDataTexture("Items/Dusts/Copper");
//			ItemTinDustTexture = GetDataTexture("Items/Dusts/Tin");
//			ItemBronzeDustTexture = GetDataTexture("Items/Dusts/Bronze");
//			ItemGoldDustTexture = GetDataTexture("Items/Dusts/Gold");
//			ItemSilverDustTexture = GetDataTexture("Items/Dusts/Silver");
//			ItemIronDustTexture = GetDataTexture("Items/Dusts/Iron");
//			ItemAluminiumDustTexture= GetDataTexture("Items/Dusts/Aluminium");

//			// Other
//			ItemCoalDustTexture = GetDataTexture("Items/Dusts/Coal");
//			ItemStoneDustTexture = GetDataTexture("Items/Dusts/Stone");
//			ItemWoodDustTexture = GetDataTexture("Items/Dusts/Wood");
//			ashTexture= GetDataTexture("Items/Dusts/Ash");
//			TextureSulfur = GetDataTexture("Items/Dusts/Sulfur");
//			TextureSaltpeter = GetDataTexture("Items/Dusts/Saltpeter");
//			TextureGunpowder = GetDataTexture("Items/Dusts/Gunpowder");
//			#endregion

//			ItemRubberTexture = GetDataTexture("Items/Electronic/Rubber");
//			bowlEmptyTexture=GetDataTexture("Items/NonTools/Bowl");
//			#endregion

//			#region Blocks
//			#region Mashines
//			// Mechanical
//			ComposterTexture=GetDataTexture("Blocks/Mashines/Composter");
//			TextureBucketForRubber=GetDataTexture("Blocks/Mashines/BucketForRubber");
//			TextureBucketWithLatex=GetDataTexture("Blocks/Mashines/BucketWithLatex");
//			ComposterFullTexture=GetDataTexture("Blocks/Mashines/ComposterFull");
//			shelfTexture=GetDataTexture("Blocks/Mashines/shelf");
//			boxAdvTexture=GetDataTexture("Blocks/Mashines/box");
//			boxWoodenTexture=GetDataTexture("Blocks/Mashines/boxWooden");
//			deskTexture = GetDataTexture("Blocks/Mashines/Desk");
//			doorOpenTexture = GetDataTexture("Blocks/Mashines/DoorOpen");
//			doorCloseTexture = GetDataTexture("Blocks/Mashines/DoorClose");
//			furnaceStoneTexture = GetDataTexture("Blocks/Mashines/FurnaceStone");
//			torchTexture = GetDataTexture("Blocks/Mashines/Torch");
//			TextureBarrel = GetDataTexture("Blocks/Mashines/Barrel");

//			// Electrinics
//			TextureOxygenMachine=GetDataTexture("Blocks/Mashines/OxygenMachine");
//			chargerTexture=GetDataTexture("Blocks/Mashines/Charger");
//			rocketTexture=GetDataTexture("Space/Rocket");
//			radioTexture = GetDataTexture("Blocks/Mashines/Radio");
//			maceratorTexture = GetDataTexture("Blocks/Mashines/Macerator");
//			minerTexture = GetDataTexture("Blocks/Mashines/Miner");
//			lampTexture = GetDataTexture("Blocks/Mashines/Lamp");
//			solarPanelTexture = GetDataTexture("Blocks/Mashines/SolarPanel");
//			labelTexture = GetDataTexture("Blocks/Mashines/Label");
//			furnaceElectricTexture = GetDataTexture("Blocks/Mashines/FurnaceElectric");
//			waterMillTexture = GetDataTexture("Blocks/Mashines/Watermill");
//			windMillTexture = GetDataTexture("Blocks/Mashines/Windmill");
//			sewingMachineTexture=GetDataTexture("Blocks/Mashines/SewingMachine");
//			#endregion

//			#region Trees
//			TextureBranches = GetDataTexture("Blocks/TreeBlocks/Branches");
//			// Oak
//			TextureOakWood = GetDataTexture("Blocks/TreeBlocks/Oak/Wood");
//			TextureOakLeaves = GetDataTexture("Blocks/TreeBlocks/Oak/Leaves");

//			// Spruce
//			spruceWoodTexture = GetDataTexture("Blocks/TreeBlocks/Spruce/Wood");
//			spruceLeavesTexture = GetDataTexture("Blocks/TreeBlocks/Spruce/Leaves");

//			// Linden
//			TextureLindenWood = GetDataTexture("Blocks/TreeBlocks/Linden/Wood");
//			TextureLindenLeaves = GetDataTexture("Blocks/TreeBlocks/Linden/Leaves");

//			// Pine
//			pineLeavesTexture = GetDataTexture("Blocks/TreeBlocks/Pine/Leaves");
//			pineWoodTexture = GetDataTexture("Blocks/TreeBlocks/Pine/Wood");

//			// Apple
//			TextureAppleWood = GetDataTexture("Blocks/TreeBlocks/Apple/Wood");
//			TextureAppleLeaves = GetDataTexture("Blocks/TreeBlocks/Apple/Leaves");
//			TextureAppleBlossom = GetDataTexture("Blocks/TreeBlocks/Apple/Blossom");
//			TextureAppleLeavesWithApples = GetDataTexture("Blocks/TreeBlocks/Apple/LeavesWithApples");

//			// Cherry
//			cherryWoodTexture = GetDataTexture("Blocks/TreeBlocks/Cherry/Wood");
//			TextureCherryLeaves = GetDataTexture("Blocks/TreeBlocks/Cherry/Leaves");
//			TextureCherryBlossom = GetDataTexture("Blocks/TreeBlocks/Cherry/Blossom");
//			TextureCherryLeavesWithCherries = GetDataTexture("Blocks/TreeBlocks/Cherry/LeavesWithCherries");

//			// Plum
//			TexturePlumWood = GetDataTexture("Blocks/TreeBlocks/Plum/Wood");
//			TexturePlumLeaves = GetDataTexture("Blocks/TreeBlocks/Plum/Leaves");
//			TexturePlumBlossom = GetDataTexture("Blocks/TreeBlocks/Plum/Blossom");
//			TexturePlumLeavesWithPlums = GetDataTexture("Blocks/TreeBlocks/Plum/LeavesWithPlums");

//			// Orange
//			TextureOrangeLeaves=GetDataTexture("Blocks/TreeBlocks/Orange/Leaves");
//			TextureOrangeLeavesWithOranges=GetDataTexture("Blocks/TreeBlocks/Orange/LeavesWithOranges");
//			TextureOrangeWood=GetDataTexture("Blocks/TreeBlocks/Orange/Wood");

//			// Lemon
//			TextureLemonWood=GetDataTexture("Blocks/TreeBlocks/Lemon/Wood");
//			TextureLemonLeaves=GetDataTexture("Blocks/TreeBlocks/Lemon/Leaves");
//			lemonLeavesWithLemonsTexture=GetDataTexture("Blocks/TreeBlocks/Lemon/LeavesWithLemons");

//			// Olive
//			TextureOliveLeavesWithOlives=GetDataTexture("Blocks/TreeBlocks/Olive/LeavesWithOlives");
//			TextureOliveLeaves=GetDataTexture("Blocks/TreeBlocks/Olive/Leaves");
//			TextureOliveWood=GetDataTexture("Blocks/TreeBlocks/Olive/Wood");

//			// Mangrove
//			TextureMangroveLeaves=GetDataTexture("Blocks/TreeBlocks/Mangrove/Leaves");
//			TextureMangroveWood=GetDataTexture("Blocks/TreeBlocks/Mangrove/Wood");

//			// Willow
//			TextureWillowLeaves=GetDataTexture("Blocks/TreeBlocks/Willow/Leaves");
//			TextureWillowWood=GetDataTexture("Blocks/TreeBlocks/Willow/Wood");

//			// Eucaliptus
//			TextureEucalyptusLeaves=GetDataTexture("Blocks/TreeBlocks/Eucalyptus/Leaves");
//			TextureEucalyptusWood=GetDataTexture("Blocks/TreeBlocks/Eucalyptus/Wood");

//			// Rubber
//			TextureRubberTreeLeaves=GetDataTexture("Blocks/TreeBlocks/RubberTree/Leaves");
//			TextureRubberTreeWood=GetDataTexture("Blocks/TreeBlocks/RubberTree/Wood");

//			// Accacia
//			TextureAcaciaLeaves=GetDataTexture("Blocks/TreeBlocks/Acacia/Leaves");
//			TextureAcaciaWood=GetDataTexture("Blocks/TreeBlocks/Acacia/Wood");

//			// Kapok
//			TextureKapokBlossom=GetDataTexture("Blocks/TreeBlocks/Kapok/Blossom");
//			TextureKapokLeavesFibre=GetDataTexture("Blocks/TreeBlocks/Kapok/LeavesWithFibre");
//			TextureKapokLeaves=GetDataTexture("Blocks/TreeBlocks/Kapok/Leaves");
//			TextureKapokWood=GetDataTexture("Blocks/TreeBlocks/Kapok/Wood");
//			#endregion

//			#region Saplings
//			cherrySaplingTexture = GetDataTexture("Plants/Saplings/Cherry");
//			oakSaplingTexture = GetDataTexture("Plants/Saplings/Oak");
//			spruceSaplingTexture = GetDataTexture("Plants/Saplings/Spruce");
//			TextureLindenSapling = GetDataTexture("Plants/Saplings/Linden");
//			TextureAppleSapling = GetDataTexture("Plants/Saplings/Apple");
//			plumSaplingTexture = GetDataTexture("Plants/Saplings/Plum");
//			TextureMangroveSapling=GetDataTexture("Plants/Saplings/Mangrove");
//			lemonSaplingTexture=GetDataTexture("Plants/Saplings/Lemon");
//			orangeSaplingTexture=GetDataTexture("Plants/Saplings/Orange");
//			pineSaplingTexture = GetDataTexture("Plants/Saplings/Pine");
//			TextureWillowSapling=GetDataTexture("Plants/Saplings/Willow");
//			TextureEucalyptusSapling=GetDataTexture("Plants/Saplings/Eucalyptus");
//			TextureOliveSapling=GetDataTexture("Plants/Saplings/Olive");
//			TextureRubberTreeSapling=GetDataTexture("Plants/Saplings/RubberTree");
//			TextureAcaciaSapling=GetDataTexture("Plants/Saplings/Acacia");
//			TextureKapokSapling=GetDataTexture("Plants/Saplings/Kapok");
//			#endregion

//			#region Plants
//			branchWithoutTexture=GetDataTexture("Plants/Branch/Without");
//			branchALittle1Texture=GetDataTexture("Plants/Branch/Little1");
//			branchALittle2Texture=GetDataTexture("Plants/Branch/Little2");
//			branchFullTexture=GetDataTexture("Plants/Branch/Full");

//			plantAloreTexture = GetDataTexture("Plants/Flowers/Alore");
//			plantCarrotTexture = GetDataTexture("Plants/ForInventory/Carrot");
//			plantOnionTexture = GetDataTexture("Plants/ForInventory/Onion");
//			plantPeasTexture = GetDataTexture("Plants/ForInventory/Peas");
//			grassForestTexture = GetDataTexture("Plants/Grass/Forest");
//			grassPlainsTexture = GetDataTexture("Plants/Grass/Plains");
//			grassJungleTexture = GetDataTexture("Plants/Grass/Jungle");
//			grassDesertTexture = GetDataTexture("Plants/Grass/Desert");
//			grassHillsTexture = GetDataTexture("Plants/Grass/Hills");
//			strawberryPlantTexture = GetDataTexture("Plants/Grow/Strawberry");
//			rashberryPlantTexture = GetDataTexture("Plants/Grow/Rashberry");
//			wheatTexture = GetDataTexture("Plants/Grow/WheatGrow");
//			plantDandelionTexture = GetDataTexture("Plants/Flowers/Dandelion");
//			plantOrchidTexture = GetDataTexture("Plants/Flowers/Orchid");
//			plantRoseTexture = GetDataTexture("Plants/Flowers/Rose");
//			plantVioletTexture = GetDataTexture("Plants/Flowers/Violet");
//			cactusLittleTexture = GetDataTexture("Plants/Cactus/Small");
//			cactusBigTexture = GetDataTexture("Plants/Cactus/Big");
//			blueberryPlantTexture=GetDataTexture("Plants/Grow/Blueberry");

//			coralTexture=GetDataTexture("Plants/Flowers/Coral");
//			flaxTexture=GetDataTexture("Plants/Grow/Flax");
//			toadstoolTexture=GetDataTexture("Plants/Mushrooms/Toadstoll");
//			champignonTexture=GetDataTexture("Plants/Mushrooms/Champignon");
//			sugarCaneTexture=GetDataTexture("Plants/Flowers/Sugarcane");
//			seaweedTexture=GetDataTexture("Plants/Flowers/Seaweed");
//			heatherTexture=GetDataTexture("Plants/Flowers/Heather");
//			boletusTexture=GetDataTexture("Plants/Mushrooms/Boletus");
//			lianaTexture = GetDataTexture("Plants/Flowers/Liana");
//			#endregion

//			#region Stone
//			mudstoneTexture=GetDataTexture("Blocks/BasicBlocks/Mudstone");
//			dolomiteTexture=GetDataTexture("Blocks/BasicBlocks/Dolomite");
//			basaltTexture=GetDataTexture("Blocks/BasicBlocks/Basalt");
//			limestoneTexture=GetDataTexture("Blocks/BasicBlocks/Limestone");
//			rhyoliteTexture=GetDataTexture("Blocks/BasicBlocks/Rhyolite");
//			gneissTexture=GetDataTexture("Blocks/BasicBlocks/Gneiss");
//			sandstoneTexture=GetDataTexture("Blocks/BasicBlocks/SandStone");
//			schistTexture=GetDataTexture("Blocks/BasicBlocks/Schist");
//			gabbroTexture=GetDataTexture("Blocks/BasicBlocks/Gabbro");
//			dioritTexture=GetDataTexture("Blocks/BasicBlocks/Diorit");
//			anorthositeTexture=GetDataTexture("Blocks/BasicBlocks/Anorthosite");
//			regoliteTexture=GetDataTexture("Blocks/BasicBlocks/Regolite");
//			flintTexture=GetDataTexture("Blocks/BasicBlocks/Flint");
//			#endregion

//			#region Ore
//			TextureOreCoal = GetDataTexture("Blocks/OreBlocks/Coal");
//			TextureOreCopper = GetDataTexture("Blocks/OreBlocks/Copper");
//			TextureOreTin = GetDataTexture("Blocks/OreBlocks/Tin");
//			TextureOreGold = GetDataTexture("Blocks/OreBlocks/Gold");
//			TextureOreSilver = GetDataTexture("Blocks/OreBlocks/Silver");
//			TextureOreIron = GetDataTexture("Blocks/OreBlocks/Iron");
//			TextureOreAluminium = GetDataTexture("Blocks/OreBlocks/Aluminium");
//			TextureOreSulfur = GetDataTexture("Blocks/OreBlocks/Sulfur");
//			TextureOreSaltpeter = GetDataTexture("Blocks/OreBlocks/Saltpeter");


//			#endregion

//			#region Basic
//			// Grass block
//			TextureGrassBlockPlains= GetDataTexture("Blocks/GrassBlocks/Plains");
//			TextureGrassBlockHills = GetDataTexture("Blocks/GrassBlocks/Hills");
//			TextureGrassBlockJungle = GetDataTexture("Blocks/GrassBlocks/Jungle");
//			TextureGrassBlockForest = GetDataTexture("Blocks/GrassBlocks/Forest");
//			TextureGrassBlockDesert = GetDataTexture("Blocks/GrassBlocks/Desert");
//			TextureGrassBlockClay= GetDataTexture("Blocks/GrassBlocks/Clay");
//			TextureGrassBlockCompost= GetDataTexture("Blocks/GrassBlocks/Compost");
//			TextureGrassBlockSnow= GetDataTexture("Blocks/GrassBlocks/Snow");

//			// Sand
//			sandTexture = GetDataTexture("Blocks/BasicBlocks/Sand");
//			TextureRedSand=GetDataTexture("Blocks/BasicBlocks/Redsand");

//			// Liquid
//			waterTexture = GetDataTexture("Blocks/BasicBlocks/Water");
//			oilTexture = GetDataTexture("Blocks/OreBlocks/Oil");

//			TextureDirt = GetDataTexture("Blocks/BasicBlocks/Dirt");
//			gravelTexture = GetDataTexture("Blocks/BasicBlocks/Gravel");
//			clayTexture= GetDataTexture("Blocks/BasicBlocks/Clay");
//			iceTexture = GetDataTexture("Blocks/BasicBlocks/Ice");
//			snowTexture = GetDataTexture("Blocks/BasicBlocks/snow");
//			snowTopTexture = GetDataTexture("Blocks/BasicBlocks/SnowTop");
//			cobblestoneTexture = GetDataTexture("Blocks/BasicBlocks/Cobblestone");

//			#endregion

//			#region Backgrounds
//			// Basic
//			backgroundDirtTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Dirt");
//			backgroundGravelTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Gravel");
//			backgroundSandTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Sand");
//			backgroundCobblestoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Cobblestone");
//			backgroundRegoliteTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Regolite");
//			backgroundRedSandTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/RedSand");
//			backgroundClayTexture=GetDataTexture("Blocks/BlockBackgrounds/Other/Clay");

//			// Stone
//			backgroundAnorthositeTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Anorthosite");
//			backgroundBasaltTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Basalt");
//			backgroundDioritTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Diorit");
//			backgroundDolomiteTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Dolomite");
//			backgroundFlintTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Flint");
//			backgroundGabbroTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Gabbro");
//			backgroundGneissTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Gneiss");
//			backgroundLimestoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Limestone");
//			backgroundMudstoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Mudstone");
//			backgroundRhyoliteTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Rhyolite");
//			backgroundSandstoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Sandstone");
//			backgroundSchistTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Schist");

//			// Ore
//			TextureBackSulfurOre= GetDataTexture("Blocks/BlockBackgrounds/Ore/Sulfur");
//			TextureBackSaltpeterOre= GetDataTexture("Blocks/BlockBackgrounds/Ore/Saltpeter");
//			backgroundCoalTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Coal");
//			backgroundCopperTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Copper");
//			backgroundTinTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Tin");
//			backgroundIronTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Iron");
//			backgroundAluminiumTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Aluminium");
//			backgroundSilverTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Silver");
//			backgroundGoldTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Gold");
//			#endregion

//			if (easter) {
//				TextureEggDropE=new Texture2D[4]{
//					GetDataTexture("Blocks/BasicBlocks/eggdrop2"),
//					GetDataTexture("Blocks/BasicBlocks/eggdrop3"),
//					GetDataTexture("Blocks/BasicBlocks/eggdrop4"),
//					GetDataTexture("Blocks/BasicBlocks/eggdrop5"),
//				};
//			}

//			TextureChristmasStar=GetDataTexture("Blocks/CraftedBlocks/Star");

//			TextureWaterGraystyle=GetDataTexture("Blocks/BasicBlocks/WaterGraystyle");
//			TextureEggDrop=GetDataTexture("Blocks/BasicBlocks/eggdrop");
//			CompostTexture=GetDataTexture("Blocks/BasicBlocks/Compost");

//			roof1Texture=GetDataTexture("Blocks/CraftedBlocks/Roof1");
//			roof2Texture=GetDataTexture("Blocks/CraftedBlocks/Roof2");
//			flagTexture = GetDataTexture("Blocks/CraftedBlocks/Flag");
//			ladderTexture = GetDataTexture("Blocks/CraftedBlocks/Ladder");
//			TextureRocks = new Texture2D[] {
//				GetDataTexture("Blocks/BasicBlocks/Rocks0"),
//				GetDataTexture("Blocks/BasicBlocks/Rocks1"),
//				GetDataTexture("Blocks/BasicBlocks/Rocks2"),
//				GetDataTexture("Blocks/BasicBlocks/Rocks3")
//			};
//			bricksTexture = GetDataTexture("Blocks/CraftedBlocks/Bricks");
//			glassTexture = GetDataTexture("Blocks/CraftedBlocks/Glass");
//			hayBlockTexture = GetDataTexture("Blocks/CraftedBlocks/HayBlock");
//			planksTexture = GetDataTexture("Blocks/CraftedBlocks/Planks");
//			ItemRocketTexture = GetDataTexture("Blocks/ForInventory/Rocket");
//			ItemWaterMillTexture = GetDataTexture("Blocks/ForInventory/WaterMill");
//			ItemWindMillTexture = GetDataTexture("Blocks/ForInventory/WindMill");
//			ItemDoorTexture = GetDataTexture("Blocks/ForInventory/Door");
//			ItemFlagTexture = GetDataTexture("Blocks/ForInventory/Flag");
//			labelOneTexture = GetDataTexture("Blocks/ForInventory/Label");
//			maceratorOneTexture = GetDataTexture("Blocks/ForInventory/Macerator");
//			furnaceStoneOneTexture = GetDataTexture("Blocks/ForInventory/FurnaceStone");
//			furnaceElectricOneTexture = GetDataTexture("Blocks/ForInventory/FurnaceElectric");
//			torchInvTexture = GetDataTexture("Blocks/ForInventory/Torch");
//			advancedSpaceBackTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceBack");
//			advancedSpaceWindowTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceWindow");
//			advancedSpaceBlockTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceBlok");
//			advancedSpacePart1Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart");
//			advancedSpacePart2Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart2");
//			advancedSpacePart3Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart3");
//			advancedSpacePart4Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart4");
//			advancedSpaceFloorTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceFloor");
//			doorInvTexture=GetDataTexture("Blocks/ForInventory/Door");
//			lavaTexture=GetDataTexture("Blocks/BasicBlocks/Lava");
//			#endregion

//			#region Other
//			lightMaskLineTexture=GetDataTexture("Particles/lightMaskLine");
//			lightMaskTexture=GetDataTexture("Particles/lightMask");
//			lightMaskRoundTexture=GetDataTexture("Particles/lightMaskRound");

//			solidFuelSmokeTexture=GetDataTexture("Particles/AnimationsRocket/Solid");

//			messageLeft= GetDataTexture("Particles/MessageBox/Left");
//			messageCenter = GetDataTexture("Particles/MessageBox/Center");
//			messageRight = GetDataTexture("Particles/MessageBox/Right");

//			invStrawberryTexture=GetDataTexture("Plants/ForInventory/Strawberry");
//			invRashberryTexture=GetDataTexture("Plants/ForInventory/Rashberry");
//			invBlueberryTexture=GetDataTexture("Plants/ForInventory/Blueberry");
//			flaxInvTexture=GetDataTexture("Plants/ForInventory/Flax");
// barEnergyTexture=GetDataTexture("Bars/Lightning");
// scrollbarUpTexture=GetDataTexture("Buttons/Scrollbar/Top");
//			scrollbarBetweenTexture=GetDataTexture("Buttons/Scrollbar/Center");
//			scrollbarDownTexture=GetDataTexture("Buttons/Scrollbar/Bottom");
//		radioInvTexture=GetDataTexture("Blocks/ForInventory/Radio");
//  sunTexture = GetDataTexture("Particles/Sun");

//			fishTexture0 = GetDataTexture("Animals/Fish/Fish0");
//			fishTexture1 = GetDataTexture("Animals/Fish/Fish1");

//			RadioButtonPause=GetDataTexture("Buttons/Radio/Pause");
//			RadioButtonPlay=GetDataTexture("Buttons/Radio/Play");
//			chickenEatTexture = GetDataTexture("Animals/Chicken/Eating");
//			chickenWalkTexture = GetDataTexture("Animals/Chicken/Walking");
//			rabbitStillTexture = GetDataTexture("Animals/Rabbit/Still");
//			chickenStillTexture = GetDataTexture("Animals/Chicken/Still");

//			rabbitEatTexture = GetDataTexture("Animals/Rabbit/Eating");
//			rabbitWalkTexture = GetDataTexture("Animals/Rabbit/Walking");
//			rabbitJumpTexture = GetDataTexture("Animals/Rabbit/Jumping");

//destructionTexture = GetDataTexture("Animations/destruction");
//			TextureMoon = GetDataTexture("Animations/Moon");
//			barEatTexture= GetDataTexture("Bars/Eat");
//			barWaterTexture = GetDataTexture("Bars/Water");
//			barOxygenTexture = GetDataTexture("Bars/Oxygen");
//			barHeartTexture = GetDataTexture("Bars/Heart");

//			#endregion

//			#region Player
//			string dirLegs=(Setting.MaturePlayer==0 ? "Young" : "")+(Setting.sex==Sex.Girl ? "Girl" : "Men");
//			string dirChest=Setting.sex==Sex.Men ? "0": Setting.MaturePlayer.ToString();

//			if (Setting.sex==Sex.Girl) {
//				TextureWalkingUpCensored=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Censored");
//				TextureStaticUpCensored=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Censored");
//				TextureSwimmingUpCensored=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Censored");
//			}

//			// Hair
//			if (Setting.hairType!=0) {
//				TexturePlayerStaticHair=GetDataTexture("ClothesAnimations/Static/Body/Hair/"+Setting.hairType);
//				TexturePlayerWalkingHair=GetDataTexture("ClothesAnimations/Walking/Body/Hair/"+Setting.hairType);
//			}

//			// Moustage
//			if (Setting.moustageType!=0) {
//				TexturePlayerWalkingMoustage=GetDataTexture("ClothesAnimations/Walking/Body/Moustage/"+Setting.moustageType);
//				TexturePlayerStaticMoustage=GetDataTexture("ClothesAnimations/Static/Body/Moustage/"+Setting.moustageType);
//			}

//			// Face
//			TexturePlayerWalkingFace=GetDataTexture("ClothesAnimations/Walking/Body/Face");
//			TexturePlayerStaticFace=GetDataTexture("ClothesAnimations/Static/Body/Face");

//			// Mouth
//			TexturePlayerStaticMouth=GetDataTexture("ClothesAnimations/Static/Body/Mouth/Normal");
//			TexturePlayerWalkingMouth=GetDataTexture("ClothesAnimations/Walking/Body/Mouth/Normal");

//			// Eyes
//			TexturePlayerStaticEyes=GetDataTexture("ClothesAnimations/Static/Body/Eyes/"+Setting.eyesType);
//			TexturePlayerWalkingEyes=GetDataTexture("ClothesAnimations/Walking/Body/Eyes/"+Setting.eyesType);

//			// Feet
//			TexturePlayerStaticFeet=GetDataTexture("ClothesAnimations/Static/Body/Feet");
//			TexturePlayerWalkingFeet=GetDataTexture("ClothesAnimations/Walking/Body/Feet");
//			TexturePlayerSwimmingFeet=GetDataTexture("ClothesAnimations/Swimming/Body/Feet");

//			TexturePlayerWalkingFeetForShoes=GetDataTexture("ClothesAnimations/Walking/Body/FeetForShoes");

//			// Legs
//			TexturePlayerStaticLegs=GetDataTexture("ClothesAnimations/Static/Body/Legs/"+dirLegs);
//			TexturePlayerWalkingLegs=GetDataTexture("ClothesAnimations/Walking/Body/Legs/"+dirLegs);
//			TexturePlayerSwimmingLegs=GetDataTexture("ClothesAnimations/Swimming/Body/Legs/"+dirLegs);

//			// Chest
//			TexturePlayerStaticChest=GetDataTexture("ClothesAnimations/Static/Body/Chest/"+dirChest);
//			TexturePlayerWalkingChest=GetDataTexture("ClothesAnimations/Walking/Body/Chest/"+dirChest);
//			//TexturePlayerSwimmingChest=GetDataTexture("ClothesAnimations/Swimming/Body/Chest/"+dirChest);


//			// Censored
//			TextureWalkingDownCensored=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Censored");
//			TextureStaticDownCensored=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Censored");
//			TextureSwimmingDownCensored=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Censored");

//			//TexturePlayerSwimmingLegsWoman=Rabcr.ColorizeTexture(GetDataTexture("ClothesAnimations/Swimming/Legs/YoungGirl"),Setting.ColorSkin);

//			TextureHand=GetDataTexture(@"ClothesAnimations\Hand");
//			//TextureHandDown=GetDataTexture(@"ClothesAnimations\Static\Hand\Down");

//			#region Boots
//			ClothesFormalShoes=new ClothesTypeBoots{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/FormalShoes"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/FormalShoes"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/FormalShoes"),
//				Color=ColorWhite,
//			};

//			ClothesPumps=new ClothesTypeBoots{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/Pumps"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/Pumps"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/Pumps"),
//				Colorize=true,
//			};

//			ClothesSneakers=new ClothesTypeBoots{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/Sneakers"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/Sneakers"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/Sneakers"),
//				Colorize=true,
//			};

//			ClothesSpaceBoots=new ClothesTypeBoots{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/SpaceBoots"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/SpaceBoots"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/SpaceBoots"),
//				Color=ColorWhite,
//			};
//			#endregion

//			#region Trousers
//			ClothesJeans = new ClothesTypeTrousers {
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Jeans"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Jeans"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Jeans"),
//				Colorize=true,
//			};

//			ClothesShorts=new ClothesTypeTrousers{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Shorts"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Shorts"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Shorts"),
//				ShowBodyLegs=true,
//				Colorize=true,
//			};
//			ClothesSkirt=new ClothesTypeTrousers{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Skirt"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Skirt"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Skirt"),
//				ShowBodyLegs=true,
//				Colorize=true,
//			};
//			ClothesArmyTrousers=new ClothesTypeTrousers{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/ArmyTrousers"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/ArmyTrousers"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/ArmyTrousers"),
//				Colorize=true,
//			};
//			ClothesSpaceTrousers=new ClothesTypeTrousers{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/SpaceTrousers"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/SpaceTrousers"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/SpaceTrousers"),
//				Color=ColorWhite,
//			};
//			#endregion

//			#region TShirt
//			ClothesTShirt=new ClothesTypeTShirt{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/TShirt"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/TShirt"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/TShirt"),
//				//Texture2DClothHandDown=GetDataTexture("ClothesAnimations/Hand/Chest/Down/TShirt"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesShirt=new ClothesTypeTShirt{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Shirt"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Shirt"),
//			  //  Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/Chest/Up/Shirt"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/Shirt"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesDress=new ClothesTypeTShirt{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Dress"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Dress"),
//			   // Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/Chest/Up/Dress"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/Dress"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesTop=new ClothesTypeTShirt{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Top"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Top"),
//			   // Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/ChestTop/Up/Top"),
//			  //  Texture2DClothHandDown=GetDataTexture("ClothesAnimations/Hand/ChestTop/Down/Top"),
//				Colorize=true,
//				handSize=HandClothSize.None,
//				ShowBodyChest=true,
//			};
//			#endregion

//			#region Helmet
//			ClothesCap=new ClothesTypeHelmet{
//				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Cap"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Cap"),
//				Colorize=true,
//			};
//			ClothesHad=new ClothesTypeHelmet{
//				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Had"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Had"),
//				Color=ColorWhite,
//			};
//			ClothesCrown=new ClothesTypeHelmet{
//				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Crown"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Crown"),
//				Color=ColorWhite,
//			};
//			ClothesSpaceHelmet=new ClothesTypeHelmet{
//				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/SpaceHelmet"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/SpaceHelmet"),
//				Color=ColorWhite,
//			};
//			#endregion

//			#region UnderwearDown
//			ClothesUnderpants=new ClothesTypeUnderwearDown{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Underpants"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Underpants"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Underpants"),
//				Colorize=true,
//			};
//			ClothesBoxerShorts=new ClothesTypeUnderwearDown{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/BoxerShorts"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/BoxerShorts"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/BoxerShorts"),
//				Colorize=true,
//			};
//			ClothesPanties=new ClothesTypeUnderwearDown{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Panties"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Panties"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Panties"),
//				Colorize=true,
//			};
//			ClothesSwimsuit=new ClothesTypeUnderwearDown{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Swimsuit"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Swimsuit"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Swimsuit"),
//				Colorize=true,
//			};
//			ClothesBikiniDown=new ClothesTypeUnderwearDown{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Bikini"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Bikini"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Bikini"),
//				Colorize=true,
//			};
//			#endregion

//			#region UnderwearUp
//			ClothesBra=new ClothesTypeUnderwearUp{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Bra"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Bra"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Bra"),
//				Colorize=true,
//			};
//			ClothesBikiniTop=new ClothesTypeUnderwearUp{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Bikini"),
//				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Bikini"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Bikini"),
//				Colorize=true,
//			};
//			#endregion

//			#region Coat
//			ClothesCoatArmy=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/CoatArmy"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/CoatArmy"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/CoatArmy"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesCoat=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/Coat"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/Coat"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/Coat"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesJacketDenim=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketDenim"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketDenim"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketDenim"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesJacketFormal=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketFormal"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketFormal"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketFormal"),
//				Colorize=true,
//				handSize=HandClothSize.NearlyFull,
//			};
//			ClothesJacketShort=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketShort"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketShort"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketShort"),
//				Colorize=true,
//				handSize=HandClothSize.Half,
//			};
//			ClothesSpaceSuit=new ClothesTypeCoat{
//				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/SpaceSuit"),
//				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/SpaceSuit"),
//				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/SpaceSuit"),
//				Color=ColorWhite,
//				handSize=HandClothSize.Full,
//			};
//			#endregion


//			#endregion
//			#endregion

//          inventoryScrollbar=new GameScrollbar(scrollbarUpTexture,scrollbarBetweenTexture,scrollbarDownTexture);
//			creativeScrollbar=new GameScrollbar(scrollbarUpTexture,scrollbarBetweenTexture,scrollbarDownTexture);
//			craftingScrollbar=new GameScrollbar(scrollbarUpTexture, scrollbarBetweenTexture, scrollbarDownTexture) {
//				maxheight=4*40
//			};

//            #region Set lists other
//            energy=new List<Energy>();
//            rainDots=new List<DInt>();
//            lightsLamp=new List<MashineBlockBasic>();

//            Inventory=new List<DInt>();
//            Crafting=new List<DInt>();
//            Need=new List<DInt>();
//            #endregion

//            #region Load buttons
//            buttonClose=new ImgButton(GetDataTexture("Buttons/Square/Close"));
//            buttonClosePopUp=new ImgButton(GetDataTexture("Buttons/Square/Close"));
//            buttonInvTabBlocks=new ImgButton(GetDataTexture("Buttons/Square/Blocks"));
//            buttonInvTabPlants=new ImgButton(GetDataTexture("Buttons/Square/Plants"));
//            buttonInvTabTools=new ImgButton(GetDataTexture("Buttons/Square/Tools"));
//            buttonInvTabMashines=new ImgButton(GetDataTexture("Buttons/Square/Mashines"));
//            buttonInvTabItems=new ImgButton(GetDataTexture("Buttons/Square/Items"));
//            buttonInvTabCeramics=new ImgButton(GetDataTexture("Buttons/Square/Ceramics"));
//            buttonInvTabFood=new ImgButton(GetDataTexture("Buttons/Square/Food"));
//            buttonInvTabGlass=new ImgButton(GetDataTexture("Buttons/Square/Glass"));
//            buttonInvTabMaterials=new ImgButton(GetDataTexture("Buttons/Square/Materials"));
//            buttonInvAnimals=new ImgButton(GetDataTexture("Buttons/Square/Animals"));

//            buttonRocket=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
//                Text="Odletět",
//                //center=true
//            };

//            buttonRadio=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
//                Text="Otevřít",
//                //  center=true
//            };

//           {
//				Texture2D button=GetDataTexture("Buttons/Other/Craft");
//				buttonNext=new GameButtonSmall(button) { Text="->" };
//				buttonPrev=new GameButtonSmall(button) { Text="<-" };

//				buttonCraft1x=new GameButtonSmall(button) { Text="1×" };
//				buttonCraft10x=new GameButtonSmall(button) { Text="10×" };
//				buttonCraft100x=new GameButtonSmall(button) { Text="100×" };
//			}
//            #endregion

//            #region Set lists other
//            DroppedItems=new List<Item>();
//            windable=new List<ShortAndByte>();
//            FurnaceStone=new List<ShortAndByte>();
//            chunksWithPlants=new List<int>();
//            Chargers=new List<ShortAndByte>();
//            Miners=new List<ShortAndByte>();
//            movingAnimals=new List<Mob>();
//            Composters=new List<ShortAndByte>();


//            energy=new List<Energy>();
//            rainDots=new List<DInt>();
//            lightsLamp=new List<MashineBlockBasic>();

//            //    Inventory = new List<DInt>();
//            Crafting=new List<DInt>();
//            Need=new List<DInt>();
//            #endregion

//            #region Set basic
//            //fogTarget= new RenderTarget2D(Graphics, Graphics.Viewport.Width, Graphics.Viewport.Height);
//            ZoomMatrix=Matrix.CreateScale(Setting.Zoom, Setting.Zoom, 0);
//            newKeyboardState=Keyboard.GetState();
//            newMouseState=Mouse.GetState();
//            oldKeyboardState=newKeyboardState;
//            oldMouseState=newMouseState;
//            previousScrollValue=oldMouseState.ScrollWheelValue;

//            for (int i = 0; i<50; i++) Crafting.Add(new DInt());
//            for (int i = 0; i<12; i++) Need.Add(new DInt());

//            // if (Global.WorldDifficulty==2) {
//            for (int i = 0; i<600; i++) Inventory.Add(new DInt(0, 0));
//            // } else for (int i = 0; i<200; i++) Inventory.Add(new DInt());

//            maxInvCount=32+8;
//            #endregion

//            //dayAlpha
//            if (time>hour*6&&time<hour*7) {
//                dayAlpha=((time-hour*7f)/hour/2f)+1f;
//            } else if (time>hour*18&&time<hour*19) {
//                dayAlpha=(hour*19f-time)/hour/2f+0.5f;
//            } else if (time>=hour*7&&time<=hour*18) {
//                dayAlpha=1f;
//            } else {
//                dayAlpha=0.5f;
//            }


//            menu=new GameButtonMedium(Textures.ButtonCenter/*, spriteFont_medium, spriteFont_big*/) {
//                Text="Zpět do menu",
//                // center=true
//            };

//            state++;
//            Resize();
//        }

//        public override void Shutdown() {
//            exit=true;
//            #region Send logout
//            if (current==Current.Playing) {
//                Queue.Add(
//                    new DataToSend {
//                        Bytes=new Data {
//                            To="{Server}",
//                            Cmd=Command.Logout
//                        }.ToByte(),
//                        Importance=Importance.VeryImportant
//                    }
//                );
//            }

//            // if (cancelExit) {
//            try {
//                clientSocket.Disconnect(false);
//            } catch { }
//            try {
//                clientSocket.Close();
//                clientSocket.Dispose();
//            } catch { }
//            //}

//            #endregion

//            // return cancelExit;
//        }

//        public override void Update(GameTime gameTime) {
//            if (Queue.Count!=0) {
//                try {
//                    if (Queue[0]!=null) {
//                        byte[] bytes = Queue[0].Bytes;
//                        clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                    } // } catch (Exception ex){
//                      //     Console.WriteLine(ex.Message+"2");
//                } finally { //Console.WriteLine("sending...");
//                    Queue.RemoveAt(0);
//                }
//            }

//            if (Current.Playing!=current) {
//                #region Mouse
//                oldMouseState=newMouseState;
//                previousScrollValue=oldMouseState.ScrollWheelValue;
//                newMouseState=Mouse.GetState();
//                mouseLeftPress=false;
//                mouseLeftRelease=false;
//                mouseRightPress=false;
//                mouseRightRelease=false;

//                if (newMouseState.LeftButton==ButtonState.Pressed) {
//                    mouseLeftDown=true;
//                    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
//                } else {
//                    mouseLeftDown=false;
//                    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
//                }

//                if (newMouseState.RightButton==ButtonState.Pressed) {
//                    mouseRightDown=true;
//                    if (oldMouseState.RightButton==ButtonState.Released) mouseRightPress=true;
//                } else {
//                    mouseRightDown=false;
//                    if (oldMouseState.RightButton==ButtonState.Pressed) mouseRightRelease=true;
//                }
//                SetMousePos();
//                //mousePosDiv16.X=(int)mousePos.X/16;
//                //mousePosDiv16.Y=(int)mousePos.Y/16;

//                //mousePosRound.X=mousePosDiv16.X*16;
//                //mousePosRound.Y=mousePosDiv16.Y*16;
//                #endregion

//                //#region Set Mouse State and Keyboard
//                //oldMouseState=newMouseState;
//                //oldKeyboardState=newKeyboardState;

//                //newKeyboardState=Keyboard.GetState();
//                //newMouseState=Mouse.GetState();

//                //mouseLeftPress=false;
//                //mouseLeftRelease=false;

//                //if (newMouseState.LeftButton==ButtonState.Pressed) {
//                //    mouseLeftDown=true;
//                //    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
//                //} else {
//                //    mouseLeftDown=false;
//                //    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
//                //}
//                //#endregion

//                if (sn!="") {
//                    System.Windows.Forms.Form MyGameForm = (System.Windows.Forms.Form)System.Windows.Forms.Control.FromHandle(Rabcr.Game.Window.Handle);
//                    MyGameForm.Text=sn;

//                    sn="";
//                }

//                if (menu.Update()) {
//                    Rabcr.GoTo(new Menu(new MenuMultiplayer()));
//                }
//            } else {

//                Rabcr.Game.Window.Title=serverName+" - "+Global.GameName;

//                #region Mouse
//                oldMouseState=newMouseState;
//                previousScrollValue=oldMouseState.ScrollWheelValue;
//                newMouseState=Mouse.GetState();
//                mouseLeftPress=false;
//                mouseLeftRelease=false;
//                mouseRightPress=false;
//                mouseRightRelease=false;

//                if (newMouseState.LeftButton==ButtonState.Pressed) {
//                    mouseLeftDown=true;
//                    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
//                } else {
//                    mouseLeftDown=false;
//                    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
//                }

//                if (newMouseState.RightButton==ButtonState.Pressed) {
//                    mouseRightDown=true;
//                    if (oldMouseState.RightButton==ButtonState.Released) mouseRightPress=true;
//                } else {
//                    mouseRightDown=false;
//                    if (oldMouseState.RightButton==ButtonState.Pressed) mouseRightRelease=true;
//                }
//                SetMousePos();

//                mousePosDiv16.X=(int)mousePos.X/16;
//                mousePosDiv16.Y=(int)mousePos.Y/16;

//                mousePosRound.X=mousePosDiv16.X*16;
//                mousePosRound.Y=mousePosDiv16.Y*16;

//                mouseRealPos.X=newMouseState.X;
//                mouseRealPos.Y=newMouseState.Y;
//                #endregion

//                #region Keyboard
//                oldKeyboardState=newKeyboardState;
//                newKeyboardState=Keyboard.GetState();

//                if (oldKeyboardState.IsKeyDown(Keys.F12)) {
//                    if (newKeyboardState.IsKeyUp(Keys.F12)) {
//                        GC.Collect();
//                        GC.WaitForPendingFinalizers();
//                    }
//                }

//                if (oldKeyboardState.IsKeyDown(Keys.F1)) {
//                    if (newKeyboardState.IsKeyUp(Keys.F1)) {
//                        if (debug) {
//                            debug=false;

//                            cpu.Close();
//                            cpu.Dispose();
//                            cpu=null;

//                            ram.Close();
//                            ram.Dispose();
//                            ram=null;

//                            cpuUsage.Close();
//                            cpuUsage.Dispose();
//                            cpuUsage=null;

//                            freeRam.Close();
//                            freeRam.Dispose();
//                            freeRam=null;
//                        } else {
//                            //  timer60=-1;
//                            string processName = System.Diagnostics.Process.GetCurrentProcess().ProcessName;
//                            //cpu=new PerformanceCounter("Process", "Working Set - Private", processName);
//                            //ram =new PerformanceCounter("Process", "% Processor Time", processName);

//                            //cpuUsage = new PerformanceCounter("Processor", "% Processor Time", "_Total");
//                            //freeRam = new PerformanceCounter("Memory", "Available MBytes");
//                            try {
//                                cpu=new PerformanceCounter() {
//                                    CategoryName="Process",
//                                    CounterName="% Processor Time",
//                                    InstanceName=processName,
//                                };
//                                ram=new PerformanceCounter() {
//                                    CategoryName="Process",
//                                    CounterName="Working Set - Private",
//                                    InstanceName=processName,
//                                };
//                                cpuUsage=new PerformanceCounter() {
//                                    CategoryName="Processor",
//                                    CounterName="% Processor Time",
//                                    InstanceName="_Total",
//                                };
//                                freeRam=new PerformanceCounter() {
//                                    CategoryName="Memory",
//                                    CounterName="Available MBytes"
//                                };

//                                // cpu=new PerformanceCounter("Process", "% Processor Time", processName);
//                                // ram =new PerformanceCounter("Process", "Working Set - Private", processName);

//                                // cpuUsage = new PerformanceCounter("Processor", "% Processor Time", "_Total");
//                                // freeRam = new PerformanceCounter("Memory", "Available MBytes");

//                                debug=true;
//                            } catch {
//                                System.Windows.Forms.MessageBox.Show("Chyba při inicializaci PerformanceCounter, Informace pro vývojáře budou skryty", "ERROR");
//                                debug=false;
//                            }

//                        }
//                    }
//                }

//                if (oldKeyboardState.IsKeyDown(Keys.F2)) {
//                    if (newKeyboardState.IsKeyUp(Keys.F2)) {
//                        if (showInventory) showInventory=false; else showInventory=true;
//                    }
//                }

//                if (oldKeyboardState.IsKeyDown(Keys.F3)) {
//                    if (newKeyboardState.IsKeyUp(Keys.F3)) {
//                        if (showPlayer) showPlayer=false; else showPlayer=true;
//                    }
//                }

//                if (newKeyboardState.IsKeyDown(Setting.KeyExit)) {
//                    if (oldKeyboardState.IsKeyUp(Setting.KeyExit)) {
//                        ////////////////exit3,
//                        //Shutdown();
//                        // Shutdown();
//                     //   Log.WriteLine("Odhlašování ze serveru");
//                        Rabcr.GoTo(new Menu(new MenuMultiplayer()));

//                    }
//                }

//                if (newKeyboardState.IsKeyDown(Setting.KeyInventory)) {
//                    if (oldKeyboardState.IsKeyUp(Setting.KeyInventory)) {
//                        ChangeInventoryState();

//                    }// Console.WriteLine("!!!!!!!!!!!!!!!!!");
//                }

//                if (newKeyboardState.IsKeyDown(Setting.KeyMessage)) {
//                    if (oldKeyboardState.IsKeyUp(Setting.KeyMessage)) {
//                        if (inventory==0) inventory=InventoryType.Typing;
//                    }
//                }
//                #endregion

//                #region Player pos in Window
//                if (PlayerX>TerrainLenght*16-Global.WindowWidth) SetPlayerPos(Global.WindowWidth, PlayerY);

//                if (PlayerX<Global.WindowWidth) SetPlayerPos(TerrainLenght*16-Global.WindowWidth, PlayerY);


//                if (PlayerX-WindowCenterX>4||PlayerY-WindowCenterY>4||PlayerX-WindowCenterX<-4||PlayerY-WindowCenterY<-4) {
//                    WindowXPlayer=WindowXPlayer+(PlayerX-WindowCenterX)/16f;
//                    WindowYPlayer=WindowYPlayer+(PlayerY-WindowCenterY)/16f;

//                    WindowXWithout=(int)WindowXPlayer;
//                    WindowYWithout=(int)WindowYPlayer;
//                }

//                WindowCenterX=WindowXWithout+Global.WindowWidthHalf;
//                WindowCenterY=WindowYWithout+Global.WindowHeightHalf;

//                WindowX=WindowCenterX-(int)(Global.WindowWidthHalf/Setting.Zoom);
//                WindowY=WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom);

//                terrainStartIndexX=(WindowX-1)/16;
//                terrainStartIndexY=WindowY/16;

//                if (terrainStartIndexX<0) terrainStartIndexX=0;
//                if (terrainStartIndexY<0) terrainStartIndexY=0;

//                terrainStartIndexW=(int)((WindowX+Global.WindowWidth/Setting.Zoom)/16)+1;
//                terrainStartIndexH=(int)((WindowY+Global.WindowHeight/Setting.Zoom)/16)+1;

//                if (terrainStartIndexW>TerrainLenght) terrainStartIndexW=TerrainLenght;
//                if (terrainStartIndexH>124) terrainStartIndexH=124;
//                if (terrainStartIndexH<0) terrainStartIndexH=0;

//                if (terrainStartIndexY>terrainStartIndexH) terrainStartIndexY=terrainStartIndexH;
//                #endregion

//                #region Movement
//                if (inventory==InventoryType.Normal) {
//                    if (newMouseState.ScrollWheelValue!=previousScrollValue) {
//                        if (newMouseState.ScrollWheelValue<previousScrollValue) {
//                            if (boxSelected<4) boxSelected++;
//                        } else if (newMouseState.ScrollWheelValue>previousScrollValue) {
//                            if (boxSelected!=0) boxSelected--;
//                        }
//                    }

//                    if (rocket) {
//                        if (rocketDown) PlayerY+=8;
//                        else PlayerY-=10;
//                    } else if (Global.WorldDifficulty==2) {

//                        if (newKeyboardState.IsKeyDown(Keys.Up)) {
//                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerY-=10;
//                            else PlayerY-=3;
//                        }

//                        if (newKeyboardState.IsKeyDown(Keys.Down)) {
//                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerY+=10;
//                            else PlayerY+=3;
//                        }

//                        if (newKeyboardState.IsKeyDown(Keys.Left)) {
//                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX-=10;
//                            else PlayerX-=3;
//                        }

//                        if (newKeyboardState.IsKeyDown(Keys.Right)) {
//                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX+=10;
//                            else PlayerX+=3;
//                        }

//                        if (newKeyboardState.IsKeyDown(Keys.Left)) {
//                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX-=10;
//                            else PlayerX-=3;
//                        }
//                    } else {
//                        swimming=CheckWater();
//                        bool canbreatheDuringSwimming = !CheckWaterUp();
//                        waterDown=CheckWaterDown();

//                        //if (waterDown || swimming){
//                        //    barWater--;
//                        //    if (barWater<0)barWater=0;
//                        //}

//                        if (canbreatheDuringSwimming) {
//                            barOxygen--;
//                            if (barOxygen<0) barOxygen=0;
//                        } else {
//                            barOxygen+=0.05f;
//                            if (barOxygen>32) {
//                                barHeart+=.08f;
//                                if (barHeart>32) Die(Lang.Texts[161] /*"Nemůžeš dýchat vodu","You can't breathe water"*/);
//                            }
//                        }

//                        if (newKeyboardState.IsKeyDown(Setting.KeyJump)) {
//                            if (CheckLadder()) {
//                                PlayerY--;

//                                barEnergy+=0.01f;
//                                barWater+=0.01f;
//                                gravitySpeed=-2f;
//                            } else if (swimming) {
//                                PlayerY--;
//                                barEnergy+=0.01f;
//                                barWater+=0.01f;
//                                gravitySpeed=-1f;
//                            } else {
//                                if (distanceToGround==0) {
//                                    if (gravitySpeed==0) {
//                                        gravitySpeed=-7;
//                                        PlayerY--;

//                                        barEnergy+=0.05f;
//                                    }
//                                }
//                            }
//                        }


//                        //         //playerImg+=20;
//                        //         //if (playerImg==420)playerImg=0;
//                        //   if (newKeyboardState.IsKeyDown(Setting.KeyJump)) {
//                        //             if (distanceToGround==0 && gravitySpeed==0){
//                        //                 gravitySpeed=-7;
//                        //                 PlayerY--;

//                        //                 barEnergy+=0.05f;
//                        //             }
//                        //}
//                        if (!swimming&&!waterDown) playerState=0;

//                        //    playerState=0;

//                        if (newKeyboardState.IsKeyDown(Setting.KeyLeft)) {
//                            int dis = 1000;
//                            for (int y = (PlayerY-20-1)/16; y<(PlayerY+20)/16; y++) {
//                                int x = (PlayerX-11-16)/16;
//                                if (terrain[x]!=null) {
//                                    if (y>=0&&y<125) {
//                                        if (terrain[x].IsSolidBlocks[y]==MBlockState.Exists) {
//                                            if (PlayerX-11-x*16<dis) {
//                                                dis=PlayerX-11-x*16;
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                            if (dis>18) {
//                                if (newKeyboardState.IsKeyDown(Setting.KeyRun)) {
//                                    if (barEnergy<31) {
//                                        if (dis<4) PlayerX-=dis;
//                                        else PlayerX-=4;

//                                        barEnergy+=0.08f;

//                                        playerImg+=40;

//                                        if (walkingSoundDuration<0) {
//                                            if (Global.HasSoundGraphics) {
//                                                SoundEffects.Steps.Play();
//                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                            }
//                                        } else walkingSoundDuration--;

//                                    } else {
//                                        if (dis==1) PlayerX-=dis;
//                                        else PlayerX-=2;

//                                        barEnergy+=0.045f;

//                                        playerImg+=20;

//                                        if (walkingSoundDuration<0) {
//                                            if (Global.HasSoundGraphics) {
//                                                SoundEffects.Steps.Play();
//                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                            }
//                                        } else walkingSoundDuration--;
//                                    }
//                                    if (playerImg>=420) playerImg=0;

//                                } else {
//                                    if (dis==1) PlayerX-=dis;
//                                    else PlayerX-=2;

//                                    barEnergy+=0.045f;

//                                    playerImg+=20;
//                                    if (playerImg>=420) playerImg=0;

//                                    if (walkingSoundDuration<0) {
//                                        if (Global.HasSoundGraphics) {
//                                            SoundEffects.Steps.Play();
//                                            walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                        }
//                                    } else walkingSoundDuration--;
//                                }
//                                playerState=1;
//                            }
//                        }

//                        if (newKeyboardState.IsKeyDown(Setting.KeyRight)) {
//                            int dis = 1000;
//                            for (int y = (PlayerY-20/*-16*/-1)/16; y<(PlayerY+20)/16; y++) {
//                                int x = (PlayerX+11+16)/16;
//                                if (terrain[x]!=null) {
//                                    if (y>=0&&y<125) {
//                                        if (terrain[x].IsSolidBlocks[y]==MBlockState.Exists) {
//                                            if (x*16-PlayerX-11<dis) {
//                                                dis=x*16-PlayerX-11;
//                                            }
//                                        }
//                                    }
//                                }

//                            }

//                            if (dis>2) {
//                                if (newKeyboardState.IsKeyDown(Setting.KeyRun)) {
//                                    if (barEnergy<31) {
//                                        if (dis<4) PlayerX+=dis;
//                                        else PlayerX+=4;

//                                        barEnergy+=0.08f;

//                                        playerImg+=40;

//                                        if (walkingSoundDuration<0) {
//                                            if (Global.HasSoundGraphics) {
//                                                SoundEffects.Steps.Play();
//                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                            }
//                                        } else walkingSoundDuration--;
//                                    } else {
//                                        if (dis==1) PlayerX+=dis;
//                                        else PlayerX+=2;

//                                        barEnergy+=0.045f;

//                                        playerImg+=20;

//                                        if (walkingSoundDuration<0) {
//                                            if (Global.HasSoundGraphics) {
//                                                SoundEffects.Steps.Play();
//                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                            }
//                                        } else walkingSoundDuration--;
//                                    }

//                                    if (playerImg>=420) playerImg=0;
//                                } else {
//                                    if (dis==1) PlayerX+=dis;
//                                    else PlayerX+=2;

//                                    barEnergy+=0.045f;

//                                    playerImg+=20;
//                                    if (playerImg>=420) playerImg=0;

//                                    if (walkingSoundDuration<0) {
//                                        if (Global.HasSoundGraphics) {
//                                            SoundEffects.Steps.Play();
//                                            walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
//                                        }
//                                    } else walkingSoundDuration--;
//                                }
//                                playerState=2;
//                            }

//                        }

//                        if (barEnergy>32) barEnergy=32;

//                        PlayerGravity();
//                        // }
//                    }
//                    #endregion

//                    // #region Mouse scroll
//                    // if (newMouseState.ScrollWheelValue != previousScrollValue) {
//                    //     if (inventory==0) {
//                    //if (newMouseState.ScrollWheelValue < previousScrollValue) {
//                    // if (boxSelected<4) boxSelected++;
//                    //} else if (newMouseState.ScrollWheelValue > previousScrollValue) {
//                    // if (boxSelected!=0) boxSelected--;
//                    //}
//                    //     } else if (inventory==InventoryType.BasicInv) {
//                    //         if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4 && newMouseState.X<Global.WindowWidthHalf+300
//                    //             && newMouseState.Y>Global.WindowHeightHalf-200+2 && newMouseState.Y<Global.WindowHeightHalf) {

//                    //             if (newMouseState.ScrollWheelValue < previousScrollValue) {
//                    //                 inventoryScrollbarValue+=9;
//                    //     if (inventoryScrollbarValue>maxInvCount) inventoryScrollbarValue=maxInvCount;

//                    //    } else if (newMouseState.ScrollWheelValue > previousScrollValue) {
//                    //                 inventoryScrollbarValue-=9;
//                    //     if (inventoryScrollbarValue<0) inventoryScrollbarValue=0;
//                    //    }
//                    //             if (maxInvCount<45) inventoryScrollbarValue=0;
//                    //         } else if (newMouseState.X>Global.WindowWidthHalf-300+4+40 && newMouseState.X<Global.WindowWidthHalf
//                    //             && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8 && newMouseState.Y<Global.WindowHeightHalf+200) {
//                    //             if (newMouseState.ScrollWheelValue < previousScrollValue) {
//                    //                 inventoryScrollbarValueCrafting+=6;
//                    //     if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax;

//                    //    } else if (newMouseState.ScrollWheelValue > previousScrollValue) {
//                    //                 inventoryScrollbarValueCrafting-=6;
//                    //     if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
//                    //    }
//                    //             if (inventoryScrollbarValueCraftingMax<6*4) inventoryScrollbarValueCrafting=0;
//                    //          }
//                    //     }
//                    // }
//                    // #endregion

//                    // #region Player pos in Window
//                    // if (PlayerX> TerrainLenght * 16-Global.WindowWidth) {
//                    //     SetPlayerPos(Global.WindowWidth, PlayerY);
//                    //    // PlayerX=(int)(Global.WindowWidthHalf*Setting.Zoom);
//                    // }
//                    // if (PlayerX<Global.WindowWidth) {
//                    //     SetPlayerPos(TerrainLenght * 16-Global.WindowWidth, PlayerY);
//                    //     // PlayerX=(int)(Global.WindowWidthHalf*Setting.Zoom);
//                    // }

//                    // if (PlayerX-WindowCenterX>4 || PlayerY-WindowCenterY>4 || PlayerX-WindowCenterX<-4 || PlayerY-WindowCenterY<-4){
//                    //     WindowXPlayer=WindowXPlayer+(PlayerX-WindowCenterX)/16f;
//                    //     WindowYPlayer=WindowYPlayer+(PlayerY-WindowCenterY)/16f;

//                    //     WindowXWithout=(int)WindowXPlayer;
//                    //     WindowYWithout=(int)WindowYPlayer;
//                    // }

//                    // WindowCenterX=WindowXWithout+Global.WindowWidthHalf;
//                    // WindowCenterY=WindowYWithout+Global.WindowHeightHalf;

//                    // WindowX=WindowCenterX-(int)(Global.WindowWidthHalf/Setting.Zoom);
//                    // WindowY=WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom);

//                    //// Console.WriteLine(WindowX);
//                    // //int deltaX = (int)((Global.WindowWidth-Global.WindowWidth/Setting.Zoom)/2);
//                    // //int deltaY = (int)((Global.WindowHeight-Global.WindowHeight/Setting.Zoom)/2);
//                    // terrainStartIndexX=(WindowX-1)/16;
//                    // terrainStartIndexY=WindowY/16;

//                    // if (terrainStartIndexX<0)terrainStartIndexX=0;
//                    // if (terrainStartIndexY<0)terrainStartIndexY=0;

//                    // terrainStartIndexW=(int)((WindowX+Global.WindowWidth/Setting.Zoom)/16)+1;
//                    // terrainStartIndexH=(int)((WindowY+Global.WindowHeight/Setting.Zoom)/16)+1;

//                    // if (terrainStartIndexW>TerrainLenght)terrainStartIndexW=TerrainLenght;
//                    // if (terrainStartIndexH>125) terrainStartIndexH=125;

//                    //     #endregion
//                    if (diserpeard==250) { DoCommand(); }
//                    if (diserpeard>0) diserpeard--;

//                    #region Game - destruction + place blocks + drop item
//                    if (mouseRightDown) MouseRightAction();
//                    if (mouseRightPress) ItemEat();

//                    if (mouseLeftDown) {
//                        if (destroing) {
//                            if (destroyBlock.X==mousePosDiv16.X&&destroyBlock.Y==mousePosDiv16.Y) {
//                                destroingIndex++;

//                                if (destroingIndex>destringMaxIndex) {
//                                    if (destroyBlock.X>spawnX/16+safeSpawn||destroyBlock.X<spawnX/16-safeSpawn) {
//                                        if (Global.WorldDifficulty==2) {
//                                            switch (destroingBlockDepth) {
//                                                case BlockType.Back:
//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].Background[destroyBlock.Y].Id, BlockType.Back);
//                                                    //terrain[destroyBlock.X].Background[destroyBlock.Y]=null;
//                                                    //terrain[destroyBlock.X].IsBackground[destroyBlock.Y]=false;
//                                                    break;

//                                                case BlockType.Solid:
//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y].Id, BlockType.Solid);
//                                                  //  terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y]=null;
//                                                 //   terrain[destroyBlock.X].IsSolidBlocks[destroyBlock.Y]=false;

//                                                    if (destroingBlockType==(byte)BlockId.Dirt
//                                                    ||destroingBlockType==(byte)BlockId.GrassBlockDesert
//                                                    ||destroingBlockType==(byte)BlockId.GrassBlockForest
//                                                    ||destroingBlockType==(byte)BlockId.GrassBlockHills
//                                                    ||destroingBlockType==(byte)BlockId.GrassBlockJungle
//                                                    ||destroingBlockType==(byte)BlockId.GrassBlockPlains) {
//                                                        DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
                                                       
//                                                        terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=new Block(backgroundDirtTexture, (byte)BlockId.BackDirt, destroyBlock.Vector());
//                                                      //  terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=true;
//                                                    }
//                                                    if (destroingBlockType==(byte)BlockId.Sand) DestroySandUp(destroyBlock.X, destroyBlock.Y-1);

//                                                    RefreshLighting(destroyBlock.X);
//                                                    break;

//                                                case BlockType.Top:
//                                                    if (destroingBlockType==(byte)BlockId.Charger) RemovefromChargers(destroyBlock.X, destroyBlock.Y);
//                                                    if (destroingBlockType==(byte)BlockId.Miner) RemovefromMiners(destroyBlock.X, destroyBlock.Y);
//                                                    if (destroingBlockType==(byte)BlockId.Windmill) RemovefromWintable(destroyBlock.X, destroyBlock.Y);
//                                                    if (destroingBlockType==(byte)BlockId.Flag) RemovefromWintable(destroyBlock.X, destroyBlock.Y);
//                                                    if (destroingBlockType==(byte)BlockId.Lamp) lightsLamp.Remove((MashineBlockBasic)terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]);

//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].TopBlocks[destroyBlock.Y].Id,BlockType.Top);
//                                                   // terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=null;
//                                                   // terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=false;

//                                                    if (destroingBlockType==(byte)BlockId.Label
//                                                    ||destroingBlockType==(byte)BlockId.SolarPanel
//                                                    ||destroingBlockType==(byte)BlockId.Watermill
//                                                    ||destroingBlockType==(byte)BlockId.Windmill
//                                                    ||destroingBlockType==(byte)BlockId.FurnaceElectric
//                                                    ||destroingBlockType==(byte)BlockId.Macerator
//                                                    ||destroingBlockType==(byte)BlockId.Radio
//                                                    ||destroingBlockType==(byte)BlockId.Lamp
//                                                    ||destroingBlockType==(byte)BlockId.Miner) {
//                                                        RefreshAroundLabels(destroyBlock.X, destroyBlock.Y);
//                                                    }
//                                                    break;

//                                                case BlockType.Plant:
//                                                    foreach (Plant plant in terrain[destroyBlock.X].Plants) {
//                                                        if (plant.Height==destroyBlock.Y) {
//                                                            terrain[destroyBlock.X].Plants.Remove(plant);
//                                                            RemovePlant(destroyBlock.Y);
//                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id);
//                                                            break;
//                                                        }
//                                                    }
//                                                    break;

//                                                case BlockType.Mob:
//                                                    foreach (Mob mob in terrain[destroyBlock.X].Mobs) {
//                                                        if (mob.Height==destroyBlock.Y) {
//                                                            terrain[destroyBlock.X].Mobs.Remove(mob);
//                                                            break;
//                                                        }
//                                                    }
//                                                    break;
//                                            }
//                                        } else {
//                                            switch (destroingBlockDepth) {
//                                                case BlockType.Back:
//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].Background[destroyBlock.Y].Id, BlockType.Back);
//                                                   // terrain[destroyBlock.X].Background[destroyBlock.Y]=null;
//                                                  //  terrain[destroyBlock.X].IsBackground[destroyBlock.Y]=false;
//                                                    GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);
//                                                    RemovePartTool();
//                                                    break;

//                                                case BlockType.Solid:
//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y].Id, BlockType.Solid);
//                                                    terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y]=null;
//                                                    terrain[destroyBlock.X].IsSolidBlocks[destroyBlock.Y]=false;
//                                                    GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);
//                                                    RefreshLighting(destroyBlock.X);

//                                                    RemovePartTool();
//                                                    break;

//                                                case BlockType.Top:
//                                                    switch ((BlockId)destroingBlockType) {
//                                                        case BlockId.Lamp:
//                                                            lightsLamp.Remove((MashineBlockBasic)terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]);
//                                                            break;

//                                                        case BlockId.Windmill:
//                                                            RemovefromWintable(destroyBlock.X, destroyBlock.Y);
//                                                            break;

//                                                        case BlockId.Flag:
//                                                            RemovefromWintable(destroyBlock.X, destroyBlock.Y);
//                                                            break;

//                                                        case BlockId.CactusBig:
//                                                            DestroyCactusBig(destroyBlock.X, destroyBlock.Y);
//                                                            break;

//                                                        case BlockId.CactusSmall:
//                                                            DestroyCactusSmall(destroyBlock.X, destroyBlock.Y);
//                                                            break;
//                                                    }

//                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].TopBlocks[destroyBlock.Y].Id, , BlockType.Top);

//                                                   // terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=null;
//                                                   // terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=false;

//                                                    //GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);

//                                                    //if (destroingBlockType==(byte)BlockId.Label
//                                                    //|| destroingBlockType==(byte)BlockId.SolarPanel
//                                                    //|| destroingBlockType==(byte)BlockId.Watermill
//                                                    //|| destroingBlockType==(byte)BlockId.Windmill
//                                                    //|| destroingBlockType==(byte)BlockId.FurnaceElectric
//                                                    //|| destroingBlockType==(byte)BlockId.Macerator
//                                                    //|| destroingBlockType==(byte)BlockId.Radio
//                                                    //|| destroingBlockType==(byte)BlockId.Lamp
//                                                    //|| destroingBlockType==(byte)BlockId.Miner) {
//                                                    //    RefreshAroundLabels(destroyBlock.X,destroyBlock.Y);
//                                                    //}
//                                                    //RemovePartTool();

//                                                    break;

//                                                case BlockType.Plant:
//                                                    foreach (Plant plant in terrain[destroyBlock.X].Plants) {
//                                                        if (plant.Height==destroyBlock.Y) {
//                                                            GetItemsFromPlant(destroingBlockType, destroyBlock, plant.Grow==255);
//                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id,BlockType.Plant);
//                                                          //  terrain[destroyBlock.X].Plants.Remove(plant);

//                                                          //  SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id);
//                                                            break;
//                                                        }
//                                                    }
//                                                    break;

//                                                case BlockType.Mob:
//                                                    foreach (Mob mob in terrain[destroyBlock.X].Mobs) {
//                                                        if (mob.Height==destroyBlock.Y) {
//                                                            GetItemsFromMob(destroingBlockType, destroyBlock.X, destroyBlock.Y);
//                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id, BlockType.Plant);
//                                                            terrain[destroyBlock.X].Mobs.Remove(mob);
//                                                            RemovePartTool();
//                                                            break;
//                                                        }
//                                                    }
//                                                    break;
//                                            }
//                                            destroing=false;
//                                        }
//                                    } else {
//                                        DisplayText("V oblasti spawnu je zakázána úprava terénu");
//                                        destroing=false;
//                                    }
//                                }
//                            } else destroing=false;
//                        } else {
//                            if (mousePosDiv16.Y>0&&mousePosDiv16.Y<125) {
//                                if (terrain[mousePosDiv16.X]!=null) {
//                                    Destroy(mousePosDiv16.X, mousePosDiv16.Y);
//                                }
//                            }
//                        }
//                    } else destroing=false;

//                    if (newKeyboardState.IsKeyDown(Setting.KeyDropItem)) {
//                        if (oldKeyboardState.IsKeyUp(Setting.KeyDropItem)) {
//                            if (Inventory[boxSelected].Y>0) {
//                                if (PlayerX-mousePos.X>0) {
//                                    DroppedItems.Add(new Item {
//                                        X=PlayerX-11-16-1,
//                                        Y=PlayerY-22,
//                                        Count=1,
//                                        Texture=ItemIdToTexture(Inventory[boxSelected].X),
//                                        Id=(Items)Inventory[boxSelected].X,
//                                    });
//                                } else {
//                                    DroppedItems.Add(new Item {
//                                        X=PlayerX+11+1,
//                                        Y=PlayerY-22,
//                                        Count=1,
//                                        Texture=ItemIdToTexture(Inventory[boxSelected].X),
//                                        Id=(Items)Inventory[boxSelected].X,
//                                    });
//                                }
//                                InventoryRemoveDInt();

//                                // float angle=(float)Math.Tanh((mousePos.Y-PlayerY)/ (mousePos.X-PlayerX));

//                                //  DInt dropPos=new DInt((int)(PlayerX+96*Math.Cos(angle)), (int)(PlayerY+96*Math.Sin(angle)));


//                                //if (newKeyboardState.IsKeyDown(Setting.KeyRun)) {
//                                //    ItemDrop(Inventory[boxSelected].X,1, dropPos);
//                                //    InventoryRemoveDInt(boxSelected);
//                                //} else {
//                                //    ItemDrop(Inventory[boxSelected].X, Inventory[boxSelected].Y, dropPos);
//                                //    Inventory[boxSelected].Y=0;
//                                //    Inventory[boxSelected].X=0;
//                                //}
//                            }
//                        }
//                    }
//                    #endregion
//                    // do not write here
//                    #region Inventory
//                } else {
//                    switch (inventory) {
//                        #region 1 Typing
//                        case InventoryType.Typing:
//                            text=TextEdit(text);
//                            while (text.Length*13>750) text=text.Substring(0, text.Length-1);
//                            text=text.Replace("€", "#");

//                            if (newKeyboardState.IsKeyDown(Keys.Enter)) {
//                                if (oldKeyboardState.IsKeyUp(Keys.Enter)) {
//                                    inventory=0;
//                                    diserpeard=255;

//                                    gedo=new GeDo(/*spriteFont_small,*/ /*spriteFont_small_italic,*/ text/*, false*/);
//                                }
//                            }
//                            break;
//                        #endregion

//                        #region 2 Basic inventory
//                        case InventoryType.BasicInv:
//                            if (displayPopUpWindow) {
//                                if (buttonClosePopUp.Click) {
//                                    displayPopUpWindow=false;
//                                }
//                            } else {

//                                //if (newMouseState.ScrollWheelValue != previousScrollValue) {
//                                if (In(Global.WindowWidthHalf-300+4+200+4, Global.WindowHeightHalf-200+2, Global.WindowWidthHalf+300, Global.WindowHeightHalf)) {
//                                    //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4
//                                    //&& newMouseState.X<Global.WindowWidthHalf+300
//                                    //&& newMouseState.Y>Global.WindowHeightHalf-200+2
//                                    //&& newMouseState.Y<Global.WindowHeightHalf) {
//                                    inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
//                                    inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(maxInvCount-45));
//                                    //  if (newMouseState.ScrollWheelValue<previousScrollValue) {
//                                    //     // inventoryScrollbarValue=9*5+(maxInvCount-9*5)*(inventoryScrollbarValueCrafting/inventoryScrollbarValueCraftingMax);
//                                    ////  if (inventoryScrollbarValue<maxInvCount) inventoryScrollbarValue=;
//                                    //  if (inventoryScrollbarValue+9*5>maxInvCount)  inventoryScrollbarValue=maxInvCount-9*5;
//                                    //              inventoryScrollbarValue++;
//                                    //  } else if (newMouseState.ScrollWheelValue>previousScrollValue) {
//                                    //      inventoryScrollbarValue--;
//                                    //      if (inventoryScrollbarValue<0) inventoryScrollbarValue=0;
//                                    //  }
//                                    //  if (maxInvCount<45) inventoryScrollbarValue=0;

//                                }

//                                //else if (newMouseState.X>Global.WindowWidthHalf-300+4+40
//                                //    &&newMouseState.X<Global.WindowWidthHalf
//                                //    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8
//                                //    &&newMouseState.Y<Global.WindowHeightHalf+200) {

//                                //    if (newMouseState.ScrollWheelValue<previousScrollValue) {
//                                //        inventoryScrollbarValueCrafting+=6;
//                                //        if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax;
//                                //    } else if (newMouseState.ScrollWheelValue>previousScrollValue) {
//                                //        inventoryScrollbarValueCrafting-=6;
//                                //        if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
//                                //    }
//                                //    if (inventoryScrollbarValueCraftingMax<6*4) inventoryScrollbarValueCrafting=0;
//                                // }
//                                //   }
//                                ChangeInventoryClothes();

//                                SelectItemCraft();
//                                CraftingEvents();
//                                CraftingEventsCraft();

//                                if (buttonClose.Click) {
//                                    inventory=0;
//                                    SetPlayerClothes();
//                                }


//                                //if (selectedCraftingItem!=-1){
//                                //    if (CurrentDeskCrafting.Length!=1)   {
//                                //        if (buttonNext.Click) {
//                                //            craftingType++;
//                                //            DListInt[] l=GameMethods.Craft(Crafting[selectedCraftingItem].X);
//                                //            if (l!=null) {
//                                //                if (craftingType>l.Length-1) craftingType=0;
//                                //                Need=l[craftingType].List1;
//                                //            }
//                                //        }

//                                //        if (buttonPrev.Click) {
//                                //            craftingType--;
//                                //            DListInt[] l=GameMethods.Craft(Crafting[selectedCraftingItem].X);
//                                //            if (l!=null) {
//                                //                if (craftingType<0) craftingType=l.Length-1;
//                                //                Need=l[craftingType].List1;
//                                //            }
//                                //        }
//                                //    }
//                                //}


//                                if (buttonInvTabBlocks.Click) SetInvCraftingBlocks();
//                                if (buttonInvTabMashines.Click) SetInvCraftingMashines();
//                                if (buttonInvTabTools.Click) SetInvCraftingTools();
//                                if (buttonInvTabPlants.Click) SetInvCraftingNature();
//                                if (buttonInvTabItems.Click) SetInvCraftingItems();
//                            }
//                            break;
//                        #endregion

//                        #region 3 Crafting
//                        case InventoryType.Desk:
//                            ChangeInventoryBasic();

//                            SelectItemCraft();

//                            //if (buttonNext.Click) {
//                            //    craftingType++;
//                            //    DListInt[] l = GameMethods.Craft(Crafting[selectedCraftingItem].X);
//                            //    if (l!=null) {
//                            //        if (craftingType>l.Length-1) craftingType=0;
//                            //        Need=l[craftingType].List1;
//                            //    }
//                            //}

//                            //if (buttonPrev.Click) {
//                            //    craftingType--;
//                            //    DListInt[] l = GameMethods.Craft(Crafting[selectedCraftingItem].X);
//                            //    if (l!=null) {
//                            //        if (craftingType<0) craftingType=l.Length-1;
//                            //        Need=l[craftingType].List1;
//                            //    }
//                            //}

//                            //if (buttonClose.Click) inventory=0;
//                            break;
//                        #endregion

//                        #region 4 Furnace stone
//                        case InventoryType.FurnaceStone:
//                            ChangeInventoryFurnaceStone();

//                            SelectItemBake();

//                            if (buttonInvTabMaterials.Click) SetInvBakeIngots();
//                            if (buttonInvTabGlass.Click) SetInvBakeItems();
//                            if (buttonInvTabCeramics.Click) SetInvBakeCeramics();
//                            if (buttonInvTabFood.Click) SetInvBakeFood();
//                            if (buttonInvTabTools.Click) SetInvBakeTools();

//                            if (buttonClose.Click) inventory=0;

//                            //if (buttonNext.Click) {
//                            //    craftingType++;
//                            //    DListInt[] l = GameMethods.Bake(Crafting[selectedCraftingItem].X);
//                            //    if (l!=null) {
//                            //        if (craftingType>l.Length-1) craftingType=0;
//                            //        Need=l[craftingType].List1;
//                            //    }
//                            //}

//                            //if (buttonPrev.Click) {
//                            //    craftingType--;
//                            //    DListInt[] l = GameMethods.Bake(Crafting[selectedCraftingItem].X);
//                            //    if (l!=null) {
//                            //        if (craftingType<0) craftingType=l.Length-1;
//                            //        Need=l[craftingType].List1;
//                            //    }
//                            //}
//                            break;
//                        #endregion

//                        #region 5 Furnace electric
//                        case InventoryType.FurnaceElectric:
//                            ChangeInventoryBasic();

//                            SelectItemBake();

//                            if (buttonInvTabMaterials.Click) SetInvBakeIngots();
//                            if (buttonInvTabGlass.Click) SetInvBakeItems();
//                            if (buttonInvTabCeramics.Click) SetInvBakeCeramics();
//                            if (buttonInvTabFood.Click) SetInvBakeFood();
//                            if (buttonInvTabTools.Click) SetInvBakeTools();

//                            if (buttonClose.Click) inventory=0;

//                            if (((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy>0) {
//                                //if (buttonNext.Click) {
//                                //    craftingType++;
//                                //    DListInt[] l = GameMethods.Bake(Crafting[selectedCraftingItem].X);
//                                //    if (l!=null) {
//                                //        if (craftingType>l.Length-1) craftingType=0;
//                                //        Need=l[craftingType].List1;
//                                //    }
//                                //}

//                                //if (buttonPrev.Click) {
//                                //    craftingType--;
//                                //    DListInt[] l = GameMethods.Bake(Crafting[selectedCraftingItem].X);
//                                //    if (l!=null) {
//                                //        if (craftingType<0) craftingType=l.Length-1;
//                                //        Need=l[craftingType].List1;
//                                //    }
//                                //}
//                            }
//                            break;
//                        #endregion

//                        #region 6 Macerator
//                        case InventoryType.Macerator:
//                            ChangeInventoryBasic();

//                            SelectItemToDust();

//                            if (buttonInvTabMaterials.Click) SetInvToDustDusts();
//                            if (buttonInvTabPlants.Click) SetInvToDustNature();
//                            if (buttonInvTabTools.Click) SetInvToDustTools();
//                            if (buttonInvTabItems.Click) SetInvToDustStone();
//                            if (buttonInvTabCeramics.Click) SetInvToDustOther();

//                            if (buttonClose.Click) inventory=0;

//                            if (((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy>0) {
//                                //if (buttonNext.Click) {
//                                //    craftingType++;
//                                //    DListInt[] l = GameMethods.ToDust(Crafting[selectedCraftingItem].X);
//                                //    if (l!=null) {
//                                //        if (craftingType>l.Length-1) craftingType=0;
//                                //        Need=l[craftingType].List1;
//                                //    }
//                                //}

//                                //if (buttonPrev.Click) {
//                                //    craftingType--;
//                                //    DListInt[] l = GameMethods.ToDust(Crafting[selectedCraftingItem].X);
//                                //    if (l!=null) {
//                                //        if (craftingType<0) craftingType=l.Length-1;
//                                //        Need=l[craftingType].List1;
//                                //    }
//                                //}
//                            }
//                            break;
//                        #endregion


//                        #region Creative
//                        case InventoryType.Creative:
//                            ChangeInventoryCreative();
//                            //if (buttonInvTabBlocks.Click) SetInvCreativeBlocks();
//                            //if (buttonInvTabGlass.Click) SetInvCreativeBack();
//                            //if (buttonInvTabMashines.Click) SetInvCreativeMashines();
//                            //if (buttonInvTabTools.Click) SetInvCreativeTools();
//                            //if (buttonInvTabPlants.Click) SetInvCreativePlants();
//                            //if (buttonInvTabItems.Click) SetInvCreativeItems();
//                            //if (buttonInvAnimals.Click) SetInvCreativeOther();
//                            // if (buttonClose.Click) inventory=0;
//                            break;
//                        #endregion

//                        #region 8 Shelf
//                        case InventoryType.Shelf:
//                            ChangeInventoryShelf();

//                            if (buttonClose.Click) {
//                                inventory=0;
//                                ShelfBlock block = (ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];
//                                if (block.Inv[4].X==0) block.IsSmallItem=false;
//                                else {
//                                    Texture2D tex = ItemIdToTexture(block.Inv[4].X);
//                                    if (tex!=null) {
//                                        block.SmalItemTexture=tex;
//                                        block.IsSmallItem=true;
//                                    } else block.IsSmallItem=false;
//                                }
//                            }
//                            break;
//                        #endregion

//                        #region 9 Wooden box
//                        case InventoryType.BoxWooden:
//                            ChangeInventoryWoodenBox();

//                            if (buttonClose.Click) inventory=0;
//                            break;
//                        #endregion

//                        #region 10 Adv box
//                        case InventoryType.BoxAdv:
//                            ChangeInventoryAdvBox();

//                            if (buttonClose.Click) inventory=0;
//                            break;
//                        #endregion


//                        #region Mobile
//                        case InventoryType.Mobile:
//                            if (buttonClose.Click) inventory=0;
//                            mobileOS.mouse=new DInt(newMouseState.X, newMouseState.Y);
//                            mobileOS.mouseDown=newMouseState.LeftButton==ButtonState.Pressed;
//                            mobileOS.Update();
//                            break;
//                        #endregion

//                        #region Rocket
//                        case InventoryType.Rocket:
//                            if (buttonClose.Click) inventory=0;
//                            if (buttonRocket.Click) {
//                                //     Save();
//                                rocket=true;
//                                rocketDown=false;
//                                PlayerX=selectedMashine.X;
//                                PlayerY=selectedMashine.Y;
//                                inventory=0;
//                                File.WriteAllText(pathToWorld+"UseRocket.txt", "");
//                                terrain[selectedMashine.X].IsTopBlocks[selectedMashine.Y]=false;
//                                terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]=null;
//                            }
//                            break;
//                        #endregion

//                        #region Charger
//                        case InventoryType.Charger:
//                            ChangeInventoryCharger();

//                            if (buttonClose.Click) {
//                                inventory=0;
//                            }
//                            break;
//                        #endregion

//                        #region Miner
//                        case InventoryType.Miner:
//                            ChangeInventoryMiner();

//                            if (buttonClose.Click) inventory=0;
//                            break;
//                        #endregion

//                        #region Radio
//                        case InventoryType.Radio:
//                            if (buttonRocket.Click) { }
//                            if (buttonClose.Click) inventory=0;

//                            if (radioplaying) {
//                                if (MediaPlayer.PlayPosition==TimeSpan.MinValue) radioplaying=false;
//                            }

//                            if (radioSongs!=null) {
//                                for (int i = 0; i<radioSongs.Length; i++) {
//                                    if (newMouseState.LeftButton==ButtonState.Pressed) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300-2+10+240&&newMouseState.Y>Global.WindowHeightHalf-234+10+40+i*40
//                                 &&newMouseState.X<Global.WindowWidthHalf+200&&newMouseState.Y<Global.WindowHeightHalf-234+10+40+i*40+48) {
//                                            if (radioplaying) {
//                                                MediaPlayer.Stop();
//                                            }

//                                            radioplaying=true;


//                                            // ...
//                                            //OutputDevice outputDevice = OutputDevice.GetByName(radioSongs[i]);
//                                            //var midiFile = MidiFile.Read(radioSongs[i]);
//                                            //// or from stream:
//                                            //// var midiFile = MidiFile.Read(stream);


//                                            //var playback = midiFile.GetPlayback(outputDevice);

//                                            //playback.Loop = true;
//                                            //playback.Start();


//                                            Song song = GetDataSong("Radio/"+new FileInfo(radioSongs[i]).Name.Substring(0, (new FileInfo(radioSongs[i]).Name).LastIndexOf(".")));
//                                            MediaPlayer.Play(song);
//                                        }
//                                        //   GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-300-2+10+240, Global.WindowHeightHalf-234+10+40+i*40, new FileInfo(radioSongs[i]).Name.Substring(0,(new FileInfo(radioSongs[i]).Name).LastIndexOf(".")));
//                                    }
//                                }
//                            }
//                            if (newMouseState.LeftButton==ButtonState.Pressed) {
//                                if (newMouseState.X>Global.WindowWidthHalf-24&&newMouseState.Y>Global.WindowHeightHalf-200+2+400-50
//                                 &&newMouseState.X<Global.WindowWidthHalf-24+48&&newMouseState.Y<Global.WindowHeightHalf-200+2+400-50+48) {
//                                    if (radioplaying) {
//                                        MediaPlayer.Stop();
//                                        radioplaying=false;

//                                    }
//                                }
//                            }
//                            break;
//                        #endregion

//                        #region Composter
//                        case InventoryType.Composter:
//                            ChangeInventoryShelf();

//                            if (buttonClose.Click) inventory=0;
//                            break;
//                            #endregion
//                    }
//                }
//                #endregion

//                #region Update items
//                if (DroppedItems.Count!=0) {
//                    itemAnimationPos+=0.1047197551f;
//                    if (itemAnimationPos>6.283185307f) itemAnimationPos=0f;
//                    Global.ItemAnimation=(float)Math.Cos(itemAnimationPos);

//                    itemAnimationPos2+=0.1047197551f;
//                    if (itemAnimationPos2>6.283185307f) itemAnimationPos2=0f;
//                    Global.ItemAnimation2=(float)Math.Cos(itemAnimationPos2);
//                    UpdateItem(DroppedItems);
//                }
//                #endregion

//                #region  bars
//                if (barEnergy<=32) {
//                    if (barEnergy>0) {
//                        if (barEat>=0) {
//                            if (barWater>=0) {
//                                barEat+=0.0006f;
//                                barWater+=0.0008f;
//                                barEnergy-=0.04f;

//                                if (barEat<0) barEat=0;
//                                if (barWater<0) barWater=0;
//                                if (barEnergy<0) barEnergy=0;
//                            }
//                        }
//                    }
//                }
//                #endregion

//                #region Wheather
//                if (rain) {
//                    rainDots.Add(new DInt(random.Next(848), -10));
//                    if (Global.HasSoundGraphics) {
//                        if (rainDuration==0) {
//                            SoundEffects.Rain.Play();
//                            rainDuration=(int)(SoundEffects.Rain.Duration.TotalMilliseconds/16.3333334d);
//                        } else rainDuration--;
//                    }
//                }
//                #endregion

//                #region Chunks
//                for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
//                    MTerrain chunk = terrain[x];

//                    if (chunk.state==MChunkState.NotDownloaded) {
//                        SendRequestChunk(x);
//                    } else if (chunk.state==MChunkState.SendRequest) {
//                        if ((DateTime.Now-chunk.sended).TotalSeconds>10) {
//                            SendRequestChunk(x);
//                        }
//                    }

//                }
//                #endregion

//                EnergySystem();

//                lights.Clear();
//                for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
//                    if (WindowY<terrain[x].LightPos16+8) lights.Add(new Rectangle(x*16-40, WindowY, 16+40+40, terrain[x].LightPos16-WindowY+8));
//                }

//                if (timer5<0) {

//                    foreach (ShortAndByte ch in Chargers) ChargerJob(ch);

//                    if (rocket) {
//                        if (rocketDown) {
//                            if (PlayerY>0) {
//                                rocket=false;
//                                PlayerY=0;
//                                InventoryAdd((int)Items.Rocket);
//                                File.Delete(pathToWorld+"UseRocket.txt");
//                            }
//                        } else {
//                            if (PlayerY<=-10000) {
//                                //Save();

//                                File.WriteAllText(pathToWorld+@"\Settings.txt",
//                                    debug+"\r\n"+
//                                    time+"\r\n"+
//                                    dayAlpha+"\r\n"+

//                                    barWater+"\r\n"+
//                                    barEat+"\r\n"+
//                                    barHeart+"\r\n"+
//                                    barOxygen+"\r\n"+

//                                    PlayerX+"\r\n"+
//                                    PlayerY+"\r\n"+
//                                    moonSpeed);

//                                using (StreamWriter sr = new StreamWriter(pathToWorld+@"\Inventory.txt")) {
//                                    foreach (DInt x in Inventory) {
//                                        sr.WriteLine(x.X);
//                                        sr.WriteLine(x.Y);
//                                    }
//                                }
//                                Rabcr.GoTo(new PlanetSystem(pathToWorld));
//                            }
//                        }
//                    }

//                    //	UpdateWater();

//                    // int x = WindowX<0 ? 0 : WindowX/16;
//                    //  int w= (WindowX+Global.WindowWidth)/16 >TerrainLenght ? TerrainLenght : (WindowX + Global.WindowWidth) / 16;
//                    for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
//                        MTerrain chunk;

//                        if ((chunk=terrain[x])!=null) {
//                            for (int y = chunk.StartSomething; y<100; y++) {
//                                if (chunk.IsTopBlocks[y]==MBlockState.Exists) {
//                                    switch ((BlockId)chunk.TopBlocks[y].Id) {
//                                        case BlockId.SolarPanel:
//                                            if (chunk.LightPos+2>y) NewEnergySolarPanel(x, y);
//                                            break;

//                                        case BlockId.Watermill:
//                                            NewEnergyWatermill(x, y);
//                                            break;

//                                        case BlockId.Windmill:
//                                            NewEnergySolarPanel(x, y);
//                                            break;
//                                    }
//                                }
//                            }
//                        }
//                    }


//                    if (Global.HasSoundGraphics) {
//                        if (MediaPlayer.State==MediaState.Stopped) {
//                            Song play = null;

//                            if (notNeedScafander) {
//                                switch (random.Next(4)) {
//                                    case 0: play=Songs.Happend; break;
//                                    case 1: play=Songs.Medium; break;
//                                    case 2: play=Songs.Root; break;
//                                    default: play=Songs.Storm; break;
//                                }
//                            } else play=Songs.Spacelandia;

//                            MediaPlayer.Play(play);
//                        }
//                    }

//                    #region Time
//                    time++;//1hod=3000x zvýšení
//                    if (time==dayLenght) {
//                        day++;
//                        if (day>365) day=0;
//                        time=0;
//                    }

//                    //Východ
//                    if (time>hour*6&&time<hour*7) {
//                        dayAlpha=((time-hour*7f)/hour)/2f+1f;

//                        //Západ
//                    } else if (time>hour*18&&time<hour*19) dayAlpha=((hour*19f-time)/hour)/2f+0.5f;
//                    else if (time>=hour*7&&time<=hour*18) dayAlpha=1f;
//                    else dayAlpha=.5f;


//                    moonSpeed+=368f/(7f*dayLenght);
//                    if (moonSpeed>=368) moonSpeed=0;
//                    #endregion

//                    #region Furnace Stone burning
//                    foreach (ShortAndByte d in FurnaceStone) {
//                        MashineBlockBasic block = (MashineBlockBasic)terrain[d.X].TopBlocks[d.Y];
//                        if (block==null) {
//                            FurnaceStone.Remove(d);
//                            break;
//                        }

//                        if (block.Inv[0].X!=0||block.Inv[1].X!=0||block.Inv[2].X!=0) {
//                            if (block.Inv[3].Y<99&&(block.Inv[3].X==0||block.Inv[3].X==(int)Items.Ash)) {
//                                //0
//                                Items id = (Items)block.Inv[0].X;
//                                int add = GameMethods.BurnWoodInFurnace(id);
//                                if (add!=0) {
//                                    if (add+block.Energy<100) {
//                                        block.Energy+=add;

//                                        block.Inv[0].Y--;
//                                        if (block.Inv[0].Y==0)
//                                            block.Inv[0].X=0;

//                                        //ash
//                                        if (random.Next(3)==1) {
//                                            block.Inv[3].Y++;
//                                            block.Inv[3].X=(int)Items.Ash;
//                                        }
//                                    }
//                                }
//                            }
//                        }

//                        if (block.Energy>0) block.Energy-=0.03f;
//                    }
//                    #endregion

//                    //Animatable
//                    if (wind) {
//                        if (windForce<1) {
//                            windForce+=.05f;
//                            SetWintableSources();
//                        }
//                    } else {
//                        if (windForce>0) {
//                            windForce-=.05f;
//                            SetWintableSources();
//                        }
//                    }

//                    #region Auto-destroy leaves
//                    if (terrainStartIndexW-terrainStartIndexX>0) {
//                        AutoDestroyLeaves((byte)BlockId.OakWood, (byte)BlockId.OakLeaves);
//                        AutoDestroyLeaves((byte)BlockId.SpruceWood, (byte)BlockId.SpruceLeaves);
//                        AutoDestroyLeaves((byte)BlockId.PineWood, (byte)BlockId.PineLeaves);
//                        AutoDestroyLeaves((byte)BlockId.LindenWood, (byte)BlockId.LindenLeaves);

//                        AutoDestroyLeaves((byte)BlockId.AppleWood, (byte)BlockId.AppleLeaves, (byte)BlockId.AppleLeavesWithApples);
//                        AutoDestroyLeaves((byte)BlockId.PlumWood, (byte)BlockId.PlumLeaves, (byte)BlockId.PlumLeavesWithPlums);
//                        AutoDestroyLeaves((byte)BlockId.CherryWood, (byte)BlockId.CherryLeaves, (byte)BlockId.CherryLeavesWithCherries);
//                        AutoDestroyLeaves((byte)BlockId.OrangeWood, (byte)BlockId.OrangeLeaves, (byte)BlockId.OrangeLeavesWithOranges);
//                        AutoDestroyLeaves((byte)BlockId.LemonWood, (byte)BlockId.LemonLeaves, (byte)BlockId.LemonLeavesWithLemons);
//                    }
//                    #endregion

//                    // Start mooving
//                    if (terrainStartIndexW-terrainStartIndexX>0) {
//                        MoveChicken();
//                        MoveRabbit();
//                    }

//                    // Finish mooving
//                    FinishMooving();

//                    timer5=5;
//                } else timer5--;

//                if (_secondTimer<0) {
//                    for (int i = 0; i<TerrainLenght/1000; i++) GrowTreeFood(i*1000);

//                    if (random.Next(5)==1) {
//                        for (int i = 0; i<chunksWithPlants.Count; i++) {
//                            foreach (Plant p in terrain[chunksWithPlants[i]].Plants) {
//                                if (p.Growing) p.Update();

//                                if (p.Growing) {
//                                    if (terrain[p.chunkId].IsSolidBlocks[p.Height+1]==MBlockState.Exists) {
//                                        if (terrain[p.chunkId].SolidBlocks[p.Height+1].Id==(byte)BlockId.Compost) p.Update();
//                                    }
//                                }
//                            }
//                        }
//                    }

//                    if (random.Next(50)==1) {
//                        foreach (ShortAndByte p in Composters) {
//                            ShelfBlock block = (ShelfBlock)terrain[p.X].TopBlocks[p.Y];
//                            int i = random.Next(9);
//                            if (block.Inv[i].X!=0) {
//                                if (GameMethods.IsCompostable((Items)block.Inv[i].X)) {
//                                    if (random.Next(block.Inv[i].Y)<=1) {
//                                        block.Inv[i].X=(int)Items.Compost;
//                                    }
//                                }
//                            }
//                        }
//                    }

//                    #region Bars
//                    if (barEat<5&&barWater<5) {
//                        barHeart-=.06f;
//                        if (barHeart<0) barHeart=0;
//                    }

//                    if (barEat>25&&barWater>25) {
//                        barHeart+=.06f;
//                        if (barHeart>32) Die(Lang.Texts[162] /*"Měl bys jíst a pít","You shoud eat and drink"*/);
//                    }

//                    if (CheckLava()) {
//                        barHeart+=.06f;
//                        if (barHeart>32) Die(Lang.Texts[163] /*"Dávej pozor! Láva..","Pay attention! Lava..."*/);
//                    }

//                    if (barEnergy>31) {
//                        if (random.Next(3)==1) {
//                            barHeart+=.01f;
//                            if (barHeart>32) Die(Lang.Texts[164] /*"Bez energie + spatné srdíčko = srmt","Without energy + wrong heart = die"*/);
//                        }
//                    }
//                    #endregion

//                    if (debug) {
//                        if (cpu!=null) {
//                            usageCpuProcess=cpu.NextValue();
//                            usageCpu=cpuUsage.NextValue();
//                            usageRamProcess=ram.NextValue();
//                            usageRam=freeRam.NextValue();
//                        }
//                    }

//                    #region Weather
//                    if (changeRain<0) {
//                        changeRain=100+random.Next(50);
//                        if (rain) rain=false; else rain=true;
//                    } else changeRain--;

//                    if (timeToChageWind<0) {
//                        timeToChageWind=2000+random.Next(1000);
//                        wind=!wind;
//                    } else timeToChageWind--;

//                    foreach (DInt r in rainDots) {
//                        if (Global.WindowHeight<r.Y) {
//                            rainDots.Remove(r);
//                            break;
//                        }
//                    }
//                    #endregion

//                    #region Optimalize
//                    if (energy.Count>5000) energy.RemoveRange(5000, energy.Count-5000);
//                    #endregion

//                    if (random.Next(2)==1) {
//                        switch (Inventory[boxSelected].X) {
//                            case (int)Items.TorchON:
//                                if (Inventory[boxSelected].Y>2) InventoryRemoveDInt();
//                                else Inventory[boxSelected].X=(int)Items.Stick;
//                                playerLight=true;
//                                break;

//                            case (int)Items.TorchElectricON:
//                                if (random.Next(2)==1) {
//                                    if (Inventory[boxSelected].Y>2) InventoryRemoveDInt();
//                                    else Inventory[boxSelected].X=(int)Items.TorchElectricOFF;
//                                    break;
//                                }
//                                playerLight=true;
//                                break;

//                            default:
//                                playerLight=false;
//                                break;
//                        }
//                    }

//                    foreach (ShortAndByte d in Miners) MinerJob(d);

//                    autoSave--;
//                    if (autoSave==0) {
//                        //Save();

//                        File.WriteAllText(pathToWorld+@"\Settings.txt",
//                            debug+"\r\n"+
//                            time+"\r\n"+
//                            dayAlpha+"\r\n"+

//                            barWater+"\r\n"+
//                            barEat+"\r\n"+
//                            barHeart+"\r\n"+
//                            barOxygen+"\r\n"+

//                            PlayerX+"\r\n"+
//                            PlayerY+"\r\n"+
//                            moonSpeed);

//                        using (StreamWriter sr = new StreamWriter(pathToWorld+@"\Inventory.txt")) {
//                            foreach (DInt x in Inventory) {
//                                sr.WriteLine(x.X);
//                                sr.WriteLine(x.Y);
//                            }
//                        }
//                        autoSave=300;
//                    }

//                    if (inventory==InventoryType.Radio) {
//                        try {
//                            if (Directory.Exists(new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).Directory.FullName+"\\RabcrData\\Default\\Songs\\Radio")) {
//                                radioSongs=Directory.GetFiles(new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).Directory.FullName+"\\RabcrData\\Default\\Songs\\Radio");
//                                List<string> songs = new List<string>();
//                                foreach (string s in radioSongs) {
//                                    if (s.EndsWith(".wma")) songs.Add(s);
//                                }
//                                radioSongs=songs.ToArray();
//                            }
//                        } catch { }
//                    }


//                    #region Multiplayer
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.MyPlayerData,
//                            Message=PlayerX+"|"+PlayerY,
//                            To=toServer,
//                        }.ToByte(),
//                        Importance=Importance.Low
//                    });
//                    #endregion

//                    if (Inventory[boxSelected].X==(int)Items.TorchON) {
//                        if (Inventory[boxSelected].Y>2) {
//                            if (random.Next(2)==1) InventoryRemoveDInt();
//                        } else {
//                            Inventory[boxSelected].X=(int)Items.Stick;
//                        }

//                        playerLight=true;
//                    } else playerLight=false;

//                    _secondTimer=60;
//                } else _secondTimer--;

//                CameraMatrix();
//            }


//            base.Update(gameTime);
//        }

//        public override void Draw(GameTime gameTime) {
//            Rabcr.spriteBatch=spriteBatch;
//            oldMouseState=newMouseState;
//            newMouseState=Mouse.GetState();

//            if (current==Current.Playing) {
//                #region Died
//                if (died) {
//                    Graphics.SetRenderTarget(null);
//                    Graphics.Clear(Color.DarkRed);
//                    spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp);
//                    Vector2 text = spriteFont_small.MeasureString(diedInfo);
//                    float a;
//                    if (timerStayDied>200) a=1-(timerStayDied-200)/110f;
//                    else if (timerStayDied<100) a=timerStayDied/100f;
//                    else a=1;
//                    string m = Lang.Texts[28];// Setting.czechLanguage? "Právě jsi zemřel(a)": "You died";
//                    string respawntext = Lang.Texts[28]+" "+(timerStayDied/60+1);//(Setting.czechLanguage? "Znovuzrodíš se za ": "Respawn in ")+(timerStayDied/60+1);

//                    spriteBatch.DrawString(spriteFont_medium, m, new Vector2(Global.WindowWidthHalf-(int)spriteFont_medium.MeasureString(m).X/2, Global.WindowHeightHalf-60), Color.White*a);
//                    GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-(int)text.X/2, Global.WindowHeightHalf, diedInfo, Color.White*a);
//                    GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-(int)spriteFont_small.MeasureString(respawntext).X/2, Global.WindowHeightHalf+30, respawntext, Color.White*a);

//                    spriteBatch.End();
//                } else {
//                    #endregion

//                    #region Draw lighting
//                    Graphics.SetRenderTarget(sunLightTarget);
//                    Graphics.Clear(Color.Black);
//                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, null, null, null, null, camera);
//                    for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) spriteBatch.Draw(lightMaskTexture, terrain[x].LightVec, Color.White);
//                    foreach (Rectangle r in lights) spriteBatch.Draw(lightMaskLineTexture, r, Color.White);
//                    spriteBatch.End();

//                    // Modificate sunlight target with lamp's, lorch's or fireplace's lights
//                    Graphics.SetRenderTarget(modificatedLightTarget);
//                    spriteBatch.Begin();
//                    spriteBatch.Draw(sunLightTarget, Vector2.Zero, new Color(dayAlpha, dayAlpha, dayAlpha, dayAlpha));
//                    spriteBatch.End();

//                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, null, null, null, null, camera);

//                    foreach (MashineBlockBasic m in lightsLamp) {
//                        if (m.Position.X>=terrainStartIndexX*16) {
//                            if (m.Position.X<=terrainStartIndexW*16) {
//                                if (m.Position.Y>=terrainStartIndexY*16) {
//                                    if (m.Position.Y<=terrainStartIndexH*16) {
//                                        if (m.Energy>0) {
//                                            m.Energy-=0.01f;
//                                            if (m.Energy<0) m.Energy=0;
//                                            spriteBatch.Draw(lightMaskRoundTexture, new Rectangle((int)m.Position.X-48*2*2+8, (int)m.Position.Y-48*2*2+8, 96*2*2, 96*2*2), lampColorLight);
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                    //    playerLight=true;
//                    if (playerLight) spriteBatch.Draw(lightMaskRoundTexture, new Rectangle(PlayerX-48*2+8, PlayerY-48*2+8, 96*2, 96*2), lampColorLight);
//                    spriteBatch.End();
//                    #endregion

//                    //#region Draw lighting
//                    //Graphics.SetRenderTarget(fogTarget);
//                    //Graphics.Clear(/*Color.Black*/Color.White*0.1f);
//                    //spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, SamplerState.PointClamp ,null, null, null, camera);
//                    ////for (int x= startIndex-2>0 ? startIndex-2:0; x<endIndex; x++) {
//                    ////    if (terrain[x]!=null) {
//                    //for (int x= terrainStartIndexX; x<terrainStartIndexW; x++) {
//                    //    if (terrain[x]!=null) {
//                    //        if (terrain[x].state==MChunkState.Downloaded){
//                    //            if (WindowY/*WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom)*/<terrain[x].LightPos16) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x*16, WindowY/*(WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom))*/, 16, terrain[x].LightPos16-WindowY/*(WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom))*/+8), Color.White);
//                    //            spriteBatch.Draw(lightmap, terrain[x].LightVec/*new Vector2(x*16-48+8, terrain[x].LightPos*16-48+8)*/, Color.White);

//                    //        }
//                    //    }
//                    //}

//                    //foreach (MashineBlockBasic m in lightsLamp){
//                    //    if (m.Position.X>=terrainStartIndexX*16){
//                    //        if (m.Position.X<=terrainStartIndexW*16){
//                    //            if (m.Position.Y>=terrainStartIndexY*16){
//                    //                if (m.Position.Y<=terrainStartIndexH*16){
//                    //                    if (m.Energy>0){
//                    //                        m.Energy-=0.01f;
//                    //                        if (m.Energy<0)m.Energy=0;
//                    //                        spriteBatch.Draw(lightmap, new Rectangle((int)m.Position.X-48*2+8, (int)m.Position.Y-48*2+8,96*2,96*2), Color.White);
//                    //                    }
//                    //                }
//                    //            }
//                    //        }
//                    //    }
//                    //}
//                    //spriteBatch.End();
//                    //#endregion

//                    #region Draw game
//                    Graphics.SetRenderTarget(null);
//                    Graphics.Clear(Color.LightSkyBlue);
//                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, null, null, null, camera);

//                    #region Weather
//                    if (rain) {
//                        if (WindowY<0) {
//                            foreach (DInt r in rainDots) {

//                                r.Y++;

//                                if (wind) {
//                                    if (random.Next(4)==1) r.X--; else if (random.Next(2)==1) r.X++;
//                                } else {
//                                    if (random.Next(3)==1) r.X++; else if (random.Next(2)==1) r.X--;
//                                }
//                                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(WindowX+r.X, WindowY+r.Y, 1, 1), Color.White);
//                            }
//                        } else {
//                            foreach (DInt r in rainDots) {

//                                r.Y+=3;

//                                if (wind) {
//                                    if (random.Next(2)==1) r.X++;
//                                }
//                                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(WindowX+r.X, WindowY+r.Y, 1, 2), Color.Blue);
//                            }
//                        }
//                    }
//                    #endregion

//                    for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
//                        MTerrain chunk = terrain[x];

//                        if (chunk.state==MChunkState.Downloaded) {
//                            //   int start=chunk.StartSomething<terrainStartIndexY ? terrainStartIndexY : chunk.StartSomething;

//                            for (int y = chunk.StartSomething>terrainStartIndexY ? chunk.StartSomething : terrainStartIndexY; y<terrainStartIndexH; y++) {
//                                if (chunk.IsSolidBlocks[y]==MBlockState.Exists) chunk.SolidBlocks[y].Draw();
//                                else {
//                                    if (chunk.IsBackground[y]==MBlockState.Exists) chunk.Background[y].Draw();
//                                    if (chunk.IsTopBlocks[y]==MBlockState.Exists) chunk.TopBlocks[y].Draw();
//                                }
//                            }

//                            for (int i = 0; i<chunk.Plants.Count; i++) chunk.Plants[i].Draw();
//                            for (int i = 0; i<chunk.Mobs.Count; i++) chunk.Mobs[i].Draw();
//                        }
//                    }

//                    if (destroing) spriteBatch.Draw(destructionTexture, new Vector2(destroyBlock.X*16, destroyBlock.Y*16), new Rectangle((int)(destroingIndex/destringMaxIndex*336)/16*16, 0, 16, 16), Color.White);

//                    foreach (Item i in DroppedItems) i.DrawItem();


//                    // Player
//                    #region Player
//                    if (rocket) {
//                        if (rocketDown) {
//                            spriteBatch.Draw(solidFuelSmokeTexture, new Rectangle(WindowCenterX-10, WindowCenterY-40+rocketTexture.Height-10, 26, 20+random.Next(10)), Color.White);
//                            spriteBatch.Draw(rocketTexture, new Vector2(WindowCenterX-10, WindowCenterY-40), Color.White);
//                        } else {
//                            spriteBatch.Draw(solidFuelSmokeTexture, new Rectangle(WindowCenterX-10, WindowCenterY-40+rocketTexture.Height-10, 26, 70+random.Next(15)), Color.White);
//                            spriteBatch.Draw(rocketTexture, new Vector2(WindowCenterX-10, WindowCenterY-40), Color.White);
//                        }

//                    } else if (showPlayer) {
//                        if (swimming||waterDown) {
//                            switch (playerState) {
//                                default: //<-
//                                   {
//                                    //  spriteBatch.Draw(playerRightSwimmingTexture, new Vector2(PlayerX-11, PlayerY+8), new Rectangle(playerImg/22*39, 0, 39, 20), Color.White,0,Vector2.Zero,1,SpriteEffects.None,1f);

//                                    Rectangle curImg = new Rectangle(playerImg/22*39, 0, 39, 20);
//                                    Vector2 vector = new Vector2(PlayerX-11, PlayerY+8);

//                                    if (TextureSwimmingClothesFeet!=null) spriteBatch.Draw(TextureSwimmingClothesFeet, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 1f);
//                                    else spriteBatch.Draw(TexturePlayerSwimmingFeet, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);

//                                    if (TextureSwimmingClothesLegs!=null) {
//                                        if (TextureSwimmingClothesLegs==TextureSwimmingShorts||TextureSwimmingClothesLegs==TextureSwimmingBlackSkirt||TextureSwimmingClothesLegs==TextureSwimmingPinkSkirt) spriteBatch.Draw(TexturePlayerSwimmingLegsWoman, vector, curImg, Color.White);
//                                        spriteBatch.Draw(TextureSwimmingClothesLegs, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                    } else {
//                                        spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                        if (TextureSwimmingClothesDownUnderwear!=null) {
//                                            if (TextureSwimmingClothesChest!=TextureSwimmingBlueDress&&TextureSwimmingClothesChest!=TextureSwimmingWhiteDress) spriteBatch.Draw(TextureSwimmingClothesDownUnderwear, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                        } else {
//                                            if (Global.YoungPlayer) spriteBatch.Draw(TextureSwimmingDownCensored, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                        }
//                                    }

//                                    spriteBatch.Draw(TexturePlayerWalkingHead, new Vector2(PlayerX-11+5-2+1+4-3+5, PlayerY-39/2-1+40-5-1), null, Color.White, 3.14f/2f, Vector2.Zero, 1, SpriteEffects.FlipVertically, 0);
//                                    if (TextureStaticClothesHead!=null) spriteBatch.Draw(TextureStaticClothesHead, new Vector2(PlayerX-11/*+2*/+1+4-3-5, PlayerY-39/2-2+20+20+10), null, Color.White, 3.14f/2f*3, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);

//                                    if (TextureSwimmingClothesChestTop==null||TextureSwimmingClothesChestTop==TextureSwimmingJacketShort) {
//                                        if (TextureSwimmingClothesChest!=null) spriteBatch.Draw(TextureSwimmingClothesChest, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                        else {
//                                            spriteBatch.Draw(TexturePlayerSwimmingChest, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                            if (TextureSwimmingClothesUpUnderwear!=null) spriteBatch.Draw(TextureSwimmingClothesUpUnderwear, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                            else {
//                                                if (Setting.sex==Sex.Girl) {
//                                                    if (Global.YoungPlayer) {
//                                                        if (Setting.MaturePlayer) spriteBatch.Draw(TextureSwimmingUpCensored, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                                    }
//                                                }
//                                            }

//                                        }
//                                    }
//                                    if (TextureSwimmingClothesChestTop!=null) spriteBatch.Draw(TextureSwimmingClothesChestTop, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                }
//                                break;

//                                case 2://->
//                                       //    spriteBatch.Draw(playerRightSwimmingTexture, new Vector2(PlayerX-11, PlayerY+8), new Rectangle(playerImg/22*39, 0, 39, 20), Color.White,0,Vector2.Zero,1,SpriteEffects.None,1f);
//                                       {
//                                    //  spriteBatch.Draw(playerRightSwimmingTexture, new Vector2(PlayerX-11, PlayerY+8), new Rectangle(playerImg/22*39, 0, 39, 20), Color.White,0,Vector2.Zero,1,SpriteEffects.None,1f);

//                                    Rectangle curImg = new Rectangle(playerImg/22*39, 0, 39, 20);
//                                    Vector2 vector = new Vector2(PlayerX-11, PlayerY+8);

//                                    if (TextureSwimmingClothesFeet!=null) spriteBatch.Draw(TextureSwimmingClothesFeet, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 1f);
//                                    else spriteBatch.Draw(TexturePlayerSwimmingFeet, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);

//                                    if (TextureSwimmingClothesLegs!=null) {
//                                        if (TextureSwimmingClothesLegs==TextureSwimmingShorts||TextureSwimmingClothesLegs==TextureSwimmingBlackSkirt||TextureSwimmingClothesLegs==TextureSwimmingPinkSkirt) spriteBatch.Draw(TexturePlayerSwimmingLegsWoman, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        spriteBatch.Draw(TextureSwimmingClothesLegs, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                    } else {
//                                        spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        if (TextureSwimmingClothesDownUnderwear!=null) {
//                                            if (TextureSwimmingClothesChest!=TextureSwimmingBlueDress&&TextureSwimmingClothesChest!=TextureSwimmingWhiteDress) spriteBatch.Draw(TextureSwimmingClothesDownUnderwear, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        } else {
//                                            if (Global.YoungPlayer) spriteBatch.Draw(TextureSwimmingDownCensored, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        }
//                                    }

//                                    spriteBatch.Draw(TexturePlayerWalkingHead, new Vector2(PlayerX-11/*+5-2+1+4-3+5+20*/+30+6+2+2, PlayerY-39/2/*-1+40-5-1*/+30+3), null, Color.White, 3.14f/2f, Vector2.Zero, 1, SpriteEffects.None, 0);
//                                    if (TextureStaticClothesHead!=null) spriteBatch.Draw(TextureStaticClothesHead, new Vector2(PlayerX-11/*+2*/+1+4-3+20+10+5+2+2, PlayerY-39/2-2+20+5+2+2), null, Color.White, 3.14f/2f, Vector2.Zero, 1, SpriteEffects.None, 0);

//                                    if (TextureSwimmingClothesChestTop==null||TextureSwimmingClothesChestTop==TextureSwimmingJacketShort) {
//                                        if (TextureSwimmingClothesChest!=null) spriteBatch.Draw(TextureSwimmingClothesChest, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);

//                                        else {
//                                            spriteBatch.Draw(TexturePlayerSwimmingChest, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                            if (TextureSwimmingClothesUpUnderwear!=null) spriteBatch.Draw(TextureSwimmingClothesUpUnderwear, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                            else {
//                                                if (Setting.sex==Sex.Girl) {
//                                                    if (Global.YoungPlayer) {
//                                                        if (Setting.MaturePlayer) spriteBatch.Draw(TextureSwimmingUpCensored, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                    if (TextureSwimmingClothesChestTop!=null) spriteBatch.Draw(TextureSwimmingClothesChestTop, vector, curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                }
//                                break;
//                            }
//                        } else {
//                            switch (playerState) {
//                                default:
//                                    if (TextureStaticClothesLegs!=null) {
//                                        if (TextureStaticClothesLegs==TextureStaticShorts||TextureStaticClothesLegs==TextureStaticBlackSkirt||TextureStaticClothesLegs==TextureStaticPinkSkirt) spriteBatch.Draw(TexturePlayerStaticLegs, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                        spriteBatch.Draw(TextureStaticClothesLegs, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                    } else {
//                                        spriteBatch.Draw(TexturePlayerStaticLegs, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                        if (TextureStaticClothesDownUnderwear!=null) {
//                                            if (TextureStaticClothesChest!=TextureStaticBlueDress&&TextureStaticClothesChest!=TextureStaticWhiteDress) spriteBatch.Draw(TextureStaticClothesDownUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                        } else {
//                                            if (Global.YoungPlayer) spriteBatch.Draw(TextureStaticDownCensored, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                        }
//                                    }
//                                    if (TextureStaticClothesChestTop==null||TextureStaticClothesChestTop==TextureStaticJacketShort) {
//                                        if (TextureStaticClothesChest!=null) spriteBatch.Draw(TextureStaticClothesChest, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                        else {
//                                            spriteBatch.Draw(TexturePlayerStaticChest, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                            if (TextureStaticClothesUpUnderwear!=null) spriteBatch.Draw(TextureStaticClothesUpUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                            else {
//                                                if (Setting.sex==Sex.Girl) {
//                                                    if (Global.YoungPlayer) {
//                                                        if (Setting.MaturePlayer) spriteBatch.Draw(TextureStaticUpCensored, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }

//                                    if (TextureStaticClothesChestTop!=null) spriteBatch.Draw(TextureStaticClothesChestTop, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);

//                                    if (TextureStaticClothesFeet!=null) spriteBatch.Draw(TextureStaticClothesFeet, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);
//                                    else spriteBatch.Draw(TexturePlayerStaticFeet, new Vector2(PlayerX-11, PlayerY-39/2), Color.White);

//                                    spriteBatch.Draw(TexturePlayerStaticHead, new Vector2(PlayerX-11, PlayerY-39/2-1), Color.White);
//                                    if (TextureStaticClothesHead!=null) spriteBatch.Draw(TextureStaticClothesHead, new Vector2(PlayerX-11, PlayerY-39/2-2), Color.White);
//                                    break;

//                                case 2: {
//                                    Rectangle curImg = new Rectangle((playerImg/20)*20, 0, 20, 39);

//                                    if (TextureWalkingClothesFeet!=null) spriteBatch.Draw(TextureWalkingClothesFeet, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                    else spriteBatch.Draw(TexturePlayerWalkingFeet, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);

//                                    if (TextureWalkingClothesLegs!=null) {
//                                        if (TextureWalkingClothesLegs==TextureWalkingShorts||TextureWalkingClothesLegs==TextureWalkingBlackSkirt||TextureWalkingClothesLegs==TextureWalkingPinkSkirt) spriteBatch.Draw(TexturePlayerWalkingLegsWoman, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        spriteBatch.Draw(TextureWalkingClothesLegs, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                    } else {
//                                        spriteBatch.Draw(TexturePlayerWalkingLegs, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        if (TextureWalkingClothesDownUnderwear!=null) {
//                                            if (TextureWalkingClothesChest!=TextureWalkingBlueDress&&TextureWalkingClothesChest!=TextureWalkingWhiteDress) spriteBatch.Draw(TextureWalkingClothesDownUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        } else {
//                                            if (Global.YoungPlayer) spriteBatch.Draw(TextureWalkingDownCensored, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        }
//                                    }
//                                    if (TextureWalkingClothesChestTop==null||TextureWalkingClothesChestTop==TextureWalkingJacketShort) {
//                                        if (TextureWalkingClothesChest!=null) spriteBatch.Draw(TextureWalkingClothesChest, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        else {
//                                            spriteBatch.Draw(TexturePlayerWalkingChest, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                            if (TextureWalkingClothesUpUnderwear!=null) spriteBatch.Draw(TextureWalkingClothesUpUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                            else {
//                                                if (Setting.sex==Sex.Girl) {
//                                                    if (Global.YoungPlayer) {
//                                                        if (Setting.MaturePlayer) spriteBatch.Draw(TextureWalkingUpCensored, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }

//                                    if (TextureWalkingClothesChestTop!=null) spriteBatch.Draw(TextureWalkingClothesChestTop, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);


//                                    spriteBatch.Draw(TexturePlayerWalkingHead, new Vector2(PlayerX-11+5-2+1, PlayerY-39/2-1), Color.White);
//                                    if (TextureWalkingClothesHead!=null) spriteBatch.Draw(TextureWalkingClothesHead, new Vector2(PlayerX-11+5-1-2+1, PlayerY-39/2-2), Color.White);
//                                }
//                                break;

//                                case 1: {
//                                    Rectangle curImg = new Rectangle((playerImg/20)*20, 0, 20, 39);

//                                    if (TextureWalkingClothesFeet!=null) spriteBatch.Draw(TextureWalkingClothesFeet, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                    else spriteBatch.Draw(TexturePlayerWalkingFeet, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);

//                                    if (TextureWalkingClothesLegs!=null) {
//                                        if (TextureWalkingClothesLegs==TextureWalkingShorts||TextureWalkingClothesLegs==TextureWalkingBlackSkirt||TextureWalkingClothesLegs==TextureWalkingPinkSkirt) spriteBatch.Draw(TexturePlayerWalkingLegsWoman, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White);
//                                        spriteBatch.Draw(TextureWalkingClothesLegs, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                    } else {
//                                        spriteBatch.Draw(TexturePlayerWalkingLegs, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        if (TextureWalkingClothesDownUnderwear!=null) {
//                                            if (TextureWalkingClothesChest!=TextureWalkingBlueDress&&TextureWalkingClothesChest!=TextureWalkingWhiteDress) spriteBatch.Draw(TextureWalkingClothesDownUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        } else {
//                                            if (Global.YoungPlayer) spriteBatch.Draw(TextureWalkingDownCensored, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        }
//                                    }
//                                    if (TextureWalkingClothesChestTop==null||TextureWalkingClothesChestTop==TextureWalkingJacketShort) {
//                                        if (TextureWalkingClothesChest!=null) spriteBatch.Draw(TextureWalkingClothesChest, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                        else {
//                                            spriteBatch.Draw(TexturePlayerWalkingChest, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                            if (TextureWalkingClothesUpUnderwear!=null) spriteBatch.Draw(TextureWalkingClothesUpUnderwear, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                            else {
//                                                if (Setting.sex==Sex.Girl) {
//                                                    if (Global.YoungPlayer) {
//                                                        if (Setting.MaturePlayer) spriteBatch.Draw(TextureWalkingUpCensored, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                    if (TextureWalkingClothesChestTop!=null) spriteBatch.Draw(TextureWalkingClothesChestTop, new Vector2(PlayerX-11, PlayerY-39/2), curImg, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);


//                                    spriteBatch.Draw(TexturePlayerWalkingHead, new Vector2(PlayerX-11+5-2+1+4-3, PlayerY-39/2-1), null, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                    if (TextureWalkingClothesHead!=null) spriteBatch.Draw(TextureWalkingClothesHead, new Vector2(PlayerX-11/*+2*/+1+4-3, PlayerY-39/2-2), null, Color.White, 0, Vector2.Zero, 1, SpriteEffects.FlipHorizontally, 0);
//                                }
//                                break;
//                            }
//                        }
//                    }
//                    #endregion

//                    for (int i = 0; i<players.Count; i++) {
//                        Player p = players[i];
//                        if (p!=null) {
//                            spriteBatch.Draw(playerTexture, new Vector2(p.x-11, p.y-20), Color.White);
//                            spriteBatch.DrawString(spriteFont_small, p.name, new Vector2(p.x-spriteFont_small.MeasureString(p.name).X/2+11-11, p.y-20-15), Color.White);
//                        }
//                    }

//                    if (debug) {
//                        foreach (Energy r in energy) r.Draw();
//                        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(mousePosRound.X, mousePosRound.Y, 16, 16), null, color_r200_g200_b200_a100);
//                    }
//                    spriteBatch.End();

//                    // Draw lighting on game
//                    spriteBatch.Begin(SpriteSortMode.Deferred, Multiply);
//                    spriteBatch.Draw(modificatedLightTarget, Vector2.Zero, Color.White);
//                    spriteBatch.End();
//                    #endregion

//                    #region Draw inv
//                    if (showInventory) {
//                        spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp);

//                        #region Draw Bars
//                        if (Global.WorldDifficulty!=2) {
//                            // Energy bar
//                            spriteBatch.Draw(barEnergyTexture, new Vector2(Global.WindowWidth-150-36, 8), new Rectangle(0, 0, 32, (int)barEnergy), Color.Gray);
//                            spriteBatch.Draw(barEnergyTexture, new Vector2(Global.WindowWidth-150-36, 8+(int)barEnergy), new Rectangle(0, (int)barEnergy, 32, 32-(int)barEnergy), Color.White);

//                            // Oxygen bar
//                            spriteBatch.Draw(barOxygenTexture, new Vector2(Global.WindowWidth-150, 8), new Rectangle(0, 0, 32, (int)barOxygen), Color.Gray);
//                            spriteBatch.Draw(barOxygenTexture, new Vector2(Global.WindowWidth-150, 8+(int)barOxygen), new Rectangle(0, (int)barOxygen, 32, 32-(int)barOxygen), Color.White);

//                            // Water bar
//                            spriteBatch.Draw(barWaterTexture, new Vector2(Global.WindowWidth-114, 8), new Rectangle(0, 0, 32, (int)barWater), Color.Gray);
//                            spriteBatch.Draw(barWaterTexture, new Vector2(Global.WindowWidth-114, 8+(int)barWater), new Rectangle(0, (int)barWater, 32, 32-(int)barWater), Color.White);

//                            // Eat bar
//                            spriteBatch.Draw(barEatTexture, new Vector2(Global.WindowWidth-78, 8), new Rectangle(0, 0, 32, (int)barEat), Color.Gray);
//                            spriteBatch.Draw(barEatTexture, new Vector2(Global.WindowWidth-78, 8+(int)barEat), new Rectangle(0, (int)barEat, 32, 32-(int)barEat), Color.White);

//                            // Heart bar
//                            spriteBatch.Draw(barHeartTexture, new Vector2(Global.WindowWidth-40, 8), new Rectangle(0, 0, 32, (int)barHeart), Color.Gray);
//                            spriteBatch.Draw(barHeartTexture, new Vector2(Global.WindowWidth-40, 8+(int)barHeart), new Rectangle(0, (int)barHeart, 32, 32-(int)barHeart), Color.White);
//                        }
//                        #endregion

//                        #region Draw Inventory
//					switch (inventory) {

//						#region Normal
//						case InventoryType.Normal:
//							if (diserpeard!=0) {
//								if (gedo!=null) {
//									#if DEBUG
//									if (text.StartsWith("*time-set ")) {
//										if (int.TryParse(text.Substring("*time-set ".Length), out int num)){
//											time=num*hour; 
//										} else if (float.TryParse(text.Substring("*time-set ".Length), out float num2)){
//											time=(int)(num2*hour); 
//										}
//										text="";
//										diserpeard=0;
//									} 
//									if (text.StartsWith("*day-set ")){
//										if (int.TryParse(text.Substring("*day-set ".Length), out int num)){
//											day=num; 
//											ChangeLeavesForceEverything();
//										}
//										text="";
//										diserpeard=0;
//									} 
//									if (text=="*give-mobile") {
//										InventoryAddOne((ushort)Items.Mobile);
//										text="";
//										diserpeard=0;text="";diserpeard=0;
//									} 
//									if (text=="*wd0") {
//										Global.WorldDifficulty=0;text="";diserpeard=0;
//									} 
//									if (text=="*wd1") {
//										Global.WorldDifficulty=1;text="";diserpeard=0;
//									} 
//									if (text=="*wd2") {
//										Global.WorldDifficulty=2;text="";diserpeard=0;
//									} 
//									if (text=="*rain-change") {
//										changeRain=1;
//										text="";diserpeard=0;
//									} 
//									if (text=="*wind-change") {
//										timeToChageWind=1;
//										text="";diserpeard=0;
//									}
//									#endif
//									if (text.StartsWith("*error")) {
//										throw new Exception("Manual error");
//									} 
//									int meas=BitmapFont.bitmapFont18.MeasureTextSingleLineX(gedo.Text);
//									int texts=meas/2;
//									int x=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);
//									gedo.SetPos(x-texts+20-10-5,Global.WindowHeightHalf-40-50-4);
//									if (diserpeard>100) {
//										spriteBatch.Draw(messageLeft,new Vector2(x-texts-10,Global.WindowHeightHalf-55-50), ColorWhite);
//										spriteBatch.Draw(messageCenter,new Rectangle(x-texts+19-10,Global.WindowHeightHalf-55-50,texts*2,57), ColorWhite);
//										spriteBatch.Draw(messageRight,new Vector2(x+texts+19-10,Global.WindowHeightHalf-55-50), ColorWhite);

//										gedo.DrawGedo(1f,spriteBatch);
//									} else {
//										float alphaC =diserpeard/100f;
//										Color alphaCC=new Color(alphaC,alphaC,alphaC,alphaC);

//										spriteBatch.Draw(messageLeft,new Vector2(x-texts-10,Global.WindowHeightHalf-55-50), alphaCC);
//										spriteBatch.Draw(messageCenter,new Rectangle(x-texts+19-10,Global.WindowHeightHalf-55-50,texts*2,57), alphaCC);
//										spriteBatch.Draw(messageRight,new Vector2(x+texts+19-10,Global.WindowHeightHalf-55-50), alphaCC);

//										gedo.DrawGedo(alphaC,spriteBatch);
//									}
//								}
//							}

//							#region Basic right inventory
//							{
//								int w=Global.WindowWidth-40, h=Global.WindowHeightHalf-80;
//								for (int i = 0; i<5; i++) {
//									if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(w, h+i*40), ColorLightBlue);
//									else spriteBatch.Draw(inventorySlotTexture, new Vector2(w, h+i*40), ColorWhite);
//								}
//							}

//							for (int i = 0; i<5; i++) InventoryNormal[i].Draw();
//							#endregion

//							break;
//						#endregion

//						#region Writing message
//						case InventoryType.Typing:
//							{
//								int xx=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);

//								int half=textWriting.X/2;
//								spriteBatch.Draw(messageLeft,new Vector2(xx-half-10,Global.WindowHeightHalf-55-50), ColorWhite);
//								spriteBatch.Draw(messageCenter,new Rectangle(xx-half+19-10,Global.WindowHeightHalf-55-50,textWriting.X,57), ColorWhite);
//								spriteBatch.Draw(messageRight,new Vector2(xx+half+19-10,Global.WindowHeightHalf-55-50), ColorWhite);

//								textWriting.Draw(spriteBatch);

//								spriteBatch.Draw(pixel,new Rectangle(xx+half+20-10,Global.WindowHeightHalf-40-50+3,1,15),black);

//								DrawSideInventory();
//							}
//							break;
//						#endregion

//						#region Basic inventory - clothes, inventory and basic crafting
//						case InventoryType.BasicInv:
//							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(TextureInventoryClothes,new Vector2(Global.WindowWidthHalf-300+4+60, Global.WindowHeightHalf-200+2+4), ColorWhite);
//							textOpenInventory.Draw(spriteBatch);

//							DrawInventoryWithDIntMoving();
//							InventoryDrawClothes();

//							#region Crafting
//							{
//								if (inventoryScrollbarValueCraftingMax>6*4) {
//									int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );

//									int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / (inventoryScrollbarValueCraftingMax-6*3)*(160-size2) )*8;
//									if (size2>20) {
//										spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//									} else {
//										spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//									}
//								}

//								int xx =0;
//								int yh=0;

//								for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//									if (i>inventoryScrollbarValueCraftingMax) break;
//									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

//									if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//									} else {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//									}

//									InventoryCrafting[i].DrawCreative();
//									//Texture2D tex=ItemIdToTexture(InventoryCrafting[i].X);
//									//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//									xx+=40;

//									if (xx==6*40) {
//										xx=0;
//										yh+=40;
//									}
//								}
//							}
//							#endregion

//							DrawNeedNew();

//							buttonInvTabBlocks.ButtonDraw();
//							buttonInvTabMashines.ButtonDraw();
//							buttonInvTabTools.ButtonDraw();
//							buttonInvTabPlants.ButtonDraw();
//							buttonInvTabItems.ButtonDraw();

//							DrawSideInventory();

//							if (displayPopUpWindow)DrawChooseItemWindow();
//							else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region Desk
//						case InventoryType.Desk:
//							spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(deskTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//							textOpenInventory.Draw(spriteBatch);

//							DrawInventoryNormal();

//							#region Crafting
//							{
//								if (inventoryScrollbarValueCraftingMax>6*4) {
//									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);

//									int pos2 = (int)(((float)(inventoryScrollbarValueCrafting*5/40f)/(inventoryScrollbarValueCraftingMax-3*6))*(160-size2));
//									if (size2>20) {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//									} else {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//									}
//								}

//								int xx =0;
//								int yh=0;

//								for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//									if (i>inventoryScrollbarValueCraftingMax) break;
//									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//										//if (mouseLeftRelease) {
//										//    selectedCraftingItem=i;

//										//    craftingType=0;
//										//    DListInt[]x=GameMethods.Craft(Crafting[selectedCraftingItem].X);
//										//    if (x!=null) Need=x[craftingType].List1;
//										//}
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8),color_r200_g200_b200);
//									} else {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//									}
//									InventoryCrafting[i].DrawCreative();
//									//Texture2D tex=ItemIdToTexture(InventoryCrafting[i].X);
//									//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//									xx+=40;

//									if (xx==6*40) {
//										xx=0;
//										yh+=40;
//									}
//								}
//							}
//							#endregion

//							DrawNeedNew();

//							buttonInvTabBlocks.ButtonDraw();
//							buttonInvTabMashines.ButtonDraw();
//							buttonInvTabTools.ButtonDraw();
//							buttonInvTabPlants.ButtonDraw();
//							buttonInvTabItems.ButtonDraw();

//							DrawSideInventory();

//							if (displayPopUpWindow)DrawChooseItemWindow();
//							else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region Furnace stone
//						case InventoryType.FurnaceStone:
//							{
//								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								ItemInv[] inv=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;
//								float energy=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy;

//								spriteBatch.Draw(furnaceStoneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200),new Rectangle(energy>0 ?0 :16,0,16,16), ColorWhite);

//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-2, Global.WindowHeightHalf-200+2+4-6,202+2,5),black);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-1, Global.WindowHeightHalf-200+2+4-5,(int)(energy*2.02),3),Color.Green);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-1+(int)(energy*2.02),Global.WindowHeightHalf-200+2+4-5,202-(int)(energy*2.02),3),Color.Red);
//								textOpenInventory.Draw(spriteBatch);

//								DrawInventoryWithDIntMoving();

//								#region Bake
//								{
//									if (inventoryScrollbarValueCraftingMax>6*4) {
//										int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
//										int pos2 = (int)(((inventoryScrollbarValueCrafting*5/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
//										if (size2>20) {
//											spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//											spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
//											spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//										} else {
//											spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//											spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//										}
//									}

//									int xx = 0;
//									int yh = 0;

//									for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//										if (i>inventoryScrollbarValueCraftingMax) break;
//										if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//										//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//										//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//											//if (mouseLeftRelease) {
//											//    selectedCraftingItem=i;
//											//    craftingType=0;
//											//    DListInt[] x = GameMethods.Bake(Crafting[selectedCraftingItem].X);
//											//    if (x!=null) Need=x[craftingType].List1;
//											//}
//											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//											else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//										} else {
//											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//											else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//										}
//										InventoryCrafting[i].Draw();
//										//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
//										//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//										xx+=40;

//										if (xx==6*40) {
//											xx=0;
//											yh+=40;
//										}
//									}
//								}
//								#endregion

//								DrawNeedNew();
//								#region burn wood
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40*2+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40+40, Global.WindowHeightHalf-200+2+4+60+40+8), ColorWhite*0.5f);
//								spriteBatch.Draw(ashTexture, new Rectangle(Global.WindowWidthHalf-300+4+1+40+40+4, Global.WindowHeightHalf-200+2+4+60+40+8+4,32,32), ColorWhite*0.25f);

//								inv[0].Draw();
//								inv[1].Draw();
//								inv[2].Draw();
//								inv[3].Draw();
//								#endregion

//								buttonInvTabMaterials.ButtonDraw();
//								buttonInvTabGlass.ButtonDraw();
//								buttonInvTabCeramics.ButtonDraw();
//								buttonInvTabFood.ButtonDraw();
//								buttonInvTabTools.ButtonDraw();

//								DrawSideInventory();

//								if (displayPopUpWindow)DrawChooseItemWindow();
//								else if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//								if (buttonClose.Update()) inventory=0;
//							}
//							break;
//							#endregion

//						#region Furnace electric
//						case InventoryType.FurnaceElectric:
//							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(furnaceElectricOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//							textOpenInventory.Draw(spriteBatch);
//							DrawInventoryNormal();

//							#region Bake
//							{
//								if (inventoryScrollbarValueCraftingMax>6*4) {
//									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
//									int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
//									if (size2>20) {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//									} else {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//									}
//								}

//								int xx = 0;
//								int yh = 0;

//								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//									if (i>inventoryScrollbarValueCraftingMax) break;
//									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//									} else {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//									}
//									InventoryCrafting[i].Draw();
//								   // Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
//								   // if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//									xx+=40;

//									if (xx==6*40) {
//										xx=0;
//										yh+=40;
//									}
//								}
//							}
//							#endregion

//							DrawNeedNew();

//							buttonInvTabMaterials.ButtonDraw();
//							buttonInvTabGlass.ButtonDraw();
//							buttonInvTabCeramics.ButtonDraw();
//							buttonInvTabFood.ButtonDraw();
//							buttonInvTabTools.ButtonDraw();

//							DrawSideInventory();
//							if (displayPopUpWindow)DrawChooseItemWindow();
//							else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region Macerator
//						case InventoryType.Macerator:
//							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255 );
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(maceratorOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//							textOpenInventory.Draw(spriteBatch);

//							DrawInventoryNormal();

//							#region ToDust
//							{
//								if (inventoryScrollbarValueCraftingMax>6*4) {
//									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
//									int pos2 = (int)(((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax*(160-size2))*8;
//									if (size2>20) {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//									} else {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//									}
//								}

//								int xx = 0;
//								int yh = 0;

//								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//									if (i>inventoryScrollbarValueCraftingMax) break;
//									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//									} else {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//									}
//									InventoryCrafting[i].Draw();
//									//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
//									//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//									xx+=40;

//									if (xx==6*40) {
//										xx=0;
//										yh+=40;
//									}
//								}
//							}
//							#endregion

//							DrawNeedNew();

//							buttonInvTabMaterials.ButtonDraw();
//							buttonInvTabPlants.ButtonDraw();
//							buttonInvTabTools.ButtonDraw();
//							buttonInvTabItems.ButtonDraw();
//							buttonInvTabCeramics.ButtonDraw();

//							DrawSideInventory();
//							if (displayPopUpWindow)DrawChooseItemWindow();
//							else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region Creative
//						case InventoryType.Creative:
//							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2+30,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434+30,1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2+30), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(TextureInventoryClothes, new Vector2(Global.WindowWidthHalf-300+4+60, Global.WindowHeightHalf-200+2+4), ColorWhite);

//							textOpenInventory.Draw(spriteBatch);

//							int AddH=35;
//							DrawInventoryWithDIntMoving();
//							InventoryDrawClothes();

//							if (creativeTabCrafting) {
//								#region Crafting
//								{
//									if (inventoryScrollbarValueCraftingMax>6*4) {
//										int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
//										int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / (inventoryScrollbarValueCraftingMax-6*3)*(160-size2) )*8+50-15;
//										if (size2>20) {
//											spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//											spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), ColorWhite);
//											spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//										} else {
//											spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//											spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//										}
//									}

//									int xx =0;
//									int yh=0;

//									for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//										if (i>inventoryScrollbarValueCraftingMax) break;

//										if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH)) {
//											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r128_g128_b128);
//											else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r200_g200_b200);
//										} else {
//											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r150_g150_b150);
//											else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), ColorWhite);
//										}
//									 //   InventoryCrafting[i].SetPos(xx,yh);
//										InventoryCrafting[i].DrawCreative();
//										//Texture2D tex=ItemIdToTexture(InventoryInventoryCrafting[i].X);
//										//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8+AddH);
//										xx+=40;

//										if (xx==6*40) {
//											xx=0;
//											yh+=40;
//										}
//									}
//								}
//								#endregion

//								DrawNeedNewPlus();
//							}

//							buttonInvTabBlocks.ButtonDraw();
//							buttonInvTabMashines.ButtonDraw();
//							buttonInvTabTools.ButtonDraw();
//							buttonInvTabPlants.ButtonDraw();
//							buttonInvTabItems.ButtonDraw();

//							DrawSideInventory();

//							if (creativeTabCrafting) {
//								ButtonCrafting.ButtonDrawSelected();
//								ButtonItems.ButtonDraw();
//							} else {
//								DrawCreative();
//								ButtonCrafting.ButtonDraw();
//								ButtonItems.ButtonDrawSelected();
//							}

//							if (displayPopUpWindow)DrawChooseItemWindow();
//							else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region Shelf
//						case InventoryType.Shelf:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(shelfTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);
//								ItemInv[] invShelf=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Shelf inventory
//								{
//								  //  int i=0;
//									for (int y = 0; y<3*40; y+=40) {
//										for (int x = 0; x<3*40; x+=40) {
//											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+x+20+5+1+2, Global.WindowHeightHalf+20-2+y+20+3+2), ColorWhite);

//										  //  if (!invMove||(invMove && invStartInventory[invStartId]!=invShelf[i])) {

//												//Texture2D tex = ItemIdToTexture(invShelf[i].X);
//												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invShelf[i], Global.WindowWidthHalf-300+10+x+20+5+1+2+4, Global.WindowHeightHalf+20-2+y+20+3+2+4);
//											//}
//										  //  i++;
//										}
//									}

//									invShelf[0].Draw();
//									invShelf[1].Draw();
//									invShelf[2].Draw();

//									invShelf[3].Draw();
//									invShelf[4].Draw();
//									invShelf[5].Draw();

//									invShelf[6].Draw();
//									invShelf[7].Draw();
//									invShelf[8].Draw();
//								}
//								#endregion

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Wooden box
//						case InventoryType.BoxWooden:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(boxWoodenTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);
//								ItemInv[] invBoxWooden=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Box
//								{
//									int i=0;
//									for (int y = 0; y<2*40; y+=40) {
//										for (int x = 0; x<12*40; x+=40) {
//											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+x+59, Global.WindowHeightHalf+59+y), ColorWhite);

//										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invBoxWooden[i])) {
//											invBoxWooden[i].Draw();
//												//Texture2D tex = ItemIdToTexture(invBoxWooden[i].X);
//												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invBoxWooden[i], Global.WindowWidthHalf-300+x+63,  Global.WindowHeightHalf+y+63);
//											//}
//											i++;
//										}
//									}
//								}
//								#endregion

//								 if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Adv box
//						case InventoryType.BoxAdv:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(boxAdvTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);

//								textOpenInventory.Draw(spriteBatch);
//								ItemInv[] invAdvBox=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Box
//								{
//									int i=0;
//									for (int y = 0; y<4*40; y+=40) {
//										for (int x = 0; x<12*40; x+=40) {
//											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+20+x, Global.WindowHeightHalf+23+y), ColorWhite);

//										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invAdvBox[i])) {
//											invAdvBox[i].Draw();
//												//Texture2D tex = ItemIdToTexture(invAdvBox[i].X);
//												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invAdvBox[i], Global.WindowWidthHalf-300+24+x, Global.WindowHeightHalf+23+4+y);
//											//}
//											i++;
//										}
//									}
//								}
//								#endregion

//							   if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//							#endregion

//						#region Phone
//						case InventoryType.Mobile:
//							spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234,304,464+2,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233,302,464,1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232,300,34), color_r10_g140_b255);

//							buttonClose.ButtonDraw();
//							textOpenInventory.Draw(spriteBatch);

//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430), black);
//							mobileOS.Draw(spriteBatch,Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430);
//							break;
//							#endregion

//						#region Rocket
//						case InventoryType.Rocket:
//							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234,304,464+2,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233,302,464,1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232,300,34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							textOpenInventory.Draw(spriteBatch);
//							spriteBatch.Draw(rocketTexture,new Rectangle(Global.WindowWidthHalf-62, Global.WindowHeightHalf-190,123,380), ColorWhite);

//							buttonRocket.ButtonDraw();
//							break;
//						#endregion

//						#region Charger
//						case InventoryType.Charger:
//							{
//								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(chargerTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);

//								ItemInv[] invCharger=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								#region Place for charging
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+40+20+5+1+2, Global.WindowHeightHalf+20-2+40+20+3+2), ColorWhite);

//							   // if (!invMove||(invMove&&invStartInventory[invStartId]!=invCharger[0])) {
//									invCharger[0].Draw();
//									//Texture2D tex = ItemIdToTexture(invCharger[0].X);
//									//if (tex!=null) GameDraw.DrawItemInInventory(tex, invCharger[0], Global.WindowWidthHalf-300+10+40+20+5+1+2+4, Global.WindowHeightHalf+20-2+40+20+3+2+4);
//							   // }
//								#endregion

//								DrawSideInventory();

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Miner
//						case InventoryType.Miner:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(minerTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);

//								ItemInv[] invMiner=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Box
//								{
//									int i=0;
//									for (int y = 0; y<2*40; y+=40) {
//										for (int x = 0; x<12*40; x+=40) {
//											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+x+59, Global.WindowHeightHalf+59+y), ColorWhite);

//										//    if (!invMove||(invMove&&invStartInventory[invStartId]!=invMiner[i])) {
//												invMiner[i].Draw();
//												//Texture2D tex = ItemIdToTexture(invMiner[i].Id);
//												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invMiner[i], Global.WindowWidthHalf-300+x+63,  Global.WindowHeightHalf+y+63);
//										  //  }
//											i++;
//										}
//									}
//								}
//								#endregion

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Radio
//						case InventoryType.Radio:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(radioTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200),new Rectangle(16*(int)(15*_secondTimer/60f),0,16,16), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);


//								if (radioSongs!=null) {
//									for (int i=0; i<radioSongs.Length; i++) {
//										BitmapFont.bitmapFont18.DrawText(spriteBatch,new FileInfo(radioSongs[i]).Name.Substring(0,(new FileInfo(radioSongs[i]).Name).LastIndexOf(".")),Global.WindowWidthHalf-300-2+10+240, Global.WindowHeightHalf-234+10+40+i*40,black);
//									}
//								}

//								if (radioplaying) {
//									spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2+400-50,600,50), ColorGray);
//									spriteBatch.Draw(RadioButtonPause,new Vector2(Global.WindowWidthHalf-24, Global.WindowHeightHalf-200+2+400-50), ColorWhite);
//								}
//							}
//							break;
//						#endregion

//						#region Composter
//						case InventoryType.Composter:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(ComposterFullTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);

//								ItemInv[] invComposter=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Composter inventory
//								{
//									int i=0;
//									for (int y = 0; y<3*40; y+=40) {
//										for (int x = 0; x<3*40; x+=40) {
//											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+x+20+5+1+2, Global.WindowHeightHalf+20-2+y+20+3+2), ColorWhite);

//										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invComposter[i])) {
//												invComposter[i].Draw();
//												//Texture2D tex = ItemIdToTexture(invComposter[i].X);
//												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invComposter[i], Global.WindowWidthHalf-300+10+x+20+5+1+2+4, Global.WindowHeightHalf+20-2+y+20+3+2+4);
//										   // }
//											i++;
//										}
//									}
//								}
//								#endregion

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region SewingMachine
//						case InventoryType.SewingMachine:
//							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//							buttonClose.ButtonDraw();

//							spriteBatch.Draw(sewingMachineTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//							textOpenInventory.Draw(spriteBatch);

//							DrawInventoryNormal();

//							#region Clothes
//							{
//								if (inventoryScrollbarValueCraftingMax>6*4) {
//									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
//									int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
//									if (size2>20) {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
//									} else {
//										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
//										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
//									}
//								}

//								int xx = 0;
//								int yh = 0;

//								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//									if (i>inventoryScrollbarValueCraftingMax) break;
//									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//									} else {
//										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
//									}
//									InventoryCrafting[i].Draw();
//									//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
//									//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//									xx+=40;

//									if (xx==6*40) {
//										xx=0;
//										yh+=40;
//									}
//								}
//							}
//							#endregion


//							DrawNeedNew();

//							buttonInvHead.ButtonDraw();
//							buttonInvChest.ButtonDraw();
//							buttonInvLegs.ButtonDraw();
//							buttonInvShoes.ButtonDraw();
//							buttonInvUnderwear.ButtonDraw();

//							DrawSideInventory();
//							if (displayPopUpWindow)DrawChooseItemWindow();
//						   else if (showMouseItemWhileMooving) InvMouseDraw();
//							else if (mouseDrawItemTextInfo) DrawItemMouse();
//							break;
//						#endregion

//						#region OxygenMachine
//						case InventoryType.OxygenMachine:
//							{
//								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(TextureOxygenMachine, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);

//								ItemInv[] invOxygenMachine=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

//								DrawInventoryWithDIntMoving();

//								#region Place for charging
//								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+40+20+5+1+2, Global.WindowHeightHalf+20-2+40+20+3+2), ColorWhite);

//							   // if (!invMove||(invMove&&invStartInventory[invStartId]!=invOxygenMachine[0])) {
//									invOxygenMachine[0].Draw();
//								//}
//								#endregion

//								DrawSideInventory();

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Barrel
//						case InventoryType.Barrel:
//							{
//								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

//								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

//								buttonClose.ButtonDraw();

//								spriteBatch.Draw(TextureBarrel, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
//								textOpenInventory.Draw(spriteBatch);
//								Barrel barrel=(Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];
//								ItemInv[] invBarrel=barrel.Inv;

//								DrawInventoryWithDIntMoving();

//								DrawSideInventory();

//								#region Barel inventory
//								Vector2 vec=new Vector2(Global.WindowWidthHalf-300+119, Global.WindowHeightHalf-198+250);
//								// In
//								spriteBatch.Draw(inventorySlotInTexture, vec, ColorWhite);
//								invBarrel[0].Draw();

//								// Out
//								vec.Y+=64;
//								spriteBatch.Draw(inventorySlotOutTexture, vec, ColorWhite);
//								invBarrel[1].Draw();

//								//bar
//								spriteBatch.Draw(TextureBarBarrel, new Vector2(Global.WindowWidthHalf-300+4+42, Global.WindowHeightHalf-200+2+4+217), ColorWhite);

//								int a=(int)(barrel.LiquidAmount/255f*146);

//								switch (barrel.LiquidId) {
//									case (byte)LiquidId.Water:
//										spriteBatch.Draw(waterTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a),new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
//										break;

//									case (byte)LiquidId.WaterSalt:
//										spriteBatch.Draw(waterTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a),new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
//										break;

//									case (byte)LiquidId.Lava:
//										spriteBatch.Draw(lavaTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
//										break;

//									case (byte)LiquidId.DyeArmy:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(34,48,17));
//										break;

//									case (byte)LiquidId.DyeBlack:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Black);
//										break;

//									case (byte)LiquidId.DyeBlue:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Blue);
//										break;

//									case (byte)LiquidId.DyeBrown:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Brown);
//										break;

//									case (byte)LiquidId.DyeGray:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Gray);
//										break;

//									case (byte)LiquidId.DyeWhite:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.White);
//										break;

//									case (byte)LiquidId.DyeYellow:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Yellow);
//										break;

//									case (byte)LiquidId.DyeViolet:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Violet);
//										break;

//									case (byte)LiquidId.DyeTeal:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Teal);
//										break;

//									case (byte)LiquidId.DyeSpringGreen:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(143, 225, 44));
//										break;

//									case (byte)LiquidId.DyeRoseQuartz:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(170, 152, 169));
//										break;

//									case (byte)LiquidId.DyeRed:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Red);
//										break;

//									case (byte)LiquidId.DyeDarkRed:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkRed);
//										break;

//									case (byte)LiquidId.DyePurple:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Purple);
//										break;

//									case (byte)LiquidId.DyePink:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Pink);
//										break;

//									case (byte)LiquidId.DyeOrange:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Orange);
//										break;

//									case (byte)LiquidId.DyeOlive:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Olive);
//										break;

//									case (byte)LiquidId.DyeMagenta:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Magenta);
//										break;

//									case (byte)LiquidId.DyeLightGreen:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightGreen);
//										break;

//									case (byte)LiquidId.DyeLightGray:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightGray);
//										break;

//									case (byte)LiquidId.DyeLightBlue:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightBlue);
//										break;

//									case (byte)LiquidId.DyeGreen:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Green);
//										break;

//									case (byte)LiquidId.DyeDarkGreen:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkGreen);
//										break;

//									case (byte)LiquidId.DyeGold:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Gold);
//										break;

//									case (byte)LiquidId.DyeDarkBlue:
//										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkBlue);
//										break;

//									default:
//										spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
//										break;

//								}
//								#endregion

//								if (showMouseItemWhileMooving) InvMouseDraw();
//								else if (mouseDrawItemTextInfo) DrawItemMouse();
//							}
//							break;
//						#endregion

//						#region Game menu
//						case InventoryType.GameMenu:
//							//spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

//							//DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
//							//DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
//							//spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
//							//spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);
						
//							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));
							
//							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234+50, 304, 464+2-100,1, color_r0_g0_b0_a100);
//							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233+50, 302, 464-100,  1, color_r0_g0_b0_a200);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232+50,300,34), color_r10_g140_b255);
//							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198+50,300,430-100), ColorLightBlue);
//							textOpenInventory.Draw(spriteBatch);
//							// Exit button [X]
//							buttonClose.ButtonDraw();

						
//							// Continue game
//							buttonContinue.ButtonDraw();

//							// Exit game
//							buttonExit.ButtonDraw();
						
//							// Acheavements
//							buttonAcheavements.ButtonDraw();

//							// Use a gift code
//							buttonUseGiftCode.ButtonDraw();

							
//							break;
//						#endregion

//					}
//					#endregion

//                        #region Draw debug
//                        if (debug) {
//                            fpss+=1000f/(float)gameTime.ElapsedGameTime.TotalMilliseconds;
//                            timerDraw60--;
//                            if (timerDraw60<0) {
//                                timerDraw60=59;
//                                fps=fpss/60f;

//                                fpss=0;
//                            }
//                            if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) DrawTextShadowMin(5, 5, "< Informace pro vývojáře > (F1 skrýt)"+Environment.NewLine+"----------------------------------"+Environment.NewLine+
//                                "[Pozice hráče] X: "+PlayerX+", Y: "+PlayerY+Environment.NewLine+
//                                "[Pozice myše] X: "+(int)mousePos.X+", Y: "+(int)mousePos.Y+Environment.NewLine+
//                                Environment.NewLine+
//                                "[Velikost světa]: "+TerrainLenght+Environment.NewLine+
//                                "[Vykreslovací plocha] "+((terrainStartIndexW-terrainStartIndexX)*(terrainStartIndexH-terrainStartIndexY))+Environment.NewLine+
//                                "[Svět]: "+world+Environment.NewLine+
//                                "[Gravitační zrychlení]: "+(gravity*20)+Environment.NewLine+
//                                Environment.NewLine+
//                                "[Počet Itemů]: "+DroppedItems.Count+Environment.NewLine+
//                                "[Energie]:  "+energy.Count+Environment.NewLine+
//                                "[Čas]: "+time/hour+":"+((int)((time-(time/hour*hour))*(60f/hour))).ToString("00")+Environment.NewLine+
//                                "[Světlo]: "+dayAlpha+Environment.NewLine+
//                                "[Moon]: "+(moonSpeed/46)+Environment.NewLine+
//                                Environment.NewLine+
//                                "[Fps]:  "+(int)Math.Round(fps, 2)+Environment.NewLine+
//                                "[CPU] Proces: "+(usageCpuProcess/Environment.ProcessorCount).ToString("0.00")+"%, Volné cpu: "+(100-usageCpu).ToString("0.00")+"%"+Environment.NewLine+
//                                "[RAM] Proces: "+(usageRamProcess/1048576).ToString("0.00")+"MB, Volná ram: "+usageRam.ToString("0.00")+"MB"+Environment.NewLine, Color.White);
//                        } else if (Setting.Fps) {
//                            fpss+=1000f/(float)gameTime.ElapsedGameTime.TotalMilliseconds;
//                            timerDraw60--;
//                            if (timerDraw60<0) {
//                                timerDraw60=59;
//                                fps=fpss/60f;

//                                fpss=0;
//                            }
//                            if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) DrawTextShadowMin(5, 5, "Fps: "+(int)Math.Round(fps, 2), new Color(dayAlpha, dayAlpha, dayAlpha));
//                        }
//                        #endregion

//                        spriteBatch.End();
//                        #endregion


//                        //             DrawPlayer(spriteBatch);
//                        //             spriteBatch.End();

//                        //             spriteBatch.Begin(SpriteSortMode.Deferred, null, Setting.SamplerState, null, null, null);

//                        //             if (show) {

//                        //             #region Draw Bars
//                        //             if (Global.WorldDifficulty!=2) {
//                        //                 // Energy bar
//                        //                 spriteBatch.Draw(barEnergyTexture,new Vector2(Global.WindowWidth-150-36,8),new Rectangle(0,0,32,(int)barEnergy),Color.Gray);
//                        //                 spriteBatch.Draw(barEnergyTexture,new Vector2(Global.WindowWidth-150-36,8+(int)barEnergy),new Rectangle(0,(int)barEnergy,32,32-(int)barEnergy),Color.White);

//                        //                 // Oxygen bar
//                        //                 spriteBatch.Draw(barOxygenTexture,new Vector2(Global.WindowWidth-150,8),new Rectangle(0,0,32,(int)barOxygen),Color.Gray);
//                        //                 spriteBatch.Draw(barOxygenTexture,new Vector2(Global.WindowWidth-150,8+(int)barOxygen),new Rectangle(0,(int)barOxygen,32,32-(int)barOxygen),Color.White);

//                        //                 // Water bar
//                        //                 spriteBatch.Draw(barWaterTexture,new Vector2(Global.WindowWidth-114,8),new Rectangle(0,0,32,(int)barWater),Color.Gray);
//                        //                 spriteBatch.Draw(barWaterTexture,new Vector2(Global.WindowWidth-114,8+(int)barWater),new Rectangle(0,(int)barWater,32,32-(int)barWater),Color.White);

//                        //                 // Eat bar
//                        //                 spriteBatch.Draw(barEatTexture,new Vector2(Global.WindowWidth-78,8),new Rectangle(0,0,32,(int)barEat),Color.Gray);
//                        //                 spriteBatch.Draw(barEatTexture,new Vector2(Global.WindowWidth-78,8+(int)barEat),new Rectangle(0,(int)barEat,32,32-(int)barEat),Color.White);

//                        //                 // Heart bar
//                        //                 spriteBatch.Draw(barHeartTexture,new Vector2(Global.WindowWidth-40,8),new Rectangle(0,0,32,(int)barHeart),Color.Gray);
//                        //                 spriteBatch.Draw(barHeartTexture,new Vector2(Global.WindowWidth-40,8+(int)barHeart),new Rectangle(0,(int)barHeart,32,32-(int)barHeart),Color.White);
//                        //             }
//                        //	#endregion

//                        //             buttonInv.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidth-32,Global.WindowHeight-32);

//                        //             if (buttonInv.Click) ChangeInventoryState(false);

//                        //#region Draw Inventory
//                        //            switch (inventory) {
//                        //                #region Normal
//                        //                case 0:
//                        //	    if (diserpeard==0) {
//                        //                        gedo=null;
//                        //                        text="";
//                        //                    } else {
//                        //	        if (gedo!=null) {
//                        //                            if (gedo.Text!="") {
//                        //                                float alphaC;
//                        //                                if (diserpeard>100) alphaC=1f;
//                        //                                else alphaC=diserpeard/100f;
//                        //                                Color alphaCC=new Color(alphaC,alphaC,alphaC,alphaC);

//                        //                                spriteBatch.Draw(messageLeft,new Vector2(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2),Global.WindowHeightHalf-55), alphaCC);
//                        //                                spriteBatch.Draw(messageCenter,new Rectangle(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+19,Global.WindowHeightHalf-55,(int)spriteFont_small.MeasureString(gedo.Text).X,57), alphaCC);
//                        //                                spriteBatch.Draw(messageRight,new Vector2(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+19,Global.WindowHeightHalf-55), alphaCC);

//                        //                                gedo.DrawGedo(spriteBatch,true,Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+20,Global.WindowHeightHalf-40,(int)(alphaC*255));
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                  // Basic right inventory
//                        //                    for (int i=0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

//                        //                        if (!invMove || (invMove && invStart!=i)) {
//                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
//                        //                        }
//                        //                    }
//                        //                    break;
//                        //                #endregion

//                        //                #region Writing message
//                        //                case 1:
//                        //        text =TextEdit(text);
//                        //        while (text.Length*13>750) text=text.Substring(0,text.Length-1);
//                        //                    text =text.Replace("€","#");

//                        //                    spriteBatch.Draw(messageLeft,new Vector2(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2),Global.WindowHeightHalf-55), Color.White);
//                        //                    spriteBatch.Draw(messageCenter,new Rectangle(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2)+19,Global.WindowHeightHalf-55,(int)spriteFont_small.MeasureString(text).X,57), Color.White);
//                        //                    spriteBatch.Draw(messageRight,new Vector2(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(text).X/2)+19,Global.WindowHeightHalf-55), Color.White);

//                        //                    DrawTextShadowMin(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2)+20,Global.WindowHeightHalf-40,text);
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(text).X/2)+20,Global.WindowHeightHalf-40,1,15),Color.Black);

//                        //                   // ChangeInventory();

//                        //                    // Basic right inventory
//                        //                    for (int i=0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+4+i*40),Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+4+i*40),null);

//                        //                        if (!invMove || (invMove && invStart!=i)) {
//                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80-4+i*40);
//                        //                        }
//                        //                    }
//                        //                    break;
//                        //                #endregion

//                        //                #region Basic inventory - clothes, inventory and basic crafting
//                        //                case 2:
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,100));

//                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, new Color(0,0,0,100));
//                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, new Color(0,0,0,200));
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), new Color(10,140,255));
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

//                        //                    buttonClose.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf+300-32,Global.WindowHeightHalf-232+1);

//                        //                    spriteBatch.Draw(ItemBackpackTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), Color.White);
//                        //                    if (Setting.czechLanguage)DrawTextShadowMin(spriteFont_small,Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Baťůžek");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, "Backpack");
//                        //                    #region Inventory
//                        //                    {
//                        //                        int xx =0;
//                        //                        int yh=0;
//                        //                        for (int i=inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                        //                        if (i>maxInvCount) break;
//                        //                            spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                        //                            if (!invMove || (invMove && invStart!=i)) {
//                        //                                Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                                if (tex!=null) DrawItemInInventory(tex,Inventory[i].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);
//                        //                            }
//                        //                             xx+=40;

//                        //                            if (xx==9*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                        if (maxInvCount>45) {
//                        //                            int size=(int)( (1f/((( (int)(maxInvCount/9f)+1  )*40)/200f))*200 );
//                        //                            int pos=(int)( ( ((inventoryScrollbarValue*9)/40f) / maxInvCount)*(200-size) )*4;
//                        //                            if (size>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1,20,size-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Crafting
//                        //                    {
//                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
//                        //                            int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
//                        //                            int pos2=(int)( ( ((inventoryScrollbarValueCrafting*5)/40f) / inventoryScrollbarValueCraftingMax)*(160-size2) )*8;
//                        //                            if (size2>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
//                        //                            }
//                        //                        }

//                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
//                        //                        int xx =0;
//                        //                        int yh=0;

//                        //                        for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

//                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //                            && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//                        //                                if (mouseLeftRelease) {
//                        //                                    selectedCraftingItem=i;

//                        //                                    craftingType=0;
//                        //                                    DListInt[]x=Craft(Crafting[selectedCraftingItem].X);
//                        //                                    if (x!=null) Need=x[craftingType].List1;
//                        //                                }
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128,128,128));
//                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200,200,200));
//                        //                            } else {
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150,150,150));
//                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
//                        //                            }
//                        //                            Texture2D tex=ItemIdToTexture(Crafting[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//                        //                            xx+=40;

//                        //                            if (xx==6*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Need
//                        //                    {
//                        //                        spriteBatch.Draw(inventoryNeedTexture,new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
//                        //                        int i=0;
//                        //                        for (int y=0; y<2; y++) {
//                        //                             for (int x=0; x<6; x++) {
//                        //                                if (Need.Count<=i)break;
//                        //                                Texture2D tex=ItemIdToTexture(Need[i].X);
//                        //                                if (tex!=null) {
//                        //                                    bool disamble=false;
//                        //                                    foreach (DInt n in Need) {
//                        //                                        int inInv = 0;
//                        //                                        foreach (DInt ii in Inventory) {
//                        //                                            if (n.X==ii.X) {
//                        //                                                inInv+=ii.Y;
//                        //                                            }
//                        //                                        }
//                        //                                        if (inInv<Need[i].Y) {
//                        //                                        disamble=true;
//                        //                                        break;
//                        //                                        }
//                        //                                    }
//                        //                                   // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                    //else
//                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8,40,40), new Color(255,0,0,100));

//                        //                                     DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                }
//                        //                                i++;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20-2);
//                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+2-2);
//                        //                    buttonInvTabTools.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+4-2);
//                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+32+6-2);
//                        //                    buttonInvTabItems.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+64+32+8-2);

//                        //                    if (buttonInvTabBlocks.Click) SetInvCraftingBlocks();
//                        //                    if (buttonInvTabMashines.Click) SetInvCraftingMashines();
//                        //                    if (buttonInvTabTools.Click) SetInvCraftingTools();
//                        //                    if (buttonInvTabPlants.Click) SetInvCraftingNature();
//                        //                    if (buttonInvTabItems.Click) SetInvCraftingItems();

//                        //                 //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

//                        //                    if (buttonClose.Click) {
//                        //                        inventory=0;
//                        //                    }

//                        //                    if (buttonNext.Click) {
//                        //                        craftingType++;
//                        //                        DListInt[] l=Craft(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType>l.Length-1) craftingType=0;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    if (buttonPrev.Click) {
//                        //                        craftingType--;
//                        //                        DListInt[] l=Craft(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType<0) craftingType=l.Length-1;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    buttonCraft1x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10,Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+80+8+10+10,Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+170+8,Global.WindowHeightHalf+160-30+8+16));

//                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));
//                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));

//                        //                    #region Craft new item
//                        //                    if (buttonCraft1x.Click) {
//                        //                         bool ok=true;
//                        //                         foreach (DInt n in Need) {
//                        //                            int inInv = 0;
//                        //                            foreach (DInt ii in Inventory) {
//                        //                                if (n.X==ii.X) {
//                        //                                    inInv+=ii.Y;
//                        //                                }
//                        //                            }
//                        //                            if (inInv<n.Y) {
//                        //                                ok=false;
//                        //                                break;
//                        //                            }
//                        //                        }
//                        //                        if (ok) {
//                        //                            DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                            foreach (DInt d in craft.List1) {
//                        //                                int count=d.Y;
//                        //                                for (int i=0; i<maxInvCount; i++) {
//                        //                                    if (Inventory[i].X==d.X) {
//                        //                                        if (Inventory[i].Y>count) {
//                        //                                            Inventory[i].Y-=count;
//                        //                                            break;
//                        //                                        } else {
//                        //                                            count-=Inventory[i].Y;
//                        //                                            Inventory[i]=new DInt();
//                        //                                        }
//                        //                                    }
//                        //                                }
//                        //                            }


//                        //                            foreach (DInt d in craft.List2) {
//                        //                                ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft10x.Click) {
//                        //                        for (int mm=0; mm<10; mm++) {
//                        //                            bool ok=true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count=d.Y;
//                        //                                    for (int i=0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft100x.Click) {
//                        //                        for (int mm=0; mm<100; mm++) {
//                        //                            bool ok=true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count=d.Y;
//                        //                                    for (int i=0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    // Basic right inventory
//                        //                    for (int i=0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

//                        //                        if (!invMove || (invMove && invStart!=i)) {
//                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
//                        //                        }
//                        //                    }
//                        //                    ChangeInventoryBasic();
//                        //                    text="";
//                        //                    break;
//                        //                #endregion

//                        //                #region Basic inventory - clothes, inventory and full crafting
//                        //                case 3:
//                        //                   spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,100));

//                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, new Color(0,0,0,100));
//                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, new Color(0,0,0,200));
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), new Color(10,140,255));
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

//                        //                    buttonClose.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf+300-32,Global.WindowHeightHalf-232+1);

//                        //                  //  spriteBatch.Draw(inventoryClothesTexture,new Vector2(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4), null);

//                        //                    spriteBatch.Draw(deskTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
//                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Stůl");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Desk");
//                        //                    #region Inventory
//                        //                    {
//                        //                        int xx =0;
//                        //                        int yh=0;
//                        //                        for (int i=inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                        //                        if (i>maxInvCount) break;
//                        //                            spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                        //                            if (!invMove || (invMove && invStart!=i)) {
//                        //                                Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                                if (tex!=null) DrawItemInInventory(tex,Inventory[i].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);
//                        //                            }
//                        //                             xx+=40;

//                        //                            if (xx==9*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                        if (maxInvCount>45) {
//                        //                            int size=(int)( (1f/((( (int)(maxInvCount/9f)+1  )*40)/200f))*200 );
//                        //                            int pos=(int)( ( ((inventoryScrollbarValue*9)/40f) / maxInvCount)*(200-size) )*4;
//                        //                            if (size>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1,20,size-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Crafting
//                        //                    {
//                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
//                        //                            int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
//                        //                            int pos2=(int)( ( ((inventoryScrollbarValueCrafting*5)/40f) / inventoryScrollbarValueCraftingMax)*(160-size2) )*8;
//                        //                            if (size2>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
//                        //                            }
//                        //                        }

//                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
//                        //                        int xx =0;
//                        //                        int yh=0;

//                        //                        for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

//                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //                            && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//                        //                                if (mouseLeftRelease) {
//                        //                                    selectedCraftingItem=i;

//                        //                                    craftingType=0;
//                        //                                    DListInt[]x=Craft(Crafting[selectedCraftingItem].X);
//                        //                                    if (x!=null) Need=x[craftingType].List1;
//                        //                                }
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128,128,128));
//                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200,200,200));
//                        //                            } else {
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150,150,150));
//                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
//                        //                            }
//                        //                            Texture2D tex=ItemIdToTexture(Crafting[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//                        //                            xx+=40;

//                        //                            if (xx==6*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Need
//                        //                    {
//                        //                        spriteBatch.Draw(inventoryNeedTexture,new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
//                        //                        int i=0;
//                        //                        for (int y=0; y<2; y++) {
//                        //                             for (int x=0; x<6; x++) {
//                        //                                if (Need.Count<=i)break;
//                        //                                Texture2D tex=ItemIdToTexture(Need[i].X);
//                        //                                if (tex!=null) {
//                        //                                    bool disamble=false;
//                        //                                    foreach (DInt n in Need) {
//                        //                                        int inInv = 0;
//                        //                                        foreach (DInt ii in Inventory) {
//                        //                                            if (n.X==ii.X) {
//                        //                                                inInv+=ii.Y;
//                        //                                            }
//                        //                                        }
//                        //                                        if (inInv<Need[i].Y) {
//                        //                                        disamble=true;
//                        //                                        break;
//                        //                                        }
//                        //                                    }
//                        //                                   // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                    //else
//                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8,40,40), new Color(255,0,0,100));

//                        //                                     DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                }
//                        //                                i++;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20-2);
//                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+2-2);
//                        //                    buttonInvTabTools.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+4-2);
//                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+32+6-2);
//                        //                    buttonInvTabItems.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+64+32+8-2);

//                        //                    if (buttonInvTabBlocks.Click) SetInvCraftingBlocksA();
//                        //                    if (buttonInvTabMashines.Click) SetInvCraftingMashinesA();
//                        //                    if (buttonInvTabTools.Click) SetInvCraftingToolsA();
//                        //                    if (buttonInvTabPlants.Click) SetInvCraftingNatureA();
//                        //                    if (buttonInvTabItems.Click) SetInvCraftingItemsA();

//                        //                 //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

//                        //                    if (buttonClose.Click) {
//                        //                        inventory=0;
//                        //                    }

//                        //                    if (buttonNext.Click) {
//                        //                        craftingType++;
//                        //                        DListInt[] l= Craft(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType>l.Length-1) craftingType=0;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    if (buttonPrev.Click) {
//                        //                        craftingType--;
//                        //                        DListInt[] l= Craft(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType<0) craftingType=l.Length-1;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    buttonCraft1x.ButtonDraw(spriteBatch,newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10,Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+80+8+10+10,Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+170+8,Global.WindowHeightHalf+160-30+8+16));

//                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));
//                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));

//                        //                    #region Craft new item
//                        //                    if (buttonCraft1x.Click) {
//                        //                         bool ok=true;
//                        //                         foreach (DInt n in Need) {
//                        //                            int inInv = 0;
//                        //                            foreach (DInt ii in Inventory) {
//                        //                                if (n.X==ii.X) {
//                        //                                    inInv+=ii.Y;
//                        //                                }
//                        //                            }
//                        //                            if (inInv<n.Y) {
//                        //                                ok=false;
//                        //                                break;
//                        //                            }
//                        //                        }
//                        //                        if (ok) {
//                        //                            DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                            foreach (DInt d in craft.List1) {
//                        //                                int count=d.Y;
//                        //                                for (int i=0; i<maxInvCount; i++) {
//                        //                                    if (Inventory[i].X==d.X) {
//                        //                                        if (Inventory[i].Y>count) {
//                        //                                            Inventory[i].Y-=count;
//                        //                                            break;
//                        //                                        } else {
//                        //                                            count-=Inventory[i].Y;
//                        //                                            Inventory[i]=new DInt();
//                        //                                        }
//                        //                                    }
//                        //                                }
//                        //                            }


//                        //                            foreach (DInt d in craft.List2) {
//                        //                                ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft10x.Click) {
//                        //                        for (int mm=0; mm<10; mm++) {
//                        //                            bool ok=true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count=d.Y;
//                        //                                    for (int i=0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft100x.Click) {
//                        //                        for (int mm=0; mm<100; mm++) {
//                        //                            bool ok=true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft= Craft(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count=d.Y;
//                        //                                    for (int i=0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    // Basic right inventory
//                        //                    for (int i=0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

//                        //                        if (!invMove || (invMove && invStart!=i)) {
//                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
//                        //                        }
//                        //                    }
//                        //                    ChangeInventoryBasic();
//                        //                    text="";
//                        //                    break;
//                        //                #endregion

//                        //                #region Furnace
//                        //                case 4:
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, 100));

//                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, new Color(0, 0, 0, 100));
//                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, new Color(0, 0, 0, 200));
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), new Color(10, 140, 255));
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

//                        //                    buttonClose.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+300-32, Global.WindowHeightHalf-232+1);

//                        //                    //  spriteBatch.Draw(inventoryClothesTexture,new Vector2(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4), null);

//                        //                    spriteBatch.Draw(furnaceElectricOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
//                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Pec");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Furnace");

//                        //                    #region Inventory
//                        //                    {
//                        //                        int xx = 0;
//                        //                        int yh = 0;
//                        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                        //                            if (i>maxInvCount) break;
//                        //                            spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                        //                            if (!invMove||(invMove&&invStart!=i)) {
//                        //                                Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        //                                if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
//                        //                            }
//                        //                            xx+=40;

//                        //                            if (xx==9*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                        if (maxInvCount>45) {
//                        //                            int size = (int)((1f/((((int)(maxInvCount/9f)+1)*40)/200f))*200);
//                        //                            int pos = (int)((((inventoryScrollbarValue*9)/40f)/maxInvCount)*(200-size))*4;
//                        //                            if (size>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Bake
//                        //                    {
//                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
//                        //                            int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
//                        //                            int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
//                        //                            if (size2>20) {
//                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), Color.White);
//                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
//                        //                            } else {
//                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
//                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
//                        //                            }
//                        //                        }

//                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
//                        //                        int xx = 0;
//                        //                        int yh = 0;

//                        //                        for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

//                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//                        //                                if (mouseLeftRelease) {
//                        //                                    selectedCraftingItem=i;

//                        //                                    craftingType=0;
//                        //                                    DListInt[] x = Bake(Crafting[selectedCraftingItem].X);
//                        //                                    if (x!=null) Need=x[craftingType].List1;
//                        //                                }
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128, 128, 128));
//                        //                                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200, 200, 200));
//                        //                            } else {
//                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150, 150, 150));
//                        //                                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
//                        //                            }
//                        //                            Texture2D tex = ItemIdToTexture(Crafting[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//                        //                            xx+=40;

//                        //                            if (xx==6*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    #region Need
//                        //                    {
//                        //                        spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
//                        //                        int i = 0;
//                        //                        for (int y = 0; y<2; y++) {
//                        //                            for (int x = 0; x<6; x++) {
//                        //                                if (Need.Count<=i) break;
//                        //                                Texture2D tex = ItemIdToTexture(Need[i].X);
//                        //                                if (tex!=null) {
//                        //                                    bool disamble = false;
//                        //                                    foreach (DInt n in Need) {
//                        //                                        int inInv = 0;
//                        //                                        foreach (DInt ii in Inventory) {
//                        //                                            if (n.X==ii.X) {
//                        //                                                inInv+=ii.Y;
//                        //                                            }
//                        //                                        }
//                        //                                        if (inInv<Need[i].Y) {
//                        //                                            disamble=true;
//                        //                                            break;
//                        //                                        }
//                        //                                    }
//                        //                                    // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                    //else
//                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), new Color(255, 0, 0, 100));

//                        //                                    DrawItemInInventory(tex, Need[i].Y, Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                        //                                }
//                        //                                i++;
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    buttonInvTabMaterials.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20-2);
//                        //                    buttonInvTabGlass.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+2-2);
//                        //                    buttonInvTabCeramics.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+32+4-2);
//                        //                    buttonInvTabFood.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+32+32+6-2);
//                        //                    buttonInvTabTools.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+64+32+8-2);

//                        //                    if (buttonInvTabMaterials.Click) SetInvBakeIngots();
//                        //                    if (buttonInvTabGlass.Click) SetInvBakeItems();
//                        //                    if (buttonInvTabCeramics.Click) SetInvBakeCeramics();
//                        //                    if (buttonInvTabFood.Click) SetInvBakeFood();
//                        //                    if (buttonInvTabTools.Click) SetInvBakeTools();

//                        //                    //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

//                        //                    if (buttonClose.Click) inventory=0;

//                        //                    if (buttonNext.Click) {
//                        //                        craftingType++;
//                        //                        DListInt[] l = Bake(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType>l.Length-1) craftingType=0;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    if (buttonPrev.Click) {
//                        //                        craftingType--;
//                        //                        DListInt[] l = Bake(Crafting[selectedCraftingItem].X);
//                        //                        if (l!=null) {
//                        //                            if (craftingType<0) craftingType=l.Length-1;
//                        //                            Need=l[craftingType].List1;
//                        //                        }
//                        //                    }

//                        //                    buttonCraft1x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10, Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+10+80+8+10+10, Global.WindowHeightHalf+160-30+8+16));
//                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+10+170+8, Global.WindowHeightHalf+160-30+8+16));

//                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));
//                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));

//                        //                    #region Craft new item
//                        //                    if (buttonCraft1x.Click) {
//                        //                        bool ok = true;
//                        //                        foreach (DInt n in Need) {
//                        //                            int inInv = 0;
//                        //                            foreach (DInt ii in Inventory) {
//                        //                                if (n.X==ii.X) {
//                        //                                    inInv+=ii.Y;
//                        //                                }
//                        //                            }
//                        //                            if (inInv<n.Y) {
//                        //                                ok=false;
//                        //                                break;
//                        //                            }
//                        //                        }
//                        //                        if (ok) {
//                        //                            DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                            foreach (DInt d in craft.List1) {
//                        //                                int count = d.Y;
//                        //                                for (int i = 0; i<maxInvCount; i++) {
//                        //                                    if (Inventory[i].X==d.X) {
//                        //                                        if (Inventory[i].Y>count) {
//                        //                                            Inventory[i].Y-=count;
//                        //                                            break;
//                        //                                        } else {
//                        //                                            count-=Inventory[i].Y;
//                        //                                            Inventory[i]=new DInt();
//                        //                                        }
//                        //                                    }
//                        //                                }
//                        //                            }


//                        //                            foreach (DInt d in craft.List2) {
//                        //                                ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft10x.Click) {
//                        //                        for (int mm = 0; mm<10; mm++) {
//                        //                            bool ok = true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count = d.Y;
//                        //                                    for (int i = 0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonCraft100x.Click) {
//                        //                        for (int mm = 0; mm<100; mm++) {
//                        //                            bool ok = true;
//                        //                            foreach (DInt n in Need) {
//                        //                                int inInv = 0;
//                        //                                foreach (DInt ii in Inventory) {
//                        //                                    if (n.X==ii.X) {
//                        //                                        inInv+=ii.Y;
//                        //                                    }
//                        //                                }
//                        //                                if (inInv<n.Y) {
//                        //                                    ok=false;
//                        //                                    break;
//                        //                                }
//                        //                            }
//                        //                            if (ok) {
//                        //                                DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

//                        //                                foreach (DInt d in craft.List1) {
//                        //                                    int count = d.Y;
//                        //                                    for (int i = 0; i<maxInvCount; i++) {
//                        //                                        if (Inventory[i].X==d.X) {
//                        //                                            if (Inventory[i].Y>count) {
//                        //                                                Inventory[i].Y-=count;
//                        //                                                break;
//                        //                                            } else {
//                        //                                                count-=Inventory[i].Y;
//                        //                                                Inventory[i]=new DInt();
//                        //                                            }
//                        //                                        }
//                        //                                    }
//                        //                                }


//                        //                                foreach (DInt d in craft.List2) {
//                        //                                    ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
//                        //                                }
//                        //                            }
//                        //                        }
//                        //                    }
//                        //                    #endregion

//                        //                    // Basic right inventory
//                        //                    for (int i = 0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), null);

//                        //                        if (!invMove||(invMove&&invStart!=i)) {
//                        //                            Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
//                        //                        }
//                        //                    }
//                        //                    ChangeInventoryBasic();
//                        //                    text="";
//                        //                    break;
//                        //                #endregion

//                        //                #region Macerator
//                        //                case 5:
//                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(PlayerX-424,(int)PlayerY-280,848,560),new Color(0,0,0,100));
//                        //                    //spriteBatch.Draw(boxSelectedTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2+boxSelected*32),Color.White);
//                        //                    //spriteBatch.Draw(boxInventoryTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2),Color.White);
//                        //                    //spriteBatch.Draw(maceratorInventoryTexture,new Vector2(PlayerX-240,PlayerY-108),Color.White);
//                        //                    //if (macerator[selectMacerator].Energy>5) {
//                        //                    //    if (furnaceM1==0) {
//                        //                    //        //TDust(64);

//                        //                    //    }
//                        //                    //}
//                        //                    spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
//                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Drtič");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Macerator");
//                        //                    InventoryDrawItems();
//                        //                    //InventoryDrawDIntsMacerator();
//                        //                    //ChangeInventoryMacerator();
//                        //                    InventoryDrawItems();
//                        //                    text ="";
//                        //                    break;
//                        //                #endregion

//                        //                #region creative
//                        //                case 7:
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, 100));

//                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, new Color(0, 0, 0, 100));
//                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, new Color(0, 0, 0, 200));
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), new Color(10, 140, 255));
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

//                        //                    buttonClose.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+300-32, Global.WindowHeightHalf-232+1);
//                        //                   // spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
//                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Itemy");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Items"); {
//                        //                        int xx = 0;
//                        //                        int yh = 0;
//                        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+13*9+5; i++) {
//                        //                            if (i>maxInvCount) break;
//                        //                            spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+32+8+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                        //                            if (!invMove||(invMove&&invStart!=i)) {
//                        //                                Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        //                                if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidthHalf-300+32+8+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
//                        //                            }
//                        //                            xx+=40;

//                        //                            if (xx==13*40) {
//                        //                                xx=0;
//                        //                                yh+=40;
//                        //                            }
//                        //                        }
//                        //                    }

//                        //                    if (buttonClose.Click) inventory=0;

//                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-200+20-2-8);
//                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+2-2);
//                        //                    buttonInvTabTools.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+32+4-2);
//                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+32+32+6-2);
//                        //                    buttonInvTabItems.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+64+32+8-2);

//                        //                    if (buttonInvTabBlocks.Click) SetInvCreativeBlocks();
//                        //                    if (buttonInvTabMashines.Click) SetInvCreativeMashines();
//                        //                    if (buttonInvTabTools.Click) SetInvCreativeTools();
//                        //                    if (buttonInvTabPlants.Click) SetInvCreativePlants();
//                        //                    if (buttonInvTabItems.Click) SetInvCreativeItems();

//                        //                        //buttonPrev.ButtonDraw(spriteBatch,<1>ew Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));
//                        //                        ////buttonNext.ButtonDraw(spriteBatch, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));

//                        //                        // Basic right inventory
//                        //                    for (int i = 0; i<5; i++) {
//                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
//                        //                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), null);

//                        //                        if (!invMove||(invMove&&invStart!=i)) {
//                        //                            Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
//                        //                        }
//                        //                    }
//                        //                    ChangeInventoryCreative();
//                        //                    text="";


//                        //                    break;
//                        //                #endregion

//                        //                #region Shelf
//                        //                case 8:
//                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(PlayerX-424, (int)PlayerY-280, 848, 560), new Color(0, 0, 0, 100));
//                        //                    //spriteBatch.Draw(boxSelectedTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2+boxSelected*32),Color.White);
//                        //                    //spriteBatch.Draw(boxInventoryTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2),Color.White);
//                        //                    //spriteBatch.Draw(maceratorInventoryTexture,new Vector2(PlayerX-240,PlayerY-108),Color.White);
//                        //                    //if (macerator[selectMacerator].Energy>5) {
//                        //                    //    if (furnaceM1==0) {
//                        //                    //        //TDust(64);

//                        //                    //    }
//                        //                    //}
//                        //                    spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
//                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Polička");
//                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Shelf");
//                        //                    InventoryDrawItems();
//                        //                    //InventoryDrawDIntsMacerator();
//                        //                    //ChangeInventoryMacerator();
//                        //                    InventoryDrawItems();
//                        //                    text="";
//                        //                    break;
//                        //                    #endregion
//                        //            }
//                        //            #endregion

//                        //    #region Draw debug
//                        //    if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) {
//                        //        if (debug) DrawTextShadowMin(spriteFont_small,5, 5, "     Informace (F1 skrýt)" + Environment.NewLine +"----------------------------------"+Environment.NewLine +
//                        //            "[Pozice hráče] X: " + PlayerX + ", Y: " + PlayerY + Environment.NewLine +
//                        //            "[Pozice myše] X: " + (int)mousePos.X + ", Y: " + (int)mousePos.Y + Environment.NewLine +
//                        //            "[počet instancí]: " + (
//                        //grassPlains.Count +
//                        //grassHills.Count +
//                        //grassJungle.Count +
//                        //grassForest.Count +
//                        //grassDesert.Count +

//                        //grassPlainsBlock.Count +
//                        //grassForestBlock.Count +
//                        //grassJungleBlock.Count +
//                        //grassDesertBlock.Count +
//                        //grassHillsBlock.Count +

//                        //dirt.Count +
//                        ////stone.Count +

//                        //            dolomite.Count+
//                        //            rhyolite.Count+
//                        //            limestone.Count+
//                        //            gneiss.Count+
//                        //            schist.Count+
//                        //            sandstone.Count+
//                        //            basalt.Count+
//                        //            gabbro.Count+
//                        //            diorit.Count+

//                        //sand.Count +
//                        //gravel.Count+
//                        //cobblestone.Count+
//                        //ice.Count+
//                        //snow.Count+
//                        //waterBlock.Count+
//                        //snowTop.Count+

//                        //plantDandelion.Count +
//                        //plantOrchid.Count +
//                        //plantViolet.Count +
//                        //plantRose.Count +

//                        //ironOre.Count +
//                        //goldOre.Count +
//                        //aluminiumOre.Count +
//                        //silverOre.Count +
//                        //tinOre.Count +
//                        //copperOre.Count +
//                        //coalOre.Count+
//                        //oil.Count+

//                        //cactusBig.Count +
//                        //cactusLittle.Count +
//                        //plantAlore.Count+
//                        //rocks.Count+
//                        //liana.Count+

//                        //appleLeaves.Count+
//                        //appleWood.Count+
//                        //plumLeaves.Count+
//                        //plumWood.Count+
//                        //cherryLeaves.Count+
//                        //cherryWood.Count+
//                        //oakLeaves.Count+
//                        //oakWood.Count+
//                        //lindenWood.Count+
//                        //lindenLeaves.Count+
//                        //spruceLeaves.Count+
//                        //spruceWood.Count+
//                        //pineLeaves.Count+
//                        //pineWood.Count+
//                        //            desk.Count+
//                        //cherrySapling.Count+
//                        //oakSapling.Count+
//                        //appleSapling.Count+
//                        //plumSapling.Count) + Environment.NewLine +
//                        //            "[Počet Itemů]: "+(DIntBlockLeaves.Count+DIntBricks.Count+DIntDirt.Count+DIntGlass.Count+DIntGravel.Count+DIntHayBlock.Count+DIntSand.Count+DIntAluminiumDust.Count+DIntBronzeDust.Count+DIntCoalDust.Count+DIntCopperDust.Count+DIntGoldDust.Count+DIntIronDust.Count+DIntSilverDust.Count+DIntStoneDust.Count
//                        //            +DIntDustSulfid.Count+DIntTinDust.Count+DIntUranDust.Count+DIntWoodDust.Count+DIntBattery.Count+DIntBigCircuit.Count+DIntBulb.Count+DIntCircuit.Count+DIntRubber.Count+DIntApple.Count+DIntBanana.Count+DIntCherry.Count+DIntOnion.Count+DIntPlum.Count+/*DIntPotatoes.Count+*/DIntRabbtCookedMeat.Count+DIntRabbitMeat.Count
//                        //            +DIntRashberry.Count+DIntStrawberry.Count+DIntAluminiumIngot.Count+DIntBronzeIngot.Count+DIntCopperIngot.Count+DIntGoldIngot.Count+DIntIronIngot.Count+DIntSilverIngot.Count+DIntTinIngot.Count+DIntUranIngot.Count+DIntDesk.Count+DIntDoor.Count+DIntFlag.Count+DIntFurnaceElectric.Count+DIntFurnaceStone.Count
//                        //            +DIntLabel.Count+DIntLadder.Count+DIntLamp.Count+DIntMacerator.Count+DIntMiner.Count+DIntRadio.Count+DIntRocket.Count+DIntSolarPanel.Count+DIntTorch.Count+DIntWaterMill.Count+DIntWindMill.Count+DIntCactus.Count+DIntDandelion.Count+DIntHay.Count+DIntLeather.Count+DIntLeave.Count+DIntOrchid.Count+DIntRose.Count
//                        //            +DIntSeeds.Count+DIntStick.Count+DIntSticks.Count+DIntViolet.Count+DIntWheatSeeds.Count+DIntWheatStraw.Count+DIntOakSapling.Count+DIntPineSapling.Count+DIntLindenSapling.Count+DIntPlumSapling.Count+DIntCherrySapling.Count+DIntAppleSapling.Count+DIntSpruceSapling.Count+DIntStrawberryPlant.Count+DIntRashberryPlant.Count
//                        //            +/*DIntPotatoesPlant.Count+*/DIntCoal.Count+DIntCopper.Count+DIntDiamond.Count+DIntGold.Count+DIntIron.Count+DIntPyrit.Count+DIntRuby.Count+DIntSaphirite.Count+DIntSilver.Count+DIntSmaragd.Count+DIntBigStone.Count+DIntMediumStone.Count+DIntSmallStone.Count+DIntTin.Count+/*DIntUran.Count+*/DIntBackpack.Count+DIntBucket.Count
//                        //            +DIntBucketWater.Count+DIntRope.Count+DIntLindenPlanks.Count+DIntLindenWood.Count+DIntSprucePlanks.Count+DIntSpruceWood.Count+DIntOakPlanks.Count+DIntOakWood.Count+DIntPinePlanks.Count+DIntPineWood.Count+DIntCherryPlanks.Count+DIntCherryWood.Count+DIntPlumPlanks.Count+DIntPlumWood.Count+DIntApplePlanks.Count+DIntAppleWood.Count)+Environment.NewLine+
//                        //            "[Počet animací]: "+ (waterSquirt.Count + backgroundDirt.Count+ backgroundStone.Count+ backgroundGravel.Count+ backgroundSand.Count)+Environment.NewLine+
//                        //            "[Zvířata] Ryba(y):" + fish.Count + ", Zajíc(i): "+rabbit.Count+", Kur "+chicken.Count+Environment.NewLine +
//                        //            "[Energie]:  "+energy.Count+Environment.NewLine+
//                        //            "[Čas]: hodina(y): " + (time/3000)+" minuta(y): " + ((time- (time/3000)*3000)/50)+Environment.NewLine+
//                        //"[Den]: "+day+Environment.NewLine,Color.DarkGray);
//                        //        else {
//                        //        if (Setting.Fps) {
//                        //            if (show) DrawTextShadowMin(spriteFont_small,5, 5, "Fps: " + Math.Round(1000 / gameTime.ElapsedGameTime.TotalMilliseconds),Color.DarkGray);
//                        //        }
//                        //    }
//                        //}
//                        //#endregion
//                        //  }

//                        //#region Draw debug
//                        //// if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) {
//                        //if (debug) DrawTextShadowMin(spriteFont_small, 5, 5, "     Informace (F1 skrýt)"+Environment.NewLine+"----------------------------------"+Environment.NewLine+
//                        //   "[Pozice hráče] X: "+PlayerX+", Y: "+PlayerY+Environment.NewLine+
//                        //   "[Pozice myše] X: "+(int)mousePos.X+", Y: "+(int)mousePos.Y+Environment.NewLine+
//                        //   "[počet instancí]: "+(
//                        //   grassPlains.Count+
//                        //   grassHills.Count+
//                        //   grassJungle.Count+
//                        //   grassForest.Count+
//                        //   grassDesert.Count+

//                        //   grassPlainsBlock.Count+
//                        //   grassForestBlock.Count+
//                        //   grassJungleBlock.Count+
//                        //   grassDesertBlock.Count+
//                        //   grassHillsBlock.Count+

//                        //   dirt.Count+
//                        //   //stone.Count+
//                        //   sand.Count+
//                        //   gravel.Count+
//                        //   cobblestone.Count+
//                        //   ice.Count+
//                        //   snow.Count+
//                        //   waterBlock.Count+
//                        //   snowTop.Count+

//                        //   plantDandelion.Count+
//                        //   plantOrchid.Count+
//                        //   plantViolet.Count+
//                        //   plantRose.Count+

//                        //   ironOre.Count+
//                        //   goldOre.Count+
//                        //   aluminiumOre.Count+
//                        //   silverOre.Count+
//                        //   tinOre.Count+
//                        //   copperOre.Count+
//                        //   coalOre.Count+
//                        //   oil.Count+

//                        //   cactusBig.Count+
//                        //   cactusLittle.Count+
//                        //   plantAlore.Count+
//                        //   rocks.Count+
//                        //   liana.Count+

//                        //   appleLeaves.Count+
//                        //   appleWood.Count+
//                        //   plumLeaves.Count+
//                        //   plumWood.Count+
//                        //   cherryLeaves.Count+
//                        //   cherryWood.Count+
//                        //   oakLeaves.Count+
//                        //   oakWood.Count+
//                        //   lindenWood.Count+
//                        //   lindenLeaves.Count+
//                        //   spruceLeaves.Count+
//                        //   spruceWood.Count+
//                        //   pineLeaves.Count+
//                        //   pineWood.Count+
//                        //   desk.Count+
//                        //   cherrySapling.Count+
//                        //   oakSapling.Count+
//                        //   appleSapling.Count+
//                        //   plumSapling.Count)+Environment.NewLine+
//                        //   //            "[Počet DIntů]: "+(DIntBlockLeaves.Count+DIntBricks.Count+DIntDirt.Count+DIntGlass.Count+DIntGravel.Count+DIntHayBlock.Count+DIntSand.Count+DIntAluminiumDust.Count+DIntBronzeDust.Count+DIntCoalDust.Count+DIntCopperDust.Count+DIntGoldDust.Count+DIntIronDust.Count+DIntSilverDust.Count+DIntStoneDust.Count
//                        //   //            +DIntDustSulfid.Count+DIntTinDust.Count+DIntUranDust.Count+DIntWoodDust.Count+DIntBattery.Count+DIntBigCircuit.Count+DIntBulb.Count+DIntCircuit.Count+DIntRubber.Count+DIntApple.Count+DIntBanana.Count+DIntCherry.Count+DIntOnion.Count+DIntPlum.Count+/*DIntPotatoes.Count+*/DIntRabbtCookedMeat.Count+DIntRabbitMeat.Count
//                        //   //            +DIntRashberry.Count+DIntStrawberry.Count+DIntAluminiumIngot.Count+DIntBronzeIngot.Count+DIntCopperIngot.Count+DIntGoldIngot.Count+DIntIronIngot.Count+DIntSilverIngot.Count+DIntTinIngot.Count+DIntUranIngot.Count+DIntDesk.Count+DIntDoor.Count+DIntFlag.Count+DIntFurnaceElectric.Count+DIntFurnaceStone.Count
//                        //   //            +DIntLabel.Count+DIntLadder.Count+DIntLamp.Count+DIntMacerator.Count+DIntMiner.Count+DIntRadio.Count+DIntRocket.Count+DIntSolarPanel.Count+DIntTorch.Count+DIntWaterMill.Count+DIntWindMill.Count+DIntCactus.Count+DIntDandelion.Count+DIntHay.Count+DIntLeather.Count+DIntLeave.Count+DIntOrchid.Count+DIntRose.Count
//                        //   //            +DIntSeeds.Count+DIntStick.Count+DIntSticks.Count+DIntViolet.Count+DIntWheatSeeds.Count+DIntWheatStraw.Count+DIntOakSapling.Count+DIntPineSapling.Count+DIntLindenSapling.Count+DIntPlumSapling.Count+DIntCherrySapling.Count+DIntAppleSapling.Count+DIntSpruceSapling.Count+DIntStrawberryPlant.Count+DIntRashberryPlant.Count
//                        //   //            +/*DIntPotatoesPlant.Count+*/DIntCoal.Count+DIntCopper.Count+DIntDiamond.Count+DIntGold.Count+DIntIron.Count+DIntPyrit.Count+DIntRuby.Count+DIntSaphirite.Count+DIntSilver.Count+DIntSmaragd.Count+DIntBigStone.Count+DIntMediumStone.Count+DIntSmallStone.Count+DIntTin.Count+/*DIntUran.Count+*/DIntBackpack.Count+DIntBucket.Count
//                        //   //            +DIntBucketWater.Count+DIntRope.Count+DIntLindenPlanks.Count+DIntLindenWood.Count+DIntSprucePlanks.Count+DIntSpruceWood.Count+DIntOakPlanks.Count+DIntOakWood.Count+DIntPinePlanks.Count+DIntPineWood.Count+DIntCherryPlanks.Count+DIntCherryWood.Count+DIntPlumPlanks.Count+DIntPlumWood.Count+DIntApplePlanks.Count+DIntAppleWood.Count)+Environment.NewLine+
//                        //   "[Počet animací]: "+(waterSquirt.Count+backgroundDirt.Count+backgroundStone.Count+backgroundGravel.Count+backgroundSand.Count)+Environment.NewLine+
//                        //   "[Zvířata] Ryba(y):"+fish.Count+", Zajíc(i): "+rabbit.Count+", Kur "+chicken.Count+Environment.NewLine+
//                        //   "[Energie]:  "+energy.Count+Environment.NewLine+

//                        //   "[Čas]: hodina(y): "+((int)time).ToString()+" minuta(y): "+((int)((float)(time-(int)time)*60)).ToString()+" sekunda(y): "+((int)((((time-(int)time)*(float)60)-(int)((time-(int)time)*(float)60))*60)).ToString()+Environment.NewLine+
//                        //   "[Den]: "+day.ToString()+Environment.NewLine+
//                        //   "[Stattum Inv]: "+inventory, Color.DarkGray);
//                        //else {
//                        //    if (Setting.Fps) {
//                        //        if (show) DrawTextShadowMin(spriteFont_small, 5, 5, "Fps: "+Math.Round(1000/gameTime.ElapsedGameTime.TotalMilliseconds), Color.DarkGray);
//                        //    }
//                        //    // }
//                        //}
//                        //#endregion
//                        // } else {
//                        //    spriteBatch.Begin();
//                        //    Graphics.Clear(Color.White);

//                        //    for (int i=0; i<WindowHeight; i++) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,i,WindowWidth,1), new Color((float)i/765,1,1));

//                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32, 500-1, 1), Color.Gray);
//                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250, WindowHeight/2+32, 1, 32), Color.Gray);
//                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+32-1, 500-1-1, 1), Color.Gray);
//                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+500-1, WindowHeight/2+1+32, 1, 32-1), Color.Gray);

//                        //     if (Error) {
//                        //         int f=255;
//                        //for (int i=0; i<30; i++) {
//                        //             spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+i+1,(int)(Process*498),1),new Color(f, 0, 0));
//                        //    if (Process!=0) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1+(int)(Process*498),WindowHeight/2+32+1+i,1,1),new Color(f, 0, 0, 128));
//                        // f-=5;
//                        //         }
//                        //     } else {
//                        //         int f=255;
//                        //         for (int i=0; i<30; i++) {
//                        //             spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+i+1,(int)(Process*498),1),new Color(0, f, 0));
//                        //    if (Process!=1)spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1+(int)(Process*498),WindowHeight/2+32+i,1,1),new Color(0, f, 0, 128));
//                        //             f-=5;
//                        //         }
//                        //     }

//                        //    // menu.ButtonDraw(spriteBatch,new Vector2(ms.X,ms.Y),new Vector2(Global.WindowWidth-400,WindowHeight-50));
//                        //     DrawTextShadowMin(spriteFont_medium,WindowWidth-400+100,WindowHeight-50+5,"Zpět do menu");

//                        //     //if (step==Step.Checking) {
//                        //     //    if (gameTime.TotalGameTime.Seconds>4) {
//                        //     //        Error=true;
//                        //     //        ErrorCode="Server se příliš dlouho hledá.";
//                        //     //        ErrorMessage="Časový limit vypršel";
//                        //     //        try { clientSocket.Disconnect(false);}catch {}
//                        //     //        menu.ButtonDraw(spriteBatch,new Vector2(ms.X,ms.Y),new Vector2(Global.WindowWidth-400,WindowHeight-50));
//                        //     //        DrawTextShadowMin(spriteFont_medium,WindowWidth-400+100,WindowHeight-50+5,"Zpět do menu");
//                        //     //    }
//                        //     //}

//                        //     if (Error) {
//                        //         DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString(ErrorMessage).X)/2),WindowHeight/2-40,ErrorMessage);
//                        //         DrawTextShadowMin(spriteFont_small,(int)((Global.WindowWidth-spriteFont_small.MeasureString(ErrorCode).X)/2),WindowHeight/2+80,ErrorCode);
//                        //     } else {
//                        //         switch (step) {
//                        //             case Step.Checking:
//                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Připojování...").X)/2),WindowHeight/2-50,"Připojování...");
//                        //                 break;

//                        //             case Step.Logining:
//                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Připojování...").X)/2),WindowHeight/2-50,"Připojování...");
//                        //                 break;

//                        //             case Step.Terrain:
//                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Získávání terénu").X)/2),WindowHeight/2-50,"Získávání terénu");
//                        //                 break;

//                        //             case Step.Assets:
//                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Načítání herních komponent").X)/2),WindowHeight/2-50,"Načítání herních komponent");
//                        //                 break;
//                        //         }
//                        //     }
//                        //spriteBatch.End();
//                    }
//                }
//            } else {
//                Graphics.SetRenderTarget(null);
//                Graphics.Clear(Color.White);
//                spriteBatch.Begin();

//                //Back
//                for (int i = 0; i<Global.WindowHeight; i++) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, i, Global.WindowWidth, 1), new Color(i/765f, 1, 1));
//                menu.ButtonDraw(spriteBatch, mouseLeftDown, new DInt(newMouseState.X, newMouseState.Y));

//                if (Error) {
//                    DrawTextShadowMax(spriteFont_big, (int)(Global.WindowWidthHalf-spriteFont_big.MeasureString(ErrorHeader).X/2), Global.WindowHeightHalf-50, ErrorHeader, Color.White);
//                    DrawTextShadowMin(Global.WindowWidthHalf-(int)spriteFont_small.MeasureString(ErrorText).X/2, Global.WindowHeightHalf+40, ErrorText);
//                } else {

//                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32, 500-1, 1), Color.Gray);
//                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250, Global.WindowHeightHalf+32, 1, 32), Color.Gray);
//                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32+32-1, 500-1-1, 1), Color.Gray);
//                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+500-1, Global.WindowHeightHalf+1+32, 1, 32-1), Color.Gray);


//                    int f = 255;
//                    for (int i = 0; i<30; i++) {
//                        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32+i+1, (int)(Process*498), 1), new Color(0, f, 0));
//                        if (Process!=1) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1+(int)(Process*498), Global.WindowHeightHalf+32+i, 1, 1), new Color(0, f, 0, 128));
//                        f-=5;
//                    }

//                    switch (current) {
//                        case Current.Checking:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Připojování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
//                            break;

//                        case Current.EndChecking:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
//                            break;

//                        case Current.EndLoging:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
//                            break;

//                        case Current.Loging:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
//                            break;

//                        case Current.SendingBasic:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
//                            break;

//                        case Current.GettingSpawn:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Získávání terénu").X)/2), Global.WindowHeightHalf-50, "Získávání terénu", Color.Black);
//                            break;

//                        case Current.GettingPlayers:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Informace o hráčích").X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
//                            break;

//                        case Current.LoadingAssets:
//                            DrawTextShadowMax(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Herních komponent").X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
//                            break;
//                    }
//                }

//                // menu.ButtonDraw(spriteBatch,newMouseState,newMouseState.Position.ToVector2(), new Vector2(Global.WindowWidth-400+70, Global.WindowHeight-55));
//                spriteBatch.End();
//            }

//            base.Draw(gameTime);
//        }

//        public override void Resize() {
//            if (Global.WindowWidth!=0) {
//                Translation=ZoomMatrix*Matrix.CreateTranslation(new Vector3(Global.WindowWidthHalf, Global.WindowHeightHalf, 0));
//                sunLightTarget=new RenderTarget2D(Graphics, Global.WindowWidth, Global.WindowHeight);
//                modificatedLightTarget=new RenderTarget2D(Graphics, Global.WindowWidth, Global.WindowHeight);

//                menu.Position=new Vector2(Global.WindowWidthHalf-70, Global.WindowHeightHalf+75);

//                buttonNext.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5);
//                buttonPrev.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5);
//                buttonCraft1x.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10, Global.WindowHeightHalf+160-30+8+16);
//                buttonCraft10x.Position=new Vector2(Global.WindowWidthHalf+10+80+8+10+10, Global.WindowHeightHalf+160-30+8+16);
//                buttonCraft100x.Position=new Vector2(Global.WindowWidthHalf+10+170+8, Global.WindowHeightHalf+160-30+8+16);

//                buttonRocket.Position=new Vector2(Global.WindowWidthHalf-buttonRocket.texture.Width/2, Global.WindowHeightHalf-198+430-buttonRocket.texture.Height-5);
//                buttonRadio.Position=new Vector2(Global.WindowWidthHalf-300-2+10+10+10, Global.WindowHeightHalf-234+10+240+40+40);

//            }
//        }

//        bool DisplayInventory {
//            get {
//                if (!getFromServerInv) return false;
//                return wantedBlocksInv.X==selectedMashine.X&&wantedBlocksInv.Y==selectedMashine.Y;
//            }
//        }

//        void MouseRightAction() {
//            int x = mousePosDiv16.X, y = mousePosDiv16.Y;

//            if (y<0) return;
//            if (y>125) return;

//            if (terrain[x]!=null) {
//                #region Liquits
//                if (Inventory[boxSelected].X==(int)Items.Bottle) {
//                    if (terrain[x].IsTopBlocks[y]==MBlockState.Exists) {
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.Oil) {
//                            SendRemovedBlock();
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleOil);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.WaterBlock) {
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleWater);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.WaterSalt) {
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleWater);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                    }
//                }
//                if (Inventory[boxSelected].X==(int)Items.Bucket) {
//                    if (terrain[x].IsTopBlocks[y]==MBlockState.Exists) {
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.Oil) {
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleOil);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            SendedBlockToRemove
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.WaterBlock) {
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleWater);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                        if (terrain[x].TopBlocks[y].Id==(int)BlockId.WaterSalt) {
//                            if (Global.WorldDifficulty!=2) {
//                                InventoryRemoveDInt();
//                                for (int i = 0; i<99; i++) InventoryAdd((int)Items.BottleWater);
//                            }
//                            terrain[x].TopBlocks[y]=null;
//                            terrain[x].IsTopBlocks[y]=false;
//                            return;
//                        }
//                    }
//                    //InventoryRemoveDInt();
//                    //for (int i=0; i<99; i++)InventoryAdd((int)Items.BucketWater);
//                    //return;
//                }
//                #endregion

//                #region Get food
//                if (terrain[x].IsTopBlocks[y]) {
//                    switch ((BlockId)terrain[x].TopBlocks[y].Id) {
//                        case BlockId.BucketWithLatex:
//                            DropItemToPos(mousePosRound, Items.Resin);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.BucketForRubber, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            bucketRubber.Add(new ShortAndByte(x, y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.PlumLeavesWithPlums:
//                            DropItemToPos(mousePosRound, Items.Plum);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.PlumLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.CherryLeavesWithCherries:
//                            DropItemToPos(mousePosRound, Items.Cherry);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.CherryLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.AppleLeavesWithApples:
//                            DropItemToPos(mousePosRound, Items.Apple);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.AppleLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.LemonLeavesWithLemons:
//                            DropItemToPos(mousePosRound, Items.Lemon);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.LemonLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.OrangeLeavesWithOranges:
//                            DropItemToPos(mousePosRound.X, mousePosRound.Y, Items.Orange);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.OrangeLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.OliveLeavesWithOlives:
//                            DropItemToPos(mousePosRound.X, mousePosRound.Y, Items.Olive);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.OliveLeaves, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;

//                        case BlockId.KapokLeacesFibre:
//                            DropItemToPos(mousePosRound.X, mousePosRound.Y, Items.KapokFibre);
//                            terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.KapokLeaces, new Vector2(mousePosRound.X, mousePosRound.Y));
//                            barEnergy+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            return;
//                    }
//                }


//                foreach (Plant m in terrain[x].Plants) {
//                    if (m.Height==y) {
//                        if (!m.Growing) {
//                            switch (m.Id) {
//                                case (byte)BlockId.Blueberry:
//                                    DropItemToPos(mousePosRound, Items.Blueberries);
//                                    m.Grow=125;
//                                    m.Growing=true;
//                                    m.Update();
//                                    barEnergy+=0.02f;
//                                    if (barEnergy>32) barEnergy=32;
//                                    return;

//                                case (byte)BlockId.Strawberry:
//                                    DropItemToPos(mousePosRound, Items.Strawberry);
//                                    m.Grow=125;
//                                    m.Growing=true;
//                                    m.Update();
//                                    barEnergy+=0.02f;
//                                    if (barEnergy>32) barEnergy=32;
//                                    return;

//                                case (byte)BlockId.Rashberry:
//                                    DropItemToPos(mousePosRound, Items.Rashberry);
//                                    m.Grow=125;
//                                    m.Growing=true;
//                                    m.Update();
//                                    barEnergy+=0.02f;
//                                    if (barEnergy>32) barEnergy=32;
//                                    return;
//                            }
//                        }
//                        Console.WriteLine("Grow: "+m.Grow+"; Growing: "+m.Growing+"; Height: "+m.Height+"; Id: "+m.Id+"; Vector: "+m.Vector+"; mousePosRound: "+mousePosRound+"; x,y: "+x+" "+y);
//                    }
//                }
//                #endregion

//                #region Drink Water
//                if (terrain[x].IsTopBlocks[y]) {
//                    if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock) {
//                        barWater--;
//                        if (barWater<0) barWater=0;
//                        //  DropSomethingToWater(x,y,8);
//                        return;
//                    }
//                }
//                #endregion

//                #region Hoe
//                if (terrain[x].IsSolidBlocks[y]) {
//                    if (Inventory[boxSelected].X==(int)Items.HoeBronze
//                    ||Inventory[boxSelected].X==(int)Items.HoeCopper
//                    ||Inventory[boxSelected].X==(int)Items.HoeIron
//                    ||Inventory[boxSelected].X==(int)Items.HoeStone) {

//                        if ((BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockClay
//                        ||(BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockDesert
//                        ||(BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockForest
//                        ||(BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockHills
//                        ||(BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockJungle
//                        ||(BlockId)terrain[x].SolidBlocks[y].Id==BlockId.GrassBlockPlains) {
//                            terrain[x].SolidBlocks[y]=TopBlockFromId((byte)BlockId.Dirt, mousePosRound.Vector());
//                            barEnergy+=0.02f;
//                            barWater+=0.02f;
//                            if (barEnergy>32) barEnergy=32;
//                            if (barWater>32) barWater=32;
//                            RemovePartTool();
//                            return;
//                        }
//                    }
//                }
//                #endregion

//                #region Inventory
//                if (Inventory[boxSelected].X==(int)Items.Mobile) {
//                    MobileON();
//                    inventory=InventoryType.Mobile;
//                    return;
//                }

//                if (Vector2.Distance(mousePosRound.Vector(), new Vector2(PlayerX, PlayerY))<5*16) {
//                    if (terrain[x].IsTopBlocks[y]) {
//                        switch ((BlockId)terrain[x].TopBlocks[y].Id) {
//                            case BlockId.Desk:
//                                inventory=InventoryType.Desk;
//                                selectedMashine=mousePosDiv16.Clone();
//                                SetInvCraftingBlocks();
//                                if (lastMashineType!=inventory) SetUpInvToNew();

//                                SetNeed();
//                                return;

//                            case BlockId.Shelf:
//                                inventory=InventoryType.Shelf;
//                                selectedMashine=mousePosDiv16.Clone(); ;
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;

//                            case BlockId.BoxWooden:
//                                inventory=InventoryType.BoxWooden;
//                                selectedMashine=mousePosDiv16.Clone(); ;
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;

//                            case BlockId.BoxAdv:
//                                inventory=InventoryType.BoxAdv;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;

//                            case BlockId.Radio:
//                                inventory=InventoryType.Radio;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                //PrepareRadioDialog();
//                                return;

//                            case BlockId.FurnaceStone:
//                                inventory=InventoryType.FurnaceStone;
//                                selectedMashine=mousePosDiv16.Clone();
//                                SetInvBakeIngots();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                SetNeed();
//                                return;

//                            case BlockId.FurnaceElectric:
//                                inventory=InventoryType.FurnaceElectric;
//                                selectedMashine=mousePosDiv16.Clone();
//                                SetInvBakeIngots();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                SetNeed();
//                                return;

//                            case BlockId.Macerator:
//                                inventory=InventoryType.Macerator;
//                                selectedMashine=mousePosDiv16.Clone();
//                                SetInvToDustDusts();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                SetNeed();
//                                return;

//                            case BlockId.Charger:
//                                inventory=InventoryType.Charger;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;


//                            case BlockId.SewingMachine:
//                                inventory=InventoryType.SewingMachine;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                SetNeed();
//                                return;

//                            case BlockId.Miner:
//                                inventory=InventoryType.Miner;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;

//                            case BlockId.Composter:
//                                inventory=InventoryType.Composter;
//                                selectedMashine=mousePosDiv16.Clone();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;
//                        }
//                    }

//                    for (int potencialRocketY = y; potencialRocketY>y-5; potencialRocketY--) {
//                        if (potencialRocketY<0) break;

//                        if (terrain[x].IsTopBlocks[potencialRocketY]) {
//                            if (terrain[x].TopBlocks[potencialRocketY].Id==(byte)BlockId.Rocket) {
//                                inventory=InventoryType.Rocket;
//                                selectedMashine=new DInt(x, potencialRocketY);
//                                //PrepareRocketDialog();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;
//                            }
//                        }
//                        if (terrain[x-1].IsTopBlocks[potencialRocketY]) {
//                            if (terrain[x-1].TopBlocks[potencialRocketY].Id==(byte)BlockId.Rocket) {
//                                inventory=InventoryType.Rocket;
//                                selectedMashine=new DInt(x-1, potencialRocketY);
//                                //PrepareRocketDialog();
//                                if (lastMashineType!=inventory) SetUpInvToNew();
//                                return;
//                            }
//                        }
//                    }
//                }
//                #endregion

//                #region Place block
//                if (Vector2.Distance(mousePosRound.Vector(), new Vector2(PlayerX, PlayerY))<DistanceBlockEdit) {
//                    Items id = (Items)Inventory[boxSelected].X;
//                    if (id!=0) {

//                        if (!terrain[x].IsSolidBlocks[y]) {
//                            Block block = SolidBlockFromId((byte)GameMethods.SolidBlockFromItem(id), mousePosRound.Vector());

//                            if (block!=null) {
//                                if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                terrain[x].SolidBlocks[y]=block;
//                                terrain[x].IsSolidBlocks[y]=true;

//                                RefreshLighting(x);

//                                Inventory[boxSelected].Y--;
//                                if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
//                                return;
//                            }

//                            if (y!=0) {
//                                if (y+1<=125)
//                                    if (terrain[x].IsSolidBlocks[y+1]) {
//                                        if (terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.Dirt||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.Compost) {
//                                            if (!terrain[x].IsTopBlocks[y]) {

//                                                bool isNotPlant = true;
//                                                foreach (Plant p in terrain[x].Plants) {
//                                                    if (p.Height==y) {
//                                                        isNotPlant=false;
//                                                        break;
//                                                    }
//                                                }
//                                                if (isNotPlant) {
//                                                    switch (id) {
//                                                        case Items.Seeds:
//                                                            switch (random.Next(10)) {
//                                                                default: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.Dandelion, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 1: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.Orchid, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 2: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.Rose, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 3: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.Heather, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 4: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.Violet, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 5: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.GrassDesert, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 6: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.GrassForest, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 7: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.GrassHills, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 8: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.GrassJungle, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                                case 9: terrain[x].TopBlocks[y]=TopBlockFromId((byte)BlockId.GrassPlains, new Vector2(mousePosRound.X, mousePosRound.Y)); break;
//                                                            }
//                                                            terrain[x].IsTopBlocks[y]=true;
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.WheatSeeds:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Wheat, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.FlaxSeeds:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Flax, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.Carrot:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Carrot, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.Onion:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Onion, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.Peas:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Peas, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.PlantRashberry:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Rashberry, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.PlantStrawberry:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Strawberry, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;

//                                                        case Items.PlantBlueberry:
//                                                            terrain[x].Plants.Add(GetPlantFromId((byte)BlockId.Blueberry, (byte)y, 0, (short)x));
//                                                            RegisterPlant(x);
//                                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                                            InventoryRemoveDInt();
//                                                            return;
//                                                    }
//                                                }
//                                            }
//                                        }

//                                        BlockId mobId = GameMethods.MobFromItem(id);
//                                        if (mobId!=BlockId.None) {
//                                            bool NotExists = true;
//                                            foreach (Mob mob in terrain[x].Mobs) {
//                                                if (mob.Height==y) {
//                                                    NotExists=false;
//                                                    break;
//                                                }
//                                            }

//                                            if (NotExists) {
//                                                Mob m = GetMobFromId(mobId, (byte)y, random.Next()==1, x);
//                                                if (m!=null) {
//                                                    terrain[x].Mobs.Add(m);
//                                                }
//                                            }
//                                        }
//                                    }
//                            }
//                        }

//                        if (!terrain[x].IsBackground[y]) {
//                            Block block = BackBlockFromId((byte)GameMethods.BackBlockFromItem(id), new Vector2(mousePosRound.X, mousePosRound.Y));

//                            if (block!=null) {
//                                if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
//                                terrain[x].Background[y]=block;
//                                terrain[x].IsBackground[y]=true;

//                                Inventory[boxSelected].Y--;
//                                if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
//                                return;
//                            }
//                        }

//                        if (!terrain[x].IsTopBlocks[y]) {
//                            Block block = TopBlockFromId((byte)GameMethods.TopBlockFromItem(id), mousePosRound.Vector());

//                            if (block!=null) {
//                                if (!GameMethods.IsDirtPlaceable((BlockId)block.Id)) {
//                                    if (terrain[x].IsSolidBlocks[y+1]) {
//                                        if (terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.Dirt
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.Compost
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.Clay
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockClay
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockDesert
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockForest
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockHills
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockJungle
//                                        ||terrain[x].SolidBlocks[y+1].Id==(byte)BlockId.GrassBlockPlains) {
//                                            terrain[x].TopBlocks[y]=block;
//                                            terrain[x].IsTopBlocks[y]=true;
//                                            if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;

//                                            Inventory[boxSelected].Y--;
//                                            if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
//                                            return;
//                                        } else return;
//                                    } else return;
//                                } else {
//                                    if (id==Items.BucketForRubber) {
//                                        if (!terrain[x].IsBackground[y]) return;
//                                        if (terrain[x].Background[y].Id!=(int)BlockId.RubberTreeWood) return;
//                                    }

//                                    terrain[x].TopBlocks[y]=block;
//                                    terrain[x].IsTopBlocks[y]=true;
//                                    if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;

//                                    switch (id) {
//                                        case Items.FurnaceStone:
//                                            ((MashineBlockBasic)block).Inv=new List<DInt>(){
//                                                // Wood
//                                                new DInt(),new DInt(),new DInt(),

//                                                //Ash
//                                                new DInt(),
//                                            };
//                                            FurnaceStone.Add(new ShortAndByte(x, y));
//                                            break;

//                                        case Items.Charger:
//                                            ((MashineBlockBasic)block).Inv=new List<DInt> {
//                                                new DInt()
//                                            };
//                                            Chargers.Add(new ShortAndByte((short)x, (byte)y));
//                                            RefreshAroundLabels(x, y);
//                                            break;

//                                        case Items.Miner:
//                                            ((MashineBlockBasic)block).Inv=new List<DInt>();
//                                            for (int i = 0; i<12*2; i++) ((MashineBlockBasic)block).Inv.Add(new DInt());
//                                            Miners.Add(new ShortAndByte((short)x, (byte)y));
//                                            RefreshAroundLabels(x, y);
//                                            break;

//                                        case Items.Composter:
//                                            ((ShelfBlock)block).Inv=new List<DInt>();
//                                            for (int i = 0; i<12*2; i++) ((ShelfBlock)block).Inv.Add(new DInt());
//                                            Composters.Add(new ShortAndByte((short)x, (byte)y));
//                                            break;

//                                        case Items.BucketForRubber:
//                                            if (terrain[x].IsBackground[y]) {
//                                                if (terrain[x].Background[y].Id==(int)BlockId.RubberTreeWood) {
//                                                    bucketRubber.Add(new ShortAndByte((short)x, (byte)y));
//                                                } else {
//                                                    ItemDrop((int)Items.BucketForRubber, 1, x, y);
//                                                    terrain[x].IsBackground[y]=false;
//                                                    terrain[x].Background[y]=null;
//                                                }
//                                            } else {
//                                                ItemDrop((int)Items.BucketForRubber, 1, x, y);
//                                                terrain[x].IsBackground[y]=false;
//                                                terrain[x].Background[y]=null;
//                                            }
//                                            //((ShelfBlock)block).Inv=new List<DInt>();
//                                            //for (int i = 0; i<12*2; i++) ((ShelfBlock)block).Inv.Add(new DInt());


//                                            break;

//                                        case Items.Lamp:
//                                            RefreshAroundLabels(x, y);
//                                            break;

//                                        case Items.Radio:
//                                            RefreshAroundLabels(x, y);
//                                            break;

//                                        case Items.Label:
//                                            SetIndexLabel(x, y);
//                                            RefreshAroundLabels(x, y);
//                                            break;

//                                        case Items.Shelf:
//                                            ((ShelfBlock)block).Inv=new List<DInt>(){
//                                                new DInt(),new DInt(),new DInt(),
//                                                new DInt(),new DInt(),new DInt(),
//                                                new DInt(),new DInt(),new DInt(),
//                                            };
//                                            break;

//                                        case Items.BoxWooden:
//                                            ((BoxBlock)block).Inv=new List<DInt>();
//                                            for (int i = 0; i<12*2; i++) ((BoxBlock)block).Inv.Add(new DInt());
//                                            break;

//                                        case Items.BoxAdv:
//                                            ((BoxBlock)block).Inv=new List<DInt>();
//                                            for (int i = 0; i<14*4; i++) ((BoxBlock)block).Inv.Add(new DInt());
//                                            break;

//                                        case Items.Flag:
//                                            windable.Add(new ShortAndByte((short)x, (byte)y));
//                                            break;

//                                        case Items.WindMill:
//                                            windable.Add(new ShortAndByte((short)x, (byte)y));
//                                            RefreshAroundLabels(x, y);
//                                            break;
//                                    }
//                                    Inventory[boxSelected].Y--;
//                                    if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
//                                    return;
//                                }
//                            }
//                        }
//                    }
//                }
//                #endregion
//            }
//        }

//        Color StringToColor(string str) {
//            string h = str.Replace("[", "").Replace("]", "").Replace(" ", "");
//            return new Color(int.Parse(h.Substring(0, h.IndexOf(","))),
//                int.Parse(h.Substring(h.IndexOf(",")+1, h.LastIndexOf(",")-h.IndexOf(",")-1)),
//                int.Parse(h.Substring(h.LastIndexOf(",")+1)));
//        }

//        void GrowTreeFood(int reg) {
//            int id = random.Next(1000-1)+1+reg;

//            int i = random.Next(124)+1;
//            if (terrain[id].IsTopBlocks[i]) {
//                switch (terrain[id].TopBlocks[i].Id) {
//                    case (byte)BlockId.AppleLeaves:
//                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.AppleLeavesWithApples, new Vector2(id*16, i*16));
//                        return;

//                    case (byte)BlockId.PlumLeaves:
//                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.PlumLeavesWithPlums, new Vector2(id*16, i*16));
//                        return;

//                    case (byte)BlockId.LemonLeaves:
//                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.LemonLeavesWithLemons, new Vector2(id*16, i*16));
//                        return;

//                    case (byte)BlockId.OrangeLeaves:
//                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.OrangeLeavesWithOranges, new Vector2(id*16, i*16));
//                        return;

//                    case (byte)BlockId.CherryLeaves:
//                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.CherryLeavesWithCherries, new Vector2(id*16, i*16));
//                        return;
//                }
//            } else if (random.Next(10000)==1) {
//                if (terrain[id].IsSolidBlocks[i]) {
//                    switch (terrain[id].SolidBlocks[i].Id) {
//                        case (byte)BlockId.Compost:
//                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.Dirt, new Vector2(id*16, i*16));
//                            return;

//                        case (byte)BlockId.Dirt:
//                            if (!terrain[id].IsSolidBlocks[i-1]) {
//                                int r = random.Next(2)==1 ? 1 : -1;
//                                if (terrain[id+r].IsSolidBlocks[i]) {
//                                    switch (terrain[id+r].SolidBlocks[i].Id) {
//                                        case (byte)BlockId.GrassBlockDesert:
//                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockDesert, new Vector2(id*16, i*16));
//                                            return;

//                                        case (byte)BlockId.GrassBlockForest:
//                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockForest, new Vector2(id*16, i*16));
//                                            return;

//                                        case (byte)BlockId.GrassBlockHills:
//                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockHills, new Vector2(id*16, i*16));
//                                            return;

//                                        case (byte)BlockId.GrassBlockJungle:
//                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockJungle, new Vector2(id*16, i*16));
//                                            return;

//                                        case (byte)BlockId.GrassBlockPlains:
//                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockPlains, new Vector2(id*16, i*16));
//                                            return;
//                                    }
//                                }
//                            }
//                            return;

//                        case (byte)BlockId.Clay:
//                            if (!terrain[id].IsSolidBlocks[i-1]) {
//                                int r = random.Next(2)==1 ? 1 : -1;
//                                if (terrain[id+r].IsSolidBlocks[i]) {
//                                    if (terrain[id+r].SolidBlocks[i].Id==(byte)BlockId.GrassBlockClay) {
//                                        terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockClay, new Vector2(id*16, i*16));
//                                        return;
//                                    }
//                                }
//                            }
//                            return;

//                    }
//                }
//            }
//        }

//        public void Connect() {
//            clientSocket=new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp) {
//                ReceiveTimeout=10
//            };
//            IPAddress ipAddress = ip;

//            if (ipAddress.ToString()==IPAddress.Any.ToString()) { ipAddress=IPAddress.Loopback; ip=IPAddress.Loopback; }

//            IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, port);

//            Console.WriteLine("Připojování: "+ipAddress.ToString()+":"+port);

//            clientSocket.BeginConnect(ipEndPoint, new AsyncCallback(OnCheck), null);
//        }

//        public void ConnectDuringGameError() {
//            clientSocket=new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp) {
//                ReceiveTimeout=10
//            };
//            IPAddress ipAddress = ip;

//            if (ipAddress.ToString()==IPAddress.Any.ToString()) ipAddress=IPAddress.Loopback;

//            IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, port);

//            Console.WriteLine("Znovupřipojování: "+ipAddress.ToString()+":"+port);

//            clientSocket.BeginConnect(ipEndPoint, new AsyncCallback(OnCheck), null);
//        }

//        void SendMyInventory() {
//            Data data = new Data {
//                Cmd=Command.Message,
//                To=toServer,
//                Message="*int-set ",
//            };

//            data.Message+=maxInvCount+" ";

//            for (int i = 0; i<maxInvCount; i++) {
//                DInt p = Inventory[i];
//                data.Message+=p.X+" "+p.Y+" ";
//            }

//            Queue.Add(
//                new DataToSend {
//                    Bytes=data.ToByte(),
//                    Importance=Importance.Middle,
//                }
//            );
//        }

//        void SendMachineInventory(int x, int y) {
//            List<DInt> inv = null;
//            int id = terrain[x].TopBlocks[y].Id;

//            if (terrain[x].TopBlocks[y] is BoxBlock) {
//                inv=((BoxBlock)terrain[x].TopBlocks[y]).Inv;
//            } else if (terrain[x].TopBlocks[y] is MashineBlockBasic) {
//                inv=((MashineBlockBasic)terrain[x].TopBlocks[y]).Inv;
//            } else if (terrain[x].TopBlocks[y] is ShelfBlock) {
//                inv=((ShelfBlock)terrain[x].TopBlocks[y]).Inv;
//            } else return;

//            Data data = new Data {
//                Cmd=Command.Message,
//                To=toServer,
//                Message="*inv-machine-set "+x+" "+y+" ",
//            };

//            data.Message+=inv.Count+" ";

//            for (int i = 0; i<inv.Count; i++) {
//                DInt p = inv[i];
//                data.Message+=p.X+" "+p.Y+" ";
//            }

//            Queue.Add(
//                new DataToSend {
//                    Bytes=data.ToByte(),
//                    Importance=Importance.Middle,
//                }
//            );
//        }

//        void GetMachineInventory(int x, int y) {
//            Queue.Add(
//                new DataToSend {
//                    Bytes=new Data {
//                        Cmd=Command.Message,
//                        To=toServer,
//                        Message="*inv-machine-get "+x+" "+y,
//                    }.ToByte(),
//                    Importance=Importance.Middle,
//                }
//            );
//        }

//        void SendInventory() {
//            // List<DInt> inv=null;


//            Data data = new Data {
//                Cmd=Command.Message,
//                To=toServer,
//                Message="*inv-set ",
//            };

//            data.Message+=maxInvCount+" ";

//            for (int i = 0; i<maxInvCount; i++) {
//                DInt p = Inventory[i];
//                data.Message+=p.X+" "+p.Y+" ";
//            }

//            Queue.Add(
//                new DataToSend {
//                    Bytes=data.ToByte(),
//                    Importance=Importance.Middle,
//                }
//            );
//        }

//        void GetInventory() {
//            Queue.Add(
//                new DataToSend {
//                    Bytes=new Data {
//                        Cmd=Command.Message,
//                        To=toServer,
//                        Message="*inv-get ",
//                    }.ToByte(),
//                    Importance=Importance.Middle,
//                }
//            );
//        }

//        void CloseInv(bool machine) {
//            if (inventoryChanged) {
//                SendInventory();

//                if (machine) SendMachineInventory(selectedMashine.X, selectedMashine.Y);
//            }
//            inventory=0;
//        }

//        #region Destroy
//        void GetItemsFromMob(byte type, int X, int Y) {
//            int X16 = X*16, Y16 = Y*16;

//            switch ((BlockId)type) {
//                case BlockId.Chicken:
//                    if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    DropItemToPos(X16, Y16, Items.RabbitMeat);
//                    return;

//                case BlockId.Rabbit:
//                    if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    DropItemToPos(X16, Y16, Items.RabbitMeat);
//                    return;

//                case BlockId.Fish:
//                    DropItemToPos(X16, Y16, Items.Fish); if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Fish);
//                    return;
//            }
//        }
//        float GetMobDestroingSpeed(byte type) {
//            switch ((BlockId)type) {
//                case BlockId.Rabbit: return 30;
//                case BlockId.Chicken: return 30;
//                case BlockId.Fish: return 30;
//            }

//            return 0;
//        }
//        void Destroy(int x, int y) {
//            float destrustionSlow;
//            {
//                float distance = Vector2.Distance(mousePosRound.Vector(), new Vector2(PlayerX, PlayerY));

//                if (distance>DistanceBlockEdit) destrustionSlow=-1;
//                else if (distance<DistanceBlockEdit/2) {
//                    destrustionSlow=1;
//                } else {
//                    destrustionSlow=(float)Math.Pow(1.05, distance-DistanceBlockEdit/2);
//                }
//            }

//            if (destrustionSlow>0) {
//                if (Global.WorldDifficulty==2) {
//                    if (terrain[x].IsSolidBlocks[y]) {
//                        destroingIndex=0;
//                        destroingBlockType=terrain[x].SolidBlocks[y].Id;
//                        destringMaxIndex=10;
//                        destroyBlock=new DInt { X=x, Y=y };
//                        destroingBlockDepth=BlockType.Solid;
//                        destroing=true;
//                        return;
//                    }

//                    foreach (Plant p in terrain[x].Plants) {
//                        if (p.Vector.Y/16==y) {
//                            destroingIndex=0;
//                            destroingBlockType=p.Id;
//                            destringMaxIndex=10;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Plant;
//                            destroing=true;
//                            return;
//                        }
//                    }

//                    foreach (Mob m in terrain[x].Mobs) {
//                        if (m.Height==y) {
//                            destroingIndex=0;
//                            destroingBlockType=m.Id;
//                            destringMaxIndex=10;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Mob;
//                            destroing=true;
//                            return;
//                        }
//                    }

//                    if (terrain[x].IsTopBlocks[y]) {
//                        destroingBlockType=terrain[x].TopBlocks[y].Id;
//                        if (GameMethods.CanDestroy((BlockId)destroingBlockType)) {
//                            destroingIndex=0;
//                            destringMaxIndex=10;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Top;
//                            destroing=true;
//                            return;
//                        } else destroing=false;
//                    }

//                    if (terrain[x].IsBackground[y]) {
//                        destroingIndex=0;
//                        destroingBlockType=terrain[x].Background[y].Id;
//                        destringMaxIndex=10;

//                        destroyBlock=new DInt { X=x, Y=y };
//                        destroingBlockDepth=BlockType.Back;
//                        destroing=true;
//                        return;
//                    }
//                } else {
//                    if (terrain[x].IsSolidBlocks[y]) {
//                        destroingIndex=0;
//                        destroingBlockType=terrain[x].SolidBlocks[y].Id;
//                        destringMaxIndex=GetSolidBlockDestroingSpeed(destroingBlockType)*destrustionSlow;
//                        destroyBlock=new DInt { X=x, Y=y };
//                        destroingBlockDepth=BlockType.Solid;
//                        destroing=true;
//                        return;
//                    }

//                    foreach (Plant p in terrain[x].Plants) {
//                        if (p.Height==y) {
//                            destroingIndex=0;
//                            destroingBlockType=p.Id;
//                            destringMaxIndex=GetPlantDestroingSpeed(destroingBlockType)*destrustionSlow;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Plant;
//                            destroing=true;
//                            return;
//                        }
//                    }

//                    foreach (Mob m in terrain[x].Mobs) {
//                        if (m.Height==y) {
//                            destroingIndex=0;
//                            destroingBlockType=m.Id;
//                            destringMaxIndex=GetMobDestroingSpeed(destroingBlockType)*destrustionSlow;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Mob;
//                            destroing=true;
//                            return;
//                        }
//                    }

//                    if (terrain[x].IsTopBlocks[y]) {
//                        destroingBlockType=terrain[x].TopBlocks[y].Id;
//                        if (GameMethods.CanDestroy((BlockId)destroingBlockType)) {
//                            destroingIndex=0;
//                            destringMaxIndex=GetTopBlockDestroingSpeed(destroingBlockType)*destrustionSlow;
//                            destroyBlock=new DInt { X=x, Y=y };
//                            destroingBlockDepth=BlockType.Top;
//                            destroing=true;
//                            return;
//                        } else destroing=false;
//                    }

//                    if (terrain[x].IsBackground[y]) {
//                        destroingIndex=0;
//                        destroingBlockType=terrain[x].Background[y].Id;
//                        destringMaxIndex=GetBackBlockDestroingSpeed(destroingBlockType)*destrustionSlow;

//                        destroyBlock=new DInt { X=x, Y=y };
//                        destroingBlockDepth=BlockType.Back;
//                        destroing=true;
//                        return;
//                    }
//                }
//            }
//        }

//        void DestroyGrassUp(int x, int y) {
//            if (terrain[x].IsTopBlocks[y]) {
//                BlockId id = (BlockId)terrain[x].TopBlocks[y].Id;

//                if (id==BlockId.Alore
//                ||id==BlockId.Rose
//                ||id==BlockId.Orchid
//                ||id==BlockId.Dandelion
//                ||id==BlockId.Violet
//                ||id==BlockId.Heather
//                ||id==BlockId.GrassDesert
//                ||id==BlockId.GrassForest
//                ||id==BlockId.GrassHills
//                ||id==BlockId.GrassJungle
//                ||id==BlockId.GrassPlains

//                ||id==BlockId.BranchALittle1
//                ||id==BlockId.BranchALittle2
//                ||id==BlockId.BranchFull
//                ||id==BlockId.BranchWithout

//                ||id==BlockId.CherrySapling
//                ||id==BlockId.AppleSapling
//                ||id==BlockId.LemonSapling
//                ||id==BlockId.LindenSapling
//                ||id==BlockId.OakSapling
//                ||id==BlockId.OrangeSapling
//                ||id==BlockId.PineSapling
//                ||id==BlockId.PlumSapling
//                ||id==BlockId.SpruceSapling

//                ||id==BlockId.Rocks

//                ||id==BlockId.Boletus
//                ||id==BlockId.Champignon
//                ||id==BlockId.Toadstool) {
//                    destroingBlockDepth=BlockType.Top;
//                    GetItemsFromBlock((byte)id, x, y/*,destroingBlockDepth*/);
//                    terrain[x].IsTopBlocks[y]=false;
//                    terrain[x].TopBlocks[y]=null;
//                }
//            }

//            foreach (Plant p in terrain[x].Plants) {
//                if (p.Height==y) {
//                    destroingBlockDepth=0;
//                    GetItemsFromBlock(p.Id, x, y/*,destroingBlockDepth*/);
//                    terrain[x].Plants.Remove(p);
//                    RemovePlant(x);
//                    break;
//                }
//            }
//        }

//        void DestroySandUp(int x, int y) {
//            if (terrain[x].IsTopBlocks[y]) {
//                BlockId id = (BlockId)terrain[x].TopBlocks[y].Id;

//                if (id==BlockId.Alore
//                ||id==BlockId.GrassDesert
//                ||id==BlockId.BranchALittle1
//                ||id==BlockId.BranchALittle2
//                ||id==BlockId.BranchFull
//                ||id==BlockId.BranchWithout
//                ||id==BlockId.Rocks) {
//                    GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
//                    terrain[x].IsTopBlocks[y]=false;
//                    terrain[x].TopBlocks[y]=null;
//                }

//                if (id==BlockId.CactusBig) {

//                    // current
//                    GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
//                    terrain[x].IsTopBlocks[y]=false;
//                    terrain[x].TopBlocks[y]=null;

//                    //if more
//                    for (int yy = y-1; yy>=0; yy--) {
//                        if (terrain[x].IsTopBlocks[yy]) {
//                            BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

//                            if (potencialCactus==BlockId.CactusBig) {
//                                GetItemsFromBlock((byte)id, x, yy/*,BlockType.Top*/);
//                                terrain[x].IsTopBlocks[yy]=false;
//                                terrain[x].TopBlocks[yy]=null;
//                            }
//                        } else return;
//                    }
//                }

//                if (id==BlockId.CactusSmall) {

//                    // current
//                    GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
//                    terrain[x].IsTopBlocks[y]=false;
//                    terrain[x].TopBlocks[y]=null;

//                    //if more
//                    for (int yy = y-1; yy>=0; yy--) {
//                        if (terrain[x].IsTopBlocks[yy]) {
//                            BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

//                            if (potencialCactus==BlockId.CactusSmall) {
//                                GetItemsFromBlock((byte)id, x, yy/*,BlockType.Top*/);
//                                terrain[x].IsTopBlocks[yy]=false;
//                                terrain[x].TopBlocks[yy]=null;
//                            }
//                        } else return;
//                    }
//                }
//            }
//        }

//        void DestroyCactusBig(int x, int y) {
//            for (int yy = y-1; yy>=0; yy--) {
//                if (terrain[x].IsTopBlocks[yy]) {
//                    BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

//                    if (potencialCactus==BlockId.CactusBig) {
//                        GetItemsFromBlock((byte)BlockId.CactusBig, x, yy/*,BlockType.Top*/);
//                        terrain[x].IsTopBlocks[yy]=false;
//                        terrain[x].TopBlocks[yy]=null;
//                    }
//                } else return;
//            }
//        }

//        void DestroyCactusSmall(int x, int y) {
//            for (int yy = y-1; yy>=0; yy--) {
//                if (terrain[x].IsTopBlocks[yy]) {
//                    BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

//                    if (potencialCactus==BlockId.CactusSmall) {
//                        GetItemsFromBlock((byte)BlockId.CactusSmall, x, yy/*,BlockType.Top*/);
//                        terrain[x].IsTopBlocks[yy]=false;
//                        terrain[x].TopBlocks[yy]=null;
//                    }
//                } else return;
//            }
//        }

//        void AutoDestroyLeaves(byte wood, byte leaves) {
//            int Xran = terrainStartIndexX+random.Next(terrainStartIndexW-terrainStartIndexX),
//                Yran = terrainStartIndexY+random.Next(terrainStartIndexH-terrainStartIndexY);

//            if (terrain[Xran].IsTopBlocks[Yran]) {
//                if (terrain[Xran].TopBlocks[Yran].Id==leaves) {

//                    //Rectangle
//                    int startX = Xran-4, startY = Yran-4, endX = Xran+4, endY = Yran+4;

//                    //Limit
//                    if (startX<0) startX=0;
//                    if (startY<0) startY=0;

//                    if (endX>TerrainLenght) endX=TerrainLenght;
//                    if (endY>120) endY=120;

//                    if (IsNotNearWood(wood, startX, startY, endX, endY)) {
//                        GetItemsFromBlock(leaves, Xran, Yran/*,BlockType.Top*/);
//                        terrain[Xran].IsTopBlocks[Yran]=false;
//                        terrain[Xran].TopBlocks[Yran]=null;
//                    }
//                }
//            }
//        }

//        void AutoDestroyLeaves(byte wood, byte leaves, byte alternativeLeaves) {
//            int Xran = terrainStartIndexX+random.Next(terrainStartIndexW-terrainStartIndexX),
//                Yran = terrainStartIndexY+random.Next(terrainStartIndexH-terrainStartIndexY);

//            if (terrain[Xran].IsTopBlocks[Yran]) {
//                if (terrain[Xran].TopBlocks[Yran].Id==leaves||terrain[Xran].TopBlocks[Yran].Id==alternativeLeaves) {

//                    //Rectangle
//                    int startX = Xran-4, startY = Yran-4, endX = Xran+4, endY = Yran+4;

//                    //Limit
//                    if (startX<0) startX=0;
//                    if (startY<0) startY=0;

//                    if (endX>TerrainLenght) endX=TerrainLenght;
//                    if (endY>120) endY=120;

//                    if (IsNotNearWood(wood, startX, startY, endX, endY)) {
//                        if (terrain[Xran].TopBlocks[Yran].Id==leaves) GetItemsFromBlock(leaves, Xran, Yran/*,BlockType.Top*/);
//                        else GetItemsFromBlock(alternativeLeaves, Xran, Yran/*,BlockType.Top*/);

//                        terrain[Xran].IsTopBlocks[Yran]=false;
//                        terrain[Xran].TopBlocks[Yran]=null;
//                    }
//                }
//            }
//        }

//        bool IsNotNearWood(byte wood, int startX, int startY, int endX, int endY) {
//            for (int x = startX; x<endX; x++) {
//                for (int y = startY; y<endY; y++) {
//                    if (terrain[x].IsBackground[y]) {
//                        if (terrain[x].Background[y].Id==wood) return false;
//                    }
//                }
//            }
//            return true;
//        }

//        #endregion

//        #region Dropped items
//        void ItemDrop(int id, int count, DInt _pos) {
//            DroppedItems.Add(new Item {
//                X=_pos.X,
//                Y=_pos.Y,
//                Count=count,
//                Texture=ItemIdToTexture(id),
//                Id=(Items)id,
//            });
//        }

//        void ItemDrop(int id, int count, int x, int y) {
//            DroppedItems.Add(new Item {
//                X=x,
//                Y=y,
//                Count=count,
//                Texture=ItemIdToTexture(id),
//                Id=(Items)id,
//            });
//        }
//        void DropItemToPos(DInt d, Items i) {
//            DroppedItems.Add(new Item {
//                X=d.X,
//                Y=d.Y,
//                Id=i,
//                Texture=ItemIdToTexture((int)i)
//            });
//        }

//        void DropItemToPos(int x, int y, Items i) {
//            DroppedItems.Add(new Item {
//                X=x,
//                Y=y,
//                Id=i,
//                Texture=ItemIdToTexture((int)i)
//            });
//        }

//        #endregion

//        #region Terrain
//        //void Save(int pos) {
//        //    using (FileStream stream = new FileStream(playedWorld+"\\Earth\\Terrain ["+pos+"].rch", FileMode.Create, FileAccess.Write)) {
//        //        List<byte> backBlocks=new List<byte>();
//        //        List<byte> solidBlocks= new List<byte>();
//        //        List<byte> topBlocks= new List<byte>();

//        //        byte backblockzeros=0;
//        //        byte topblockzeros = 0;
//        //        byte solidblockzeros = 0;

//        //        for (int i=0; i<125; i++) {

//        //            // Back blocks
//        //            if (terrain[pos].IsBackground[i]) {

//        //                if (backblockzeros!=0) {
//        //                    if (backblockzeros>2){
//        //                        backBlocks.Add(1);
//        //                        backBlocks.Add(backblockzeros);
//        //                    } else{
//        //                        for (int j=0; j<backblockzeros; j++) backBlocks.Add(0);
//        //                    }
//        //                    backblockzeros=0;
//        //                }

//        //                backBlocks.Add(terrain[pos].Background[i].Id);

//        //            } else {
//        //                backblockzeros++;
//        //            }


//        //            // Solid blocks
//        //            if (terrain[pos].IsSolidBlocks[i]) {

//        //                if (solidblockzeros!=0) {
//        //                    if (solidblockzeros>2) {
//        //                        solidBlocks.Add(1);
//        //                        solidBlocks.Add(solidblockzeros);
//        //                    } else {
//        //                        for (int j = 0; j<solidblockzeros; j++) solidBlocks.Add(0);
//        //                    }
//        //                    solidblockzeros=0;
//        //                }

//        //                solidBlocks.Add(terrain[pos].SolidBlocks[i].Id);
//        //            } else {
//        //                solidblockzeros++;
//        //            }


//        //            // Top blocks
//        //            if (terrain[pos].IsTopBlocks[i]) {

//        //                if (topblockzeros!=0) {
//        //                    if (topblockzeros>2) {
//        //                        topBlocks.Add(1);
//        //                        topBlocks.Add(topblockzeros);
//        //                    }else {
//        //                        for (int j = 0; j<topblockzeros; j++) topBlocks.Add(0);
//        //                    }
//        //                    topblockzeros=0;
//        //                }

//        //                byte id=terrain[pos].TopBlocks[i].Id;
//        //                topBlocks.Add(id);

//        //                if (id==(byte)BlockId.FurnaceStone) {
//        //                    MashineBlockBasic block=(MashineBlockBasic)terrain[pos].TopBlocks[i];

//        //                    topBlocks.Add((byte)block.Inv[0].X);
//        //                    topBlocks.Add((byte)block.Inv[0].Y);

//        //                    topBlocks.Add((byte)block.Inv[1].X);
//        //                    topBlocks.Add((byte)block.Inv[1].Y);

//        //                    topBlocks.Add((byte)block.Inv[2].X);
//        //                    topBlocks.Add((byte)block.Inv[2].Y);

//        //                    topBlocks.Add((byte)block.Inv[3].X);
//        //                    topBlocks.Add((byte)block.Inv[3].Y);

//        //                    topBlocks.Add((byte)(block.Energy*255));
//        //                } else if (id==(byte)BlockId.Shelf) {
//        //                    List<DInt> inv=((ShelfBlock)terrain[pos].TopBlocks[i]).Inv;

//        //                    foreach (DInt d in inv){
//        //                        topBlocks.Add((byte)d.X);
//        //                        topBlocks.Add((byte)d.Y);
//        //                    }
//        //                } else if (id==(byte)BlockId.BoxWooden) {
//        //                    List<DInt> inv=((BoxBlock)terrain[pos].TopBlocks[i]).Inv;


//        //                    foreach (DInt d in inv){
//        //                        topBlocks.Add((byte)d.X);
//        //                        topBlocks.Add((byte)d.Y);
//        //                    }
//        //                } else if (id==(byte)BlockId.BoxAdv) {
//        //                    List<DInt> inv=((BoxBlock)terrain[pos].TopBlocks[i]).Inv;

//        //                    foreach (DInt d in inv){
//        //                        topBlocks.Add((byte)d.X);
//        //                        topBlocks.Add((byte)d.Y);
//        //                    }
//        //                }
//        //            } else {
//        //                topblockzeros++;
//        //            }
//        //        }

//        //        if (backblockzeros>2) {
//        //            backBlocks.Add(1);
//        //            backBlocks.Add(backblockzeros);
//        //        }else{
//        //            for (int j = 0; j<backblockzeros; j++) backBlocks.Add(0);
//        //        }

//        //        if (solidblockzeros>2) {
//        //            solidBlocks.Add(1);
//        //            solidBlocks.Add(solidblockzeros);
//        //        } else {
//        //            for (int j = 0; j<solidblockzeros; j++) solidBlocks.Add(0);
//        //        }

//        //        if (topblockzeros>2) {
//        //            topBlocks.Add(1);
//        //            topBlocks.Add(topblockzeros);
//        //        } else {
//        //            for (int j = 0; j<topblockzeros; j++) topBlocks.Add(0);
//        //        }

//        //        List<byte> plants=new List<byte>();
//        //        foreach (Plant m in terrain[pos].Plants) {
//        //            plants.Add(m.Id);
//        //            plants.Add(m.Height);
//        //            plants.Add(m.Grow);
//        //        }

//        //        List<byte> mobs = new List<byte>();
//        //        foreach (Mob m in terrain[pos].Mobs) {
//        //            mobs.Add(m.Id);
//        //            mobs.Add((byte)(m.Position.Y/16));
//        //            mobs.Add(m.Lives);
//        //            mobs.Add(m.Dir ? (byte)1 : (byte)0);
//        //        }


//        //        stream.WriteByte(terrain[pos].LightPos);

//        //        stream.Write(backBlocks.ToArray(),0,backBlocks.ToArray().Length);
//        //        stream.Write(solidBlocks.ToArray(),0,solidBlocks.ToArray().Length);
//        //        stream.Write(topBlocks.ToArray(),0,topBlocks.ToArray().Length);

//        //        stream.Write(plants.ToArray(),0,plants.ToArray().Length);
//        //        stream.WriteByte(1);
//        //        stream.Write(mobs.ToArray(),0,mobs.ToArray().Length);
//        //    }
//        //}

//        //void Load(int pos) {
//        //    if (File.Exists(playedWorld+ @"Earth\Terrain ["+pos+"].rch")) {
//        //        using (StreamReader sr = new StreamReader(playedWorld+ @"Earth\Terrain ["+pos+"].rch")) {
//        //            BinaryReader br = new BinaryReader(sr.BaseStream);

//        //            //  terrain[pos]
//        //            MTerrain chunk=terrain[pos]=new MTerrain(){
//        //                LightPos=br.ReadByte(),
//        //            };
//        //            chunk.LightVec=new Vector2(pos*16-48+8,chunk. LightPos*16-48+8);
//        //            chunk.LightPos16=chunk.LightPos*16;
//        //            int ss=125;

//        //            //0=nic
//        //            //1=připrav se, další byte o přeskočení

//        //            //BackBlocks
//        //            for (int lenght=0; lenght<125; lenght++) {
//        //                byte input = br.ReadByte();

//        //                if (input>1){
//        //                    Block block=BackBlockFromId(input, new Vector2(pos*16, lenght*16));
//        //                    if (block!=null){
//        //                        if (ss>lenght) ss=lenght;
//        //                        chunk.Background[lenght]=block;
//        //                        chunk.IsBackground[lenght]=true;
//        //                    }
//        //                } else if (input==1) lenght+=br.ReadByte()-1;
//        //            }

//        //            // SolidBlocks
//        //            for (int lenght=0; lenght<125; lenght++) {
//        //                byte input = br.ReadByte();

//        //                if (input>1){
//        //                    Block block=SolidBlockFromId(input, new Vector2(pos*16, lenght*16));
//        //                    if (block!=null){
//        //                        if (ss>lenght) ss=lenght;
//        //                        chunk.SolidBlocks[lenght]=block;
//        //                        chunk.IsSolidBlocks[lenght]=true;
//        //                    }
//        //                } else if (input==1)lenght+=br.ReadByte()-1;
//        //            }

//        //            // TopBlocks
//        //            for (int lenght=0; lenght<125; lenght++) {
//        //                byte input = br.ReadByte();

//        //                if (input>1){
//        //                    Block block=TopBlockFromId(input, new Vector2(pos*16, lenght*16));
//        //                    if (block!=null){
//        //                        if (ss>lenght) ss=lenght;

//        //                        chunk.IsTopBlocks[lenght]=true;
//        //                        chunk.TopBlocks[lenght]=block;

//        //                        if (input==(int)BlockId.Label) {
//        //                            SetIndexLabel(pos, lenght);
//        //                            if (lenght!=0 && lenght!=125) RefreshAroundLabels(pos, lenght);
//        //                        } else if (input==(int)BlockId.FurnaceStone) {
//        //                            ((MashineBlockBasic)block).Inv=new List<DInt>(){
//        //                                // Wood
//        //                                new DInt(br.ReadByte(),br.ReadByte()),
//        //                                new DInt(br.ReadByte(),br.ReadByte()),
//        //                                new DInt(br.ReadByte(),br.ReadByte()),

//        //                                //Ash
//        //                                new DInt(br.ReadByte(),br.ReadByte()),
//        //                            };

//        //                            //Energy
//        //                            ((MashineBlockBasic)block).Energy=br.ReadByte()/255f;
//        //                        } else if (input==(int)BlockId.Shelf) {
//        //                            ((ShelfBlock)block).Inv=new List<DInt>(){
//        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//        //                            };

//        //                            if (((ShelfBlock)block).Inv[4].X!=0){
//        //                                Texture2D tex=ItemIdToTexture(((ShelfBlock)block).Inv[4].X);
//        //                                if (text!=null){
//        //                                    ((ShelfBlock)block).SmalItemTexture=tex;
//        //                                    ((ShelfBlock)block).IsSmallItem=true;
//        //                                }
//        //                            }
//        //                        } else if (input==(int)BlockId.BoxWooden) {
//        //                            ((BoxBlock)block).Inv=new List<DInt>();
//        //                            for (int i=0; i<2*12;i++)((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(),br.ReadByte()));

//        //                        }else if (input==(int)BlockId.BoxAdv) {
//        //                            ((BoxBlock)block).Inv=new List<DInt>();
//        //                            for (int i=0; i<4*14;i++)((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(),br.ReadByte()));
//        //                        }
//        //                    }
//        //                } else if (input==1) lenght+=br.ReadByte()-1;
//        //            }

//        //            {
//        //                for (int i=0; i<64;i++){
//        //                    if (br.BaseStream.Position==br.BaseStream.Length)break;
//        //                    byte input=br.ReadByte();
//        //                    if (input==1)break;

//        //                    Plant plant=GetPlantFromId(input, br.ReadByte(),br.ReadByte(),pos);
//        //                    if (plant!=null)chunk.Plants.Add(plant);

//        //                }

//        //                    for (int i=0; i<64;i++){
//        //                    if (sr.BaseStream.Position==sr.BaseStream.Length)break;
//        //                    byte input=br.ReadByte();
//        //                    if (input==1)break;

//        //                    switch ((BlockId)input) {
//        //                        case BlockId.Fish:
//        //                            chunk.Mobs.Add(new Fish(input,br.ReadByte(), br.ReadByte(), pos,br.ReadByte()==1, fishTexture0, fishTexture1, random));
//        //                            break;

//        //                        case BlockId.Chicken:
//        //                            chunk.Mobs.Add(new Chicken(input, br.ReadByte(),br.ReadByte(), pos, br.ReadByte()==1, chickenWalkTexture, chickenEatTexture, random));
//        //                            break;

//        //                        case BlockId.Rabbit:
//        //                            chunk.Mobs.Add(new Rabbit(input,br.ReadByte(), br.ReadByte(), pos, br.ReadByte()==1, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture, random));
//        //                            break;
//        //                    }
//        //                }
//        //            }

//        //            //    (byte)sr.ReadByte();

//        //            chunk.StartSomething=ss;
//        //        }
//        //    }
//        //}

//        void LoadFromBytes(byte[] bytes, int pos) {
//            using (MemoryStream sr = new MemoryStream(bytes)) {
//                BinaryReader br = new BinaryReader(sr);

//                //  terrain[pos]
//                MTerrain chunk = terrain[pos];
//                chunk.LightPos=br.ReadByte();
//                //   Console.WriteLine("v "+chunk.LightPos);
//                chunk.LightVec=new Vector2(pos*16-48+8, chunk.LightPos*16-48+8+48);
//                chunk.LightPos16=chunk.LightPos*16;

//                int ss = 125;

//                //0=nic
//                //1=připrav se, další byte o přeskočení

//                //BackBlocks
//                for (int lenght = 0; lenght<125; lenght++) {
//                    byte input = br.ReadByte();

//                    if (input>1) {
//                        Block block = BackBlockFromId(input, new Vector2(pos*16, lenght*16));
//                        if (block!=null) {
//                            if (ss>lenght) ss=lenght;
//                            chunk.Background[lenght]=block;
//                            chunk.IsBackground[lenght]=true;
//                        }
//                    } else if (input==1) lenght+=br.ReadByte()-1;
//                }

//                // SolidBlocks
//                for (int lenght = 0; lenght<125; lenght++) {
//                    byte input = br.ReadByte();

//                    if (input>1) {
//                        Block block = SolidBlockFromId(input, new Vector2(pos*16, lenght*16));
//                        if (block!=null) {
//                            if (ss>lenght) ss=lenght;
//                            chunk.SolidBlocks[lenght]=block;
//                            chunk.IsSolidBlocks[lenght]=true;
//                        }
//                    } else if (input==1) lenght+=br.ReadByte()-1;
//                }

//                // TopBlocks
//                for (int lenght = 0; lenght<125; lenght++) {
//                    byte input = br.ReadByte();

//                    if (input>1) {
//                        Block block = TopBlockFromId(input, new Vector2(pos*16, lenght*16));
//                        if (block!=null) {
//                            if (ss>lenght) ss=lenght;

//                            chunk.IsTopBlocks[lenght]=true;
//                            chunk.TopBlocks[lenght]=block;

//                            if (input==(int)BlockId.Label) {
//                                SetIndexLabel(pos, lenght);
//                                if (lenght!=0&&lenght!=125) RefreshAroundLabels(pos, lenght);
//                            } else if (input==(int)BlockId.FurnaceStone) {
//                                ((MashineBlockBasic)block).Inv=new List<DInt>(){
//                                    // Wood
//                                    new DInt(br.ReadByte(),br.ReadByte()),
//                                    new DInt(br.ReadByte(),br.ReadByte()),
//                                    new DInt(br.ReadByte(),br.ReadByte()),

//                                    //Ash
//                                    new DInt(br.ReadByte(),br.ReadByte()),
//                                };

//                                //Energy
//                                ((MashineBlockBasic)block).Energy=br.ReadByte()/255f;
//                            } else if (input==(int)BlockId.Shelf) {
//                                ((ShelfBlock)block).Inv=new List<DInt>(){
//                                    new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//                                    new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//                                    new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
//                                };

//                                if (((ShelfBlock)block).Inv[4].X!=0) {
//                                    Texture2D tex = ItemIdToTexture(((ShelfBlock)block).Inv[4].X);
//                                    if (text!=null) {
//                                        ((ShelfBlock)block).SmalItemTexture=tex;
//                                        ((ShelfBlock)block).IsSmallItem=true;
//                                    }
//                                }
//                            } else if (input==(int)BlockId.BoxWooden) {
//                                ((BoxBlock)block).Inv=new List<DInt>();
//                                for (int i = 0; i<2*12; i++) ((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(), br.ReadByte()));

//                            } else if (input==(int)BlockId.BoxAdv) {
//                                ((BoxBlock)block).Inv=new List<DInt>();
//                                for (int i = 0; i<4*14; i++) ((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(), br.ReadByte()));
//                            }
//                        }
//                    } else if (input==1) lenght+=br.ReadByte()-1;
//                }

//                {
//                    for (int i = 0; i<64; i++) {
//                        if (br.BaseStream.Position==br.BaseStream.Length) break;
//                        byte input = br.ReadByte();
//                        if (input==1) break;

//                        Plant plant = GetPlantFromId(input, br.ReadByte(), br.ReadByte(), (short)pos);
//                        if (plant!=null) chunk.Plants.Add(plant);

//                    }

//                    for (int i = 0; i<64; i++) {
//                        if (sr.Position==sr.Length) break;
//                        byte input = br.ReadByte();
//                        if (input==1) break;

//                        switch ((BlockId)input) {
//                            case BlockId.Fish:
//                                chunk.Mobs.Add(new Fish(input, br.ReadByte(), /*br.ReadByte(),*/ pos, br.ReadByte()==1, fishTexture0, fishTexture1));
//                                break;

//                            case BlockId.Chicken:
//                                chunk.Mobs.Add(new Chicken(input, br.ReadByte(),/*br.ReadByte(),*/ pos, br.ReadByte()==1, chickenWalkTexture, chickenEatTexture));
//                                break;

//                            case BlockId.Rabbit:
//                                chunk.Mobs.Add(new Rabbit(input, br.ReadByte(), /*br.ReadByte(),*/ pos, br.ReadByte()==1, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture));
//                                break;
//                        }
//                    }
//                }

//                chunk.StartSomething=(byte)ss;
//                chunk.state=MChunkState.Downloaded;
//                // terrain[pos]=chunk;
//            }
//        }


//        void RefreshLighting(int pos) {
//            int LightPos;
//            for (LightPos=0; LightPos<125; LightPos++) {
//                if (terrain[pos].IsSolidBlocks[LightPos]==MBlockState.Exists) break;
//            }

//            if (terrain[pos].LightPos!=(byte)LightPos) {
//                terrain[pos].LightPos=(byte)LightPos;
//                terrain[pos].LightVec=new Vector2(pos*16-48+8, LightPos*16-48+8+48);
//                terrain[pos].LightPos16=LightPos*16;

//                byte StartSomething;
//                for (StartSomething=0; StartSomething<125; StartSomething++) {
//                    if (terrain[pos].IsBackground[StartSomething]==MBlockState.Exists) break;
//                    if (terrain[pos].IsSolidBlocks[StartSomething]==MBlockState.Exists) break;
//                    if (terrain[pos].IsTopBlocks[StartSomething]==MBlockState.Exists) break;
//                }

//                terrain[pos].StartSomething=StartSomething;
//            }
//        }

//        #endregion

//        #region Networking
//        void SolveErrorDuringGame(int errorCode, string info, string more) {
//            if (current==Current.ErrorDuringGame) {
//                ShowError(info, more);
//            } else {
//                // current==Current.ErrorDuringGame
//                // Stávající připojení bylo ukončeno vzdáleným hostitelem
//                if (errorCode==10054) {
//                    try {
//                        clientSocket.Close();
//                        clientSocket.Dispose();
//                    } catch (Exception ex) {
//                        Console.WriteLine("SolveErrorDuringGame 1 "+ex.Message);
//                    }

//                    ConnectDuringGameError();
//                } else {
//                    ShowError(info, more);
//                }
//            }
//        }

//        void SendRemovedBlock(int x, int y, int id, BlockType bt) {
//            sendedBlockToRemove.Add(new SendedBlockToRemove { 
//                blockPos=new DInt(x,y),
//                blockType=bt,
//                World="Earth",
//                sended=DateTime.Now,
//            });

//            switch (bt) {
//                case BlockType.Back:
//                    terrain[x].IsBackground[y]=MBlockState.TmpRemoved;
//                    break;

//                case BlockType.Solid:
//                    terrain[x].IsSolidBlocks[y]=MBlockState.TmpRemoved;
//                    break;

//                case BlockType.Top:
//                    terrain[x].IsTopBlocks[y]=MBlockState.TmpRemoved;
//                    break;

//                case BlockType.Plant:
//                    terrain[x].Plants.[y]=MBlockState.TmpRemoved;
//                    break;

//                case BlockType.Mob:
//                    terrain[x].IsTopBlocks[y]=MBlockState.TmpRemoved;
//                    break;
//            }

//            Queue.Add(new DataToSend {
//                Importance=Importance.Middle,
//                Bytes=new Data {
//                    Cmd=Command.EditTerrain,
//                    From=Setting.Name,
//                    To=toServer,
//                    Message="-|"+x+"|"+y+"|"+world+"|"+(int)BlockType.Top+"|"+id+"|",
//                }.ToByte(),
//            });
//        }

//        void DoCommand() {
//            if (!text.StartsWith("*")) return;

//            string[] word = text.Split(' ');
//            word[0]=word[0].ToLower();

//            switch (word[0]) {
//                case "*spawn":
//                    if (tpSpawn) {
//                        if (word.Length==1) {
//                            PlayerX=spawnX;
//                            PlayerY=spawnY;
//                            DisplayText("Byl jsi teleportován na spawn");
//                        } else DisplayText("Za příkaz *spawn nic nepište");
//                    } else DisplayText("Na tento příkaz namáte oprávnění");
//                    return;

//                case "*ping":
//                    if (cmdPing) {
//                        if (word.Length==1) {
//                            DisplayText("Počkejte chviličku...");
//                            diserpeard=250;
//                            Data msg = new Data {
//                                Cmd=Command.Request,
//                                //     From=Setting.Name,
//                                To=toServer,
//                            };
//                            Queue.Add(new DataToSend {
//                                Bytes=msg.ToByte(),
//                                Importance=Importance.VeryImportant
//                            });
//                        }
//                    }
//                    DisplayText("Na tento příkaz namáte oprávnění");
//                    return;

//                case "*players":
//                    if (word.Length==1) {
//                        string t = "";
//                        foreach (Player p in players) t+=p.name+", ";

//                        DisplayText(t);
//                    }
//                    return;

//                case "*help":
//                    if (word.Length==1) {
//                        string t = "players, help, ";
//                        if (tpSpawn) t+="spawn, ";
//                        if (cmdPing) t+="ping, ";
//                        if (tpPlayer) t+="tp, ";
//                        DisplayText(t);
//                    }
//                    return;

//                //case "*web":
//                //    if (cmdWeb){
//                //        if (word.Length==1) {
//                //            System.Diagnostics.Process.Start(web);
//                //            DisplayText("Otevírá se..."+web);
//                //        }
//                //    } else DisplayText("Na tento příkaz namáte oprávnění");
//                //    return;


//                case "*tp":
//                    if (tpPlayer) {
//                        if (word.Length==2) {
//                            bool notExists = true;

//                            foreach (Player p in players) {
//                                if (word[1]==p.name) {
//                                    notExists=false;

//                                    if (tpPlayerMessage) {

//                                        Data msg = new Data {
//                                            Cmd=Command.PlayersTeleportMessageToTarget,
//                                            //  From=Setting.Name,
//                                            To=toServer,
//                                            Message="3|"+p.name,
//                                        };

//                                        Queue.Add(new DataToSend {
//                                            Bytes=msg.ToByte(),
//                                            Importance=Importance.High
//                                        });
//                                        tpPlayerTime=DateTime.Now;

//                                        DisplayText("Odesílám požadavek o teleportaci ...");
//                                        tpPlayerMsgWaiting=p.name;
//                                        return;
//                                    } else {
//                                        PlayerX=p.x;
//                                        PlayerY=p.y;
//                                        DisplayText("Teleportace úspěštná");
//                                        return;
//                                    }
//                                }

//                                if (notExists) {
//                                    DisplayText("Hráč nenelezen");
//                                }
//                            }
//                        }
//                    } else if (tpEverywhere) {
//                        if (word.Length==3) {
//                            if (int.TryParse(word[1], out int x)) {
//                                if (int.TryParse(word[2], out int y)) {
//                                    PlayerX=x;
//                                    PlayerY=y;
//                                } else {
//                                    DisplayText("Použití: \"*tp <x> <y>\"; y je číslo");
//                                }
//                            } else {
//                                if (int.TryParse(word[2], out int y)) {
//                                    DisplayText("Použití: \"*tp <x> <y>\"; x je číslo");
//                                } else {
//                                    DisplayText("Použití: \"*tp <x> <y>\"; x a y je číslo");
//                                }
//                            }
//                        }
//                    } else {
//                        DisplayText("Na tento příkaz namáte oprávnění");
//                    }
//                    return;

//                case "*warp-set":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //  From=Setting.Name,
//                                To=toServer,
//                                Message="*warp-set "+word[1]+" "+PlayerX+" "+PlayerY,
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                        DisplayText("Nastavuji warp "+word[1]);
//                    }
//                    break;

//                case "*warp":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                Message="*warp "+word[1],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*kick":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                Message="*kick "+word[1],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*ban":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                Message="*ban "+word[1],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*unban":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //    From=Setting.Name,
//                                To=toServer,
//                                Message="*unban "+word[1],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*warp-remove":
//                    if (word.Length==2) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                Message="*warp-remove "+word[1],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*group-set":
//                    if (word.Length==3) {
//                        Queue.Add(new DataToSend {
//                            Bytes=new Data {
//                                Cmd=Command.Message,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                Message="*group-set "+word[1]+" "+word[2],
//                            }.ToByte(),
//                            Importance=Importance.Middle
//                        });
//                    }
//                    break;

//                case "*itemsclear":
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.Message,
//                            //   From=Setting.Name,
//                            To=toServer,
//                            Message="*itemsclear",
//                        }.ToByte(),
//                        Importance=Importance.Middle
//                    });
//                    break;

//                case "*server-backup":
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.Message,
//                            //   From=Setting.Name,
//                            To=toServer,
//                            Message="*server-backup",
//                        }.ToByte(),
//                        Importance=Importance.Middle
//                    });
//                    break;

//                case "*server-reset":
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.Message,
//                            //  From=Setting.Name,
//                            To=toServer,
//                            Message="*server-reset",
//                        }.ToByte(),
//                        Importance=Importance.Middle
//                    });
//                    break;

//                case "*server-end":
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.Message,
//                            //  From=Setting.Name,
//                            To=toServer,
//                            Message="*server-end",
//                        }.ToByte(),
//                        Importance=Importance.Middle
//                    });
//                    break;

//                case "*changepassword":
//                    password=new Password();
//                    password.Show();
//                    break;

//                case "*spawn-set":
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            Cmd=Command.Message,
//                            //   From=Setting.Name,
//                            To=toServer,
//                            Message="*spawn-set "+PlayerX+" "+PlayerY,
//                        }.ToByte(),
//                        Importance=Importance.Middle
//                    });
//                    break;

//                case "*gamemode":
//                    if (word.Length==2) {
//                        if (word[1]=="Dobrodružná"||word[1]=="Výzkum"||word[1]=="Kreativní"
//                            ||word[1]=="0"||word[1]=="1"||word[1]=="2"
//                            ||word[1]=="d"||word[1]=="v"||word[1]=="k") {
//                            Queue.Add(new DataToSend {
//                                Bytes=new Data {
//                                    Cmd=Command.Message,
//                                    //   From=Setting.Name,
//                                    To=toServer,
//                                    Message="*gamemode "+word[1],
//                                }.ToByte(),
//                                Importance=Importance.Middle
//                            });
//                        } else DisplayText("Neplatný příkaz, zkus \"*help\"");
//                    }
//                    break;

//                default:
//                    DisplayText("Neplatný příkaz, zkus \"*help\"");
//                    return;
//            }
//        }

//        void OnCheck(IAsyncResult ar) {
//            try {
//                state++;
//                clientSocket.EndConnect(ar);

//                Data msgToSend = new Data {
//                    Cmd=Command.Check,
//                    //       From=Setting.Name,
//                    To=toServer,
//                    Message=""
//                };

//                byteData=msgToSend.ToByte();

//                clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

//                byteData=new byte[1024];

//                clientSocket.BeginReceive(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnReceive), null);

//                //current=Current.EndChecking;
//                state++;
//            } catch (SocketException ex) {

//                //Nemohlo být vytvořeno žádné připojení, protože cílový počítač je aktivně odmítl
//                if (10061==ex.ErrorCode) {
//                    ShowError("Nelze se připojit k serveru", "Žádný server není spuštěn na adrese "+ip+":"+port);
//                } else {
//                    //Pokus o připojení selhal, protože připojená strana v časovém intervalu řádně neodpověděla, nebo vytvořené připojení selhalo, protože neodpověděl připojený hostitel
//                    if (10060==ex.ErrorCode) {
//                        ShowError("Nelze se připojit k serveru", "Připojování trvalo příliš dlouho.");
//                    } else if (10013==ex.ErrorCode) {
//                        ShowError("Nelze se připojit k serveru", "Pravděpodobně Váš firewall blokuje připojení (Zkuste ho vypnout)");
//                    } else ShowError("Nelze se připojit k serveru", "Neznámá chyba v OnCheck: "+ex.Message+"; Kód: "+ex.ErrorCode);
//                }
//            }

//            //if (!Global.OnlineAccount){
//            //    string url="https://geftgames.ga/System/rabcr/ifplayerexists.php?username="+Setting.Name;
//            //    MyWebClient wc=new MyWebClient {
//            //        Encoding=Encoding.UTF8,
//            //    };
//            //    try{
//            //        string get=wc.DownloadString(new Uri(url));
//            //         Console.WriteLine(6);
//            //        if (string.IsNullOrEmpty(get)) {
//            //            ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
//            //        } else {
//            //            string[]g=get.Split('|');

//            //            if (g.Length>1){
//            //                switch (g[0]) {
//            //                    case "E":

//            //                        break;

//            //                    case "O":
//            //                        //ok
//            //                        ShowError("Tento účet již existuje", "Někdo si již takovou přezdívku používá");
//            //                        break;

//            //                    default:
//            //                       // ShowError("Tento účet již existuje", "Někdo si již takovou přezdívku používá");
//            //                        break;
//            //                }
//            //            } else {
//            //                ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
//            //            }
//            //        }
//            //    }catch{
//            //        ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
//            //    }
//            //}

//        }

//        void OnConnectDuringGameError(IAsyncResult ar) {

//            try {

//                clientSocket.EndConnect(ar);

//                Data msgToSend = new Data {
//                    Cmd=Command.ConnectDuringGame,
//                    //       From=Setting.Name,
//                    To=toServer,
//                    Message=""
//                };

//                byteData=msgToSend.ToByte();
//                clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

//                byteData=new byte[1024];
//                clientSocket.BeginReceive(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnReceive), null);

//                //current=Current.EndChecking;
//                state++;
//            } catch (SocketException ex) {

//                //Nemohlo být vytvořeno žádné připojení, protože cílový počítač je aktivně odmítl
//                if (10061==ex.ErrorCode) {
//                    ShowError("Nelze se připojit k serveru", "Pravděpodobně není spuštěn server.");
//                } else {
//                    //Pokus o připojení selhal, protože připojená strana v časovém intervalu řádně neodpověděla, nebo vytvořené připojení selhalo, protože neodpověděl připojený hostitel
//                    if (10060==ex.ErrorCode) {
//                        ShowError("Nelze se připojit k serveru", "Připojování trvalo příliš dlouho.");
//                    } else {
//                        ShowError("Nelze se připojit k serveru", "Neznámá chyba v OnConnectDuringGameError: "+ex.Message);
//                    }
//                }
//            }
//        }

//        void OnSend(IAsyncResult ar) {
//            try {
//                // clientSocket.Connected
//                //Process=0.55f;
//                clientSocket.EndSend(ar);
//                //Process=1f;
//                //ready=true;
//                //Loading=false;
//            } catch (SocketException ex) {
//                //Console.WriteLine(ex.ErrorCode+" 2 "+ex.Message);
//                ////Process=1f;
//                //ready=true;
//                //Error=true;
//                //ErrorCode=ex.Message;
//                if (!exit) ShowError("Nelze odeslat sáček", ""+ex.Message);
//            }
//            //    Console.WriteLine("send");
//        }

//        void SendEveryone(string text) {
//            try {
//                //Fill the info for the message to be send
//                Data msgToSend = new Data {
//                    //Console.WriteLine(text);
//                    //      From=Setting.Name,
//                    To=toEveryone,
//                    Message=text,
//                    Cmd=Command.Message
//                };

//                //byte[] byteData =
//                Queue.Add(new DataToSend {
//                    Bytes=msgToSend.ToByte(),
//                    Importance=Importance.High
//                });
//                //Send it to the server
//                //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSendAfter), null);
//                // Console.WriteLine("sending: "+System.Text.Encoding.UTF8.GetString(byteData));
//                // txtMessage.Text = null;
//            } catch (Exception) {
//                //Console.WriteLine("Unable to send message to the server.");
//            }
//        }

//        //void OnSendAfter(IAsyncResult ar) {
//        //    try {
//        //        clientSocket.EndSend(ar);
//        //    } catch (ObjectDisposedException) {


//        //    } catch/* (Exception ex)*/ {
//        //        //Console.WriteLine(ex.Message);
//        //    }
//        //}

//        void OnReceive(IAsyncResult ar) {
//            //   Console.WriteLine("rec");
//            try {
//                clientSocket.EndReceive(ar);
//            } catch (Exception ex) {
//                if (ex.HResult==10054) {
//                    //ShowError("Spojení bylo přerušeno", ex.Message);
//                    //clientSocket.Shutdown(new SocketShutdown());
//                    //clientSocket.Close();
//                    //clientSocket.Dispose();
//                    if (!exit) SolveErrorDuringGame(ex.HResult, "", "");
//                    return;
//                } else {
//                    Console.WriteLine(ex.Message+" rec1");
//                }
//            }

//            Data msgReceived = new Data(byteData);
//            msgReceived.Talk();

//            switch (msgReceived.Cmd) {
//                case Command.SendingWorldData: {
//                    if (msgReceived.terrain!=null) {
//                        if (msgReceived.terrain.Length>2) {
//                            LoadFromBytes(msgReceived.terrain, msgReceived.pos);

//                            if (current==Current.GettingSpawn) {
//                                if (downloadedSpawnArea<downloadingSpawnAreaMax) {
//                                    SendMsgTerrain();
//                                } else {
//                                    state++;

//                                    current=Current.GettingPlayers;
//                                    {
//                                        Data msg = new Data {
//                                            Cmd=Command.PlayersList,
//                                            //            From=Setting.Name,
//                                            To=toServer
//                                        };
//                                        Queue.Add(new DataToSend {
//                                            Bytes=msg.ToByte(),
//                                            Importance=Importance.High
//                                        });
//                                        //clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                                    }
//                                }
//                            }
//                        } else {
//                            Debug.WriteLine("ERROR - Přijetí prázné zprávy. "+msgReceived.Cmd.ToString());
//                        }
//                    } else {
//                        Debug.WriteLine("ERROR - Přijetí prázné zprávy. "+msgReceived.Cmd.ToString());
//                    }
//                }
//                break;

//                case Command.EditTerrain: {
//                    if (current==Current.Playing) {
//                        if (!string.IsNullOrEmpty(msgReceived.Message)) {
//                            string[] strs = msgReceived.Message.Split('|');
//                            Console.WriteLine("Editing: "+msgReceived.Message);
//                            List<byte> bytes = new List<byte>();
//                            if (strs.Length==5) {
//                                if (strs[4]!="") {
//                                    foreach (string s in strs[4].Split(',')) {
//                                        bytes.Add(byte.Parse(s));
//                                    }
//                                }
//                            }
//                            if (strs[0]=="+") {
//                                int x = int.Parse(strs[1]),
//                                    y = int.Parse(strs[2]);
//                                if (terrain[x]==null) break;
//                                byte id = byte.Parse(strs[3]);
//                                bool stay = true;

//                                {
//                                    Block b = SolidBlockFromId(id, new Vector2(x, y));
//                                    if (b!=null) {
//                                        if (terrain[x].IsSolidBlocks[y]) GetItemsFromBlock(id, x, y);
//                                        terrain[x].IsSolidBlocks[y]=true;
//                                        terrain[x].SolidBlocks[y]=b;
//                                        stay=false;
//                                    }
//                                }
//                                if (stay) {
//                                    Block b = TopBlockFromId(id, new Vector2(x, y));
//                                    if (b!=null) {
//                                        if (terrain[x].IsTopBlocks[y]) GetItemsFromBlock(id, x, y);
//                                        terrain[x].IsTopBlocks[y]=true;
//                                        terrain[x].TopBlocks[y]=b;
//                                        stay=false;
//                                    }
//                                }
//                                if (stay) {
//                                    Block b = BackBlockFromId(id, new Vector2(x, y));
//                                    if (b!=null) {
//                                        if (terrain[x].IsBackground[y]) GetItemsFromBlock(id, x, y);
//                                        terrain[x].IsBackground[y]=true;
//                                        terrain[x].Background[y]=null;
//                                        stay=false;
//                                    }
//                                }

//                                if (stay) {
//                                    Plant p = GetPlantFromId(id, (byte)y,/*?*/255, (short)x);
//                                    if (p!=null) {
//                                        foreach (Plant px in terrain[x].Plants) {
//                                            if (px.Height==y) {
//                                                GetItemsFromPlant(id, new DInt(x, y), px.Grow==255);
//                                                terrain[x].Plants.Remove(px);
//                                                break;
//                                            }
//                                        }
//                                        stay=false;
//                                        terrain[x].Plants.Add(p);
//                                    }
//                                }


//                                //if (stay) {
//                                //    Block b=ani(id,new Vector2(x,y));
//                                //     if (b!=null) {
//                                //    foreach (Mob m in terrain[x].Mobs) {
//                                //        if (m.Height==y) {
//                                //            if (m.Id==id) {GetItemsFromBlock(id,new DInt(x,y));
//                                //                terrain[x].Mobs.Remove(m);
//                                //                stay=false;
//                                //                break;
//                                //            }
//                                //        }
//                                //    }
//                                //}
//                            } else {
//                                int x = int.Parse(strs[1]),
//                                    y = int.Parse(strs[2]);
//                                if (terrain[x]==null) break;
//                                byte id = byte.Parse(strs[3]);
//                                bool stay = true;

//                                if (terrain[x].IsSolidBlocks[y]) {
//                                    if (terrain[x].SolidBlocks[y].Id==id) {
//                                        terrain[x].IsSolidBlocks[y]=false;
//                                        terrain[x].SolidBlocks[y]=null;
//                                        stay=false;
//                                    }
//                                }
//                                if (stay) {
//                                    if (terrain[x].IsTopBlocks[y]) {
//                                        if (terrain[x].TopBlocks[y].Id==id) {
//                                            terrain[x].IsTopBlocks[y]=false;
//                                            terrain[x].TopBlocks[y]=null;
//                                            stay=false;
//                                        }
//                                    }
//                                }
//                                if (stay) {
//                                    if (terrain[x].IsBackground[y]) {
//                                        if (terrain[x].Background[y].Id==id) {
//                                            terrain[x].IsBackground[y]=false;
//                                            terrain[x].Background[y]=null;
//                                            stay=false;
//                                        }
//                                    }
//                                }

//                                if (stay) {
//                                    foreach (Plant p in terrain[x].Plants) {
//                                        if (p.Height==y) {
//                                            if (p.Id==id) {
//                                                terrain[x].Plants.Remove(p);
//                                                stay=false;
//                                                break;
//                                            }
//                                        }
//                                    }
//                                }
//                                if (stay) {
//                                    foreach (Mob m in terrain[x].Mobs) {
//                                        if (m.Height==y) {
//                                            if (m.Id==id) {
//                                                terrain[x].Mobs.Remove(m);
//                                                stay=false;
//                                                break;
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//                break;

//                case Command.PostLogin: {
//                    if (msgReceived.Message!=null) {
//                        string[] strs = msgReceived.Message.Split('|');
//                        if (strs.Length>0) {
//                            if (strs[0]=="0") {
//                                //  Console.WriteLine("Wrong password!");
//                                System.Windows.Forms.MessageBox.Show("Špatné heslo", "Pro připojení k serveru je potřeba zadat správné heslo");
//                                // System.Windows.Forms.MessageBox.Show("Zadali jste špatné heslo","Špatné heslo");
//                                clientSocket.Disconnect(false);
//                                //   Rabcr.GoTo(new MenuMultiplayer());
//                            } else if (strs[0]=="1") {
//                                //Console.WriteLine("Setting vars");

//                                TerrainLenght=int.Parse(strs[1]);
//                                terrain=new MTerrain[TerrainLenght];
//                                Console.WriteLine(TerrainLenght+" len");

//                                for (int c = 0; c<TerrainLenght; c++) terrain[c]=new MTerrain();


//                                Global.WorldDifficulty=int.Parse(strs[2]);
//                                //  Global.WorldDifficulty=2;
//                                //Console.WriteLine(Global.WorldDifficulty);
//                                PlayerX=int.Parse(strs[3]);
//                                PlayerY=int.Parse(strs[4]);
//                                SetPlayerPos(PlayerX, PlayerY);
//                                int i = 0;
//                                for (; i<int.Parse(strs[5]); i+=2) Inventory.Add(new DInt(int.Parse(strs[6+i]), int.Parse(strs[7+i])));

//                                //UseBackColor=bool.Parse(strs[6+i]);
//                                //BackColor=StringToColor(strs[7+i]);

//                                //UseGedo=bool.Parse(strs[8+i]);

//                                tpSpawn=bool.Parse(strs[6+i]);

//                                tpEverywhere=bool.Parse(strs[7+i]);
//                                tpPlayer=bool.Parse(strs[8+i]);
//                                tpPlayerMessage=bool.Parse(strs[9+i]);

//                                changeSpawn=bool.Parse(strs[10+i]);
//                                changeTerrainSpawn=bool.Parse(strs[11+i]);
//                                changeWarps=bool.Parse(strs[12+i]);

//                                //  cmdRemoveItems=bool.Parse(strs[16+i]);

//                                //allowFly=bool.Parse(strs[17+i]);
//                                allowChangeGametype=bool.Parse(strs[13+i]);

//                                cmdPing=bool.Parse(strs[14+i]);
//                                cmdMsg=bool.Parse(strs[15+i]);
//                                cmdMsgAll=bool.Parse(strs[16+i]);
//                                cmdLog=bool.Parse(strs[17+i]);
//                                cmdKick=bool.Parse(strs[18+i]);

//                                cmdServerEnd=bool.Parse(strs[19+i]);
//                                cmdServerReset=bool.Parse(strs[20+i]);
//                                cmdServerBackup=bool.Parse(strs[21+i]);

//                                //    kit=bool.Parse(strs[27+i]);

//                                safeSpawn=int.Parse(strs[22+i]);

//                                spawnX=int.Parse(strs[23+i]);
//                                spawnY=int.Parse(strs[24+i]);

//                                //cmdWeb=bool.Parse(strs[31+i]);
//                                // web=strs[32+i];
//                                serverName=strs[25+i];
//                                SendMsgTerrain();

//                            }
//                        }
//                    }
//                }
//                break;

//                case Command.Login: {
//                    state++;
//                    current=Current.EndLoging;

//                    if (!Directory.Exists(Setting.Path+"\\Servers")) Directory.CreateDirectory(Setting.Path+"\\Servers");
//                    if (!Directory.Exists(Setting.Path+"\\Servers\\"+serverName)) Directory.CreateDirectory(Setting.Path+"\\Servers\\"+serverName);
//                    if (!Directory.Exists(pathToWorld+"\\Earth")) Directory.CreateDirectory(pathToWorld+"\\Earth");

//                    if (string.IsNullOrEmpty(msgReceived.Message)) {
//                        ShowError("Chyba sítě", "Hra obdržela nulový sáček při přihlašování");
//                    } else {
//                        string[] strs = msgReceived.Message.Split('|');

//                        switch ((LoginType)int.Parse(strs[0])) {
//                            case LoginType.Null:
//                                ShowError("Chyba", "Hra obdržela nulový token přihlašování");
//                                clientSocket.Disconnect(false);
//                                break;

//                            case LoginType.Banned:
//                                ShowError("Zakázaný přístup", "Máte zakázaný přístup na tento server");
//                                clientSocket.Disconnect(false);
//                                break;

//                            case LoginType.BannedWithInfo:
//                                ShowError("Zakázaný přístup", "Máte zakázaný přístup na tento server"+Environment.NewLine+strs[1]);
//                                clientSocket.Disconnect(false);
//                                break;

//                            case LoginType.NotOnWhitelist:
//                                ShowError("Nejste na whitelistu", "Název vašeho jména není zapsán ve whitelistu"+Environment.NewLine+strs[1]);
//                                clientSocket.Disconnect(false);
//                                break;

//                            case LoginType.NotOnWhitelistNoInfo:
//                                ShowError("Nejste na whitelistu", "Název vašeho jména není zapsán ve whitelistu");
//                                clientSocket.Disconnect(false);
//                                break;

//                            case LoginType.FirstConnectPassword:
//                                using (Password p = new Password()) {
//                                    p.ShowDialog();
//                                    if (p.Output!=null) {
//                                        Data msg = new Data {
//                                            Cmd=Command.PostLogin,
//                                            //    From=Setting.Name,
//                                            To=toServer,
//                                            Message=p.Output
//                                        };

//                                        Queue.Add(new DataToSend {
//                                            Bytes=msg.ToByte(),
//                                            Importance=Importance.VeryImportant
//                                        });
//                                        //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                                    } else {
//                                        clientSocket.Disconnect(false);
//                                    }
//                                }

//                                break;

//                            case LoginType.LoginWithPassword:
//                                using (CheckPassword p = new CheckPassword()) {
//                                    p.ShowDialog();
//                                    if (p.Output!=null) {
//                                        Data msg = new Data {
//                                            Cmd=Command.PostLogin,
//                                            //      From=Setting.Name,
//                                            To=toServer,
//                                            Message=p.Output
//                                        };

//                                        //  byteData=msg.ToByte();
//                                        Queue.Add(new DataToSend {
//                                            Bytes=msg.ToByte(),
//                                            Importance=Importance.VeryImportant
//                                        });
//                                        //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                                    } else {
//                                        clientSocket.Disconnect(false);
//                                    }
//                                }
//                                break;

//                            case LoginType.BasicLogin: {
//                                Data msg = new Data {
//                                    Cmd=Command.PostLogin,
//                                    //    From=Setting.Name,
//                                    To=toServer,
//                                    Message=""
//                                };
//                                Queue.Add(new DataToSend {
//                                    Bytes=msg.ToByte(),
//                                    Importance=Importance.VeryImportant
//                                });
//                                //byteData=msg.ToByte();

//                                //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                            }
//                            break;

//                            case LoginType.FirstConnect: {
//                                Data msg = new Data {
//                                    Cmd=Command.PostLogin,
//                                    //    From=Setting.Name,
//                                    To=toServer,
//                                    Message=""
//                                };
//                                Queue.Add(new DataToSend {
//                                    Bytes=msg.ToByte(),
//                                    Importance=Importance.VeryImportant
//                                });
//                                //byteData=msg.ToByte();

//                                //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                            }
//                            break;

//                        }
//                    }



//                    //if (strs.Length>0) {
//                    //    switch (strs[0]) {
//                    //        case "0":
//                    //            if (strs.Length==3) {
//                    //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]+Environment.NewLine+"zkuste tento web: "+strs[2]);
//                    //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
//                    //            break;

//                    //        case "1":
//                    //            if (strs.Length==2) {
//                    //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]);
//                    //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
//                    //            break;

//                    //        case "2":
//                    //            if (strs.Length==4) {
//                    //                int x = int.Parse(strs[0]);
//                    //                int y = int.Parse(strs[1]);
//                    //                string password = strs[2];
//                    //                int type = int.Parse(strs[3]);

//                    //                if (password!="") {
//                    //                    chp=new CheckPassword();
//                    //                    chp.Show();
//                    //                    waitingPassword=true;
//                    //                    this.password=password;
//                    //                }
//                    //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]);
//                    //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
//                    //            break;

//                    //        case "3":
//                    //            if (strs.Length==2) {
//                    //                ShowError("Nejste v seznamu", "Kontaktujte majtele serveru a požádejteho o členství"+Environment.NewLine+strs[1]);
//                    //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
//                    //            break;

//                    //        case "4":
//                    //            if (strs.Length==1) {
//                    //                ShowError("Nejste v seznamu", "Kontaktujte majtele serveru a požádejteho o členství");
//                    //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
//                    //            break;

//                    //        case "5":

//                    //            break;
//                    //    }
//                    //}

//                    //int.TryParse(strs[1], out spawnX);
//                    //int.TryParse(strs[2], out spawnY);
//                    //int.TryParse(strs[3], out safeSpawn);

//                    //PlayerX=spawnX;
//                    //PlayerY=spawnY;

//                    //SendMsgTerrain();
//                    state++;
//                }
//                break;

//                //case Command.Logout:
//                //    clientSocket.Disconnect(false);
//                //    break;

//                case Command.PlayersTeleportMessageToSource: {
//                    if (!string.IsNullOrEmpty(msgReceived.Message)) {
//                        string[] strs = msgReceived.Message.Split('|');

//                        if (int.TryParse(strs[0], out int num)) {
//                            if (num==1) {
//                                //DisplayText("Vaše žádost byla zamítnuta");
//                            }
//                            if (num==2) {
//                                if ((DateTime.Now-tpPlayerTime.Date).TotalMinutes<=2) {
//                                    foreach (Player p in players) {
//                                        if (tpPlayerMsgWaiting==p.name) {
//                                            //    DisplayText("Teleportuji...");
//                                            text="Teleportuji...";
//                                            PlayerX=p.x;
//                                            PlayerY=p.y;
//                                            break;
//                                        }
//                                    }
//                                }
//                            }
//                            if (num==3) {
//                                if (strs[1]==Setting.Name) {
//                                    //SomeoneWantTeleportToYou=true;
//                                    SomeoneWantTeleportToYouName=msgReceived.From;
//                                    gedo.BuildString("Hráč "+SomeoneWantTeleportToYouName+" se chce k vám teleportovat.\r\nPoužij \"*tp-allow\" pro přijení nebo \"*tp-deny\" pro zamítnutí.");
//                                    diserpeard=255;
//                                }
//                            }
//                        }
//                    }
//                }
//                break;

//                case Command.Message:
//                    if (msgReceived.Message!=null||msgReceived.Message!="") {
//                        if (msgReceived.Message.StartsWith("*")) {
//                            string[] word = msgReceived.Message.Split(' ');
//                            switch (word[0]) {
//                                case "*setplayerpos":
//                                    if (word.Length==3) {
//                                        PlayerX=int.Parse(word[1]);
//                                        PlayerY=int.Parse(word[2]);
//                                        DisplayText("Teleportuji...");
//                                        SetPlayerPos(PlayerX, PlayerY);
//                                    }
//                                    break;

//                                case "*spawnwaschanged":
//                                    spawnX=int.Parse(word[1]);
//                                    spawnY=int.Parse(word[2]);
//                                    break;

//                                case "*int-set": {
//                                    int count = int.Parse(word[1]);

//                                    List<DInt> tmpInv = new List<DInt>();

//                                    for (int i = 0; i<count; i++) {
//                                        Inventory[i].X=2+i*2;
//                                        Inventory[i].Y=3+i*2;
//                                    }
//                                }
//                                break;

//                                case "*inv-machine-set": {
//                                    int
//                                        x = int.Parse(word[1]),
//                                        y = int.Parse(word[2]),
//                                        count = int.Parse(word[3]);

//                                    List<DInt> tmpInv = new List<DInt>();

//                                    for (int i = 0; i<count; i++) {
//                                        tmpInv.Add(new DInt(4+i*2, 5+i*2));
//                                    }

//                                    if (terrain[x].TopBlocks[y] is BoxBlock) {
//                                        ((BoxBlock)terrain[x].TopBlocks[y]).Inv=tmpInv;
//                                    } else if (terrain[x].TopBlocks[y] is MashineBlockBasic) {
//                                        ((MashineBlockBasic)terrain[x].TopBlocks[y]).Inv=tmpInv;
//                                    } else if (terrain[x].TopBlocks[y] is ShelfBlock) {
//                                        ((ShelfBlock)terrain[x].TopBlocks[y]).Inv=tmpInv;
//                                    }
//                                    getFromServerInv=true;
//                                }
//                                break;
//                            }
//                        } else {
//                            gedo.BuildString(msgReceived.Message);
//                            diserpeard=255;
//                        }
//                    }
//                    //Loading=false;
//                    //if (msgReceived.strName=="{Server}") {
//                    //    Console.WriteLine(msgReceived.strName+"<>"+msgReceived.cmdCommand.ToString()+"<>"+msgReceived.strMessage);
//                    //} else Console.WriteLine("!jméno "+msgReceived.strName);
//                    break;

//                case Command.Request: {
//                    Data msg = new Data {
//                        Cmd=Command.Request,
//                        //    From=Setting.Name,
//                        To=toServer,
//                        Message=""
//                    };
//                    //byteData=new byte[1024];
//                    //byteData=msg.ToByte();

//                    //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                    Queue.Add(new DataToSend {
//                        Bytes=msg.ToByte(),
//                        Importance=Importance.VeryImportant
//                    });
//                }
//                break;

//                case Command.Check: {
//                    state++;
//                    string[] get = msgReceived.Message.Split('|');

//                    if (get.Length>0) {
//                        maxplayers=int.Parse(get[1]);
//                        joinedPlayers=int.Parse(get[2]);
//                        string version = get[3];
//                        //smd=true;
//                        if (version==Version.This) {
//                            Data msg = new Data {
//                                Cmd=Command.Login,
//                                //   From=Setting.Name,
//                                To=toServer,
//                                //Message=Setting.Name
//                            };
//                            //byteData=msg.ToByte();
//                            current=Current.EndChecking;
//                            //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                            Queue.Add(new DataToSend {
//                                Bytes=msg.ToByte(),
//                                Importance=Importance.VeryImportant
//                            });
//                        } else {
//                            ShowError("Jiná verze serveru", "Verze serveru ("+version+") je rozdílná od verze hry.");
//                        }
//                    } else {
//                        ShowError("Chyba sáčku", "Hra obdržela od serveru prázdný soubor s informacemi.");
//                    }
//                    // Console.WriteLine(msgReceived.strMessage);
//                    //string _new =msgReceived.strMessage;
//                    //string version=_new.Substring(_new.LastIndexOf("|")+1);
//                    //_new=_new.Substring(0,_new.LastIndexOf("|"));
//                    //int.TryParse(_new.Substring(_new.LastIndexOf("|")+1),out maxplayers);
//                    //_new=_new.Substring(0,_new.LastIndexOf("|"));
//                    //int.TryParse(_new.Substring(_new.LastIndexOf("|")+1),out joinedPlayers);
//                    //_new=_new.Substring(0,_new.LastIndexOf("|"));
//                    //Console.WriteLine("sdfgdfgfdf");
//                    //if
//                    //    if (joinedPlayers<maxplayers) {
//                    //OK ////////////////////////////////////////



//                    //  }
//                    //   Console.WriteLine("Logining...");
//                    //    state++;

//                    //} else {
//                    //    Error=true;
//                    //    ErrorCode="Server je plný.";
//                    //    Console.WriteLine("Moc hráčů.");
//                    //    clientSocket.Disconnect(false);
//                    //    clientSocket.Close();
//                    //    clientSocket.Dispose();
//                    //}
//                    //} else {
//                    //    Error=true;
//                    //    ErrorCode="Server je pro jinou verzi.";
//                    //    Console.WriteLine("Jiná verze.");
//                    //    clientSocket.Disconnect(false);
//                    //    clientSocket.Close();
//                    //    clientSocket.Dispose();
//                    //}
//                }
//                break;

//                case Command.Exit:
//                    Queue.Add(new DataToSend {
//                        Bytes=new Data {
//                            //   From=Setting.Name,
//                            To=toServer,
//                            Message="*beforeexitdata "+PlayerX+" "+PlayerY,//+inv...
//                            Cmd=Command.Message
//                        }.ToByte(),
//                        Importance=Importance.VeryImportant
//                    });
//                    //closingServer=true;
//                    break;

//                case Command.PlayersList: {
//                    players.Clear();
//                    foreach (string h in msgReceived.Message.Split('~')) {
//                        if (h!="") {
//                            string[] splited = h.Split('|');

//                            Player player = new Player(splited[0]) {
//                                x=int.Parse(splited[1]),
//                                y=int.Parse(splited[2])
//                            };
//                            players.Add(player);
//                        }
//                    }

//                    if (current==Current.GettingPlayers) {
//                        current=Current.Playing;
//                        //Resize();
//                    }
//                }
//                break;
//            }

//            //if (Queue.Count==0){
//            //   //// if (msgReceived.Cmd==Command.Blank) Thread.Sleep(10);
//            //   //// else Thread.Sleep(5);
//            //   // Data data=new Data{
//            //   //  //   From=Setting.Name,
//            //   //     To=toServer,
//            //   //     Cmd=Command.Blank
//            //   // };
//            //   // try{
//            //   //     byte[] bytes=data.ToByte();
//            //   //     clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//            //   //  }catch (Exception ex){Console.WriteLine(ex.Message+"1"); }
//            //}else{
//            //    try{
//            //        byte[] bytes=Queue[0].Bytes;

//            //        Queue.RemoveAt(0);
//            //        clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//            //    }catch (Exception ex){Console.WriteLine(ex.Message+"2"); }
//            //}



//            //////////if (!closingServer){
//            //////////    byteData=new byte[1024];

//            //////////    try {
//            //////////        clientSocket.BeginReceive(byteData,
//            //////////            0,
//            //////////            byteData.Length,
//            //////////            SocketFlags.None,
//            //////////            new AsyncCallback(OnReceive),
//            //////////            clientSocket);
//            //////////    } catch (Exception ex) {
//            //////////        if (ex.HResult==10054) {
//            //////////            ShowError("Spojení bylo přerušeno", ex.Message);
//            //////////            clientSocket.Shutdown(new SocketShutdown());
//            //////////            clientSocket.Close();
//            //////////            clientSocket.Dispose();
//            //////////            return;
//            //////////        }else{
//            //////////            Console.WriteLine(ex.Message+"12");
//            //////////        }
//            //////////    }
//            //////////} else {
//            //////////    clientSocket.Shutdown(new SocketShutdown());
//            //////////    current=Current.Checking;
//            //////////    clientSocket.Disconnect(false);
//            //////////    clientSocket.Close();
//            ////////// //   clientSocket.Dispose();
//            //////////    ShowError("Server byl ukončen","Server se vypnul ze strany serveru");
//            //////////       // Rabcr.GoTo(new Menu());
//            //////////}
//            // if (msgReceived.strMessage != null && msgReceived.cmdCommand != Command.List) {
//            //     chat += msgReceived.strMessage + "\r\n";
//            //Console.WriteLine("G "+msgReceived.strMessage);
//            //foreach (Player p in players) {//Console.WriteLine(0);
//            //if (p.name==msgReceived.strName) {//Console.WriteLine(1);
//            //string data=msgReceived.strMessage.Replace(msgReceived.strName+": ","");
//            //     if (data.StartsWith("X")) {//Console.WriteLine(2);

//            //         //for (int i=0; i<players.Count; i++) {
//            //      //   Console.WriteLine(3);
//            //             //if (players[i].name==msgReceived.strName) {
//            //             Console.WriteLine(data);
//            //                p.x=int.Parse(data.Substring(1,data.IndexOf(" ")));
//            //                p.y=int.Parse(data.Substring(data.IndexOf("Y")+1));
//            //                 break;
//            //             //}
//            //         }}//}
//            //     }
//            // }


//            //byteData = new byte[1024];

//            //clientSocket.BeginReceive(byteData,
//            //                          0,
//            //                          byteData.Length,
//            //                          SocketFlags.None,
//            //                          new AsyncCallback(OnReceive),
//            //                          null);

//            //}
//            //catch (ObjectDisposedException) { }
//            //catch (Exception ex) {
//            //    Console.WriteLine("E"+ex.Message);
//            //}
//            //}catch (SocketException ex){
//            //if (ex.SocketErrorCode.ToString()=="10054") {
//            //Console.WriteLine("Konec");
//            //return;
//            //throw ex;
//            //}
//            //}
//            //      if (!closingServer){
//            byteData=new byte[1024];

//            try {
//                clientSocket.BeginReceive(byteData,
//                    0,
//                    byteData.Length,
//                    SocketFlags.None,
//                    new AsyncCallback(OnReceive),
//                    clientSocket);
//            } catch (Exception ex) {
//                if (ex.HResult==10054) {
//                    ShowError("Spojení bylo přerušeno", ex.Message);
//                    clientSocket.Shutdown(new SocketShutdown());
//                    clientSocket.Close();
//                    clientSocket.Dispose();
//                    return;
//                } else {
//                    Console.WriteLine(ex.Message+"12");
//                }
//            }
//            //} else {
//            //    clientSocket.Shutdown(new SocketShutdown());
//            //    current=Current.Checking;
//            //    clientSocket.Disconnect(false);
//            //    clientSocket.Close();
//            // //   clientSocket.Dispose();
//            //    ShowError("Server byl ukončen","Server se vypnul ze strany serveru");
//            //       // Rabcr.GoTo(new Menu());
//            //}
//        }

//        void SendData(byte[] bytes, bool response) {
//            try {
//                clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//            } catch (Exception ex) {
//                Console.WriteLine(ex.Message+"2");
//            }

//            if (response) {
//                //    if (!closingServer){
//                try {
//                    clientSocket.BeginReceive(bytes,
//                        0,
//                        bytes.Length,
//                        SocketFlags.None,
//                        new AsyncCallback(OnReceive),
//                        clientSocket);
//                } catch (Exception ex) {
//                    if (ex.HResult==10054) {
//                        ShowError("Spojení bylo přerušeno", ex.Message);
//                        clientSocket.Shutdown(new SocketShutdown());
//                        clientSocket.Close();
//                        clientSocket.Dispose();
//                        return;
//                    } else {
//                        Console.WriteLine(ex.Message+"x");
//                    }
//                }
//            }
//        }

//        void SendMsgTerrain() {
//            current=Current.GettingSpawn;

//            Data msgToSend = new Data {
//                Cmd=Command.GetWorldData,
//                //   From=Setting.Name,
//                To=toServer,
//            };

//            if (PlayerX<424) PlayerX=424;
//            int xx = (int)(PlayerX-Global.WindowWidthHalf/(16*Setting.Zoom))/16+downloadedSpawnArea;
//            if (xx<TerrainLenght) {
//                terrain[xx].state=MChunkState.SendRequest;
//                if (xx<0) {
//                    msgToSend.Message=world+"|"+(TerrainLenght-PlayerX/16-xx).ToString();
//                } else msgToSend.Message=world+"|"+xx.ToString();

//                downloadedSpawnArea++;
//                state++;
//                Queue.Add(new DataToSend { Bytes=msgToSend.ToByte(), Importance=Importance.VeryImportant });
//            } else {
//                state++;

//                current=Current.GettingPlayers;
//                {
//                    Data msg = new Data {
//                        Cmd=Command.PlayersList,
//                        //            From=Setting.Name,
//                        To=toServer
//                    };
//                    Queue.Add(new DataToSend {
//                        Bytes=msg.ToByte(),
//                        Importance=Importance.High
//                    });
//                    //clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
//                }
//            }
//            //   clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

//        }

//        void SendRequestChunk(int pos) {
//            terrain[pos].state=MChunkState.SendRequest;
//            terrain[pos].sended=DateTime.Now;
//            Queue.Add(
//                new DataToSend {
//                    Bytes=new Data {
//                        Cmd=Command.GetWorldData,
//                        //     From=Setting.Name,
//                        To=toServer,
//                        Message=world+"|"+pos.ToString()
//                    }.ToByte(),
//                    Importance=Importance.VeryImportant
//                });
//        }
//        #endregion

//        #region Animals

//        void MoveChicken() {
//            int Xran = terrainStartIndexX+random.Next(terrainStartIndexW-terrainStartIndexX);

//            if (terrain[Xran].Mobs.Count!=0) {
//                foreach (Mob mob in terrain[Xran].Mobs) {
//                    if (mob.Id==(byte)BlockId.Chicken) {
//                        int height = mob.Height;

//                        Chicken ch = (Chicken)mob;

//                        if (!ch.needToChangeChunk) {
//                            if (!ch.move) {
//                                if (!ch.Eat) {
//                                    if (ch.Dir) {
//                                        if (!terrain[Xran+1].IsSolidBlocks[height]) {
//                                            if (terrain[Xran+1].IsSolidBlocks[height+1]) {
//                                                ch.lastChunkID=(short)Xran;
//                                                ch.move=true;
//                                                ch.moveCount=16*4;
//                                                movingAnimals.Add(mob);
//                                            }
//                                        }
//                                    } else {
//                                        if (!terrain[Xran-1].IsSolidBlocks[height]) {
//                                            if (terrain[Xran-1].IsSolidBlocks[height+1]) {
//                                                ch.lastChunkID=(short)Xran;
//                                                ch.move=true;
//                                                ch.moveCount=16*4;
//                                                movingAnimals.Add(mob);
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }

//        void MoveRabbit() {
//            int Xran = terrainStartIndexX+random.Next(terrainStartIndexW-terrainStartIndexX);

//            if (terrain[Xran].Mobs.Count!=0) {
//                foreach (Mob mob in terrain[Xran].Mobs) {
//                    if (mob.Id==(byte)BlockId.Rabbit) {
//                        int height = mob.Height;

//                        Rabbit r = (Rabbit)mob;

//                        if (!r.needToChangeChunk) {
//                            if (!r.switchtoWalk) {
//                                if (!r.move) {
//                                    if (r.Dir) {
//                                        if (!terrain[Xran+1].IsSolidBlocks[height]) {
//                                            if (terrain[Xran+1].IsSolidBlocks[height+1]) {
//                                                r.lastChunkID=(short)Xran;
//                                                r.moveCount=16*4;
//                                                r.switchtoWalk=true;
//                                                r.thisTexture=rabbitWalkTexture;
//                                                movingAnimals.Add(mob);
//                                            }
//                                        }
//                                    } else {
//                                        if (!terrain[Xran-1].IsSolidBlocks[height]) {
//                                            if (terrain[Xran-1].IsSolidBlocks[height+1]) {
//                                                r.lastChunkID=(short)Xran;
//                                                r.moveCount=16*4;
//                                                r.switchtoWalk=true;
//                                                movingAnimals.Add(mob);
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }

//        void FinishMooving() {
//            foreach (Mob mob in movingAnimals) {
//                switch ((BlockId)mob.Id) {
//                    case BlockId.Chicken: {
//                        Chicken ch = (Chicken)mob;
//                        if (ch.needToChangeChunk) {
//                            movingAnimals.Remove(mob);
//                            ch.needToChangeChunk=false;
//                            terrain[ch.lastChunkID].Mobs.Remove(ch);
//                            terrain[(int)(mob.Position.X/16)].Mobs.Add(ch);
//                            return;
//                        }
//                        break;
//                    }

//                    case BlockId.Rabbit: {
//                        Rabbit r = (Rabbit)mob;
//                        if (r.needToChangeChunk) {
//                            movingAnimals.Remove(mob);
//                            r.needToChangeChunk=false;
//                            terrain[r.lastChunkID].Mobs.Remove(r);
//                            terrain[(int)(mob.Position.X/16)].Mobs.Add(r);
//                            return;
//                        }
//                        break;
//                    }
//                }
//            }
//        }


//        #endregion

//        #region Draw text
//        void DrawTextShadowMax(SpriteFont newSpriteFont, int x, int y, string str, Color c) {
//            if (Setting.BetterFont) {
//                if (newSpriteFont==spriteFont_medium) {
//                    if (Constants.Shadow) {
//                        spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
//                        spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
//                    }
//                    spriteBatch.DrawString(spriteFont_big, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
//                } else if (newSpriteFont==spriteFont_small) {
//                    if (Constants.Shadow) {
//                        spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                        spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                    }
//                    spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                } else {
//                    if (Constants.Shadow) {
//                        spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
//                        spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
//                    }
//                    spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
//                }
//            } else {
//                spriteBatch.DrawString(newSpriteFont, str, new Vector2(x, y), c);
//                if (Constants.Shadow) {
//                    spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+1.5f, y+1.5f), c*0.4f);
//                    spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+0.75f, y+0.75f), c*0.4f);
//                }
//            }
//        }

//        void DrawTextShadowMin(SpriteFont newSpriteFont, int x, int y, string str, Color c) {
//            if (Setting.BetterFont) {
//                if (newSpriteFont==spriteFont_medium) {
//                    if (Constants.Shadow) spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
//                    spriteBatch.DrawString(spriteFont_big, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
//                } else if (newSpriteFont==spriteFont_small) {
//                    if (Constants.Shadow) spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                    spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                } else {
//                    if (Constants.Shadow) spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
//                    spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
//                }
//            } else {
//                if (Constants.Shadow) spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+0.5f, y+0.5f), c*0.5f);
//                spriteBatch.DrawString(newSpriteFont, str, new Vector2(x, y), c);
//            }
//        }

//        void DrawTextShadowMin(int x, int y, string str) {
//            if (Setting.BetterFont) {
//                if (Constants.Shadow) spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), Color.Black*0.5f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), Color.Black, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//            } else {
//                if (Constants.Shadow) spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.5f, y+0.5f), Color.Black*0.5f);
//                spriteBatch.DrawString(spriteFont_small, str, new Vector2(x, y), Color.Black);
//            }
//        }

//        void DrawTextShadowMin(int x, int y, string str, Color c) {
//            if (Setting.BetterFont) {
//                if (Constants.Shadow) {
//                    spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.15f, y+0.15f), Color.Black*0.25f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                    spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), Color.Gray*0.25f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//                }
//                spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
//            } else {
//                if (Constants.Shadow) {
//                    spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.15f, y+0.15f), Color.Black*0.25f);
//                    spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.5f, y+0.5f), Color.Gray*0.25f);
//                }
//                spriteBatch.DrawString(spriteFont_small, str, new Vector2(x, y), c);
//            }
//        }
//        #endregion

//        #region Writing text & display text
//        void ShowHelp() {
//            diserpeard=255;
//            gedo.BuildString("<Red>Jejda</Red> tento příkaz není povolen (zkus *help)");
//        }

//        void ShowError(string main, string toShow) {
//            Error=true;
//            ErrorHeader=main;
//            ErrorText=toShow;
//            current=Current.ErrorDuringGame;
//        }

//        void DisplayText(string s) {
//            diserpeard=250;
//            if (gedo==null) gedo=new GeDo(spriteFont_small,/*spriteFont_small_italic,*/s/*,false*/);
//            else gedo.BuildString(text);
//            text="";

//        }

//        string TextEdit(string editText) {
//            string newKey = Add();

//            string add;

//            if (newKeyboardState.IsKeyDown(Keys.RightAlt)||newKeyboardState.IsKeyDown(Keys.LeftAlt)) add=ConvertNormalToAtls(newKey);
//            else if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) add=ConvertNormalToUpper(newKey);
//            else if (newKeyboardState.IsKeyDown(Keys.LeftControl)||newKeyboardState.IsKeyDown(Keys.RightControl)) add=ConvertNormalToCtrls(newKey);
//            else add=newKey;

//            if (newKey=="") {
//                hold=false;
//                timeHold=30;
//            } else {
//                if (hold) {
//                    switch (add) {
//                        //case "Delete":
//                        //    if (editText.Length > 4) editText = editText.Substring(0, editText.Length - 5); else editText = "";
//                        //    break;

//                        case "Delete":
//                            if (editText.Length>0) editText=editText.Substring(0, editText.Length-1); /*else editText = "";*/
//                            break;

//                        case "Copy":
//                            if (editText!=""&&editText!=null) System.Windows.Forms.Clipboard.SetText(editText);
//                            break;

//                        case "Paste":
//                            if (System.Windows.Forms.Clipboard.ContainsText()) editText+=System.Windows.Forms.Clipboard.GetText();
//                            break;

//                        //case "§":
//                        //     break;

//                        //case "Remove":
//                        //    editText = "";
//                        //    break;

//                        // case "Double":
//                        //      editText += editText;
//                        //      break;
//                        // case "Quick":
//                        //      editText += "RabigonCraft The most of my World";
//                        //      break;

//                        //case "Alt":
//                        //     olderKey = "Alt";
//                        //     break;

//                        default:
//                            editText+=add;
//                            break;
//                    }
//                } else {
//                    if (timeHold==0) hold=true;
//                    else {
//                        if (lastKey==newKey) {
//                            if (timeHold==30) {
//                                switch (add) {
//                                    //case "Delete":
//                                    //    if (editText.Length>4) editText=editText.Substring(0,editText.Length-5); else editText="";
//                                    //    break;

//                                    case "Delete":
//                                        if (editText.Length>0) editText=editText.Substring(0, editText.Length-1); /*else editText="";*/
//                                        break;

//                                    case "Copy":
//                                        if (editText!="") System.Windows.Forms.Clipboard.SetText(editText);
//                                        break;

//                                    case "Paste":
//                                        if (System.Windows.Forms.Clipboard.ContainsText()) editText+=System.Windows.Forms.Clipboard.GetText();
//                                        break;

//                                    //case "Remove":
//                                    //   editText = "";
//                                    //   break;

//                                    //case "Double":
//                                    //   editText += editText;
//                                    //   break;

//                                    //case "§":
//                                    //   break;

//                                    //case "Quick":
//                                    //   editText += "RabigonCraft The most of my World";
//                                    //   break;

//                                    //case "Alt":
//                                    //   olderKey = "Alt";
//                                    //   break;

//                                    default:
//                                        editText+=add;
//                                        //editText =editText.Replace("<,", "<");
//                                        //editText =editText.Replace(",<", "<");

//                                        //editText =editText.Replace(">.", ">");
//                                        //editText =editText.Replace(".>", ">");

//                                        //editText =editText.Replace("/ú", "/");
//                                        //editText =editText.Replace("ú/", "/");
//                                        break;
//                                }
//                            }
//                            timeHold--;
//                        } else {
//                            hold=false;
//                            timeHold=30;
//                        }
//                    }
//                }
//            }
//            // olderKey = lastKey;
//            lastKey=newKey;

//            return editText;
//        }

//        string Add() {
//            if (newKeyboardState.IsKeyDown(Keys.Space)) return " ";

//            if (newKeyboardState.IsKeyDown(Keys.Q)) return "g";
//            if (newKeyboardState.IsKeyDown(Keys.W)) return "w";
//            if (newKeyboardState.IsKeyDown(Keys.E)) return "e";
//            if (newKeyboardState.IsKeyDown(Keys.R)) return "r";
//            if (newKeyboardState.IsKeyDown(Keys.T)) return "t";
//            if (newKeyboardState.IsKeyDown(Keys.Z)) return "z";
//            if (newKeyboardState.IsKeyDown(Keys.U)) return "u";
//            if (newKeyboardState.IsKeyDown(Keys.I)) return "i";
//            if (newKeyboardState.IsKeyDown(Keys.O)) return "o";
//            if (newKeyboardState.IsKeyDown(Keys.P)) return "p";
//            if (newKeyboardState.IsKeyDown(Keys.A)) return "a";
//            if (newKeyboardState.IsKeyDown(Keys.S)) return "s";
//            if (newKeyboardState.IsKeyDown(Keys.D)) return "d";
//            if (newKeyboardState.IsKeyDown(Keys.F)) return "f";
//            if (newKeyboardState.IsKeyDown(Keys.G)) return "g";
//            if (newKeyboardState.IsKeyDown(Keys.H)) return "h";
//            if (newKeyboardState.IsKeyDown(Keys.J)) return "j";
//            if (newKeyboardState.IsKeyDown(Keys.K)) return "k";
//            if (newKeyboardState.IsKeyDown(Keys.L)) return "l";
//            if (newKeyboardState.IsKeyDown(Keys.Y)) return "y";
//            if (newKeyboardState.IsKeyDown(Keys.X)) return "x";
//            if (newKeyboardState.IsKeyDown(Keys.C)) return "c";
//            if (newKeyboardState.IsKeyDown(Keys.V)) return "v";
//            if (newKeyboardState.IsKeyDown(Keys.B)) return "b";
//            if (newKeyboardState.IsKeyDown(Keys.N)) return "n";
//            if (newKeyboardState.IsKeyDown(Keys.M)) return "m";

//            if (newKeyboardState.IsKeyDown(Keys.D1)) return "ó";
//            if (newKeyboardState.IsKeyDown(Keys.D2)) return "ě";
//            if (newKeyboardState.IsKeyDown(Keys.D3)) return "š";
//            if (newKeyboardState.IsKeyDown(Keys.D4)) return "č";
//            if (newKeyboardState.IsKeyDown(Keys.D5)) return "ř";
//            if (newKeyboardState.IsKeyDown(Keys.D6)) return "ž";
//            if (newKeyboardState.IsKeyDown(Keys.D7)) return "ý";
//            if (newKeyboardState.IsKeyDown(Keys.D8)) return "á";
//            if (newKeyboardState.IsKeyDown(Keys.D9)) return "í";
//            if (newKeyboardState.IsKeyDown(Keys.D0)) return "é";

//            if (newKeyboardState.IsKeyDown(Keys.NumPad0)) return "0";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad1)) return "1";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad2)) return "2";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad3)) return "3";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad4)) return "4";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad5)) return "5";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad6)) return "6";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad7)) return "7";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad8)) return "8";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad9)) return "9";
//            if (newKeyboardState.IsKeyDown(Keys.NumPad9)) return "9";

//            if (newKeyboardState.IsKeyDown(Keys.Back)) return "Delete";
//            if (newKeyboardState.IsKeyDown(Keys.Delete)) return "Delete";

//            if (newKeyboardState.IsKeyDown(Keys.OemComma)) return ",";
//            if (newKeyboardState.IsKeyDown(Keys.OemPeriod)) return ".";
//            if (newKeyboardState.IsKeyDown(Keys.OemMinus)) return "-";
//            if (newKeyboardState.IsKeyDown(Keys.OemQuestion)) return "'";
//            if (newKeyboardState.IsKeyDown(Keys.OemPlus)) return "=";
//            if (newKeyboardState.IsKeyDown(Keys.OemCloseBrackets)) return ")";
//            if (newKeyboardState.IsKeyDown(Keys.OemSemicolon)) return "ů";
//            if (newKeyboardState.IsKeyDown(Keys.OemOpenBrackets)) return "ú";
//            if (newKeyboardState.IsKeyDown(Keys.Divide)) return "/";
//            if (newKeyboardState.IsKeyDown(Keys.Add)) return "+";
//            if (newKeyboardState.IsKeyDown(Keys.Divide)) return "/";
//            if (newKeyboardState.IsKeyDown(Keys.Decimal)) return ",";
//            if (newKeyboardState.IsKeyDown(Keys.Subtract)) return "-";
//            if (newKeyboardState.IsKeyDown(Keys.Multiply)) return "*";
//            if (newKeyboardState.IsKeyDown(Keys.OemQuotes)) return "§";

//            return "";
//        }

//        string ConvertNormalToUpper(string key) {
//            switch (key) {
//                case "q": return "Q";
//                case "w": return "W";
//                case "e": return "E";
//                case "r": return "R";
//                case "t": return "T";
//                case "z": return "Z";
//                case "u": return "U";
//                case "i": return "I";
//                case "o": return "O";
//                case "p": return "P";
//                case "a": return "A";
//                case "s": return "S";
//                case "d": return "D";
//                case "f": return "F";
//                case "g": return "G";
//                case "h": return "H";
//                case "j": return "J";
//                case "k": return "K";
//                case "l": return "L";
//                case "y": return "Y";
//                case "x": return "X";
//                case "c": return "C";
//                case "v": return "V";
//                case "b": return "B";
//                case "n": return "N";
//                case "m": return "M";
//                case "ú": return "/";
//                case ")": return "(";
//                case ",": return "?";
//                case ".": return ":";
//                case "-": return "_";
//                case "¨": return "'";
//                case "´": return "ˇ";
//                case "=": return "%";
//            }
//            return "";
//        }

//        string ConvertNormalToCtrls(string key) {
//            switch (key) {
//                case "x": return "Delete";
//                case "c": return "Copy";
//                case "v": return "Paste";
//            }
//            return "";
//        }

//        string ConvertNormalToAtls(string key) {
//            switch (key) {
//                case "q": return "\"";
//                case "w": return "|";
//                case "f": return "[";
//                case "g": return "]";
//                case "x": return "#";
//                case "c": return "&";
//                case "v": return "@";
//                case "b": return "{";
//                case "n": return "}";
//                case "ú": return "÷";
//                case ")": return "×";
//                case ",": return "<";
//                case ".": return ">";
//                case "-": return "*";
//                case "+": return "~";
//                case "š": return "^";
//                case "ř": return "°";
//            }
//            return "";
//        }

//        #endregion

//        #region New blocks
//        Block BackBlockFromId(byte type, Vector2 position) {
//            switch ((BlockId)type) {

//                // Blocks
//                case BlockId.Lava: return new Block(lavaTexture, type, position);

//                // Backs
//                case BlockId.BackDirt: return new Block(backgroundDirtTexture, type, position);
//                case BlockId.BackSand: return new Block(backgroundSandTexture, type, position);
//                case BlockId.BackCobblestone: return new Block(backgroundCobblestoneTexture, type, position);
//                case BlockId.BackClay: return new Block(backgroundClayTexture, type, position);

//                case BlockId.BackRedSand: return new Block(backgroundRedSandTexture, type, position);

//                case BlockId.BackRegolite: return new Block(backgroundRegoliteTexture, type, position);
//                case BlockId.BackGravel: return new Block(backgroundGravelTexture, type, position);

//                case BlockId.BackAnorthosite: return new Block(backgroundAnorthositeTexture, type, position);
//                case BlockId.BackBasalt: return new Block(backgroundBasaltTexture, type, position);
//                case BlockId.BackDiorit: return new Block(backgroundDioritTexture, type, position);
//                case BlockId.BackDolomite: return new Block(backgroundDolomiteTexture, type, position);
//                case BlockId.BackFlint: return new Block(backgroundFlintTexture, type, position);
//                case BlockId.BackGabbro: return new Block(backgroundGabbroTexture, type, position);
//                case BlockId.BackGneiss: return new Block(backgroundGneissTexture, type, position);
//                case BlockId.BackLimestone: return new Block(backgroundLimestoneTexture, type, position);
//                case BlockId.BackMudstone: return new Block(backgroundMudstoneTexture, type, position);
//                case BlockId.BackRhyolite: return new Block(backgroundRhyoliteTexture, type, position);
//                case BlockId.BackSandstone: return new Block(backgroundSandstoneTexture, type, position);
//                case BlockId.BackSchist: return new Block(backgroundSchistTexture, type, position);

//                case BlockId.BackCoal: return new Block(backgroundCoalTexture, type, position);
//                case BlockId.BackCopper: return new Block(backgroundCopperTexture, type, position);
//                case BlockId.BackTin: return new Block(backgroundTinTexture, type, position);
//                case BlockId.BackIron: return new Block(backgroundIronTexture, type, position);
//                case BlockId.BackAluminium: return new Block(backgroundAluminiumTexture, type, position);
//                case BlockId.BackSilver: return new Block(backgroundSilverTexture, type, position);
//                case BlockId.BackGold: return new Block(backgroundGoldTexture, type, position);


//                // Wood
//                case BlockId.AppleWood: return new Block(appleWoodTexture, type, position);
//                case BlockId.CherryWood: return new Block(cherryWoodTexture, type, position);
//                case BlockId.LemonWood: return new Block(lemonWoodTexture, type, position);
//                case BlockId.LindenWood: return new Block(lindenWoodTexture, type, position);
//                case BlockId.OakWood: return new Block(oakWoodTexture, type, position);
//                case BlockId.OrangeWood: return new Block(orangeWoodTexture, type, position);
//                case BlockId.PineWood: return new Block(pineWoodTexture, type, position);
//                case BlockId.PlumWood: return new Block(plumWoodTexture, type, position);
//                case BlockId.SpruceWood: return new Block(spruceWoodTexture, type, position);
//                case BlockId.WillowWood: return new Block(TextureWillowWood, type, position);
//                case BlockId.MangroveWood: return new Block(TextureMangroveWood, type, position);
//                case BlockId.EucalyptusWood: return new Block(TextureEucalyptusWood, type, position);
//                case BlockId.OliveWood: return new Block(TextureOliveWood, type, position);
//                case BlockId.RubberTreeWood: return new Block(TextureRubberTreeWood, type, position);
//                case BlockId.AcaciaWood: return new Block(TextureAcaciaWood, type, position);
//                case BlockId.KapokWood: return new Block(TextureKapokWood, type, position);

//                // Artifical
//                case BlockId.AdvancedSpaceBack: return new Block(advancedSpaceBackTexture, type, position);
//                case BlockId.AdvancedSpaceWindow: return new Block(advancedSpaceWindowTexture, type, position);
//                case BlockId.Glass: return new Block(glassTexture, type, position);

//                case BlockId.Coral: return new Block(coralTexture, type, position);
//                case BlockId.Seaweed: return new Block(seaweedTexture, type, position);

//                default: return null;
//            }
//        }

//        Block SolidBlockFromId(byte type, Vector2 position) {
//            switch ((BlockId)type) {
//                // Stone
//                case BlockId.StoneBasalt: return new Block(basaltTexture, type, position);
//                case BlockId.StoneDiorit: return new Block(dioritTexture, type, position);
//                case BlockId.StoneDolomite: return new Block(dolomiteTexture, type, position);
//                case BlockId.StoneGabbro: return new Block(gabbroTexture, type, position);
//                case BlockId.StoneGneiss: return new Block(gneissTexture, type, position);
//                case BlockId.StoneLimestone: return new Block(limestoneTexture, type, position);
//                case BlockId.StoneRhyolite: return new Block(rhyoliteTexture, type, position);
//                case BlockId.StoneSandstone: return new Block(sandstoneTexture, type, position);
//                case BlockId.StoneSchist: return new Block(schistTexture, type, position);
//                case BlockId.Anorthosite: return new Block(anorthositeTexture, type, position);
//                case BlockId.MudStone: return new Block(mudstoneTexture, type, position);
//                case BlockId.Regolite: return new Block(regoliteTexture, type, position);
//                case BlockId.RedSand: return new Block(redsandTexture, type, position);

//                case BlockId.Compost: return new Block(CompostTexture, type, position);

//                // Ore
//                case BlockId.OreAluminium: return new Block(aluminiumOreTexture, type, position);
//                case BlockId.OreCopper: return new Block(copperOreTexture, type, position);
//                case BlockId.OreGold: return new Block(goldOreTexture, type, position);
//                case BlockId.OreIron: return new Block(ironOreTexture, type, position);
//                case BlockId.OreSilver: return new Block(silverOreTexture, type, position);
//                case BlockId.OreTin: return new Block(tinOreTexture, type, position);
//                case BlockId.Coal: return new Block(coalOreTexture, type, position);

//                // Blocks
//                case BlockId.Cobblestone: return new Block(cobblestoneTexture, type, position);
//                case BlockId.Gravel: return new Block(gravelTexture, type, position);
//                case BlockId.Sand: return new Block(sandTexture, type, position);
//                case BlockId.Dirt: return new Block(dirtTexture, type, position);
//                case BlockId.Ice: return new Block(iceTexture, type, position);
//                case BlockId.Clay: return new Block(clayTexture, type, position);

//                // Grass
//                case BlockId.GrassBlockDesert: return new Block(grassBlockDesertTexture, type, position);
//                case BlockId.GrassBlockForest: return new Block(grassBlockForestTexture, type, position);
//                case BlockId.GrassBlockHills: return new Block(grassBlockHillsTexture, type, position);
//                case BlockId.GrassBlockJungle: return new Block(grassBlockJungleTexture, type, position);
//                case BlockId.GrassBlockPlains: return new Block(grassBlockPlainsTexture, type, position);
//                case BlockId.GrassBlockClay: return new Block(grassBlockClayTexture, type, position);

//                // Artifical
//                case BlockId.Roof1: return new Block(roof1Texture, type, position);
//                case BlockId.Roof2: return new Block(roof2Texture, type, position);
//                case BlockId.Bricks: return new Block(bricksTexture, type, position);

//                case BlockId.DoorClose: return new Block(doorCloseTexture, type, position);
//                case BlockId.Planks: return new Block(planksTexture, type, position);

//                case BlockId.AdvancedSpaceBlock: return new Block(advancedSpaceBlockTexture, type, position);
//                case BlockId.AdvancedSpaceFloor: return new Block(advancedSpaceFloorTexture, type, position);
//                case BlockId.AdvancedSpacePart1: return new Block(advancedSpacePart1Texture, type, position);
//                case BlockId.AdvancedSpacePart2: return new Block(advancedSpacePart2Texture, type, position);
//                case BlockId.AdvancedSpacePart3: return new Block(advancedSpacePart3Texture, type, position);
//                case BlockId.AdvancedSpacePart4: return new Block(advancedSpacePart4Texture, type, position);

//                case BlockId.Snow: return new Block(snowTexture, type, position);

//                default: return null;
//            }
//        }

//        Block TopBlockFromId(byte type, Vector2 position) {
//            switch ((BlockId)type) {
//                case BlockId.BucketForRubber: return new Block(TextureBucketForRubber, type, position);
//                // Leaves
//                case BlockId.AppleLeaves: return new Block(appleLeavesTexture, type, position);
//                case BlockId.LemonLeavesWithLemons: return new Block(lemonLeavesWithLemonsTexture, type, position);
//                case BlockId.LindenLeaves: return new Block(lindenLeavesTexture, type, position);
//                case BlockId.OakLeaves: return new Block(oakLeavesTexture, type, position);
//                case BlockId.OrangeLeaves: return new Block(orangeLeavesTexture, type, position);
//                case BlockId.SpruceLeaves: return new Block(spruceLeavesTexture, type, position);
//                case BlockId.PlumLeavesWithPlums: return new Block(plumLeavesWithPlumsTexture, type, position);
//                case BlockId.PlumLeaves: return new Block(plumLeavesTexture, type, position);
//                case BlockId.PineLeaves: return new Block(pineLeavesTexture, type, position);
//                case BlockId.OrangeLeavesWithOranges: return new Block(orangeLeavesWithOrangesTexture, type, position);
//                case BlockId.AppleLeavesWithApples: return new Block(appleLeavesWithApplesTexture, type, position);
//                case BlockId.CherryLeaves: return new Block(cherryLeavesTexture, type, position);
//                case BlockId.CherryLeavesWithCherries: return new Block(cherryLeavesWithCherriesTexture, type, position);
//                case BlockId.LemonLeaves: return new Block(lemonLeavesTexture, type, position);


//                case BlockId.WillowLeaves: return new Block(TextureWillowLeaves, type, position);

//                case BlockId.MangroveLeaves: return new Block(TextureMangroveLeaves, type, position);

//                case BlockId.EucalyptusLeaves: return new Block(TextureEucalyptusLeaves, type, position);

//                case BlockId.OliveLeavesWithOlives: return new Block(TextureOliveLeavesWithOlives, type, position);
//                case BlockId.OliveLeaves: return new Block(TextureOliveLeaves, type, position);

//                case BlockId.RubberTreeLeaves: return new Block(TextureRubberTreeLeaves, type, position);

//                case BlockId.AcaciaLeaves: return new Block(TextureAcaciaLeaves, type, position);

//                case BlockId.KapokLeacesFlowering: return new Block(TextureKapokLeavesFlowering, type, position);
//                case BlockId.KapokLeacesFibre: return new Block(TextureKapokLeavesFibre, type, position);
//                case BlockId.KapokLeaces: return new Block(TextureKapokLeaves, type, position);

//                case BlockId.WillowSapling: return new Block(TextureWillowSapling, type, position);
//                case BlockId.MangroveSapling: return new Block(TextureMangroveSapling, type, position);
//                case BlockId.EucalyptusSapling: return new Block(TextureEucalyptusSapling, type, position);
//                case BlockId.OliveSapling: return new Block(TextureOliveSapling, type, position);
//                case BlockId.RubberTreeSapling: return new Block(TextureRubberTreeSapling, type, position);
//                case BlockId.AcaciaSapling: return new Block(TextureAcaciaSapling, type, position);
//                case BlockId.KapokSapling: return new Block(TextureKapokSapling, type, position);



//                // Blocks

//                case BlockId.SnowTop: return new Block(snowTopTexture, type, position);
//                case BlockId.Glass: return new Block(glassTexture, type, position);
//                case BlockId.Oil: return new Block(oilTexture, type, position);
//                case BlockId.WaterBlock: return new Water(waterTexture, type, position);
//                case BlockId.WaterSalt: return new Water(waterTexture, type, position);
//                case BlockId.Rocks: {
//                    switch (random.Next(4)) {
//                        default: return new Block(rocks0Texture, type, position);
//                        case 1: return new Block(rocks1Texture, type, position);
//                        case 2: return new Block(rocks2Texture, type, position);
//                        case 3: return new Block(rocks3Texture, type, position);
//                    }
//                }

//                // Saplings
//                case BlockId.AppleSapling: return new Block(appleSaplingTexture, type, position);
//                case BlockId.CherrySapling: return new Block(cherrySaplingTexture, type, position);
//                case BlockId.LemonSapling: return new Block(lemonSaplingTexture, type, position);
//                case BlockId.LindenSapling: return new Block(lindenSaplingTexture, type, position);
//                case BlockId.OakSapling: return new Block(oakSaplingTexture, type, position);
//                case BlockId.OrangeSapling: return new Block(orangeSaplingTexture, type, position);
//                case BlockId.PineSapling: return new Block(pineSaplingTexture, type, position);
//                case BlockId.PlumSapling: return new Block(plumSaplingTexture, type, position);
//                case BlockId.SpruceSapling: return new Block(spruceSaplingTexture, type, position);

//                // Flowers
//                case BlockId.Violet: return new Block(plantVioletTexture, type, position);
//                case BlockId.Dandelion: return new Block(plantDandelionTexture, type, position);
//                case BlockId.Heather: return new Block(heatherTexture, type, position);
//                case BlockId.Alore: return new Block(plantAloreTexture, type, position);
//                case BlockId.Rose: return new Block(plantRoseTexture, type, position);
//                case BlockId.Orchid: return new Block(plantOrchidTexture, type, position);

//                case BlockId.CactusBig: return new Block(cactusBigTexture, type, position);
//                case BlockId.CactusSmall: return new Block(cactusLittleTexture, type, position);
//                case BlockId.Liana: return new Block(lianaTexture, type, position);
//                case BlockId.SugarCane: return new Block(sugarCaneTexture, type, position);

//                case BlockId.Toadstool: return new Block(toadstoolTexture, type, position);
//                case BlockId.Boletus: return new Block(boletusTexture, type, position);
//                case BlockId.Champignon: return new Block(champignonTexture, type, position);

//                case BlockId.BranchALittle1: return new Block(branchALittle1Texture, type, position);
//                case BlockId.BranchALittle2: return new Block(branchALittle2Texture, type, position);
//                case BlockId.BranchFull: return new Block(branchFullTexture, type, position);
//                case BlockId.BranchWithout: return new Block(branchWithoutTexture, type, position);

//                // Grass
//                case BlockId.GrassDesert: return new Block(grassDesertTexture, type, position);
//                case BlockId.GrassForest: return new Block(grassForestTexture, type, position);
//                case BlockId.GrassHills: return new Block(grassHillsTexture, type, position);
//                case BlockId.GrassJungle: return new Block(grassJungleTexture, type, position);
//                case BlockId.GrassPlains: return new Block(grassPlainsTexture, type, position);

//                // Artifical Blocks
//                case BlockId.DoorOpen: return new Block(doorOpenTexture, type, position);

//                // Mechanical
//                case BlockId.Flag: return new AnimatedBlock(flagTexture, position, 25, 35, type);
//                case BlockId.Desk: return new Block(deskTexture, type, position);

//                case BlockId.Ladder: return new Block(ladderTexture, type, position);
//                case BlockId.BoxAdv: return new BoxBlock(boxAdvTexture, type, position);
//                case BlockId.BoxWooden: return new BoxBlock(boxWoodenTexture, type, position);
//                case BlockId.Shelf: return new ShelfBlock(shelfTexture, type, position);
//                case BlockId.BurningTorch: return new AnimatedBlock(torchTexture, position, 16, 16, type);
//                case BlockId.NotBurningTorch: return new Block(torchTexture, type, position);

//                // Electric mashines
//                case BlockId.Lamp:
//                    MashineBlockBasic m = new MashineBlockBasic(lampTexture, type, position);
//                    lightsLamp.Add(m);
//                    return m;

//                case BlockId.Radio: return new MashineBlockBasic(radioTexture, type, position);
//                case BlockId.Rocket: return new Block(rocketTexture, type, position);

//                // Generating energy
//                case BlockId.Windmill: return new AnimatedBlock(windMillTexture, position, 26, 45, type);
//                case BlockId.SewingMachine: return new MashineBlockBasic(sewingMachineTexture, type, position);
//                case BlockId.FurnaceStone: return new MashineBlockBasic(furnaceStoneTexture, type, position);
//                case BlockId.Miner: return new MashineBlockBasic(minerTexture, type, position);
//                case BlockId.Macerator: return new MashineBlockBasic(maceratorTexture, type, position);
//                case BlockId.FurnaceElectric: return new MashineBlockBasic(furnaceElectricTexture, type, position);
//                case BlockId.Charger: return new MashineBlockBasic(chargerTexture, type, position);
//                case BlockId.Composter: return new ShelfBlock(ComposterTexture, type, position);
//                case BlockId.SolarPanel: return new Block(solarPanelTexture, type, position);
//                case BlockId.Label: return new ScreenBlock(labelTexture, position, 16, 16, type);

//                default: return null;
//            }
//        }

//        Plant GetPlantFromId(byte input, byte height, byte grow, short x) {
//            switch ((BlockId)input) {
//                case BlockId.Wheat: return new Plant(input, height, grow, x, wheatTexture);
//                case BlockId.Onion: return new Plant(input, height, grow, x, plantOnionTexture);
//                case BlockId.Peas: return new Plant(input, height, grow, x, plantPeasTexture);
//                case BlockId.Carrot: return new Plant(input, height, grow, x, plantCarrotTexture);
//                case BlockId.Flax: return new Plant(input, height, grow, x, flaxTexture);
//                case BlockId.Strawberry: return new Plant(input, height, grow, x, strawberryPlantTexture);
//                case BlockId.Rashberry: return new Plant(input, height, grow, x, rashberryPlantTexture);
//                case BlockId.Blueberry: return new Plant(input, height, grow, x, blueberryPlantTexture);

//                default: return null;
//            }
//        }

//        Mob GetMobFromId(BlockId input, byte height, bool dir, int x) {
//            switch (input) {
//                case BlockId.Fish: return new Fish((byte)input, height, x, dir, fishTexture0, fishTexture1);
//                case BlockId.Chicken: return new Chicken((byte)input, height, x, dir, chickenWalkTexture, chickenEatTexture);
//                case BlockId.Rabbit: return new Rabbit((byte)input, height, x, dir, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture);

//                default: return null;
//            }
//        }
//        #endregion

//        #region Labels
//        void RefreshAroundLabels(int x, int y) {
//            if (terrain[x].TopBlocks[y+1]!=null) { if (terrain[x].TopBlocks[y+1].Id==(int)BlockId.Label) SetIndexLabel(x, y+1); }
//            if (terrain[x].TopBlocks[y-1]!=null) { if (terrain[x].TopBlocks[y-1].Id==(int)BlockId.Label) SetIndexLabel(x, y-1); }

//            if (terrain[x+1]!=null) {
//                if (terrain[x+1].TopBlocks[y]!=null) {
//                    if (terrain[x+1].TopBlocks[y].Id==(int)BlockId.Label) SetIndexLabel(x+1, y);
//                }
//            }
//            if (terrain[x-1]!=null) {
//                if (terrain[x-1].TopBlocks[y]!=null) {
//                    if (terrain[x-1].TopBlocks[y].Id==(int)BlockId.Label) SetIndexLabel(x-1, y);
//                }
//            }
//        }

//        void SetIndexLabel(int x, int y) {
//            bool up = false, down = false, left = false, right = false;

//            if (terrain[x].TopBlocks[y-1]!=null)
//                up=terrain[x].TopBlocks[y-1].Id==(int)BlockId.Label
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Lamp
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Radio
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.FurnaceElectric
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Macerator
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.SolarPanel
//                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Windmill;

//            if (terrain[x].TopBlocks[y+1]!=null)
//                down=terrain[x].TopBlocks[y+1].Id==(int)BlockId.Label
//                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Lamp
//                 ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Radio
//                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.FurnaceElectric
//                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Macerator
//                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Watermill
//                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Windmill;

//            if (terrain[x-1]!=null) {
//                if (terrain[x-1].TopBlocks[y]!=null)
//                    left=terrain[x-1].TopBlocks[y].Id==(int)BlockId.Label
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Lamp
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Radio
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.FurnaceElectric
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Macerator
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.SolarPanel
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Watermill
//                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Windmill;
//            }

//            if (terrain[x+1]!=null) {
//                if (terrain[x+1].TopBlocks[y]!=null)
//                    right=terrain[x+1].TopBlocks[y].Id==(int)BlockId.Label
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Lamp
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.FurnaceElectric
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Macerator
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Radio
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.SolarPanel
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Watermill
//                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Windmill;
//            }

//            if (up&&down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=15; return; }
//            if (!up&&down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=14; return; }
//            if (up&&down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=13; return; }
//            if (up&&!down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=12; return; }
//            if (up&&down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=11; return; }
//            if (up&&down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=10; return; }
//            if (!up&&!down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=9; return; }
//            if (up&&!down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=8; return; }
//            if (!up&&down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=7; return; }
//            if (!up&&down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=6; return; }
//            if (up&&!down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=5; return; }
//            if (!up&&!down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=4; return; }
//            if (!up&&down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=3; return; }
//            if (!up&&!down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=2; return; }
//            if (up&&!down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=1; return; }
//            if (!up&&!down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=0; return; }
//        }
//        #endregion

//        #region Draw Inventory
//        Texture2D ItemIdToTexture(int id) {
//            switch ((Items)id) {
//                case Items.BoxAdv: return boxAdvTexture;
//                case Items.BoxWooden: return boxWoodenTexture;
//                case Items.Shelf: return shelfTexture;
//                case Items.Heater: return heatherTexture;
//                case Items.WoodDust: return ItemWoodDustTexture;
//                case Items.AluminiumDust: return ItemAluminiumDustTexture;
//                case Items.FlaxSeeds: return flaxSeedsTexture;
//                case Items.MudIngot: return oneMudBrickTexture;
//                case Items.AluminiumIngot: return ItemAluminiumIngotTexture;
//                case Items.Nail: return nailTexture;
//                case Items.Silicium: return siliciumTexture;
//                case Items.StoneBasalt: return basaltTexture;
//                case Items.StoneLimestone: return limestoneTexture;
//                case Items.StoneRhyolite: return rhyoliteTexture;
//                case Items.StoneGneiss: return gneissTexture;
//                case Items.StoneSandstone: return sandstoneTexture;
//                case Items.StoneSchist: return schistTexture;
//                case Items.StoneGabbro: return gabbroTexture;
//                case Items.StoneDiorit: return dioritTexture;
//                case Items.StoneDolomite: return dolomiteTexture;
//                case Items.Flax: return flaxInvTexture;
//                case Items.Dirt: return dirtTexture;
//                case Items.Sand: return sandTexture;
//                case Items.Lava: return lavaTexture;
//                case Items.Cobblestone: return cobblestoneTexture;
//                case Items.Gravel: return gravelTexture;

//                case Items.WoodOak: return oakWoodTexture;
//                case Items.WoodSpruce: return spruceWoodTexture;
//                case Items.WoodLinden: return lindenWoodTexture;
//                case Items.WoodPine: return pineWoodTexture;
//                case Items.WoodApple: return appleWoodTexture;
//                case Items.WoodCherry: return cherryWoodTexture;
//                case Items.WoodPlum: return plumWoodTexture;
//                case Items.WoodLemon: return lemonWoodTexture;
//                case Items.WoodOrange: return orangeWoodTexture;

//                case Items.OakLeaves: return oakLeavesTexture;

//                case Items.GrassBlockDesert: return grassBlockDesertTexture;
//                case Items.GrassBlockForest: return grassBlockForestTexture;
//                case Items.GrassBlockHills: return grassBlockHillsTexture;
//                case Items.GrassBlockJungle: return grassBlockJungleTexture;
//                case Items.GrassBlockPlains: return grassBlockPlainsTexture;

//                //Crafted
//                case Items.Glass: return glassTexture;
//                case Items.Bricks: return bricksTexture;

//                case Items.Planks: return planksTexture;

//                case Items.Desk: return deskTexture;
//                case Items.Door: return ItemDoorTexture;
//                case Items.Ladder: return ladderTexture;
//                case Items.Flag: return ItemFlagTexture;
//                case Items.TorchON: return torchInvTexture;
//                case Items.Rope: return ItemRopeTexture;

//                case Items.HayBlock: return hayBlockTexture;

//                case Items.Roof1: return roof1Texture;
//                case Items.Roof2: return roof2Texture;

//                //Mashines
//                case Items.AdvancedSpaceBack: return advancedSpaceBackTexture;
//                case Items.AdvancedSpaceWindow: return advancedSpaceWindowTexture;
//                case Items.AdvancedSpaceBlock: return advancedSpaceBlockTexture;
//                case Items.AdvancedSpaceFloor: return advancedSpaceFloorTexture;
//                case Items.AdvancedSpacePart1: return advancedSpacePart1Texture;
//                case Items.AdvancedSpacePart2: return advancedSpacePart2Texture;
//                case Items.AdvancedSpacePart3: return advancedSpacePart3Texture;
//                case Items.AdvancedSpacePart4: return advancedSpacePart4Texture;

//                case Items.WindMill: return ItemWindMillTexture;
//                case Items.WaterMill: return ItemWaterMillTexture;
//                case Items.SolarPanel: return solarPanelTexture;

//                case Items.Miner: return minerTexture;
//                case Items.Macerator: return maceratorOneTexture;
//                case Items.Lamp: return lampTexture;
//                case Items.Radio: return radioInvTexture;
//                case Items.Label: return labelOneTexture;
//                case Items.Rocket: return ItemRocketTexture;
//                case Items.FurnaceElectric: return furnaceElectricOneTexture;
//                case Items.FurnaceStone: return furnaceStoneOneTexture;

//                //Food
//                case Items.Banana: return ItemBananaTexture;
//                case Items.Cherry: return ItemCherryTexture;
//                case Items.Lemon: return ItemLemonTexture;
//                case Items.Orange: return ItemOrangeTexture;
//                case Items.Plum: return ItemPlumTexture;
//                case Items.Apple: return ItemAppleTexture;
//                case Items.Rashberry: return rashberryTexture;
//                case Items.Strawberry: return strawberryTexture;
//                case Items.Blueberries: return blueberryTexture;

//                case Items.RabbtCookedMeat: return ItemRabbtCookedMeatTexture;
//                case Items.RabbitMeat: return ItemRabbitMeatTexture;

//                case Items.Fish: return fishTexture0;
//                case Items.FishMeatCooked: return fishCookedTexture;

//                //Clothes
//                case Items.Backpack: return ItemBackpackTexture;

//                //Items
//                case Items.CoalDust: return ItemCoalDustTexture;
//                case Items.BronzeDust: return ItemBronzeDustTexture;
//                case Items.GoldDust: return ItemGoldDustTexture;
//                case Items.IronDust: return ItemIronDustTexture;
//                case Items.SilverDust: return ItemSilverDustTexture;
//                case Items.CopperDust: return ItemCopperDustTexture;
//                case Items.TinDust: return ItemTinDustTexture;

//                case Items.BronzeIngot: return ItemBronzeIngotTexture;
//                case Items.GoldIngot: return ItemGoldIngotTexture;
//                case Items.IronIngot: return ItemIronIngotTexture;
//                case Items.TinIngot: return ItemTinIngotTexture;
//                case Items.SilverIngot: return ItemSilverIngotTexture;
//                case Items.CopperIngot: return ItemCopperIngotTexture;

//                case Items.PlateIron: return plateIronTexture;
//                case Items.PlateBronze: return plateBronzeTexture;
//                case Items.plateAluminium: return plateAluminiumTexture;
//                case Items.PlateCopper: return plateCopperTexture;
//                case Items.PlateGold: return plateGoldTexture;

//                case Items.OreCoal: return ItemCoalTexture;
//                case Items.ItemGold: return ItemGoldTexture;
//                case Items.ItemTin: return ItemTinTexture;
//                case Items.ItemSilver: return ItemSilverTexture;
//                case Items.ItemIron: return ItemIronTexture;
//                case Items.ItemCopper: return ItemCopperTexture;
//                case Items.Ash: return ashTexture;
//                case Items.CoalWood: return coalWoodTexture;

//                case Items.Saphirite: return ItemSaphiriteTexture;
//                case Items.Diamond: return ItemDiamondTexture;
//                case Items.Smaragd: return ItemSmaragdTexture;
//                case Items.Ruby: return ItemRubyTexture;
//                case Items.SmallStone: return ItemSmallStoneTexture;
//                case Items.BigStone: return ItemBigStoneTexture;
//                case Items.MediumStone: return ItemMediumStoneTexture;

//                case Items.Bulb: return ItemBulbTexture;
//                case Items.Circuit: return ItemCircuitTexture;
//                case Items.ItemBattery: return ItemBatteryTexture;
//                case Items.BigCircuit: return ItemBigCircuitTexture;
//                case Items.OneBrick: return oneBrickTexture;
//                case Items.Cloth: return clothTexture;
//                case Items.Yarn: return yarnTexture;

//                case Items.Condenser: return condenserTexture;
//                case Items.Diode: return diodeTexture;
//                case Items.Tranzistor: return tranzistorTexture;
//                case Items.Rezistance: return resistanceTexture;
//                case Items.Motor: return motorTexture;
//                case Items.BareLabel: return bareLabelTexture;

//                //Plants
//                case Items.OakSapling: return oakSaplingTexture;
//                case Items.LindenSapling: return lindenSaplingTexture;
//                case Items.PineSapling: return pineSaplingTexture;
//                case Items.AppleSapling: return appleSaplingTexture;
//                case Items.LemonSapling: return lemonSaplingTexture;
//                case Items.CherrySapling: return cherrySaplingTexture;
//                case Items.PlumSapling: return plumSaplingTexture;
//                case Items.SpruceSapling: return spruceSaplingTexture;
//                case Items.OrangeSapling: return orangeSaplingTexture;

//                case Items.Dandelion: return plantDandelionTexture;
//                case Items.PlantRose: return plantRoseTexture;
//                case Items.PlantOrchid: return plantOrchidTexture;
//                case Items.PlantViolet: return plantVioletTexture;

//                case Items.PlantStrawberry: return invStrawberryTexture;
//                case Items.PlantRashberry: return invRashberryTexture;
//                case Items.PlantBlueberry: return invBlueberryTexture;

//                case Items.CactusBig: return cactusBigTexture;
//                case Items.CactusSmall: return cactusLittleTexture;

//                case Items.SugarCane: return sugarCaneTexture;
//                case Items.Onion: return ItemOnionTexture;

//                case Items.Toadstool: return toadstoolTexture;
//                case Items.Boletus: return boletusTexture;
//                case Items.Champignon: return champignonTexture;

//                case Items.Coral: return coralTexture;
//                case Items.Seaweed: return seaweedTexture;
//                case Items.PlantOnion: return plantOnionTexture;

//                //Nature
//                case Items.WheatSeeds: return ItemWheatSeedsTexture;
//                case Items.Seeds: return ItemSeedsTexture;

//                case Items.WheatStraw: return ItemWheatStrawTexture;
//                case Items.Hay: return ItemHayTexture;

//                case Items.Leave: return ItemLeaveTexture;
//                case Items.Stick: return ItemStickTexture;
//                case Items.Sticks: return ItemSticksTexture;
//                case Items.Rubber: return ItemRubberTexture;
//                //  case Items.Leather: return ItemLeatherTexture;

//                //Tools
//                case Items.Bucket: return ItemBucketTexture;
//                case Items.BucketWater: return ItemBucketWaterTexture;

//                case Items.StoneHead: return stoneHeadTexture;

//                case Items.IronHeadAxe: return ItemIronHeadAxeTexture;
//                case Items.IronHeadShovel: return ItemIronHeadShovelTexture;
//                case Items.IronHeadPickaxe: return ItemIronHeadPickaxeTexture;

//                case Items.StoneAxe: return ItemStoneAxeTexture;
//                case Items.StoneShovel: return ItemStoneShovelTexture;
//                case Items.StonePickaxe: return ItemStonePickaxeTexture;
//                case Items.IronAxe: return ItemIronAxeTexture;
//                case Items.IronShovel: return ItemIronShovelTexture;
//                case Items.IronPickaxe: return ItemIronPickaxeTexture;
//                case Items.HammerBronze: return hammerBronzeTexture;
//                case Items.HammerIron: return hammerIronTexture;

//                case Items.ShearsCopper: return shearsCopperTexture;
//                case Items.ShearsIron: return shearsIronTexture;
//                case Items.ShearsBronze: return shearsBronzeTexture;

//                case Items.SawCopper: return sawCopperTexture;
//                case Items.SawBronze: return sawBronzeTexture;
//                case Items.SawIron: return sawIronTexture;

//                case Items.ElectricDrill: return electricDrillTexture;
//                case Items.ElectricSaw: return electricSawTexture;

//                case Items.OreAluminium: return aluminiumOreTexture;
//                case Items.OreCopper: return copperOreTexture;
//                case Items.OreGold: return goldOreTexture;
//                case Items.OreIron: return ironOreTexture;
//                case Items.OreSilver: return silverOreTexture;
//                case Items.OreTin: return tinOreTexture;

//                case Items.AppleLeaves: return appleLeavesTexture;
//                case Items.AppleLeavesWithApples: return appleLeavesWithApplesTexture;
//                case Items.OrangeLeaves: return orangeLeavesTexture;
//                case Items.OrangeLeavesWithOranges: return orangeLeavesWithOrangesTexture;
//                case Items.PlumLeaves: return plumLeavesTexture;
//                case Items.PlumLeavesWithPlums: return plumLeavesWithPlumsTexture;
//                case Items.CherryLeaves: return cherryLeavesTexture;
//                case Items.CherryLeavesWithCherries: return cherryLeavesWithCherriesTexture;
//                case Items.LemonLeaves: return lemonLeavesTexture;
//                case Items.LemonLeavesWithLemons: return lemonLeavesWithLemonsTexture;
//                case Items.LindenLeaves: return lindenLeavesTexture;
//                case Items.SpruceLeaves: return spruceLeavesTexture;
//                case Items.PineLeaves: return pineLeavesTexture;

//                case Items.Snow: return snowTexture;
//                case Items.SnowTop: return snowTopTexture;
//                case Items.Ice: return iceTexture;

//                case Items.GrassDesert: return grassDesertTexture;
//                case Items.GrassForest: return grassForestTexture;
//                case Items.GrassHills: return grassHillsTexture;
//                case Items.GrassJungle: return grassJungleTexture;
//                case Items.GrassPlains: return grassPlainsTexture;

//                case Items.Alore: return plantAloreTexture;
//                case Items.Plastic: return ItemPlasticTexture;

//                case Items.Carrot: return ItemCarrotTexture;
//                case Items.PlantCarrot: return plantCarrotTexture;
//                case Items.Peas: return ItemPeasTexture;
//                case Items.PlantPeas: return plantPeasTexture;

//                case Items.Battery: return plantPeasTexture;

//                default: return null;
//            }
//        }

//        void DrawItemInInventory(Texture2D texture, DInt inv, int x, int y) {
//            if (texture.Width==16&&texture.Height==16) spriteBatch.Draw(texture, new Rectangle(x, y, texture.Width*2, texture.Height*2), Color.White);
//            else if (texture.Width==32&&texture.Height==32) spriteBatch.Draw(texture, new Vector2(x, y), Color.White);
//            else spriteBatch.Draw(texture, new Rectangle(x+(16-texture.Width), y+(16-texture.Height), texture.Width*2, texture.Height*2), Color.White);

//            if (inv.X<(short)Items._SystemMaxTools) {
//                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+1, y+28, 30, 5), Color.Black);
//                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+2, y+29, (int)(inv.Y*0.3f), 3), Color.Green);
//                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+2+(int)(inv.Y*0.3f), y+29, 28-(int)(inv.Y*0.3), 3), Color.Red);
//            } else if (inv.Y!=1) DrawTextShadowMin(x, y+20, inv.Y.ToString());
//        }

//        void DrawItemInInventory(Texture2D texture, int count, int x, int y) {
//            if (texture.Width==16&&texture.Height==16) spriteBatch.Draw(texture, new Rectangle(x, y, texture.Width*2, texture.Height*2), Color.White);
//            else if (texture.Width==32&&texture.Height==32) spriteBatch.Draw(texture, new Vector2(x, y), Color.White);
//            else spriteBatch.Draw(texture, new Rectangle(x+(16-texture.Width), y+(16-texture.Height), texture.Width*2, texture.Height*2), Color.White);

//            if (count!=1) DrawTextShadowMin(x, y+20, count.ToString());
//        }

//        void InvMouseDraw(int item) {
//            Texture2D tex = ItemIdToTexture(Inventory[item].X);
//            if (tex!=null) DrawItemInInventory(tex, Inventory[item], newMouseState.X, newMouseState.Y);
//        }

//        void InvMouseDraw(DInt item) {

//            Texture2D tex = ItemIdToTexture(item.X);
//            if (tex!=null) DrawItemInInventory(tex, item, newMouseState.X, newMouseState.Y);
//        }
//        #endregion

//        #region Inventory change
//        //void InventoryRemoveDInt(int inventory) {
//        //	Inventory[inventory].Y--;
//        //	if (Inventory[inventory].Y==0) Inventory[inventory].X=0;
//        //}

//        void ChangeInventoryBasic() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {
//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStart=i;
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStart=i;
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStart=i;
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStart=i;
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStart, i);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStart, i);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                    } else {

//                        //if (mouseLeftPress) {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStart, i);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStart, i);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;/*InvMouseDraw(invStart);*/
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        // if (mouseLeftPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStart, i);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStart, i);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStart, i);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStart, i);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;//else InvMouseDraw(invStart);

//                    }
//                }
//            }
//        }

//        void ChangeInventoryCreative() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {
//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStart=i;
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                            if (i>maxInvCount) break;

//                            if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
//                                invMove=true;
//                                invStart=i;
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==40*13) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        // if (newMouseState.RightButton==ButtonState.Pressed && oldMouseState.RightButton==ButtonState.Released) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStart=i;
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
//                                    invMove=true;
//                                    invStart=i;
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==40*13) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    // if (mouseRightPress) {
//                    if (mouseRightRelease) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                InvMoveOne(invStart, i);

//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
//                                    InvMoveOne(invStart, i);

//                                }
//                                xx+=40;
//                                if (xx==40*13) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                    } else {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                    InvMove(invStart, i);

//                                }
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40)
//                                        InvMove(invStart, i);


//                                    xx+=40;
//                                    if (xx==40*13) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                        } else InvMouseDraw(invStart);
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        //  if (mouseLeftPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStart, i);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
//                                    InvMoveDouble(invStart, i);

//                                }

//                                xx+=40;
//                                if (xx==40*13) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // if (mouseLeftRelease) {
//                            //if (newMouseState.RightButton==ButtonState.Released&&oldMouseState.RightButton==ButtonState.Pressed) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStart, i);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40)
//                                        InvMove(invStart, i);

//                                    xx+=40;
//                                    if (xx==40*13) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                        } else InvMouseDraw(invStart);

//                    }
//                }
//            }
//        }

//        void ChangeInventoryFurnaceStone() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {
//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    //Furnace
//                    {
//                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                            invMove=true;
//                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
//                            leftMove=true;
//                        }
//                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                            invMove=true;
//                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1];
//                            leftMove=true;
//                        }
//                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                            invMove=true;
//                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2];
//                            leftMove=true;
//                        }
//                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8) {
//                            invMove=true;
//                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3];
//                            leftMove=true;
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        //Furnace
//                        {
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                                invMove=true;
//                                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
//                                leftMove=false;
//                            }
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                                invMove=true;
//                                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1];
//                                leftMove=false;
//                            }
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
//                                invMove=true;
//                                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2];
//                                leftMove=false;
//                            }
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8) {
//                                invMove=true;
//                                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3];
//                                leftMove=false;
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {
//                        //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        //Furnace
//                        {
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
//                                InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
//                        }
//                    } else {

//                        //if (mouseLeftPress) {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            //Furnace
//                            {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
//                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
//                            }
//                        } else mouseDraw=true;/*InvMouseDraw(invStart);*/
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        // if (mouseLeftPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        //Furnace
//                        {
//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
//                                InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            //Furnace
//                            {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
//                                    InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
//                                    InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
//                            }
//                        } else mouseDraw=true;//else InvMouseDraw(invStart);

//                    }
//                }
//            }
//        }

//        void InvMove(int from, int to) {
//            if (from!=to) {
//                if (Inventory[from].X!=0) {
//                    if (Inventory[from].X==Inventory[to].X) {
//                        if (Inventory[to].Y+Inventory[from].Y>100) {
//                            int to_ = Inventory[to].Y;
//                            int from_ = Inventory[from].Y;
//                            int ss_ = to_+from_;
//                            Inventory[to].Y=99;
//                            Inventory[from].Y=ss_-99;
//                        } else {
//                            Inventory[to].Y+=Inventory[from].Y;
//                            Inventory[from].Y=0;
//                            Inventory[from].X=0;
//                        }
//                    } else {
//                        int xx = Inventory[from].X;
//                        int yy = Inventory[from].Y;

//                        Inventory[from].X=Inventory[to].X;
//                        Inventory[from].Y=Inventory[to].Y;

//                        Inventory[to].X=xx;
//                        Inventory[to].Y=yy;
//                    }
//                }
//            }
//            invMove=false;
//        }

//        void InvMoveOne(int from, int to) {
//            if (Inventory[from].Y!=0) {
//                if (Inventory[to].Y==0) {
//                    Inventory[to].X=Inventory[from].X;
//                    Inventory[to].Y++;
//                    Inventory[from].Y--;
//                    if (Inventory[from].Y==0) Inventory[from].X=0;
//                    inventoryChanged=true;
//                } else invMove=false;
//            } else invMove=false;
//        }

//        void InvMoveDouble(int from, int to) {
//            if (Inventory[from].X!=0&&Inventory[to].X==0) {
//                if (Inventory[from].Y>1) {
//                    int half = (int)((float)Inventory[from].Y/2);
//                    int fromY = Inventory[from].Y-half;

//                    Inventory[to].Y=half;
//                    Inventory[from].Y=fromY;

//                    Inventory[to].X=Inventory[from].X;
//                    inventoryChanged=true;
//                } else invMove=false;
//            } else invMove=false;
//        }

//        void InvMove(DInt from, DInt to) {
//            if (from!=to) {
//                if (from.X!=0) {
//                    if (from.X==to.X) {
//                        if (to.Y+from.Y>100) {
//                            int to_ = to.Y;
//                            int from_ = from.Y;
//                            int ss_ = to_+from_;
//                            to.Y=99;
//                            from.Y=ss_-99;
//                            inventoryChanged=true;
//                        } else {
//                            to.Y+=from.Y;
//                            from.Y=0;
//                            from.X=0;
//                            inventoryChanged=true;
//                        }
//                    } else {
//                        int xx = from.X;
//                        int yy = from.Y;

//                        from.X=to.X;
//                        from.Y=to.Y;

//                        to.X=xx;
//                        to.Y=yy;
//                        inventoryChanged=true;
//                    }
//                }
//            }
//            invMove=false;
//        }

//        void InvMoveOne(DInt from, DInt to) {
//            if (from.Y!=0) {
//                if (to.Y==0) {
//                    to.X=from.X;
//                    to.Y++;
//                    from.Y--;
//                    if (from.Y==0) from.X=0;
//                    inventoryChanged=true;
//                } else invMove=false;
//            } else invMove=false;
//        }

//        void InvMoveDouble(DInt from, DInt to) {
//            if (from.X!=0&&to.X==0) {
//                if (from.Y>1) {
//                    int half = (int)((float)from.Y/2);
//                    int fromY = from.Y-half;

//                    to.Y=half;
//                    from.Y=fromY;

//                    to.X=from.X;
//                    inventoryChanged=true;
//                } else invMove=false;
//            } else invMove=false;
//        }

//        bool InventoryAdd(int index) {
//            for (int i = 0; i<maxInvCount; i++) {
//                if (Inventory[i].X==index&&Inventory[i].Y<99) {
//                    Inventory[i].Y++;
//                    return true;
//                }
//            }

//            for (int i = 0; i<maxInvCount; i++) {
//                if (Inventory[i].X==0) {
//                    Inventory[i]=new DInt(index, 1);
//                    return true;
//                }
//            }
//            return false;
//        }

//        void ChangeInventoryState() {
//            if (inventory==0) {

//                if (Global.WorldDifficulty==2) {
//                    SetInvCreativeBlocks();
//                    inventory=InventoryType.Creative;
//                    return;
//                }

//                inventory=InventoryType.BasicInv;
//                return;

//            } else {
//                if (inventory==InventoryType.Typing) {
//                    return;
//                } else if (inventory==InventoryType.Shelf) {
//                    ShelfBlock block = (ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];
//                    if (block.Inv[4].X!=0) {
//                        Texture2D tex = ItemIdToTexture(block.Inv[4].X);
//                        if (tex!=null) {
//                            block.SmalItemTexture=tex;
//                            block.IsSmallItem=true;
//                            inventory=0;
//                            return;
//                        }
//                    }

//                    block.IsSmallItem=false;
//                    inventory=0;
//                    return;
//                }


//                inventory=0;
//                return;
//            }
//        }

//        void ChangeInventoryShelf() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // Shelf
//                    {
//                        int i = 0;
//                        for (int y = 0; y<3*40; y+=40) {
//                            for (int x = 0; x<3*40; x+=40) {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+25+40) {
//                                    invMove=true;
//                                    invStartDInt=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                    leftMove=true;
//                                }
//                                i++;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<3*40; y+=40) {
//                                for (int x = 0; x<3*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40) {
//                                        invMove=true;
//                                        invStartDInt=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                        leftMove=false;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int x = 0; x<3*40; x+=40) {
//                                for (int y = 0; y<3*40; y+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
//                                        InvMoveOne(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }
//                    } else {

//                        //if (mouseLeftPress) {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Shelf
//                            {
//                                int i = 0;
//                                for (int y = 0; y<3*40; y+=40) {
//                                    for (int x = 0; x<3*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
//                                            InvMove(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        // if (mouseLeftPress) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<3*40; y+=40) {
//                                for (int x = 0; x<3*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
//                                        InvMoveDouble(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            // Shelf
//                            {
//                                int i = 0;
//                                for (int y = 0; y<3*40; y+=40) {
//                                    for (int x = 0; x<3*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
//                                            InvMove(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;//else InvMouseDraw(invStart);
//                    }
//                }
//            }
//        }

//        void ChangeInventoryWoodenBox() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // box
//                    {
//                        int i = 0;
//                        for (int y = 0; y<2*40; y+=40) {
//                            for (int x = 0; x<12*40; x+=40) {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40) {
//                                    invMove=true;
//                                    invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                    leftMove=true;
//                                }
//                                i++;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+53+y&&newMouseState.Y<Global.WindowHeightHalf+53+y+40) {
//                                        invMove=true;
//                                        invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                        leftMove=false;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {
//                        //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                        InvMoveOne(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }
//                    } else {

//                        //if (mouseLeftPress) {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Shelf
//                            {
//                                int i = 0;
//                                for (int y = 0; y<2*40; y+=40) {
//                                    for (int x = 0; x<12*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                            InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                        InvMoveDouble(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            // box
//                            {
//                                int i = 0;
//                                for (int y = 0; y<2*40; y+=40) {
//                                    for (int x = 0; x<12*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                            InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;//else InvMouseDraw(invStart);
//                    }
//                }
//            }
//        }

//        void ChangeInventoryAdvBox() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // box
//                    {
//                        int i = 0;
//                        for (int y = 0; y<4*40; y+=40) {
//                            for (int x = 0; x<14*40; x+=40) {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40) {
//                                    invMove=true;
//                                    invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                    leftMove=true;
//                                }
//                                i++;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {
//                        //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<14*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40) {
//                                        invMove=true;
//                                        invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                        leftMove=false;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {
//                        //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<14*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
//                                        InvMoveOne(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }
//                    } else {
//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Shelf
//                            {
//                                int i = 0;
//                                for (int y = 0; y<4*40; y+=40) {
//                                    for (int x = 0; x<14*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
//                                            InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<14*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
//                                        InvMoveDouble(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // box
//                            {
//                                int i = 0;
//                                for (int y = 0; y<4*40; y+=40) {
//                                    for (int x = 0; x<14*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
//                                            InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;//else InvMouseDraw(invStart);
//                    }
//                }
//            }
//        }
//        #endregion

//        #region Player
//        bool CheckLava() {
//            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
//                for (int y = PlayerY/16; y<(PlayerY+39/2+16)/16; y++) {
//                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
//                        if (terrain[x].IsBackground[y]) {
//                            if (terrain[x].Background[y].Id==(byte)BlockId.Lava) return true;
//                        }
//                    }
//                }
//            }
//            return false;
//        }

//        void CountGravity(AstronomicalObject[] objects) {
//            foreach (AstronomicalObject o in objects) {
//                if (o.NameEn!=null) {
//                    if (o.NameEn==world) {
//                        gravity=(float)(6.67259e-11*o.Mass/(o.MeanDiameter*o.MeanDiameter*1000000))/20f;
//                        notNeedScafander=o.astrO==AstrO.Life;
//                        dayLenght=(int)(o.DayLenght*200);
//                        return;
//                    }
//                }
//                if (o.Childs!=null) {
//                    CountGravity(o.Childs);
//                    if (gravity!=0) return;
//                }
//            }
//        }

//        void Die(string why/*Cz, string whyEn*/) {
//            if (Global.WorldDifficulty==0) {
//                diedInfo=/*Setting.czechLanguage ?*/ why/*Cz: whyEn*/;
//                timerStayDied=255;
//                died=true;

//                barHeart=0;
//                barOxygen=0;
//                barWater=0;
//                barEnergy=0;
//                barEat=0;
//            }
//        }

//        bool CheckLadder() {
//            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
//                for (int y = PlayerY/16; y<(PlayerY+39/2+16)/16; y++) {
//                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
//                        if (terrain[x].IsTopBlocks[y]) {
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.Ladder) return true;
//                        }
//                    }
//                }
//            }
//            return false;
//        }

//        bool CheckWater() {
//            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
//                for (int y = (PlayerY)/16; y<(PlayerY+39/2+16)/16; y++) {
//                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
//                        if (terrain[x].IsTopBlocks[y]) {
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
//                                return true;
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
//                                return true;
//                        }
//                    }
//                }
//            }
//            return false;
//        }

//        bool CheckWaterDown() {//!!! walking on waves
//            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
//                for (int y = (PlayerY+39/2+16-1)/16; y<(PlayerY+39/2+16+16+1)/16; y++) {
//                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
//                        if (terrain[x].IsTopBlocks[y]) {
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
//                                return true;
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
//                                return true;
//                        }
//                    }
//                }
//            }
//            return false;
//        }

//        bool CheckWaterUp() {// player is Swimming on waves
//            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
//                for (int y = (PlayerY)/16; y<(PlayerY+39/2)/16; y++) {
//                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
//                        if (terrain[x].IsTopBlocks[y]) {
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
//                                return true;
//                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
//                                return true;
//                        }
//                    }
//                }
//            }
//            return false;
//        }

//        void SetMousePos() {
//            if (Setting.Scale.Without==Setting.currentScale) {
//                mousePos=new Vector2((newMouseState.X-Global.WindowWidthHalf)/Setting.Zoom+WindowCenterX, (newMouseState.Y-Global.WindowHeightHalf)/Setting.Zoom+WindowCenterY);
//                return;
//            }

//            if (Setting.Scale.Proportions==Setting.currentScale) {
//                float screenScaleH = Global.WindowHeight/560f;
//                float screenScaleW = Global.WindowWidth/848f;

//                if (screenScaleH>screenScaleW) {
//                    mousePos=new Vector2((int)((newMouseState.X-Global.WindowWidthHalf)/screenScaleW/Setting.Zoom+(Global.WindowWidth-(int)(screenScaleW*848f))/2)+WindowCenterX, (int)((newMouseState.Y-Global.WindowHeightHalf)/screenScaleW/Setting.Zoom)+WindowCenterY);
//                    return;
//                } else {
//                    mousePos=new Vector2((int)((newMouseState.X-Global.WindowWidthHalf)/screenScaleH/Setting.Zoom)+WindowCenterX, (int)((newMouseState.Y-Global.WindowHeightHalf)/screenScaleH/Setting.Zoom)+WindowCenterX+(Global.WindowHeight-(int)(screenScaleH*560f))/2);
//                    return;
//                }
//            }

//            mousePos=new Vector2((newMouseState.X-Global.WindowWidthHalf)/(Global.WindowWidth/848f)/Setting.Zoom+WindowCenterX, (newMouseState.Y-Global.WindowHeightHalf)/((float)Global.WindowHeight/560f)/Setting.Zoom+WindowCenterY);
//        }

//        void PlayerGravity() {
//            distanceToGround=100000;

//            for (int y = (PlayerY+20-16)/16; y<(PlayerY+20-16)/16+6; y++) {

//                for (int x = (PlayerX-11)/16; x<(PlayerX+11+16)/16; x++) {
//                    if (terrain[x]!=null) {
//                        if (y>124) break;
//                        if (terrain[x].IsSolidBlocks[y]) {
//                            if (/*y*16-PlayerY-39/2>0 &&*/ y*16-PlayerY-20<distanceToGround) {
//                                distanceToGround=y*16-PlayerY-20;
//                            }

//                        }
//                    }
//                }
//            }

//            if (gravitySpeed<0) {
//                int yy = (PlayerY-20-4)/16;

//                for (int xx = (PlayerX-11)/16; xx<(PlayerX+11+16)/16; xx++) {
//                    if (terrain[xx]!=null) {
//                        if (terrain[xx].IsSolidBlocks[yy]) {

//                            gravitySpeed=0;

//                        }
//                    }
//                }

//            }

//            if (distanceToGround==0) {
//                gravitySpeed=0;
//                return;
//            }

//            if (distanceToGround</*16*/6&&gravitySpeed>0) {
//                PlayerY+=distanceToGround;
//                gravitySpeed=0;
//                // return false;
//            } else {
//                gravitySpeed+=.4905f;
//                if (gravitySpeed>6) gravitySpeed=6;
//                PlayerY+=(int)gravitySpeed;


//            }

//        }

//        void CameraMatrix() {
//            if (Setting.Scale.Without==Setting.currentScale) {
//                camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*Translation;
//                return;
//            }

//            if (Setting.Scale.Proportions==Setting.currentScale) {
//                float _screenScaleW = Global.WindowWidth/848f;
//                float _screenScaleH = Global.WindowHeight/560f;

//                if (_screenScaleH>_screenScaleW) {
//                    camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
//                        Matrix.CreateScale(_screenScaleW, _screenScaleW, 0)*Translation;
//                    return;
//                } else {
//                    camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
//                        Matrix.CreateScale(_screenScaleH, _screenScaleH, 0)*Translation;
//                    return;
//                }
//            }

//            camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
//                Matrix.CreateScale(new Vector3(Global.WindowWidth/848f, Global.WindowHeight/560f, 0))*Translation;
//        }

//        void SetPlayerPos(int x, int y) {
//            PlayerX=x;
//            PlayerY=y;

//            WindowXPlayer=WindowXPlayer+(PlayerX-WindowCenterX)/*/16f*/;
//            WindowYPlayer=WindowYPlayer+(PlayerY-WindowCenterY)/*/16f*/;

//            WindowX=x-Global.WindowWidthHalf;
//            WindowY=y-Global.WindowHeightHalf;

//            WindowCenterX=(int)WindowXPlayer;
//            WindowCenterY=(int)WindowYPlayer;
//        }
//        #endregion

//        #region Destruction
//        void GetItemsFromBlock(byte type, int X, int Y/*, BlockType bt*/) {
//            int X16 = X*16, Y16 = Y*16;

//            // switch (bt) {
//            // case BlockType.Top:				

//            switch ((BlockId)type) {
//                case BlockId.Macerator:

//                    DropItemToPos(X16, Y16, Items.Macerator);
//                    RefreshAroundLabels(X, Y);
//                    return;

//                case BlockId.Miner:

//                    DropItemToPos(X16, Y16, Items.Miner);
//                    RefreshAroundLabels(X, Y);
//                    RemovefromMiners(X16, Y16);
//                    return;

//                case BlockId.Composter:
//                    DropItemToPos(X16, Y16, Items.Composter);
//                    RefreshAroundLabels(X, Y);
//                    RemovefromComposters(X16, Y16);
//                    return;

//                case BlockId.FurnaceElectric:
//                    DropItemToPos(X16, Y16, Items.FurnaceElectric);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.FurnaceStone:
//                    DropItemToPos(X16, Y16, Items.FurnaceStone);
//                    RemovefromFurnaceStone(X16, Y16);
//                    return;

//                case BlockId.Rocket:
//                    DropItemToPos(X16, Y16, Items.Rocket);
//                    return;

//                case BlockId.Desk:
//                    DropItemToPos(X16, Y16, Items.Desk);
//                    return;

//                case BlockId.Ladder:
//                    DropItemToPos(X16, Y16, Items.Ladder);
//                    return;

//                case BlockId.Lamp:
//                    DropItemToPos(X16, Y16, Items.Lamp);
//                    RefreshAroundLabels(X16, Y16);
//                    foreach (MashineBlockBasic m in lightsLamp) {
//                        if (m.Position.X==X16) {
//                            if (m.Position.Y==Y16) {
//                                lightsLamp.Remove(m);
//                                return;
//                            }
//                        }
//                    }
//                    return;

//                case BlockId.Windmill:
//                    DropItemToPos(X16, Y16, Items.WindMill);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.Flag:
//                    DropItemToPos(X16, Y16, Items.Flag);
//                    return;

//                case BlockId.Label:
//                    DropItemToPos(X16, Y16, Items.Label);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.AppleLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.AppleSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.EucalyptusLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.EucalyptusLeaves);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.AcaciaLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.AcaciaSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.WillowLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.WillowSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.OliveLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.OliveSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.RubberTreeLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.RubberTreeSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.KapokLeaces:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.KapokLeacesFlowering:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.KapokLeacesFlowering);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.KapokLeacesFlowering);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.KapokLeacesFibre:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.KapokLeacesFibre);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.KapokLeacesFibre);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.OliveLeavesWithOlives:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Olive);
//                                return;

//                            case 4:
//                                DropItemToPos(X16, Y16, Items.Olive);
//                                return;

//                            case 5:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.OliveSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.LemonLeavesWithLemons:
//                    DropItemToPos(X16, Y16, Items.Lemon);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.LemonSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.LindenLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.LindenSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.OakLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.OakSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.OrangeLeaves:
//                    DropItemToPos(X16, Y16, Items.Orange);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.OrangeSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.SpruceLeaves:
//                    if (random.Next(2)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Stick);
//                        else if (random.Next(4)==1) DropItemToPos(X16, Y16, Items.SpruceSapling);
//                    }
//                    return;

//                case BlockId.PlumLeavesWithPlums:
//                    DropItemToPos(X16, Y16, Items.Plum);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.PlumSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.PlumLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.PlumSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.PineLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.PineSapling);
//                                else DropItemToPos(X16, Y16, Items.Banana);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.OrangeLeavesWithOranges:
//                    DropItemToPos(X16, Y16, Items.Orange);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(6)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.OrangeSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.AppleLeavesWithApples:
//                    DropItemToPos(X16, Y16, Items.Apple);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.AppleSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.CherryLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CherrySapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.CherryLeavesWithCherries:
//                    DropItemToPos(X16, Y16, Items.Cherry);

//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CherrySapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.LemonLeaves:
//                    if (random.Next(4)==1) {
//                        switch (random.Next(5)) {
//                            case 1:
//                                DropItemToPos(X16, Y16, Items.Sticks);
//                                return;

//                            case 2:
//                                DropItemToPos(X16, Y16, Items.Stick);
//                                return;

//                            case 3:
//                                DropItemToPos(X16, Y16, Items.Leave);
//                                return;

//                            case 4:
//                                if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.LemonSapling);
//                                return;
//                        }
//                    }
//                    return;

//                case BlockId.Violet:
//                    DropItemToPos(X16, Y16, Items.PlantViolet);
//                    return;

//                case BlockId.Dandelion:
//                    DropItemToPos(X16, Y16, Items.Dandelion);
//                    return;

//                case BlockId.Heather:
//                    DropItemToPos(X16, Y16, Items.Heater);
//                    return;

//                case BlockId.Alore:
//                    DropItemToPos(X16, Y16, Items.Alore);
//                    return;

//                case BlockId.CactusBig:
//                    DropItemToPos(X16, Y16, Items.CactusBig);
//                    return;

//                case BlockId.CactusSmall:
//                    DropItemToPos(X16, Y16, Items.CactusSmall);
//                    return;

//                case BlockId.AppleSapling:
//                    DropItemToPos(X16, Y16, Items.AppleSapling);
//                    return;

//                case BlockId.CherrySapling:
//                    DropItemToPos(X16, Y16, Items.CherrySapling);
//                    return;

//                case BlockId.LemonSapling:
//                    DropItemToPos(X16, Y16, Items.LemonSapling);
//                    return;

//                case BlockId.LindenSapling:
//                    DropItemToPos(X16, Y16, Items.LindenSapling);
//                    return;

//                case BlockId.OakSapling:
//                    DropItemToPos(X16, Y16, Items.OakSapling);
//                    return;

//                case BlockId.OrangeSapling:
//                    DropItemToPos(X16, Y16, Items.OrangeSapling);
//                    return;

//                case BlockId.PineSapling:
//                    DropItemToPos(X16, Y16, Items.PineSapling);
//                    return;

//                case BlockId.PlumSapling:
//                    DropItemToPos(X16, Y16, Items.PlumSapling);
//                    return;

//                case BlockId.SpruceSapling:
//                    DropItemToPos(X16, Y16, Items.SpruceSapling);
//                    return;

//                case BlockId.GrassDesert:
//                    if (random.Next(6)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(3)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    return;

//                case BlockId.GrassForest:
//                    if (random.Next(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(4)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    else if (random.Next(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    return;

//                case BlockId.GrassHills:
//                    if (random.Next(7)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(5)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    else if (random.Next(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    return;

//                case BlockId.GrassJungle:
//                    if (random.Next(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(5)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    else if (random.Next(20)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    return;

//                case BlockId.GrassPlains:
//                    if (random.Next(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
//                    else if (random.Next(3)==1) DropItemToPos(X16, Y16, Items.Hay);
//                    else if (random.Next(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//                    return;



//                case BlockId.Glass:
//                    DropItemToPos(X16, Y16, Items.Glass);
//                    return;

//                case BlockId.Orchid:
//                    DropItemToPos(X16, Y16, Items.PlantOrchid);
//                    return;

//                case BlockId.Radio:
//                    DropItemToPos(X16, Y16, Items.Radio);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.Rose:
//                    DropItemToPos(X16, Y16, Items.PlantRose);
//                    return;

//                case BlockId.Toadstool:
//                    DropItemToPos(X16, Y16, Items.Toadstool);
//                    return;

//                case BlockId.Boletus:
//                    DropItemToPos(X16, Y16, Items.Boletus);
//                    return;

//                case BlockId.BranchALittle1:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Stick);
//                    else DropItemToPos(X16, Y16, Items.Sticks);
//                    return;

//                case BlockId.BranchALittle2:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Stick);
//                    else DropItemToPos(X16, Y16, Items.Sticks);
//                    return;

//                case BlockId.BranchFull:
//                    DropItemToPos(X16, Y16, Items.Sticks);
//                    return;

//                case BlockId.BranchWithout:
//                    DropItemToPos(X16, Y16, Items.Stick);
//                    return;

//                case BlockId.Champignon:
//                    DropItemToPos(X16, Y16, Items.Champignon);
//                    return;

//                case BlockId.DoorOpen:
//                    DropItemToPos(X16, Y16, Items.Door);
//                    return;

//                case BlockId.Charger:
//                    DropItemToPos(X16, Y16, Items.Charger);
//                    RefreshAroundLabels(X16, Y16);
//                    RemovefromChargers(X16, Y16);
//                    return;

//                case BlockId.SolarPanel:
//                    DropItemToPos(X16, Y16, Items.SolarPanel);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.Watermill:
//                    DropItemToPos(X16, Y16, Items.WaterMill);
//                    RefreshAroundLabels(X16, Y16);
//                    return;

//                case BlockId.Rocks:
//                    switch (random.Next(100)) {
//                        case 0: DropItemToPos(X16, Y16, Items.Ruby); return;
//                        case 1: DropItemToPos(X16, Y16, Items.Smaragd); return;
//                        case 2: DropItemToPos(X16, Y16, Items.Saphirite); return;
//                        case 3: DropItemToPos(X16, Y16, Items.Diamond); return;
//                        case 4: DropItemToPos(X16, Y16, Items.ItemGold); return;
//                        case 5: DropItemToPos(X16, Y16, Items.ItemSilver); return;
//                        case 6: DropItemToPos(X16, Y16, Items.ItemIron); return;
//                        case 7: DropItemToPos(X16, Y16, Items.ItemIron); return;
//                        case 8: DropItemToPos(X16, Y16, Items.ItemIron); return;
//                        case 9: DropItemToPos(X16, Y16, Items.ItemCopper); return;
//                        case 10: DropItemToPos(X16, Y16, Items.ItemCopper); return;
//                        case 11: DropItemToPos(X16, Y16, Items.ItemCopper); return;
//                        case 12: DropItemToPos(X16, Y16, Items.ItemTin); return;
//                        case 13: DropItemToPos(X16, Y16, Items.ItemTin); return;
//                        case 14: DropItemToPos(X16, Y16, Items.ItemTin); return;
//                        case 15: DropItemToPos(X16, Y16, Items.CoalWood); return;
//                        case 16: DropItemToPos(X16, Y16, Items.ItemCoal); return;
//                        case 17: DropItemToPos(X16, Y16, Items.ItemCoal); return;
//                        case 18: DropItemToPos(X16, Y16, Items.ItemCoal); return;
//                        case 19: DropItemToPos(X16, Y16, Items.StoneHead); return;
//                        case 20: DropItemToPos(X16, Y16, Items.StoneHead); return;
//                        case 21: DropItemToPos(X16, Y16, Items.StoneHead); return;
//                        case 22: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 23: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 24: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 25: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 26: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 27: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 28: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 29: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 30: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 31: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 32: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 33: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 34: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 35: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 36: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 37: DropItemToPos(X16, Y16, Items.BigStone); return;
//                        case 38: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 39: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 40: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 41: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 42: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 43: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 44: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 45: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 46: DropItemToPos(X16, Y16, Items.SmallStone); return;
//                        case 47: DropItemToPos(X16, Y16, Items.Gravel); return;
//                        case 48: DropItemToPos(X16, Y16, Items.Silicium); return;
//                        default: DropItemToPos(X16, Y16, Items.MediumStone); return;
//                    }
//                //    break;
//                //  }
//                // break;

//                // case BlockType.Solid:
//                //   switch ((BlockId)type) {
//                case BlockId.Compost:
//                    DropItemToPos(X16, Y16, Items.Compost);
//                    return;

//                case BlockId.Snow:
//                    DropItemToPos(X16, Y16, Items.Snow);
//                    return;

//                case BlockId.Roof1:
//                    DropItemToPos(X16, Y16, Items.Roof1);
//                    return;

//                case BlockId.Roof2:
//                    DropItemToPos(X16, Y16, Items.Roof2);
//                    return;

//                case BlockId.DoorClose:
//                    DropItemToPos(X16, Y16, Items.Door);
//                    return;

//                case BlockId.StoneBasalt:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackBasalt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneDiorit:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDiorit, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneDolomite:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDolomite, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneGabbro:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGabbro, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneGneiss:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=new Block(backgroundGneissTexture, (int)BlockId.BackGneiss, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneLimestone:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackLimestone, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneRhyolite:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackRhyolite, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneSandstone:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSandstone, new Vector2(X16, Y16));
//                    return;

//                case BlockId.StoneSchist:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    else if (random.Next(50)==1) {
//                        if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
//                        else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
//                    }
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSchist, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Coal:
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CoalWood);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCoal, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreAluminium:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.Aluminium);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackAluminium, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreCopper:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.ItemCopper);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.CopperDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCopper, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreGold:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.ItemGold);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.GoldDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGold, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreIron:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.ItemIron);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.IronDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackIron, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreSilver:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.ItemSilver);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SilverDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSilver, new Vector2(X16, Y16));
//                    return;

//                case BlockId.OreTin:
//                    if (random.Next(4)!=1) DropItemToPos(X16, Y16, Items.ItemTin);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.TinDust);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackTin, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Cobblestone:
//                    DropItemToPos(X16, Y16, Items.BigStone);
//                    if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
//                    else if (random.Next(2)==1) DropItemToPos(X16, Y16, Items.Sand);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCobblestone, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Gravel:
//                    DropItemToPos(X16, Y16, Items.Gravel);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGravel, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Sand:
//                    DropItemToPos(X16, Y16, Items.Sand);
//                    DestroySandUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSand, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Dirt:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.GrassBlockDesert:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.GrassBlockForest:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.GrassBlockHills:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.GrassBlockJungle:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.GrassBlockPlains:
//                    DropItemToPos(X16, Y16, Items.Dirt);
//                    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
//                    terrain[X].IsBackground[Y]=true;
//                    terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
//                    return;

//                case BlockId.Planks:
//                    DropItemToPos(X16, Y16, Items.Planks);
//                    return;

//                case BlockId.Bricks:
//                    DropItemToPos(X16, Y16, Items.Bricks);
//                    return;

//                case BlockId.AdvancedSpacePart1:
//                    DropItemToPos(X16, Y16, Items.AdvancedSpacePart1);
//                    return;

//                case BlockId.AdvancedSpacePart2:
//                    DropItemToPos(X16, Y16, Items.AdvancedSpacePart2);
//                    return;

//                case BlockId.AdvancedSpacePart3:
//                    DropItemToPos(X16, Y16, Items.AdvancedSpacePart3);
//                    return;

//                case BlockId.AdvancedSpacePart4:
//                    DropItemToPos(X16, Y16, Items.AdvancedSpacePart4);
//                    return;

//                case BlockId.Clay:
//                    DropItemToPos(X16, Y16, Items.Clay);
//                    return;

//                case BlockId.GrassBlockClay:
//                    DropItemToPos(X16, Y16, Items.Clay);
//                    return;

//                //  }
//                //   break;

//                // case BlockType.Back:
//                //  switch ((BlockId)type) {
//                case BlockId.AppleWood:
//                    DropItemToPos(X16, Y16, Items.WoodApple);
//                    return;

//                case BlockId.CherryWood:
//                    DropItemToPos(X16, Y16, Items.WoodCherry);
//                    return;

//                case BlockId.LemonWood:
//                    DropItemToPos(X16, Y16, Items.WoodLemon);
//                    return;

//                case BlockId.LindenWood:
//                    DropItemToPos(X16, Y16, Items.WoodLinden);
//                    return;

//                case BlockId.OakWood:
//                    DropItemToPos(X16, Y16, Items.WoodOak);
//                    return;

//                case BlockId.OrangeWood:
//                    DropItemToPos(X16, Y16, Items.WoodOrange);
//                    return;

//                case BlockId.PineWood:
//                    DropItemToPos(X16, Y16, Items.WoodPine);
//                    return;

//                case BlockId.PlumWood:
//                    DropItemToPos(X16, Y16, Items.WoodPlum);
//                    return;

//                case BlockId.SpruceWood:
//                    DropItemToPos(X16, Y16, Items.WoodSpruce);
//                    return;

//                case BlockId.MangroveWood:
//                    DropItemToPos(X16, Y16, Items.MangroveWood);
//                    return;

//                case BlockId.WillowWood:
//                    DropItemToPos(X16, Y16, Items.WillowWood);
//                    return;

//                case BlockId.OliveWood:
//                    DropItemToPos(X16, Y16, Items.OliveWood);
//                    return;

//                case BlockId.RubberTreeWood:
//                    DropItemToPos(X16, Y16, Items.RubberTreeWood);
//                    return;

//                case BlockId.KapokWood:
//                    DropItemToPos(X16, Y16, Items.KapokWood);
//                    return;

//                case BlockId.EucalyptusWood:
//                    DropItemToPos(X16, Y16, Items.EucalyptusWood);
//                    return;

//                case BlockId.AcaciaWood:
//                    DropItemToPos(X16, Y16, Items.AcaciaWood);
//                    return;
//            }
//            //   break;

//            //case BlockType.Plant:
//            //    switch ((BlockId)type) {
//            //        case BlockId.Wheat:
//            //            DropItemToPos(X16, Y16, Items.WheatStraw);
//            //            DropItemToPos(X16, Y16, Items.WheatSeeds);
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
//            //            return;

//            //        case BlockId.Onion:
//            //            DropItemToPos(X16, Y16, Items.Onion);
//            //            return;

//            //        case BlockId.Flax:
//            //            DropItemToPos(X16, Y16, Items.Flax);
//            //            DropItemToPos(X16, Y16, Items.FlaxSeeds);
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//            //            return;

//            //        case BlockId.Strawberry:
//            //            DropItemToPos(X16, Y16, Items.PlantStrawberry);
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.PlantStrawberry);
//            //            return;

//            //        case BlockId.Rashberry:
//            //            DropItemToPos(X16, Y16, Items.PlantRashberry);
//            //            if (random.Next(8)==1)DropItemToPos(X16, Y16, Items.PlantRashberry);
//            //            return;

//            //        case BlockId.Blueberry:
//            //            DropItemToPos(X16, Y16, Items.PlantBlueberry);
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.PlantBlueberry);
//            //            return;
//            //    }
//            //    break;

//            //case BlockType.Mob:
//            //    switch ((BlockId)type) {
//            //        case BlockId.Chicken:
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Hay);
//            //            DropItemToPos(X16, Y16, Items.RabbitMeat);
//            //            return;

//            //        case BlockId.Rabbit:
//            //            if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
//            //            else if (random.Next(8)==1) DropItemToPos(X16, Y16, Items.Hay);
//            //            DropItemToPos(X16, Y16, Items.RabbitMeat);
//            //            return;

//            //        case BlockId.Fish:
//            //            DropItemToPos(X16, Y16, Items.Fish);
//            //            return;
//            //    }
//            //    break;
//            // }
//        }

//        float GetBackBlockDestroingSpeed(byte type) {

//            switch ((BlockId)type) {
//                // case BlockId.Lava: return new Block(lavaTexture,type);
//                case BlockId.AdvancedSpaceBack: return 400*DestroyPickaxe();

//                case BlockId.AppleWood: return 300*DestroyAxe();
//                case BlockId.CherryWood: return 300*DestroyAxe();
//                case BlockId.LemonWood: return 300*DestroyAxe();
//                case BlockId.LindenWood: return 320*DestroyAxe();
//                case BlockId.OakWood: return 320*DestroyAxe();
//                case BlockId.OrangeWood: return 300*DestroyAxe();
//                case BlockId.PineWood: return 300*DestroyAxe();
//                case BlockId.PlumWood: return 300*DestroyAxe();
//                case BlockId.SpruceWood: return 280*DestroyAxe();
//            }

//            return 0;
//        }

//        float GetSolidBlockDestroingSpeed(byte type) {
//            switch ((BlockId)type) {
//                // case BlockId.Lava: return new Block(lavaTexture,type);
//                case BlockId.GrassBlockDesert: return 100*DestroyShovel();
//                case BlockId.GrassBlockForest: return 100*DestroyShovel();
//                case BlockId.GrassBlockHills: return 105*DestroyShovel();
//                case BlockId.GrassBlockJungle: return 105*DestroyShovel();
//                case BlockId.GrassBlockPlains: return 95*DestroyShovel();

//                case BlockId.Dirt: return 90*DestroyShovel();
//                case BlockId.Gravel: return 120*DestroyShovel();

//                case BlockId.Sand: return 60*DestroyShovel();

//                case BlockId.Cobblestone: return 280*DestroyPickaxe();


//                case BlockId.Roof1: return 120*DestroyPickaxe();
//                case BlockId.Roof2: return 120*DestroyPickaxe();
//                case BlockId.DoorClose: return 280*DestroyPickaxe();

//                case BlockId.StoneBasalt: return 320*DestroyPickaxe();
//                case BlockId.StoneDiorit: return 300*DestroyPickaxe();
//                case BlockId.StoneDolomite: return 280*DestroyPickaxe();
//                case BlockId.StoneGabbro: return 320*DestroyPickaxe();
//                case BlockId.StoneGneiss: return 320*DestroyPickaxe();
//                case BlockId.StoneLimestone: return 280*DestroyPickaxe();
//                case BlockId.StoneRhyolite: return 300*DestroyPickaxe();
//                case BlockId.StoneSandstone: return 260*DestroyPickaxe();
//                case BlockId.StoneSchist: return 300*DestroyPickaxe();

//                case BlockId.Coal: return 260*DestroyPickaxe();
//                case BlockId.OreAluminium: return 320*DestroyPickaxe();
//                case BlockId.OreCopper: return 320*DestroyPickaxe();
//                case BlockId.OreGold: return 300*DestroyPickaxe();
//                case BlockId.OreIron: return 320*DestroyPickaxe();

//                case BlockId.OreSilver: return 300*DestroyPickaxe();

//                case BlockId.OreTin: return 300*DestroyPickaxe();

//                case BlockId.Ice: return 120*DestroyAxe();

//                case BlockId.AdvancedSpaceBlock: return 100*DestroyPickaxe();
//                case BlockId.AdvancedSpaceFloor: return 100*DestroyPickaxe();
//                case BlockId.AdvancedSpaceWindow: return 100*DestroyPickaxe();

//                case BlockId.Planks: return 100*DestroyAxe();
//                case BlockId.Bricks: return 160*DestroyPickaxe();

//                //case BlockId.DolomiteBricks: return 280*DestroyPickaxe();
//                //case BlockId.BasaltBricks: return 280*DestroyPickaxe();
//                //case BlockId.LimestoneBricks: return 280*DestroyPickaxe();
//                //case BlockId.RhyoliteBricks: return 280*DestroyPickaxe();
//                //case BlockId.GneissBricks: return 280*DestroyPickaxe();
//                //case BlockId.SandstoneBricks: return 280*DestroyPickaxe();
//                //case BlockId.SchistBricks: return 280*DestroyPickaxe();
//                //case BlockId.GabbroBricks: return 280*DestroyPickaxe();
//                //case BlockId.DioritBricks: return 280*DestroyPickaxe();

//                case BlockId.AdvancedSpacePart1: return 90*DestroyPickaxe();
//                case BlockId.AdvancedSpacePart2: return 90*DestroyPickaxe();
//                case BlockId.AdvancedSpacePart3: return 90*DestroyPickaxe();
//                case BlockId.AdvancedSpacePart4: return 90*DestroyPickaxe();

//            }

//            return 0;
//        }

//        float GetTopBlockDestroingSpeed(byte type) {
//            switch ((BlockId)type) {
//                case BlockId.Desk: return 45;
//                case BlockId.FurnaceElectric: return 45;
//                case BlockId.FurnaceStone: return 45;
//                case BlockId.Ladder: return 90*DestroyAxe();
//                case BlockId.Lamp: return 45;
//                case BlockId.Windmill: return 45;
//                case BlockId.Watermill: return 45;
//                case BlockId.Flag: return 45;
//                case BlockId.SolarPanel: return 45;
//                case BlockId.Label: return 30;

//                case BlockId.Snow: return 100*DestroyShovel();

//                case BlockId.AppleLeaves: return 15;
//                case BlockId.LemonLeavesWithLemons: return 15;
//                case BlockId.LindenLeaves: return 15;
//                case BlockId.OakLeaves: return 15;
//                case BlockId.OrangeLeaves: return 15;
//                case BlockId.SpruceLeaves: return 15;
//                case BlockId.PlumLeavesWithPlums: return 15;
//                case BlockId.PlumLeaves: return 15;
//                case BlockId.PineLeaves: return 15;
//                case BlockId.OrangeLeavesWithOranges: return 15;
//                case BlockId.AppleLeavesWithApples: return 15;
//                case BlockId.CherryLeaves: return 15;
//                case BlockId.CherryLeavesWithCherries: return 15;
//                case BlockId.LemonLeaves: return 15;

//                case BlockId.Violet: return 30*DestroyShovel();
//                case BlockId.Dandelion: return 30*DestroyShovel();
//                case BlockId.Heather: return 30*DestroyShovel();
//                case BlockId.Alore: return 30*DestroyShovel();
//                case BlockId.CactusBig: return 60;
//                case BlockId.CactusSmall: return 60;

//                case BlockId.AppleSapling: return 30*DestroyShovel();
//                case BlockId.CherrySapling: return 30*DestroyShovel();
//                case BlockId.LemonSapling: return 30*DestroyPickaxe();
//                case BlockId.LindenSapling: return 30*DestroyPickaxe();
//                case BlockId.OakSapling: return 30*DestroyPickaxe();
//                case BlockId.OrangeSapling: return 30*DestroyPickaxe();
//                case BlockId.PineSapling: return 30*DestroyPickaxe();
//                case BlockId.PlumSapling: return 30*DestroyPickaxe();
//                case BlockId.SpruceSapling: return 30*DestroyPickaxe();

//                case BlockId.GrassDesert: return 30*DestroyPickaxe();
//                case BlockId.GrassForest: return 30*DestroyPickaxe();
//                case BlockId.GrassHills: return 30*DestroyPickaxe();
//                case BlockId.GrassJungle: return 30*DestroyPickaxe();
//                case BlockId.GrassPlains: return 30*DestroyPickaxe();

//                case BlockId.Liana: return 30*DestroyAxe();
//                case BlockId.Macerator: return 45;
//                case BlockId.Miner: return 45;

//                case BlockId.Wheat: return 30;
//                case BlockId.Onion: return 30;
//                case BlockId.Flax: return 30;
//                case BlockId.Glass: return 30;
//                case BlockId.Orchid: return 30*DestroyShovel();

//                case BlockId.Radio: return 45;
//                case BlockId.Rose: return 30*DestroyShovel();
//                case BlockId.Seaweed: return 30;
//                case BlockId.SugarCane: return 30;
//                case BlockId.Toadstool: return 30;
//                case BlockId.Strawberry: return 30;
//                case BlockId.Rashberry: return 30;
//                case BlockId.Blueberry: return 30;
//                case BlockId.Boletus: return 30;

//                case BlockId.SnowTop: return 45;
//                case BlockId.Roof1: return 90;
//                case BlockId.Coral: return 60;
//                case BlockId.BranchALittle1: return 30;
//                case BlockId.BranchALittle2: return 30;
//                case BlockId.BranchFull: return 30;
//                case BlockId.BranchWithout: return 30;
//                case BlockId.Champignon: return 30;
//                case BlockId.DoorOpen: return 45;
//            }

//            return 0;
//        }

//        float GetPlantDestroingSpeed(byte type) {
//            switch ((BlockId)type) {
//                case BlockId.Wheat: return 30;
//                case BlockId.Onion: return 30;
//                case BlockId.Flax: return 30;

//                case BlockId.Strawberry: return 30;
//                case BlockId.Rashberry: return 30;
//                case BlockId.Blueberry: return 30;
//            }

//            return 0;
//        }

//        float DestroyPickaxe() {
//            Items id = (Items)Inventory[boxSelected].X;
//            if (id==Items.StonePickaxe) return 0.5f;
//            if (id==Items.IronPickaxe) return 0.2f;
//            if (id==Items.ElectricDrill) return 0.1f;
//            if (id==Items.IronHeadPickaxe) return 0.87f;
//            if (id==Items.StoneHead) return 0.90f;
//            if (id==Items.MediumStone) return 0.96f;
//            if (id==Items.SmallStone) return 0.98f;
//            if (id==Items.BigStone) return 0.94f;
//            return 1;
//        }

//        float DestroyAxe() {
//            Items id = (Items)Inventory[boxSelected].X;
//            if (id==Items.StoneAxe) return 0.5f;
//            if (id==Items.IronAxe) return 0.2f;
//            if (id==Items.ElectricSaw) return 0.1f;
//            if (id==Items.IronHeadAxe) return 0.87f;
//            if (id==Items.StoneHead) return 0.90f;
//            if (id==Items.MediumStone) return 0.96f;
//            if (id==Items.SmallStone) return 0.98f;
//            if (id==Items.BigStone) return 0.94f;
//            if (id==Items.SawCopper) return 0.4f;
//            if (id==Items.SawBronze) return 0.15f;
//            if (id==Items.SawIron) return 0.08f;
//            return 1;
//        }

//        float DestroyShovel() {
//            Items id = (Items)Inventory[boxSelected].X;
//            if (id==Items.StoneShovel) return 0.5f;
//            if (id==Items.IronShovel) return 0.2f;
//            if (id==Items.ElectricDrill) return 0.1f;
//            if (id==Items.IronHeadShovel) return 0.87f;
//            if (id==Items.StoneHead) return 0.90f;
//            if (id==Items.MediumStone) return 0.96f;
//            if (id==Items.SmallStone) return 0.98f;
//            if (id==Items.BigStone) return 0.94f;
//            return 1;
//        }

//        void GetItemsFromPlant(byte type, DInt _pos, bool grow) {
//            DInt pos = new DInt(_pos.X*16, _pos.Y*16);
//            if (grow) {
//                switch ((BlockId)type) {
//                    case BlockId.Wheat:
//                        DropItemToPos(pos, Items.WheatStraw);
//                        DropItemToPos(pos, Items.WheatSeeds);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.WheatSeeds);
//                        break;

//                    case BlockId.Onion:
//                        if (random.Next(2)==1) DropItemToPos(pos, Items.Onion);
//                        if (random.Next(2)==1) DropItemToPos(pos, Items.Onion);
//                        if (random.Next(2)==1) DropItemToPos(pos, Items.Onion);
//                        break;

//                    case BlockId.Flax:
//                        DropItemToPos(pos, Items.Flax);
//                        DropItemToPos(pos, Items.FlaxSeeds);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.FlaxSeeds);
//                        break;

//                    case BlockId.Strawberry:
//                        DropItemToPos(pos, Items.PlantStrawberry);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.PlantStrawberry);
//                        break;

//                    case BlockId.Rashberry:
//                        DropItemToPos(pos, Items.PlantRashberry);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.PlantRashberry);
//                        break;

//                    case BlockId.Blueberry:
//                        DropItemToPos(pos, Items.PlantBlueberry);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.PlantBlueberry);
//                        break;
//                }
//            } else {
//                switch ((BlockId)type) {
//                    case BlockId.Wheat:
//                        //   DropItemToPos(pos,Items.WheatStraw);
//                        // DropItemToPos(pos,Items.WheatSeeds);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.WheatSeeds);
//                        break;

//                    case BlockId.Onion:
//                        DropItemToPos(pos, Items.Onion);
//                        break;

//                    case BlockId.Flax:
//                        // DropItemToPos(pos,Items.Flax);
//                        // DropItemToPos(pos,Items.FlaxSeeds);
//                        if (random.Next(8)==1) DropItemToPos(pos, Items.FlaxSeeds);
//                        break;

//                    case BlockId.Strawberry:
//                        DropItemToPos(pos, Items.PlantStrawberry);
//                        //  if (random.Next(8)==1)DropItemToPos(pos,Items.StrawberryPlant);
//                        break;

//                    case BlockId.Rashberry:
//                        DropItemToPos(pos, Items.PlantRashberry);
//                        //  if (random.Next(8)==1)DropItemToPos(pos,Items.RashberryPlant);
//                        break;

//                    case BlockId.Blueberry:
//                        DropItemToPos(pos, Items.PlantBlueberry);
//                        // if (random.Next(8)==1)DropItemToPos(pos,Items.PlantBlueberry);
//                        break;
//                }
//            }
//        }

//        #endregion

//        #region Energy
//        void EnergySystem() {
//            for (int i = 0; i<energy.Count; i++) {
//                Energy e = energy[i];
//                if (random.Next(500)==1) {
//                    energy.Remove(e);

//                } else if (terrain[e.X].IsTopBlocks[e.Y]) {
//                    BlockId id = (BlockId)terrain[e.X].TopBlocks[e.Y].Id;

//                    if (id==BlockId.Label) {
//                        MoveEnergy(((ScreenBlock)(terrain[e.X].TopBlocks[e.Y])).screen, e);
//                    } else if (id==BlockId.FurnaceElectric
//                        ||id==BlockId.Macerator
//                        ||id==BlockId.Radio
//                        ||id==BlockId.Lamp
//                        ||id==BlockId.Miner) {
//                        ((MashineBlockBasic)(terrain[e.X].TopBlocks[e.Y])).AddEnergy();
//                        energy.Remove(e);
//                    } else {
//                        energy.Remove(e);
//                    }
//                } else energy.Remove(e);
//            }
//        }

//        void MoveEnergy(int screen, Energy e) {
//            //   1
//            // 4 0 2
//            //   3

//            switch (screen) {
//                case 15:
//                    switch (e.Direction) {
//                        case 1:
//                            switch (random.Next(3)) {
//                                case 0: e.X--; e.Direction=4; return;
//                                case 1: e.Y++; e.Direction=3; return;
//                                case 2: e.X++; e.Direction=2; return;
//                            }
//                            break;

//                        case 2:
//                            switch (random.Next(3)) {
//                                case 0: e.Y--; e.Direction=1; return;
//                                case 1: e.Y++; e.Direction=3; return;
//                                case 2: e.X++; /*e.Direction=2;*/ return;
//                            }
//                            break;

//                        case 3:
//                            switch (random.Next(3)) {
//                                case 0: e.Y++; /*e.Direction=3;*/ return;
//                                case 1: e.X--; e.Direction=4; return;
//                                case 2: e.X++; e.Direction=2; return;
//                            }
//                            break;

//                        case 4:
//                            switch (random.Next(3)) {
//                                case 0: e.Y--; e.Direction=1; return;
//                                case 1: e.X--; /*e.Direction=4;*/ return;
//                                case 2: e.Y++; e.Direction=3; return;
//                            }
//                            break;
//                    }
//                    break;

//                case 14:
//                    switch (e.Direction) {
//                        case 1:
//                            if (random.Next(2)==1) {
//                                e.X--;
//                                e.Direction=4;
//                                return;
//                            } else {
//                                e.X++;
//                                e.Direction=2;
//                                return;
//                            }

//                        case 2:
//                            if (random.Next(2)==1) {
//                                e.X++;
//                                return;
//                            } else {
//                                e.Y++;
//                                e.Direction=3;
//                                return;
//                            }

//                        case 4:
//                            if (random.Next(2)==1) {
//                                e.X--;
//                                return;
//                            } else {
//                                e.Y++;
//                                e.Direction=3;
//                                return;
//                            }
//                    }
//                    break;

//                case 13:
//                    switch (e.Direction) {
//                        case 1:
//                            if (random.Next(2)==1) {
//                                e.Y--;
//                                return;
//                            } else {
//                                e.X--;
//                                e.Direction=4;
//                                return;
//                            }

//                        case 2:
//                            if (random.Next(2)==1) {
//                                e.Y--;
//                                e.Direction=1;
//                                return;
//                            } else {
//                                e.Y++;
//                                e.Direction=3;
//                                return;
//                            }

//                        case 3:
//                            if (random.Next(2)==1) {
//                                e.Y++;
//                                return;
//                            } else {
//                                e.X--;
//                                e.Direction=4;
//                                return;
//                            }
//                    }
//                    break;

//                case 12:
//                    switch (e.Direction) {
//                        case 2:
//                            if (random.Next(2)==1) {
//                                e.Y--;
//                                e.Direction=1;
//                                return;
//                            } else {
//                                e.X++;
//                                return;
//                            }

//                        case 3:
//                            if (random.Next(2)==1) {
//                                e.X++;
//                                e.Direction=2;
//                                return;
//                            } else {
//                                e.X--;
//                                e.Direction=4;
//                                return;
//                            }

//                        case 4:
//                            if (random.Next(2)==1) {
//                                e.Y--;
//                                e.Direction=1;
//                                return;
//                            } else {
//                                e.X--;
//                                return;
//                            }
//                    }
//                    break;

//                case 11:
//                    switch (e.Direction) {
//                        case 1:
//                            if (random.Next(2)==1) {
//                                e.Y--;
//                                return;
//                            } else {
//                                e.X++;
//                                e.Direction=2;
//                                return;
//                            }

//                        case 3:
//                            if (random.Next(2)==1) {
//                                e.Y++;
//                                return;
//                            } else {
//                                e.X++;
//                                e.Direction=2;
//                                return;
//                            }

//                        case 4:
//                            if (random.Next(2)==1) {
//                                e.Y++;
//                                e.Direction=3;
//                                return;
//                            } else {
//                                e.Y--;
//                                e.Direction=1;
//                                return;
//                            }
//                    }
//                    break;

//                case 10:
//                    if (e.Direction==1) {
//                        e.Y--;
//                        return;
//                    } else if (e.Direction==3) {
//                        e.Y++;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 9:
//                    if (e.Direction==4) {
//                        e.X--;
//                        return;
//                    } else if (e.Direction==2) {
//                        e.X++;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 8:
//                    if (e.Direction==3) {
//                        e.X--;
//                        e.Direction=4;
//                        return;
//                    } else if (e.Direction==2) {
//                        e.Y--;
//                        e.Direction=1;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 7:
//                    if (e.Direction==1) {
//                        e.X--;
//                        e.Direction=4;
//                        return;
//                    } else if (e.Direction==2) {
//                        e.Y++;
//                        e.Direction=3;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 6:
//                    if (e.Direction==1) {
//                        e.X++;
//                        e.Direction=2;
//                        return;
//                    } else if (e.Direction==4) {
//                        e.Y++;
//                        e.Direction=3;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 5:
//                    if (e.Direction==4) {
//                        e.Y--;
//                        e.Direction=1;
//                        return;
//                    } else if (e.Direction==3) {
//                        e.X++;
//                        e.Direction=2;
//                        return;
//                    } else {
//                        energy.Remove(e);
//                        return;
//                    }

//                case 4:
//                    if (e.Direction==2) e.X++;
//                    else energy.Remove(e);
//                    break;

//                case 3:
//                    if (e.Direction==1) e.Y--;
//                    else energy.Remove(e);
//                    break;


//                case 2:
//                    if (e.Direction==4) e.X--;
//                    else energy.Remove(e);
//                    break;

//                case 1:
//                    if (e.Direction==3) e.Y++;
//                    else energy.Remove(e);
//                    break;

//                case 0:
//                    energy.Remove(e);
//                    break;

//            }
//        }

//        void NewEnergySolarPanel(int x, int y) {
//            bool down = false, left = false, right = false;

//            if (terrain[x].TopBlocks[y+1]!=null) down=terrain[x].TopBlocks[y+1].Id==(byte)BlockId.Label;

//            if (terrain[x-1]!=null) {
//                if (terrain[x-1].TopBlocks[y]!=null) left=terrain[x-1].TopBlocks[y].Id==(byte)BlockId.Label;
//            }

//            if (terrain[x+1]!=null) {
//                if (terrain[x+1].TopBlocks[y]!=null) right=terrain[x+1].TopBlocks[y].Id==(byte)BlockId.Label;
//            }

//            if (!down&&!left&&!right) {
//                return;
//            } else {
//                if (down&&left&&right) {
//                    switch (random.Next(3)) {
//                        case 0: energy.Add(new Energy(x+1, y, 2)); return;
//                        case 1: energy.Add(new Energy(x, y+1, 3)); return;
//                        case 2: energy.Add(new Energy(x-1, y, 4)); return;
//                    }
//                }
//                if (!down&&left&&right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x+1, y, 2));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x-1, y, 4));
//                        return;
//                    }
//                }
//                if (down&&!left&&right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x, y+1, 3));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x-1, y, 4));
//                        return;
//                    }
//                }
//                if (down&&left&&!right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x+1, y, 2));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x, y+1, 3));
//                        return;
//                    }
//                }
//                if (!down&&!left&&right) { energy.Add(new Energy(x+1, y, 2)); return; }
//                if (!down&&left&&!right) { energy.Add(new Energy(x-1, y, 4)); return; }
//                if (down&&!left&&!right) { energy.Add(new Energy(x, y+1, 3)); return; }
//            }
//        }

//        void NewEnergyWatermill(int x, int y) {
//            bool up = false, left = false, right = false;

//            if (terrain[x].TopBlocks[y-1]!=null) up=terrain[x].TopBlocks[y-1].Id==(byte)BlockId.Label;

//            if (terrain[x-1]!=null) {
//                if (terrain[x-1].TopBlocks[y]!=null) left=terrain[x-1].TopBlocks[y].Id==(byte)BlockId.Label;
//            }

//            if (terrain[x+1]!=null) {
//                if (terrain[x+1].TopBlocks[y]!=null) right=terrain[x+1].TopBlocks[y].Id==(byte)BlockId.Label;
//            }

//            if (!up&&!left&&!right) {
//                return;
//            } else {
//                if (up&&left&&right) {
//                    switch (random.Next(3)) {
//                        case 0: energy.Add(new Energy(x+1, y, 2)); return;
//                        case 1: energy.Add(new Energy(x, y-1, 1)); return;
//                        case 2: energy.Add(new Energy(x-1, y, 4)); return;
//                    }
//                }
//                if (!up&&left&&right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x+1, y, 2));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x-1, y, 4));
//                        return;
//                    }
//                }
//                if (up&&!left&&right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x, y-1, 1));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x-1, y, 4));
//                        return;
//                    }
//                }
//                if (up&&left&&!right) {
//                    if (random.Next(2)==1) {
//                        energy.Add(new Energy(x+1, y, 2));
//                        return;
//                    } else {
//                        energy.Add(new Energy(x, y-1, 1));
//                        return;
//                    }
//                }
//                if (!up&&!left&&right) { energy.Add(new Energy(x-1, y, 4)); return; }
//                if (!up&&left&&!right) { energy.Add(new Energy(x+1, y, 2)); return; }
//                if (up&&!left&&!right) { energy.Add(new Energy(x, y-1, 1)); return; }
//            }
//        }
//        #endregion

//        #region Blocks in the lists
//        void SetWintableSources() {
//            foreach (ShortAndByte w in windable) {
//                switch ((BlockId)terrain[w.X].TopBlocks[w.Y].Id) {
//                    case BlockId.Windmill:
//                        ((AnimatedBlock)terrain[w.X].TopBlocks[w.Y]).imageSpeed=windForce;
//                        break;

//                    case BlockId.Flag:
//                        ((AnimatedBlock)terrain[w.X].TopBlocks[w.Y]).imageSpeed=windForce;
//                        break;
//                }
//            }
//        }

//        void RemovefromWintable(int x, int y) {
//            foreach (ShortAndByte w in windable) {
//                if (w.X==x) {
//                    if (w.Y==y) {
//                        windable.Remove(w);
//                        return;
//                    }
//                }
//            }
//        }

//        void RemovefromChargers(int x, int y) {
//            foreach (ShortAndByte w in Chargers) {
//                if (w.X==x) {
//                    if (w.Y==y) {
//                        Chargers.Remove(w);
//                        return;
//                    }
//                }
//            }
//        }

//        void RemovefromMiners(int x, int y) {
//            foreach (ShortAndByte w in Miners) {
//                if (w.X==x) {
//                    if (w.Y==y) {
//                        Miners.Remove(w);
//                        return;
//                    }
//                }
//            }
//        }

//        void RemovefromFurnaceStone(int x, int y) {
//            foreach (ShortAndByte w in FurnaceStone) {
//                if (w.X==x) {
//                    if (w.Y==y) {
//                        FurnaceStone.Remove(w);
//                        return;
//                    }
//                }
//            }
//        }

//        void RemovefromComposters(int x, int y) {
//            foreach (ShortAndByte w in Composters) {
//                if (w.X==x) {
//                    if (w.Y==y) {
//                        Composters.Remove(w);
//                        return;
//                    }
//                }
//            }
//        }

//        void RemovePlant(int x) {
//            if (terrain[x].Plants.Count==0) chunksWithPlants.Remove(x);
//        }

//        void RegisterPlant(int x) {
//            bool isNotSomething = false;

//            foreach (int i in chunksWithPlants) {
//                if (i==x) {
//                    isNotSomething=true;
//                    break;
//                }
//            }

//            if (isNotSomething) chunksWithPlants.Add(x);
//        }
//        #endregion

//        #region mashines
//        void MinerJob(ShortAndByte ch) {
//            MashineBlockBasic miner = (MashineBlockBasic)terrain[ch.X].TopBlocks[ch.Y];

//            if (miner.Energy>5) {
//                foreach (Item item in DroppedItems) {
//                    if (item.X==ch.X*16) {
//                        if (item.Y>ch.Y*16) {
//                            if (MinerAddItem((int)item.Id, miner)) {
//                                DroppedItems.Remove(item);
//                                return;
//                            }
//                        }
//                    }
//                }
//                for (int y = ch.Y+1; y<100; y++) {
//                    if (terrain[ch.X].IsSolidBlocks[y]) {
//                        destroyBlock=new DInt(ch.X, y);
//                        GetItemsFromBlock(terrain[ch.X].SolidBlocks[y].Id, ch.X, y/*,BlockType.Solid*/);
//                        terrain[ch.X].SolidBlocks[y]=null;
//                        terrain[ch.X].IsSolidBlocks[y]=false;
//                        return;
//                    }
//                }
//            }
//        }

//        void ChargerJob(ShortAndByte ch) {
//            MashineBlockBasic charger = (MashineBlockBasic)terrain[ch.X].TopBlocks[ch.Y];
//            if (charger.Inv[0].X!=0) {
//                if (charger.Energy>5) {
//                    if (charger.Inv[0].Y==1) {
//                        switch ((Items)charger.Inv[0].X) {
//                            case Items.ElectricDrillOff:
//                                charger.Inv[0].X=(int)Items.ElectricDrill;
//                                return;

//                            case Items.ElectricSawOff:
//                                charger.Inv[0].X=(int)Items.ElectricSaw;
//                                return;

//                            case Items.TorchElectricOFF:
//                                charger.Inv[0].X=(int)Items.TorchElectricON;
//                                return;
//                        }
//                    }

//                    if (charger.Inv[0].Y<99) {
//                        switch ((Items)charger.Inv[0].X) {
//                            case Items.ElectricDrill:
//                                charger.Inv[0].Y++;
//                                charger.Energy-=5;
//                                return;

//                            case Items.ElectricSaw:
//                                charger.Inv[0].Y++;
//                                charger.Energy-=5;
//                                return;

//                            case Items.TorchElectricON:
//                                charger.Inv[0].Y++;
//                                charger.Energy-=5;
//                                return;
//                        }
//                    }
//                }
//            }
//        }

//        #endregion

//        #region Prepare dialogs
//        void MobileON() => (mobileOS=new Mobile.System() { Content=Rabcr.content }).Init();

//        //void PrepareRocketDialog() {
//        //    if (buttonRocket==null)
//        //        buttonRocket=new GameButton(Textures.ButtonCenter,spriteFont_small,spriteFont_medium){
//        //            Text="Odletět",
//        //          //  center=true
//        //        };
//        //}

//        //void PrepareRadioDialog() {
//        //    if (buttonRocket==null)
//        //        buttonRocket=new GameButton(Textures.ButtonCenter,spriteFont_small,spriteFont_medium) {
//        //            Text="Otevřít",
//        //         //   center=true
//        //        };
//        //}

//        #endregion

//        #region Inventory
//        void ItemEat() {
//            if (barEat>1) {
//                switch (Inventory[boxSelected].X) {
//                    case (int)Items.Banana:
//                        barEat-=10;
//                        barWater-=1;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Olive:
//                        barEat-=2;
//                        barWater-=0.1f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Toadstool:
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        Die(Lang.Texts[166]/* "Muchomůrka je jedovatá","Toadstool is poisonous"*/);
//                        break;

//                    case (int)Items.Boletus:
//                        barEat-=1.5f;
//                        barWater-=0.1f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Champignon:
//                        barEat-=1.5f;
//                        barWater-=0.1f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Lemon:
//                        barEat-=5;
//                        // barHeart -=0.1;
//                        barWater-=3;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Orange:
//                        barEat-=9;
//                        barWater-=3;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Cherry:
//                        barEat-=2;
//                        barWater-=0.1f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.BucketWater:
//                        barEat-=0.01f;
//                        barWater-=20;
//                        DropItemToPos(PlayerX, PlayerY, Items.Bucket);
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Dandelion:
//                        barEat-=2;
//                        barWater-=0.01f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Plum:
//                        barEat-=5;
//                        barWater-=0.05f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Rashberry:
//                        barEat-=2;
//                        barWater-=0.3f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Apple:
//                        barEat-=12;
//                        barWater--;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.RabbtCookedMeat:
//                        barEat-=30;
//                        barWater-=2;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.RabbitMeat:
//                        barEat-=10;
//                        barWater-=1;
//                        if (random.Next(5)==1) {
//                            barHeart+=5;
//                            if (barHeart>32) barHeart=32;
//                        }
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Strawberry:
//                        barEat-=3;
//                        barWater-=0.5f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.WheatSeeds:
//                        barEat--;
//                        barWater-=0.002f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                    case (int)Items.Blueberries:
//                        barEat-=2;
//                        barWater-=0.2f;
//                        InventoryRemoveDInt();
//                        if (Global.HasSoundGraphics) SoundEffects.Eat.Play();
//                        break;

//                }
//            }

//            if (barWater>1) {
//                if (Inventory[boxSelected].Y>2) {
//                    switch (Inventory[boxSelected].X) {
//                        case (int)Items.BottleWater:
//                            barWater-=5;
//                            InventoryRemoveDInt();
//                            break;
//                    }
//                } else {
//                    switch (Inventory[boxSelected].X) {
//                        case (int)Items.BottleWater:
//                            barWater-=5;
//                            Inventory[boxSelected].X=(int)Items.Bottle;
//                            break;
//                    }
//                }
//            }

//            if (barEat>32) barEat=32;
//            if (barWater>32) barWater=32;
//            if (barEat<0) barEat=0;
//            if (barWater<0) barWater=0;
//        }

//        void RemovePartTool() {
//            int id = Inventory[boxSelected].X;
//            int count = Inventory[boxSelected].Y;

//            if (id<(int)Items._SystemMaxTools) {
//                //if (count==1) {
//                //    Items newId=GameMethods.ToolToBasic((Items)id);
//                //    if (newId!=Items.None) {
//                //        Inventory[boxSelected].X=(int)newId;
//                //        return;
//                //    }
//                float i = GameMethods.ToolMaxUses((Items)id);

//                if (count>1) {
//                    if (i!=-1) {
//                        if (i==(int)i) {
//                            if (i<count) {
//                                Inventory[boxSelected].Y-=(int)i;
//                                return;
//                            }
//                        } else if (1<i) {
//                            int newi = (random.Next(100)>(i-(int)i)*100 ? 1 : 0)+(int)i;
//                            if (newi<count) {
//                                Inventory[boxSelected].Y-=newi;
//                                return;
//                            }
//                        } else {
//                            if (random.Next(100)>i*100) {
//                                if (i<count) {
//                                    Inventory[boxSelected].Y-=count;
//                                }
//                            }
//                            return;
//                        }
//                    }
//                } else {
//                    Items newID = GameMethods.ToolToBasic((Items)id);
//                    if (newID==Items.None) {
//                        Inventory[boxSelected].Y=0;
//                        Inventory[boxSelected].X=0;
//                        return;
//                    } else {
//                        Inventory[boxSelected].Y=(int)newID;
//                        return;
//                    }
//                }
//            }
//        }

//        void UpdateItem(List<Item> list) {
//            foreach (Item i in list) {
//                //  i.UpdateItem();
//                //Console.WriteLine(i.X +"|"+ PlayerX +"|"+i.Y +"|"+ PlayerY);
//                if (i.X>PlayerX-11-16&&i.X<PlayerX+11/*+16*/ &&i.Y>PlayerY-20&&i.Y<PlayerY+20) {
//                    // Console.WriteLine("ok");
//                    if (InventoryAdd((int)i.Id)) { // Console.WriteLine("ok2");
//                        list.Remove(i);
//                        break;
//                    }
//                }

//                if (terrain[i.X/16]!=null) {
//                    if (i.Y>0&&i.Y<124*16) {
//                        if (!terrain[i.X/16].IsSolidBlocks[i.Y/16+1]) {
//                            i.Y+=2;
//                        }
//                    }
//                    if (i.Y>5000) {
//                        list.Remove(i);
//                        break;
//                    }
//                }
//            }
//        }

//        void ItemGravity(DInt item) {
//            distanceToGround=100000;

//            for (int y = (item.X+20-16)/16; y<(item.Y+20-16)/16+6; y++) {
//                for (int x = (item.X-11)/16; x<(item.X+11+16)/16; x++) {
//                    if (terrain[x]!=null) {
//                        if (terrain[x].IsSolidBlocks[y]) {
//                            if (/*y*16-PlayerY-39/2>0 &&*/ y*16-item.Y-20<distanceToGround) {
//                                distanceToGround=y*16-item.Y-20;
//                            }

//                        }
//                    }
//                }
//            }

//            if (distanceToGround==0) {

//                return;
//            }

//            if (distanceToGround</*16*/6&&gravitySpeed>0) {
//                item.Y+=distanceToGround;
//                gravitySpeed=0;
//                return;
//            } else {
//                gravitySpeed+=.4905f;
//                if (gravitySpeed>6) gravitySpeed=6;
//                item.Y+=(int)gravitySpeed;


//            }
//            // }


//        }

//        // Crafting basic
//        void SetInvCraftingBlocks() {
//            inventoryScrollbarValueCraftingMax=2;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Gravel;
//            Crafting[1].X=(int)Items.OakLeaves;
//            Crafting[2].X=(int)Items.HayBlock;
//        }

//        void SetInvCraftingMashines() {
//            inventoryScrollbarValueCraftingMax=1;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Desk;
//            Crafting[1].X=(int)Items.Ladder;
//        }

//        void SetInvCraftingTools() {
//            Items[] itemsToSet = new Items[]{
//                Items.StoneHead,

//                Items.StoneShovel,
//                Items.StonePickaxe,
//                Items.StoneAxe,
//                Items.HoeStone,

//                Items.IronShovel,
//                Items.IronPickaxe,
//                Items.IronAxe,
//                Items.HoeIron,

//                Items.HammerIron,
//                Items.HammerBronze,
//                Items.TorchOFF,
//            };
//            inventoryScrollbarValueCraftingMax=itemsToSet.Length-1;
//            for (int i = 0; i<=inventoryScrollbarValueCraftingMax; i++) {
//                Crafting[i].X=(int)itemsToSet[i];
//                Crafting[i].Y=1;
//            }// Crafting[i]=new DInt(0,0);
//             //    for (int i=0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            //Crafting[0].X=(int)Items.StoneHeadAxe;
//            //Crafting[1].X=(int)Items.StoneHeadPickaxe;
//            //Crafting[2].X=(int)Items.StoneHeadShovel;
//            //Crafting[3].X=(int)Items.StoneHeadHoe;

//            //Crafting[4].X=(int)Items.StoneShovel;
//            //Crafting[5].X=(int)Items.StonePickaxe;
//            //Crafting[6].X=(int)Items.StoneAxe;
//            //Crafting[7].X=(int)Items.HoeStone;

//            //Crafting[6].X=(int)Items.IronShovel;
//            //Crafting[7].X=(int)Items.IronPickaxe;
//            //Crafting[8].X=(int)Items.IronAxe;
//            //Crafting[8].X=(int)Items.HoeIron;

//            //Crafting[9].X=(int)Items.HammerIron;
//            //Crafting[10].X=(int)Items.HammerBronze;
//            //Crafting[11].X=(int)Items.TorchOFF;
//        }

//        void SetInvCraftingNature() {
//            inventoryScrollbarValueCraftingMax=4;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Stick;
//            Crafting[1].X=(int)Items.Sticks;
//            Crafting[2].X=(int)Items.Leave;
//            Crafting[3].X=(int)Items.Seeds;
//            Crafting[4].X=(int)Items.WheatSeeds;
//        }

//        void SetInvCraftingItems() {
//            inventoryScrollbarValueCraftingMax=0;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;


//            Crafting[0].X=(int)Items.Flag;
//        }

//        // Crafting adv
//        void SetInvCraftingBlocksA() {
//            inventoryScrollbarValueCraftingMax=14;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Cobblestone;
//            Crafting[1].X=(int)Items.Gravel;
//            Crafting[2].X=(int)Items.Sand;
//            Crafting[3].X=(int)Items.OakLeaves;
//            Crafting[4].X=(int)Items.Planks;
//            Crafting[5].X=(int)Items.AdvancedSpaceBlock;
//            Crafting[6].X=(int)Items.AdvancedSpaceFloor;
//            Crafting[7].X=(int)Items.AdvancedSpacePart1;
//            Crafting[8].X=(int)Items.AdvancedSpacePart2;
//            Crafting[9].X=(int)Items.AdvancedSpacePart3;
//            Crafting[10].X=(int)Items.AdvancedSpacePart4;
//            Crafting[11].X=(int)Items.AdvancedSpaceWindow;
//            Crafting[12].X=(int)Items.Bricks;
//            Crafting[13].X=(int)Items.Roof1;
//            Crafting[14].X=(int)Items.Roof2;
//        }

//        void SetInvCraftingMashinesA() {
//            inventoryScrollbarValueCraftingMax=16;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;
//            Crafting[0].X=(int)Items.Desk;
//            Crafting[1].X=(int)Items.Ladder;
//            Crafting[2].X=(int)Items.Door;

//            Crafting[3].X=(int)Items.SolarPanel;
//            Crafting[4].X=(int)Items.WindMill;
//            Crafting[5].X=(int)Items.WaterMill;
//            Crafting[6].X=(int)Items.FurnaceElectric;
//            Crafting[7].X=(int)Items.FurnaceStone;
//            Crafting[8].X=(int)Items.Macerator;
//            Crafting[9].X=(int)Items.Miner;
//            Crafting[10].X=(int)Items.Radio;
//            Crafting[11].X=(int)Items.Lamp;
//            Crafting[12].X=(int)Items.Label;
//            Crafting[13].X=(int)Items.Rocket;

//            Crafting[14].X=(int)Items.Shelf;
//            Crafting[15].X=(int)Items.BoxWooden;
//            Crafting[16].X=(int)Items.BoxAdv;
//        }

//        void SetInvCraftingToolsA() {
//            Items[] itemsToSet = new Items[]{
//                Items.StoneHead,

//                Items.StoneShovel,
//                Items.StonePickaxe,
//                Items.StoneAxe,
//                Items.HoeStone,

//                Items.ShearsCopper,
//                Items.SawCopper,
//                Items.HoeCopper,

//                Items.HammerBronze,
//                Items.SawBronze,
//                Items.ShearsBronze,

//                Items.IronShovel,
//                Items.IronPickaxe,
//                Items.IronAxe,
//                Items.HoeIron,
//                Items.HammerIron,
//                Items.ShearsIron,
//                Items.SawIron,

//                Items.ElectricDrill,
//                Items.ElectricSaw,

//                Items.Bucket,
//                Items.TorchOFF,
//            };

//            inventoryScrollbarValueCraftingMax=itemsToSet.Length-1;
//            for (int i = 0; i<=inventoryScrollbarValueCraftingMax; i++) {
//                Crafting[i].X=(int)itemsToSet[i];
//                Crafting[i].Y=1;
//            }

//            //inventoryScrollbarValueCraftingMax=20;
//            //for (int i=0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0,0);
//            //for (int i=0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            //Crafting[0].X=(int)Items.StoneHead;

//            //Crafting[3].X=(int)Items.StoneShovel;
//            //Crafting[4].X=(int)Items.StonePickaxe;
//            //Crafting[5].X=(int)Items.StoneAxe;
//            //Crafting[6].X=(int)Items.IronShovel;
//            //Crafting[7].X=(int)Items.IronPickaxe;
//            //Crafting[8].X=(int)Items.IronAxe;
//            //Crafting[10].X=(int)Items.HammerBronze;
//            //Crafting[9].X=(int)Items.HammerIron;

//            //Crafting[11].X=(int)Items.ShearsCopper;
//            //Crafting[12].X=(int)Items.ShearsIron;

//            //Crafting[13].X=(int)Items.SawBronze;
//            //Crafting[14].X=(int)Items.SawCopper;
//            //Crafting[15].X=(int)Items.SawIron;

//            //Crafting[16].X=(int)Items.ElectricDrill;
//            //Crafting[17].X=(int)Items.ElectricSaw;

//            //Crafting[18].X=(int)Items.Bucket;
//            //Crafting[19].X=(int)Items.TorchOFF;
//        }

//        void SetInvCraftingNatureA() {
//            inventoryScrollbarValueCraftingMax=7;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Stick;
//            Crafting[1].X=(int)Items.Sticks;
//            Crafting[2].X=(int)Items.Leave;
//            Crafting[3].X=(int)Items.HayBlock;
//            Crafting[4].X=(int)Items.MudIngot;
//            Crafting[5].X=(int)Items.Leave;
//            Crafting[6].X=(int)Items.Seeds;
//            Crafting[7].X=(int)Items.WheatSeeds;
//        }

//        void SetInvCraftingItemsA() {
//            inventoryScrollbarValueCraftingMax=20;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            //non electric
//            Crafting[0].X=(int)Items.Flag;
//            Crafting[1].X=(int)Items.Nail;
//            Crafting[2].X=(int)Items.BronzeDust;

//            Crafting[3].X=(int)Items.plateAluminium;
//            Crafting[4].X=(int)Items.PlateBronze;
//            Crafting[5].X=(int)Items.PlateCopper;
//            Crafting[6].X=(int)Items.PlateGold;
//            Crafting[7].X=(int)Items.PlateIron;

//            //electric
//            Crafting[8].X=(int)Items.BareLabel;
//            Crafting[9].X=(int)Items.Rezistance;
//            Crafting[10].X=(int)Items.Condenser;
//            Crafting[11].X=(int)Items.Diode;
//            Crafting[12].X=(int)Items.Tranzistor;
//            Crafting[13].X=(int)Items.Bulb;
//            Crafting[14].X=(int)Items.ItemBattery;
//            Crafting[15].X=(int)Items.Motor;

//            Crafting[16].X=(int)Items.Circuit;
//            Crafting[17].X=(int)Items.BigCircuit;

//            Crafting[18].X=(int)Items.Yarn;
//            Crafting[19].X=(int)Items.Cloth;
//            Crafting[20].X=(int)Items.Rope;
//        }

//        // Creative
//        void SetInvCreativeBlocks() {
//            Items[] items ={
//                Items.StoneSandstone,
//                Items.StoneSchist,
//                Items.StoneBasalt,
//                Items.StoneDiorit,
//                Items.StoneDolomite,
//                Items.StoneGabbro,
//                Items.StoneGneiss,
//                Items.StoneLimestone,
//                Items.StoneRhyolite,
//                Items.OreCoal,
//                Items.OreCopper,
//                Items.OreTin,
//                Items.OreIron,
//                Items.OreAluminium,
//                Items.OreSilver,
//                Items.OreGold,
//                Items.None,
//                Items.Lava,
//                Items.Cobblestone,
//                Items.Gravel,
//                Items.Sand,
//                Items.Dirt,
//                Items.Ice,
//                Items.Snow,
//                Items.SnowTop,
//                Items.GrassBlockForest,
//                Items.GrassBlockDesert,
//                Items.GrassBlockHills,
//                Items.GrassBlockJungle,
//                Items.GrassBlockPlains,
//                Items.None,
//                Items.AppleLeaves,
//                Items.AppleLeavesWithApples,
//                Items.WoodApple,
//                Items.CherryLeaves,
//                Items.CherryLeavesWithCherries,
//                Items.WoodCherry,
//                Items.PlumLeaves,
//                Items.PlumLeavesWithPlums,
//                Items.WoodPlum,
//                Items.OrangeLeaves,
//                Items.OrangeLeavesWithOranges,
//                Items.WoodOrange,
//                Items.LemonLeaves,
//                Items.LemonLeavesWithLemons,
//                Items.WoodLemon,
//                Items.LindenLeaves,
//                Items.WoodLinden,
//                Items.OakLeaves,
//                Items.WoodOak,
//                Items.PineLeaves,
//                Items.WoodPine,
//                Items.SpruceLeaves,
//                Items.WoodSpruce,
//                Items.None,
//                Items.Planks,
//                Items.HayBlock,
//                Items.Glass,
//                Items.Bricks,
//                Items.Roof1,
//                Items.Roof2,
//                Items.None,
//                Items.AdvancedSpaceBack,
//                Items.AdvancedSpaceBlock,
//                Items.AdvancedSpaceFloor,
//                Items.AdvancedSpaceWindow,
//                Items.AdvancedSpacePart1,
//                Items.AdvancedSpacePart2,
//                Items.AdvancedSpacePart3,
//                Items.AdvancedSpacePart4,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip)/13+1)*13-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=i+skip+3;
//        }

//        void SetInvCreativePlants() {
//            Items[] items ={
//                Items.Dandelion,
//                Items.PlantViolet,
//                Items.PlantRose,
//                Items.PlantOrchid,
//                Items.Heater,
//                Items.Alore,

//                Items.Boletus,
//                Items.Champignon,
//                Items.Toadstool,
//                Items.CactusSmall,
//                Items.CactusBig,
//                Items.Coral,
//                Items.Seaweed,


//                Items.GrassDesert,
//                Items.GrassForest,
//                Items.GrassHills,
//                Items.GrassJungle,
//                Items.GrassPlains,
//                Items.None,

//                Items.OakSapling,
//                Items.LindenSapling,
//                Items.PineSapling,
//                Items.SpruceSapling,
//                Items.AppleSapling,
//                Items.CherrySapling,
//                Items.PlumSapling,
//                Items.OrangeSapling,
//                Items.LemonSapling,
//                Items.None,

//                Items.PlantStrawberry,
//                Items.PlantRashberry,
//                Items.PlantRashberry,
//                Items.Flax,
//                Items.PlantOnion,
//                Items.PlantPeas,
//                Items.PlantCarrot,
//                Items.SugarCane,
//                Items.None,

//                Items.Seeds,
//                Items.WheatSeeds,
//                Items.FlaxSeeds,
//                Items.Onion,
//                Items.Carrot,
//                Items.Peas,

//                Items.Hay,
//                Items.WheatStraw,
//                Items.Stick,
//                Items.Sticks,
//                Items.Leave,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip)/13+1)*13/*+4*/-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=i+skip+3;
//        }

//        void SetInvCreativeMashines() {
//            Items[] items ={
//                Items.Desk,
//                Items.FurnaceStone,
//                Items.Shelf,
//                Items.BoxWooden,
//                Items.BoxAdv,
//                Items.Ladder,
//                Items.Door,
//                Items.None,

//                Items.WindMill,
//                Items.SolarPanel,
//                Items.WaterMill,
//                Items.Label,
//                Items.Lamp,
//                Items.FurnaceElectric,
//                Items.Macerator,
//                Items.Miner,
//                Items.Radio,
//                Items.Rocket,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip)/13+1)*13/*+4*/-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=i+skip+3;
//        }

//        void SetInvCreativeTools() {
//            Items[] items ={
//               Items.StoneHead,

//               Items.IronHeadAxe,
//               Items.IronHeadPickaxe,
//               Items.IronHeadShovel,
//               Items.None,

//               Items.StoneAxe,
//               Items.StonePickaxe,
//               Items.StoneShovel,
//               Items.IronAxe,
//               Items.IronPickaxe,
//               Items.IronShovel,
//               Items.HammerBronze,
//               Items.HammerIron,
//               Items.SawCopper,
//               Items.SawBronze,
//               Items.SawIron,
//               Items.ShearsCopper,
//               Items.ShearsBronze,
//               Items.ShearsIron,
//               Items.ElectricDrill,
//               Items.ElectricSaw,
//               Items.None,

//               Items.Bucket,
//               Items.BucketWater,
//               Items.Bottle,
//               Items.BottleWater,
//               Items.TorchON,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip)/13+1)*13/*+4*/-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=i+skip+3;
//        }

//        void SetInvCreativeItems() {
//            Items[] items ={
//                Items.Strawberry,
//                Items.Rashberry,
//                Items.Blueberries,
//                Items.Apple,
//                Items.Cherry,
//                Items.Plum,
//                Items.Banana,
//                Items.Lemon,
//                Items.Orange,
//                Items.Fish,
//                Items.FishMeatCooked,
//                Items.RabbitMeat,
//                Items.RabbtCookedMeat,
//                Items.BowlEmpty,
//                Items.BowlWithMushrooms,
//                Items.BowlWithVegetables,
//                Items.None,

//                Items.SmallStone,
//                Items.MediumStone,
//                Items.BigStone,
//                Items.ItemCoal,
//                Items.ItemCopper,
//                Items.ItemTin,
//                Items.ItemIron,
//                Items.ItemSilver,
//                Items.ItemGold,
//                Items.Diamond,
//                Items.Ruby,
//                Items.Saphirite,
//                Items.Smaragd,
//                Items.None,

//                Items.CoalDust,
//                Items.BronzeDust,
//                Items.CopperDust,
//                Items.GoldDust,
//                Items.IronDust,
//                Items.SilverDust,
//                Items.TinDust,
//                Items.BronzeIngot,
//                Items.CopperIngot,
//                Items.GoldIngot,
//                Items.IronIngot,
//                Items.MudIngot,
//                Items.SilverIngot,
//                Items.TinIngot,
//                Items.plateAluminium,
//                Items.PlateBronze,
//                Items.PlateCopper,
//                Items.PlateGold,
//                Items.PlateIron,
//                Items.None,

//                Items.BareLabel,
//                Items.Tranzistor,
//                Items.Rezistance,
//                Items.Condenser,
//                Items.Diode,
//                Items.Bulb,
//                Items.ItemBattery,
//                Items.Motor,
//                Items.Circuit,
//                Items.BigCircuit,
//                Items.None,

//                Items.MudIngot,
//                Items.Rubber,
//                Items.Plastic,
//                Items.Ash,
//                Items.CoalWood,
//                Items.Yarn,
//                Items.Cloth,
//                Items.Rope,
//                Items.Nail,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip-2)/13+1)*13-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=((i+skip)/13+1)*13+4;
//        }

//        void SetInvCreativeBack() {
//            Items[] items ={
//                Items.BackSandstone,
//                Items.BackSchist,
//                Items.BackBasalt,
//                Items.BackDiorit,
//                Items.BackDolomite,
//                Items.BackGabbro,
//                Items.BackGneiss,
//                Items.BackLimestone,
//                Items.BackRhyolite,
//                Items.BackFlint,
//                Items.BackAnorthosite,
//                Items.BackMudstone,
//                Items.None,

//                Items.BackCoal,
//                Items.BackCopper,
//                Items.BackTin,
//                Items.BackIron,
//                Items.BackAluminium,
//                Items.BackSilver,
//                Items.BackGold,
//                Items.None,

//                Items.AdvancedSpaceBack,
//                Items.BackClay,
//                Items.BackCobblestone,
//                Items.BackSand,
//                Items.BackRegolite,
//                Items.BackDirt,
//                Items.None,

//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip-3)/13+1)*13-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=i+skip+3;
//        }

//        void SetInvCreativeOther() {
//            Items[] items ={
//                Items.Rabbit,
//                Items.Chicken,
//                Items.Fish,
//                Items.None,
//            };

//            for (int j = 5; j<100; j++) Inventory[j].X=0;

//            int skip = 1;
//            int i;
//            for (i=0; i<items.Length; i++) {
//                if (Items.None==items[i]) skip=(int)((i+skip-2)/13+1)*13-i;
//                else {
//                    Inventory[i+skip+4].Y=99;
//                    Inventory[i+skip+4].X=(int)items[i];
//                }
//            }
//            maxInvCount=((i+skip)/13+1)*13+4;
//        }

//        // bake
//        void SetInvBakeTools() {
//            inventoryScrollbarValueCraftingMax=4;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            //non electric
//            Crafting[0].X=(int)Items.IronHeadAxe;
//            Crafting[1].X=(int)Items.IronHeadPickaxe;
//            Crafting[2].X=(int)Items.IronHeadShovel;

//            Crafting[3].X=(int)Items.Bottle;
//            Crafting[4].X=(int)Items.TorchON;
//        }

//        void SetInvBakeIngots() {
//            inventoryScrollbarValueCraftingMax=11;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.CopperIngot;
//            Crafting[1].X=(int)Items.TinIngot;
//            Crafting[2].X=(int)Items.BronzeIngot;
//            Crafting[3].X=(int)Items.GoldIngot;
//            Crafting[4].X=(int)Items.SilverIngot;
//            Crafting[5].X=(int)Items.IronIngot;
//            Crafting[6].X=(int)Items.AluminiumIngot;

//            Crafting[7].X=(int)Items.PlateCopper;
//            Crafting[8].X=(int)Items.PlateBronze;
//            Crafting[9].X=(int)Items.PlateGold;
//            Crafting[10].X=(int)Items.PlateIron;
//            Crafting[11].X=(int)Items.plateAluminium;
//        }

//        void SetInvBakeItems() {
//            inventoryScrollbarValueCraftingMax=6;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Glass;
//            Crafting[1].X=(int)Items.CoalWood;
//            Crafting[2].X=(int)Items.Ash;

//            Crafting[3].X=(int)Items.BareLabel;
//            Crafting[4].X=(int)Items.Rubber;
//            Crafting[5].X=(int)Items.Plastic;
//        }

//        void SetInvBakeFood() {
//            inventoryScrollbarValueCraftingMax=3;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.FishMeatCooked;

//            Crafting[1].X=(int)Items.RabbtCookedMeat;

//            Crafting[2].X=(int)Items.BowlWithMushrooms;
//            Crafting[3].X=(int)Items.BowlWithVegetables;
//        }

//        void SetInvBakeCeramics() {
//            inventoryScrollbarValueCraftingMax=0;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.OneBrick;
//        }

//        // toDust
//        void SetInvToDustDusts() {
//            inventoryScrollbarValueCraftingMax=8;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.CopperDust;
//            Crafting[1].X=(int)Items.TinDust;
//            Crafting[2].X=(int)Items.BronzeDust;
//            Crafting[3].X=(int)Items.IronDust;
//            Crafting[4].X=(int)Items.AluminiumDust;
//            Crafting[5].X=(int)Items.SilverDust;
//            Crafting[6].X=(int)Items.GoldDust;

//            Crafting[7].X=(int)Items.WoodDust;
//            Crafting[8].X=(int)Items.CoalDust;
//        }

//        void SetInvToDustTools() {
//            inventoryScrollbarValueCraftingMax=3;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.IronHeadAxe;
//            Crafting[1].X=(int)Items.IronHeadPickaxe;
//            Crafting[2].X=(int)Items.IronHeadShovel;

//            Crafting[3].X=(int)Items.StoneHead;
//        }

//        void SetInvToDustStone() {
//            inventoryScrollbarValueCraftingMax=4;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Cobblestone;
//            Crafting[1].X=(int)Items.MediumStone;
//            Crafting[2].X=(int)Items.SmallStone;
//            Crafting[3].X=(int)Items.Gravel;
//            Crafting[4].X=(int)Items.Sand;
//        }

//        void SetInvToDustNature() {
//            inventoryScrollbarValueCraftingMax=4;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Seeds;
//            Crafting[1].X=(int)Items.WheatSeeds;
//            Crafting[2].X=(int)Items.FlaxSeeds;

//            Crafting[3].X=(int)Items.Leave;
//            Crafting[4].X=(int)Items.Stick;
//        }

//        void SetInvToDustOther() {
//            inventoryScrollbarValueCraftingMax=6;
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i]=new DInt(0, 0);
//            for (int i = 0; i<inventoryScrollbarValueCraftingMax; i++) Crafting[i].Y=1;

//            Crafting[0].X=(int)Items.Dirt;
//            Crafting[1].X=(int)Items.Yarn;
//            Crafting[2].X=(int)Items.Hay;
//            Crafting[3].X=(int)Items.BucketWater;
//            Crafting[4].X=(int)Items.Cloth;
//            Crafting[5].X=(int)Items.Label;
//            Crafting[6].X=(int)Items.BareLabel;
//        }

//        bool MinerAddItem(int index, MashineBlockBasic miner) {
//            if (index>(int)Items._NonStacktable) {
//                for (int i = 0; i<miner.Inv.Count; i++) {
//                    if (miner.Inv[i].X==index) {
//                        if (miner.Inv[i].Y<99) {
//                            miner.Inv[i].Y++;
//                            return true;
//                        }
//                    }
//                }
//            }

//            for (int i = 0; i<miner.Inv.Count; i++) {
//                if (miner.Inv[i].X==0) {
//                    miner.Inv[i].X=index;
//                    miner.Inv[i].Y=1;
//                    return true;
//                }
//            }
//            return false;
//        }

//        void ChangeInventoryMiner() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    if (Global.WorldDifficulty!=2) {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // box
//                    {
//                        int i = 0;
//                        for (int y = 0; y<2*40; y+=40) {
//                            for (int x = 0; x<12*40; x+=40) {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40) {
//                                    invMove=true;
//                                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                    leftMove=true;
//                                }
//                                i++;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+53+y&&newMouseState.Y<Global.WindowHeightHalf+53+y+40) {
//                                        invMove=true;
//                                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
//                                        leftMove=false;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                        InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }
//                    } else {

//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Shelf
//                            {
//                                int i = 0;
//                                for (int y = 0; y<2*40; y+=40) {
//                                    for (int x = 0; x<12*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {
//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Shelf
//                        {
//                            int i = 0;
//                            for (int y = 0; y<2*40; y+=40) {
//                                for (int x = 0; x<12*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                        InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            // box
//                            {
//                                int i = 0;
//                                for (int y = 0; y<2*40; y+=40) {
//                                    for (int x = 0; x<12*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
//                                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
//                                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                }
//            }
//        }

//        void ChangeInventoryCharger() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    if (Global.WorldDifficulty!=2) {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                            if (i>maxInvCount) break;

//                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // Charger
//                    if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40) {
//                        invMove=true;
//                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
//                        leftMove=true;
//                    }
//                } else {
//                    if (mouseRightPress) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Charger
//                        if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40) {
//                            invMove=true;
//                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
//                            leftMove=false;
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Charger
//                        if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
//                            InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
//                    } else {

//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Charger
//                            if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
//                                InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                if (i>maxInvCount) break;

//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Charger
//                        if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
//                            InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                                    if (i>maxInvCount) break;

//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Charger
//                            if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
//                                &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
//                                InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
//                        } else mouseDraw=true;
//                    }
//                }
//            }
//        }


//        void SetUpInvToNew() {
//            //Need.Clear();
//            //lastMashineType=inventory;
//            if (lastMashineType!=inventory) {
//                switch (inventory) {
//                    case InventoryType.BasicInv:
//                        SetInvCraftingBlocks();
//                        break;

//                    case InventoryType.Desk:
//                        SetInvCraftingBlocksA();
//                        break;

//                    case InventoryType.FurnaceStone:
//                        SetInvBakeIngots();
//                        break;

//                    case InventoryType.FurnaceElectric:
//                        SetInvBakeIngots();
//                        break;

//                    case InventoryType.Macerator:
//                        SetInvToDustDusts();
//                        break;

//                    case InventoryType.SewingMachine:
//                        SetInvClothesHead();
//                        break;
//                }
//            }
//            CurrentDeskCrafting=null;
//            //Need.Clear();
//            SelectedCraftingRecipe=-1;
//            lastMashineType=inventory;
//        }

//        void SelectItemToDust() {
//            if (mouseLeftRelease) {
//                int xx = 0, yh = 0;

//                for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                    if (i>inventoryScrollbarValueCraftingMax) break;

//                    if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

//                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx) {
//                        //    if (newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40) {
//                        //        if (newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8) {
//                        //            if (newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
//                        selectedCraftingItem=i;
//                        //craftingType=0;
//                        SelectedCraftingRecipe=0;
//                        //            DListInt[]x=GameMethods.ToDust(Crafting[selectedCraftingItem].X);
//                        //            if (x!=null) Need=x[craftingType].List1;

//                        //               selectedCraftingItem=i;
//                        //craftingType=0;
//                        DInt itemToCraft = Crafting[i];

//                        CurrentDeskCrafting=GameMethods.NewToDust(itemToCraft.X);

//                        //CurrentDeskCraftingSelected=0;
//                        SetNeed();
//                        return;
//                        //   }
//                        //}
//                        //}
//                    }

//                    xx+=40;

//                    if (xx==6*40) {
//                        xx=0;
//                        yh+=40;
//                    }
//                }
//            }
//        }
//        void SelectItemCraft() {
//            if (mouseLeftRelease) {
//                int xx = 0, yh = 0;

//                for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                    if (i>inventoryScrollbarValueCraftingMax) break;

//                    if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

//                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

//                        selectedCraftingItem=i;
//                        //craftingType=0;
//                        DInt itemToCraft = Crafting[i];

//                        CurrentDeskCrafting=GameMethods.NewCraft(itemToCraft.X);
//                        SelectedCraftingRecipe=0;
//                        SetNeed();
//                        // selectedCraftingItem=0;
//                        //  DListInt[]x = GameMethods.Craft(Crafting[selectedCraftingItem].X);
//                        // if (x!=null) Need = x[craftingType].List1;
//                        return;
//                    }
//                    xx+=40;

//                    if (xx==6*40) {
//                        xx=0;
//                        yh+=40;
//                    }
//                }
//            }
//        }
//        void SelectItemBake() {
//            if (mouseLeftRelease) {
//                int xx = 0, yh = 0;

//                for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                    if (i>inventoryScrollbarValueCraftingMax) break;

//                    if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

//                        selectedCraftingItem=i;
//                        //craftingType=0;
//                        DInt itemToCraft = Crafting[i];

//                        CurrentDeskCrafting=GameMethods.NewBake(itemToCraft.X);
//                        SelectedCraftingRecipe=0;
//                        SetNeed();
//                        ///CurrentDeskCraftingSelected=0;
//                        return;
//                    }
//                    xx+=40;

//                    if (xx==6*40) {
//                        xx=0;
//                        yh+=40;
//                    }
//                }
//            }
//        }

//        void SelectItemClothes() {
//            if (mouseLeftRelease) {
//                int xx = 0, yh = 0;

//                for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//                    if (i>inventoryScrollbarValueCraftingMax) break;

//                    if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
//                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

//                        selectedCraftingItem=i;
//                        //craftingType=0;

//                        DInt itemToCraft = Crafting[i];
//                        SelectedCraftingRecipe=0;
//                        CurrentDeskCrafting=GameMethods.NewClothes(itemToCraft.X);
//                        SetNeed();
//                        //CurrentDeskCraftingSelected=0;
//                        return;
//                    }
//                    xx+=40;

//                    if (xx==6*40) {
//                        xx=0;
//                        yh+=40;
//                    }
//                }
//            }
//        }

//        void InventoryRemoveDInt(int inventory) {
//            DInt i = Inventory[inventory];
//            i.Y--;

//            if (i.Y==0) {
//                i.X=0;
//                return;
//            }

//            if (i.Y==1) {
//                if (i.X<(int)Items._SystemMaxTools) {
//                    Items newId = GameMethods.ToolToBasic((Items)i.X);
//                    if (newId!=Items.None) i.X=(int)newId;
//                }
//            }
//        }

//        void InventoryRemoveDInt() {
//            DInt i = Inventory[boxSelected];
//            i.Y--;

//            if (i.Y==0) {
//                i.X=0;
//                return;
//            }

//            if (i.Y==1) {
//                if (i.X<(int)Items._SystemMaxTools) {
//                    Items newId = GameMethods.ToolToBasic((Items)i.X);
//                    if (newId!=Items.None) i.X=(int)newId;
//                }
//            }
//        }

//        void InventoryRemoveDInt(DInt i) {
//            i.Y--;
//            if (i.Y==0) {
//                i.X=0;
//                return;
//            }

//            if (i.Y==1) {
//                if (i.X<(int)Items._SystemMaxTools) {
//                    Items newId = GameMethods.ToolToBasic((Items)i.X);
//                    if (newId!=Items.None) i.X=(int)newId;
//                }
//            }
//        }

//        int TotalItemsInInventory(int id) {
//            int inInv = 0;
//            foreach (DInt ii in Inventory) {
//                if (id==ii.X) inInv+=ii.Y;
//            }
//            return inInv;
//        }

//        #endregion

//        void ChangeInventoryClothes() {
//            // Move from ...
//            if (!invMove) {
//                mouseDraw=false;
//                if (mouseLeftPress) {

//                    // Basic right inventory
//                    for (int i = 0; i<5; i++) {
//                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                            invMove=true;
//                            invStartDInt=Inventory[i];
//                            leftMove=true;
//                        }
//                    }

//                    // Inventory
//                    if (Global.WorldDifficulty!=2) {
//                        int xx = 0;
//                        int yh = 0;
//                        for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                            if (i>maxInvCount) break;
//                            if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh)) {
//                                //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=true;
//                            }

//                            xx+=40;
//                            if (xx==9*40) {
//                                xx=0;
//                                yh+=40;
//                            }
//                        }
//                    }

//                    // Clothes
//                    {
//                        int i = 0;
//                        for (int y = 0; y<4*40; y+=40) {
//                            for (int x = 0; x<2*40; x+=40) {
//                                if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                    invMove=true;
//                                    invStartDInt=InventoryClothes[i];
//                                    leftMove=true;
//                                }
//                                i++;
//                            }
//                        }
//                    }
//                } else {
//                    if (mouseRightPress) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
//                                invMove=true;
//                                invStartDInt=Inventory[i];
//                                leftMove=false;
//                            }
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                                if (i>maxInvCount) break;
//                                if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh)) {
//                                    //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
//                                    invMove=true;
//                                    invStartDInt=Inventory[i];
//                                    leftMove=false;
//                                }

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }

//                        // Clothes
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<2*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                     &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                        invMove=true;
//                                        invStartDInt=InventoryClothes[i];
//                                        leftMove=false;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else {

//                //When chenge and moving ...
//                if (leftMove) {
//                    if (mouseRightRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveOne(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                                if (i>maxInvCount) break;
//                                if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
//                                    //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveOne(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        // Clothes
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<2*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                     &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                        InvMoveOne(invStartDInt, InventoryClothes[i]);
//                                    }
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {

//                        if (mouseLeftRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                                    if (i>maxInvCount) break;
//                                    if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
//                                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }

//                            // Clothes
//                            {
//                                int i = 0;
//                                for (int y = 0; y<4*40; y+=40) {
//                                    for (int x = 0; x<2*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                         &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                            InvMove(invStartDInt, InventoryClothes[i]);
//                                        }
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                } else {
//                    if (mouseLeftRelease) {

//                        // Basic right inventory
//                        for (int i = 0; i<5; i++) {
//                            if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                            &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                InvMoveDouble(invStartDInt, Inventory[i]);
//                        }

//                        // Inventory
//                        if (Global.WorldDifficulty!=2) {
//                            int xx = 0;
//                            int yh = 0;
//                            for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                                if (i>maxInvCount) break;
//                                if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
//                                    //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                    //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                    InvMoveDouble(invStartDInt, Inventory[i]);

//                                xx+=40;
//                                if (xx==9*40) {
//                                    xx=0;
//                                    yh+=40;
//                                }
//                            }
//                        }
//                        // Clothes
//                        {
//                            int i = 0;
//                            for (int y = 0; y<4*40; y+=40) {
//                                for (int x = 0; x<2*40; x+=40) {
//                                    if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                        InvMoveDouble(invStartDInt, InventoryClothes[i]);
//                                    }
//                                    i++;
//                                }
//                            }
//                        }

//                    } else {
//                        if (mouseRightRelease) {
//                            // Basic right inventory
//                            for (int i = 0; i<5; i++) {
//                                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
//                                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
//                                    InvMove(invStartDInt, Inventory[i]);
//                            }

//                            // Inventory
//                            if (Global.WorldDifficulty!=2) {
//                                int xx = 0;
//                                int yh = 0;
//                                for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
//                                    if (i>maxInvCount) break;
//                                    if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
//                                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
//                                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
//                                        InvMove(invStartDInt, Inventory[i]);

//                                    xx+=40;
//                                    if (xx==9*40) {
//                                        xx=0;
//                                        yh+=40;
//                                    }
//                                }
//                            }
//                            // Clothes
//                            {
//                                int i = 0;
//                                for (int y = 0; y<4*40; y+=40) {
//                                    for (int x = 0; x<2*40; x+=40) {
//                                        if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
//                                       &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
//                                            InvMoveOne(invStartDInt, InventoryClothes[i]);
//                                        }
//                                        i++;
//                                    }
//                                }
//                            }
//                        } else mouseDraw=true;
//                    }
//                }
//            }
//        }

//        bool In40(int x, int y) {
//            if (mouseRealPos.Y<y) return false;
//            if (mouseRealPos.X<x) return false;
//            if (mouseRealPos.X>x+39) return false;
//            if (mouseRealPos.Y>y+39) return false;
//            return true;
//        }

//        bool In(int x, int y, int w, int h) {
//            if (mouseRealPos.Y<y) return false;
//            if (mouseRealPos.X<x) return false;
//            if (mouseRealPos.X>w) return false;
//            if (mouseRealPos.Y>h) return false;
//            return true;
//        }

//        void CraftingEventsCraft() {

//            if (buttonCraft1x.Click) { MakeCrafting(1); return; }

//            if (buttonCraft10x.Click) { MakeCrafting(10); return; }

//            if (buttonCraft100x.Click) { MakeCrafting(100); return; }
//        }

//        void CraftingEvents() {


//            if (SelectedCraftingRecipe!=-1) {
//                if (CurrentDeskCrafting==null) throw new Exception("Pravděpodobně chybí recept - doplň v GameMethods");
//                CraftingIn[] slots = CurrentDeskCrafting[SelectedCraftingRecipe].Input;
//                if (CurrentDeskCrafting!=null) {
//                    if (CurrentDeskCrafting.Length!=1) {
//                        // CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;

//                        if (buttonNext.Click) {
//                            SelectedCraftingRecipe++;
//                            if (SelectedCraftingRecipe==CurrentDeskCrafting.Length) SelectedCraftingRecipe=0;
//                            SetNeed();
//                        }

//                        if (buttonPrev.Click) {
//                            SelectedCraftingRecipe--;
//                            if (SelectedCraftingRecipe==-1) SelectedCraftingRecipe=CurrentDeskCrafting.Length-1;
//                            SetNeed();
//                        }
//                    }
//                }



//                int i = 0;
//                for (int y = 0; y<2; y++) {
//                    for (int x = 0; x<6; x++) {
//                        if (slots.Length==i) break;
//                        CraftingIn slot = slots[i];
//                        DInt[] item = slot.ItemSlot;
//                        if (item.Length>1) {
//                            if (mouseLeftDown) {
//                                //    Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40

//                                if (In40(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8)) {

//                                    //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+80+40+8+x*40
//                                    //&&  newMouseState.Y>y*40+Global.WindowHeightHalf-200+2+4+200+8+8
//                                    //&&  newMouseState.X<  Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40
//                                    //&&  newMouseState.Y<y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40) {
//                                    displayPopUpWindow=true;
//                                    PopUpWindowChoosingPotencialdItem=i;
//                                    PopUpWindowSelectedItem=-1;
//                                }
//                            }
//                        }
//                        i++;
//                    }
//                }
//            }
//        }

//        void MakeCrafting(int c) {
//            if (CanCraft(c)) {
//                for (int g = 0; g<c; g++) {
//                    CraftingIn[] slots = CurrentDeskCrafting[selectedCraftingItem].Input;

//                    foreach (CraftingIn d in slots) {
//                        if (d.SelectedItem==-1) return;
//                    }

//                    foreach (CraftingIn d in slots) {
//                        DInt item = d.ItemSlot[d.SelectedItem];

//                        int count = item.Y;
//                        for (int i = 0; i<maxInvCount; i++) {
//                            if (Inventory[i].X==item.X) {
//                                if (Inventory[i].Y>count) {
//                                    Inventory[i].Y-=count;
//                                    break;
//                                } else {
//                                    count-=Inventory[i].Y;
//                                    if (item.X>(int)Items._SystemMaxTools) {
//                                        Inventory[i].X=0;
//                                        Inventory[i].Y=0;
//                                    } else {
//                                        Items expec = GameMethods.ToolToBasic((Items)Inventory[i].X);
//                                        if (expec==Items.None) {
//                                            Inventory[i].X=0;
//                                            Inventory[i].Y=0;
//                                        } else {
//                                            Inventory[i].Y=1;
//                                            Inventory[i].X=(int)expec;
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }

//                    foreach (CraftingOut d in CurrentDeskCrafting[selectedCraftingItem].Output) {
//                        if (d.EveryTime) ItemDrop(d.Item.X, d.Item.Y, PlayerX-11, PlayerY-16);
//                        else ItemDrop(d.Item.X, random.Next(d.ChanceMin, d.ChanceMax), PlayerX-11, PlayerY-16);
//                    }
//                }
//            }
//            SetNeed();
//        }

//        void SetNeed() {
//            if (SelectedCraftingRecipe==-1) return;
//            if (CurrentDeskCrafting==null) return;
//            CraftingIn[] slots = CurrentDeskCrafting[SelectedCraftingRecipe].Input;

//            int i = 0;
//            for (int y = 0; y<2; y++) {
//                for (int x = 0; x<6; x++) {
//                    if (slots.Length==i) break;
//                    CraftingIn slot = slots[i];
//                    DInt[] item = slot.ItemSlot;

//                    if (slot.SelectedItem==-1) {
//                        slot.TmpSelected=random.Next(item.Length);
//                        slot.Texture=ItemIdToTexture(item[slot.TmpSelected].X);
//                    } else {
//                        DInt selectedSlot = item[slot.SelectedItem];
//                        if (item.Length==1) {
//                            slot.Texture=ItemIdToTexture(item[0].X);
//                            slot.HaveItemInInventory=TotalItemsInInventory(slot.ItemSlot[0].X)>=slot.ItemSlot[0].Y;
//                        } else {
//                            slot.Texture=ItemIdToTexture(item[slot.SelectedItem].X);
//                        }


//                    }

//                    i++;


//                }
//            }
//        }

//        void SetPlayerClothes() {
//            switch (InventoryClothes[0].X) {
//                case (int)Items.Cap:
//                    TextureWalkingClothesHead=TextureWalkingCap;
//                    TextureStaticClothesHead=TextureStaticCap;
//                    break;

//                case (int)Items.Hat:
//                    TextureWalkingClothesHead=TextureWalkingHad;
//                    TextureStaticClothesHead=TextureStaticHad;
//                    break;

//                case (int)Items.Crown:
//                    TextureWalkingClothesHead=TextureWalkingCrown;
//                    TextureStaticClothesHead=TextureStaticCrown;
//                    break;

//                case (int)Items.SpaceHelmet:
//                    TextureWalkingClothesHead=TextureWalkingSpaceHelmet;
//                    TextureStaticClothesHead=TextureStaticSpaceHelmet;
//                    break;

//                default:
//                    TextureWalkingClothesHead=null;
//                    TextureStaticClothesHead=null;
//                    break;
//            }

//            switch (InventoryClothes[1].X) {
//                case (int)Items.CoatArmy:
//                    TextureWalkingClothesChestTop=TextureWalkingCoatArmy;
//                    TextureStaticClothesChestTop=TextureStaticCoatArmy;
//                    TextureSwimmingClothesChestTop=TextureSwimmingCoatArmy;
//                    break;

//                case (int)Items.CoatGray:
//                    TextureWalkingClothesChestTop=TextureWalkingCoatGray;
//                    TextureStaticClothesChestTop=TextureStaticCoatGray;
//                    TextureSwimmingClothesChestTop=TextureSwimmingCoatGray;
//                    break;

//                case (int)Items.JacketDenim:
//                    TextureWalkingClothesChestTop=TextureWalkingJacketDenim;
//                    TextureStaticClothesChestTop=TextureStaticJacketDenim;
//                    TextureSwimmingClothesChestTop=TextureSwimmingJacketDenim;
//                    break;

//                case (int)Items.JacketFormal:
//                    TextureWalkingClothesChestTop=TextureWalkingJacketFormal;
//                    TextureStaticClothesChestTop=TextureStaticJacketFormal;
//                    TextureSwimmingClothesChestTop=TextureSwimmingJacketFormal;
//                    break;

//                case (int)Items.JacketRed:
//                    TextureWalkingClothesChestTop=TextureWalkingJacketRed;
//                    TextureStaticClothesChestTop=TextureStaticJacketRed;
//                    TextureSwimmingClothesChestTop=TextureSwimmingJacketRed;
//                    break;

//                case (int)Items.JacketShort:
//                    TextureWalkingClothesChestTop=TextureWalkingJacketShort;
//                    TextureStaticClothesChestTop=TextureStaticJacketShort;
//                    TextureSwimmingClothesChestTop=TextureSwimmingJacketShort;
//                    break;

//                case (int)Items.SpaceSuit:
//                    TextureWalkingClothesChestTop=TextureWalkingSpaceSuit;
//                    TextureStaticClothesChestTop=TextureStaticSpaceSuit;
//                    TextureSwimmingClothesChestTop=TextureSwimmingSpaceSuit;
//                    break;

//                default:
//                    TextureWalkingClothesChestTop=null;
//                    TextureStaticClothesChestTop=null;
//                    TextureSwimmingClothesChestTop=null;
//                    break;
//            }

//            switch (InventoryClothes[2].X) {
//                case (int)Items.BlueDress:
//                    TextureWalkingClothesChest=TextureWalkingBlueDress;
//                    TextureStaticClothesChest=TextureStaticBlueDress;
//                    TextureSwimmingClothesChest=TextureSwimmingBlueDress;
//                    break;

//                case (int)Items.GreenTShirt:
//                    TextureWalkingClothesChest=TextureWalkingGreenTShirt;
//                    TextureStaticClothesChest=TextureStaticGreenTShirt;
//                    TextureSwimmingClothesChest=TextureSwimmingGreenTShirt;
//                    break;

//                case (int)Items.LightBlueTShirt:
//                    TextureWalkingClothesChest=TextureWalkingLightBlueTShirt;
//                    TextureStaticClothesChest=TextureStaticLightBlueTShirt;
//                    TextureSwimmingClothesChest=TextureSwimmingLightBlueTShirt;
//                    break;

//                case (int)Items.Shirt:
//                    TextureWalkingClothesChest=TextureWalkingShirt;
//                    TextureStaticClothesChest=TextureStaticShirt;
//                    TextureSwimmingClothesChest=TextureSwimmingShirt;
//                    break;

//                case (int)Items.WhiteDress:
//                    TextureWalkingClothesChest=TextureWalkingWhiteDress;
//                    TextureStaticClothesChest=TextureStaticWhiteDress;
//                    TextureSwimmingClothesChest=TextureSwimmingWhiteDress;
//                    break;

//                default:
//                    TextureWalkingClothesChest=null;
//                    TextureStaticClothesChest=null;
//                    TextureSwimmingClothesChest=null;
//                    break;
//            }

//            switch (InventoryClothes[3].X) {
//                case (int)Items.TopBlackBikini:
//                    TextureWalkingClothesUpUnderwear=TextureWalkingTopBlackBikini;
//                    TextureStaticClothesUpUnderwear=TextureStaticTopBlackBikini;
//                    TextureSwimmingClothesUpUnderwear=TextureSwimmingTopBlackBikini;
//                    break;

//                case (int)Items.TopBlueBikini:
//                    TextureWalkingClothesUpUnderwear=TextureWalkingTopBlueBikini;
//                    TextureStaticClothesUpUnderwear=TextureStaticTopBlueBikini;
//                    TextureSwimmingClothesUpUnderwear=TextureSwimmingTopBlueBikini;
//                    break;

//                case (int)Items.GrayBra:
//                    TextureWalkingClothesUpUnderwear=TextureWalkingGrayBra;
//                    TextureStaticClothesUpUnderwear=TextureStaticGrayBra;
//                    TextureSwimmingClothesUpUnderwear=TextureSwimmingGrayBra;
//                    break;

//                case (int)Items.PurpleBra:
//                    TextureWalkingClothesUpUnderwear=TextureWalkingPurpleBra;
//                    TextureStaticClothesUpUnderwear=TextureStaticPurpleBra;
//                    TextureSwimmingClothesUpUnderwear=TextureSwimmingPurpleBra;
//                    break;

//                case (int)Items.RedBra:
//                    TextureWalkingClothesUpUnderwear=TextureWalkingRedBra;
//                    TextureStaticClothesUpUnderwear=TextureStaticRedBra;
//                    TextureSwimmingClothesUpUnderwear=TextureSwimmingRedBra;
//                    break;

//                default:
//                    TextureWalkingClothesUpUnderwear=null;
//                    TextureStaticClothesUpUnderwear=null;
//                    TextureSwimmingClothesUpUnderwear=null;
//                    break;
//            }

//            switch (InventoryClothes[4].X) {
//                case (int)Items.ArmyTrousers:
//                    TextureWalkingClothesLegs=TextureWalkingArmyTrousers;
//                    TextureStaticClothesLegs=TextureStaticArmyTrousers;
//                    TextureSwimmingClothesLegs=TextureSwimmingArmyTrousers;
//                    break;

//                case (int)Items.BlackSkirt:
//                    TextureWalkingClothesLegs=TextureWalkingBlackSkirt;
//                    TextureStaticClothesLegs=TextureStaticBlackSkirt;
//                    TextureSwimmingClothesLegs=TextureSwimmingBlackSkirt;
//                    break;

//                case (int)Items.Jeans:
//                    TextureWalkingClothesLegs=TextureWalkingJeans;
//                    TextureStaticClothesLegs=TextureStaticJeans;
//                    TextureSwimmingClothesLegs=TextureSwimmingJeans;
//                    break;

//                case (int)Items.PinkSkirt:
//                    TextureWalkingClothesLegs=TextureWalkingPinkSkirt;
//                    TextureStaticClothesLegs=TextureStaticPinkSkirt;
//                    TextureSwimmingClothesLegs=TextureSwimmingPinkSkirt;
//                    break;

//                case (int)Items.Shorts:
//                    TextureWalkingClothesLegs=TextureWalkingShorts;
//                    TextureStaticClothesLegs=TextureStaticShorts;
//                    TextureSwimmingClothesLegs=TextureSwimmingShorts;
//                    break;

//                case (int)Items.SpaceTrousers:
//                    TextureWalkingClothesLegs=TextureWalkingSpaceTrousers;
//                    TextureStaticClothesLegs=TextureStaticSpaceTrousers;
//                    TextureSwimmingClothesLegs=TextureSwimmingSpaceTrousers;
//                    break;

//                default:
//                    TextureWalkingClothesLegs=null;
//                    TextureStaticClothesLegs=null;
//                    TextureSwimmingClothesLegs=null;
//                    break;
//            }

//            switch (InventoryClothes[5].X) {
//                case (int)Items.BlackBikini:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingBlackBikini;
//                    TextureStaticClothesDownUnderwear=TextureStaticBlackBikini;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingBlackBikini;
//                    break;

//                case (int)Items.BlueBikini:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingBlueBikini;
//                    TextureStaticClothesDownUnderwear=TextureStaticBlueBikini;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingBlueBikini;
//                    break;

//                case (int)Items.BlueUnderpants:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingBlueUnderpants;
//                    TextureStaticClothesDownUnderwear=TextureStaticBlueUnderpants;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingBlueUnderpants;
//                    break;

//                case (int)Items.BoxerShorts:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingBoxerShorts;
//                    TextureStaticClothesDownUnderwear=TextureStaticBoxerShorts;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingBoxerShorts;
//                    break;

//                case (int)Items.Shorts:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingShorts;
//                    TextureStaticClothesDownUnderwear=TextureStaticShorts;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingShorts;
//                    break;

//                case (int)Items.GrayUnderpants:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingGrayUnderpants;
//                    TextureStaticClothesDownUnderwear=TextureStaticGrayUnderpants;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingGrayUnderpants;
//                    break;

//                case (int)Items.PantiesLightBlue:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingPantiesLightBlue;
//                    TextureStaticClothesDownUnderwear=TextureStaticPantiesLightBlue;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingPantiesLightBlue;
//                    break;

//                case (int)Items.PantiesRed:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingPantiesRed;
//                    TextureStaticClothesDownUnderwear=TextureStaticPantiesRed;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingPantiesRed;
//                    break;

//                case (int)Items.Swimsuit:
//                    TextureWalkingClothesDownUnderwear=TextureWalkingSwimsuit;
//                    TextureStaticClothesDownUnderwear=TextureStaticSwimsuit;
//                    TextureSwimmingClothesDownUnderwear=TextureSwimmingSwimsuit;
//                    break;

//                default:
//                    TextureWalkingClothesDownUnderwear=null;
//                    TextureStaticClothesDownUnderwear=null;
//                    TextureSwimmingClothesDownUnderwear=null;
//                    break;
//            }

//            switch (InventoryClothes[6].X) {
//                case (int)Items.FormalShoes:
//                    TextureWalkingClothesFeet=TextureWalkingFormalShoes;
//                    TextureStaticClothesFeet=TextureStaticFormalShoes;
//                    TextureSwimmingClothesFeet=TextureSwimmingFormalShoes;
//                    break;

//                case (int)Items.Pumps:
//                    TextureWalkingClothesFeet=TextureWalkingPumps;
//                    TextureStaticClothesFeet=TextureStaticPumps;
//                    TextureSwimmingClothesFeet=TextureSwimmingPumps;
//                    break;

//                case (int)Items.Sneakers:
//                    TextureWalkingClothesFeet=TextureWalkingSneakers;
//                    TextureStaticClothesFeet=TextureStaticSneakers;
//                    TextureSwimmingClothesFeet=TextureSwimmingSneakers;
//                    break;

//                case (int)Items.SpaceBoots:
//                    TextureWalkingClothesFeet=TextureWalkingSpaceBoots;
//                    TextureStaticClothesFeet=TextureStaticSpaceBoots;
//                    TextureSwimmingClothesFeet=TextureSwimmingSpaceBoots;
//                    break;

//                default:
//                    TextureWalkingClothesFeet=null;
//                    TextureStaticClothesFeet=null;
//                    TextureSwimmingClothesFeet=null;
//                    break;
//            }

//            if (InventoryClothes[7].X==(int)Items.Backpack) {
//                maxInvCount=45+49;
//            } else {
//                if (maxInvCount>49) {
//                    for (int i = 49; i<maxInvCount; i++) {
//                        if (Inventory[i].X!=0) {
//                            ItemDrop(Inventory[i].X, Inventory[i].Y, new DInt(PlayerX, PlayerY));
//                            Inventory[i].X=0;
//                            Inventory[i].Y=0;
//                        }
//                    }
//                }
//                maxInvCount=49;
//            }
//        }

//        void InventoryDrawClothes() {
//            int i = 0;
//            for (int y = 0; y<4*40; y+=40) {
//                for (int x = 0; x<2*40; x+=40) {
//                    if (!invMove||(invMove&&invStartDInt!=InventoryClothes[i])) {
//                        Texture2D tex = ItemIdToTexture(InventoryClothes[i].X);
//                        if (tex!=null) GameDraw.DrawItemInInventory(tex, InventoryClothes[i], Global.WindowWidthHalf-300+4+60+x+4, Global.WindowHeightHalf-200+2+4+y+4);
//                    }
//                    i++;
//                }
//            }
//        }

//        void DrawNeedNew() {
//			if (CurrentDeskCrafting==null)return;
//			if (selectedCraftingItem==-1)return;
//			if (SelectedCraftingRecipe==-1)return;
//			spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), ColorWhite);
//			CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;

//			int i = 0;
//			for (int y = 0; y<2; y++) {
//				for (int x = 0; x<6; x++) {
//					if (slots.Length==i) break;

//					CraftingIn slot=slots[i];
//					ItemNonInv[] item=slot.ItemSlot;
//					if (slot.SelectedItem==-1) {
//						if (!slot.HaveItemInInventory)
//							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

//						/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(item[slot.TmpSelected].Id),*/ item[slot.TmpSelected], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);

//						spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16), ColorWhite);
//					}else{
//					  //  ItemNonInv selectedSlot=item[slot.SelectedItem];

//						if (item.Length==1) {
//							if (!slot.HaveItemInInventory)
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

//							if (slot.Texture!=null) /*GameDraw.DrawItemInInventory*/DrawItem(/*slot.Texture,*/ item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//						} else {
//							if (!slot.HaveItemInInventory)
//								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

//							if (slots[i].SelectedItem==-1) {
//								/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(item[slot.TmpSelected].Id),*/ item[slot.TmpSelected], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//							} else {
//								/*GameDraw.DrawItemInInventory*/DrawItem(/*slot.Texture, */item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//							}
//							spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16), ColorWhite);
//						}
//					}

//					i++;
//				}
//			}

//			if (CurrentDeskCrafting.Length!=1) {
//				 buttonPrev.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//				 buttonNext.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//			}

//			if (CanCraft(1)) {
//				buttonCraft1x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

//				if (CanCraft(10)) {
//					buttonCraft10x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

//					if (CanCraft(100)) buttonCraft100x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//					else buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//				} else {
//					buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//					buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//				}
//			} else {
//				buttonCraft1x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//				buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//				buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
//			}
//		}

//        void DrawChooseItemWindow() {
//            spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), color_r0_g0_b0_a100);

//            DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-134, 304, 234+2, 1, color_r0_g0_b0_a100);
//            DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-133, 302, 234, 1, color_r0_g0_b0_a200);
//            spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-132, 300, 34), color_r10_g140_b255);
//            spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-100+2, 300, 200-2), Color.LightBlue);

//            buttonClosePopUp.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+150-32, Global.WindowHeightHalf-132+1, mouseLeftDown);

//            GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-150-2+10, Global.WindowHeightHalf-134+10, Lang.Texts[160]/* Setting.czechLanguage ? "Vyberte si item":"Choose some item"*/);

//            CraftingIn[] slots = CurrentDeskCrafting[SelectedCraftingRecipe].Input;
//            DInt[] items = slots[PopUpWindowChoosingPotencialdItem].ItemSlot;
//            int i = 0;

//            for (int y = 0; y<4; y++) {
//                for (int x = 0; x<7; x++) {

//                    if (items.Length==i) break;
//                    bool hasItem = TotalItemsInInventory(items[i].X)>=items[i].Y;
//                    if (In40(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20)) {
//                        if (mouseLeftDown) {
//                            displayPopUpWindow=false;
//                            PopUpWindowSelectedItem=i;
//                            slots[PopUpWindowChoosingPotencialdItem].SelectedItem=slots[PopUpWindowChoosingPotencialdItem].TmpSelected=i;
//                            slots[PopUpWindowChoosingPotencialdItem].Texture=ItemIdToTexture(items[i].X);
//                            slots[PopUpWindowChoosingPotencialdItem].HaveItemInInventory=hasItem;
//                            return;
//                        }
//                        if (hasItem) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.DarkGray);
//                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.Red);
//                    } else {
//                        if (hasItem) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.White);
//                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), new Color(255, 150, 150));
//                    }

//                    GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);

//                    i++;
//                }
//            }

//            //i=0;
//            //for (int y=0; y<4; y++) {
//            //    for (int x=0; x<7; x++) {

//            //        GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);
//            //        i++;
//            //    }
//            //}
//            //   buttonOK.ButtonDraw(spriteBatch,mouseLeftDown,mouseRealPos);

//            //DrawInventoryWithDIntMoving();
//            //InventoryDrawClothes();
//            //#region Crafting
//            //{
//            //    if (inventoryScrollbarValueCraftingMax>6*4) {
//            //        int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
//            //        int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / inventoryScrollbarValueCraftingMax*(160-size2) )*8;
//            //        if (size2>20) {
//            //            spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), Color.White);
//            //            spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
//            //            spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), Color.White);
//            //        } else {
//            //            spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), Color.White);
//            //            spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), Color.White);
//            //        }
//            //    }

//            //    int xx =0;
//            //    int yh=0;

//            //    for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//            //        if (i>inventoryScrollbarValueCraftingMax) break;

//            //        if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//            //        && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

//            //            if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//            //            else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//            //        } else {
//            //            if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//            //            else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
//            //        }

//            //        Texture2D tex=ItemIdToTexture(Crafting[i].X);
//            //        if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//            //        xx+=40;

//            //        if (xx==6*40) {
//            //            xx=0;
//            //            yh+=40;
//            //        }
//            //    }
//            //}
//            //#endregion



//        }

//        void EventsChooseItemWindow() {

//            // i=0;
//            //for (int y=0; y<4; y++) {
//            //    for (int x=0; x<7; x++) {
//            //       if (items.Length==i)break;
//            //        GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);
//            //        i++;
//            //    }
//            //}
//            //int i=0;
//            //for (int x=0; x<7; x++) {
//            //    for (int y=0; y<5; y++) {
//            //        spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x, Global.WindowHeightHalf-100+y+10), Color.White);
//            //        i++;
//            //    }
//            //}
//            //if (newMouseState.X>Global.WindowWidthHalf-140+x*40
//            //                           &&  newMouseState.Y>Global.WindowHeightHalf-60+y*40
//            //                           &&  newMouseState.X<Global.WindowWidthHalf-140+x*40+40
//            //                           &&  newMouseState.Y<Global.WindowHeightHalf-60+y*40+40) {

//            //for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
//            //    if (i>inventoryScrollbarValueCraftingMax) break;

//            //    if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
//            //    && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

//            //        if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
//            //        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
//            //    } else {
//            //        if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
//            //        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
//            //    }

//            //    Texture2D tex=ItemIdToTexture(Crafting[i].X);
//            //    if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
//            //    xx+=40;

//            //    if (xx==6*40) {
//            //        xx=0;
//            //        yh+=40;
//            //    }
//            //}
//            //    }
//        }

//        bool CanCraft(int c) {
//            foreach (CraftingIn n in CurrentDeskCrafting[SelectedCraftingRecipe].Input) {
//                if (n.SelectedItem==-1) return false;
//                DInt item = n.ItemSlot[n.SelectedItem];
//                if (TotalItemsInInventory(item.X)<item.Y*c) return false;
//            }
//            return true;
//        }

//        void SetInvClothesHead() {
//            Items[] itemsToSet = new Items[]{
//                Items.Cap,
//                Items.Crown,
//                Items.Hat,
//                Items.SpaceHelmet,
//            };

//            inventoryScrollbarValueCraftingMax=itemsToSet.Length-1;
//            for (int i = 0; i<=inventoryScrollbarValueCraftingMax; i++) {
//                Crafting[i].X=(int)itemsToSet[i];
//                Crafting[i].Y=1;
//            }
//        }

//        #region Draw inventory

//        void DrawNeed() {
//            spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), Color.White);

//            int i = 0;
//            for (int y = 0; y<2; y++) {
//                for (int x = 0; x<6; x++) {
//                    if (Need.Count==i) break;
//                    Texture2D tex = ItemIdToTexture(Need[i].X);
//                    if (tex!=null) {
//                        if (TotalItemsInInventory(Need[i].X)<Need[i].Y)
//                            spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

//                        GameDraw.DrawItemInInventory(tex, Need[i], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
//                    }
//                    i++;
//                }
//            }
//        }

//        void DrawRightInventoryWithDIntMoving() {
//            for (int i = 0; i<5; i++) {
//                if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
//                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.White);

//                if (Inventory[i].X!=0) {
//                    if (!invMove||(invMove&&invStartDInt!=Inventory[i])) {
//                        Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
//                    }
//                }
//            }
//        }

//        void DrawInventoryNormal() {
//            if (Global.WorldDifficulty==2) return;
//            int xx = 0, yh = 0;

//            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                if (i>maxInvCount) break;
//                spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                if (Inventory[i].X!=0) {
//                    if (!invMove||(invMove&&invStart!=i)) {
//                        Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
//                    }
//                }
//                xx+=40;

//                if (xx==9*40) {
//                    xx=0;
//                    yh+=40;
//                }
//            }
//            if (maxInvCount>45) {
//                int size = (int)(1f/(((int)(maxInvCount/9f)+1)*40/200f)*200);
//                int pos = (int)(inventoryScrollbarValue*9/40f/maxInvCount*(200-size))*4;
//                if (size>20) {
//                    spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
//                    spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
//                    spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), Color.White);
//                } else {
//                    spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
//                    Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), Color.White);
//                }
//            }
//        }

//        void DrawRightInventoryNormal() {
//            for (int i = 0; i<5; i++) {
//                if (boxSelected==i) Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
//                else Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.White);

//                if (Inventory[i].X!=0) {
//                    if (!invMove||(invMove&&invStart!=i)) {
//                        Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
//                    }
//                }
//            }
//        }

//        void DrawInventoryWithDIntMoving() {
//            if (Global.WorldDifficulty==2) return;
//            int xx = 0, yh = 0;
//            for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
//                if (i>maxInvCount) break;
//                Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

//                if (Inventory[i].X!=0) {
//                    if (!invMove||(invMove&&invStartDInt!=Inventory[i])) {
//                        Texture2D tex = ItemIdToTexture(Inventory[i].X);
//                        if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
//                    }
//                }
//                xx+=40;

//                if (xx==9*40) {
//                    xx=0;
//                    yh+=40;
//                }
//            }
//            if (maxInvCount>45) {
//                int size = (int)(1f/(((int)(maxInvCount/9f)+1)*40/200f)*200);
//                int pos = (int)(inventoryScrollbarValue*9/40f/maxInvCount*(200-size))*4;
//                if (size>20) {
//                    Rabcr.spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
//                    Rabcr.spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
//                    Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), Color.White);
//                } else {
//                    Rabcr.spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
//                    Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), Color.White);
//                }
//            }
//        }

//        void CreateGradientTexture() { 
//			TextureSunGradient?.Dispose();

//			int height=Global.WindowHeight;

//			int start=0;
//			Color[] colors=new Color[height];
//			Color ColorBef;

//			for (int p=1; p<Gradient.Count; p++) { 
//				(Color, float) gradientPoint=Gradient[p];
//				int end= (int)(gradientPoint.Item2*height);
				
//				ColorBef=Gradient[p-1].Item1;

//				for (int i=start; i<end; i++) { 
//					colors[i]=FastMath.Lerp(ColorBef, gradientPoint.Item1, (i-start)/(float)(end-start));
//				}

//				start=end;
//			}
//			TextureSunGradient=new Texture2D(Graphics, 1, height);
//			TextureSunGradient.SetData(colors);
//		}

//        #endregion

//        class ParticleMess {
//            public Vector2 Position;
//            public Rectangle Source;
//            public Texture2D Texture;
//            public int Disepeard;

//            public float LimitY;
//            public float HSpeed;
//            public float VSpeed;
//            public Color Color;

//            public void Update() {
//                HSpeed+=gravity*0.5f;
//                Position.Y+=HSpeed;

//                Position.X+=VSpeed;

//                if (Position.Y>=LimitY) Position.Y=LimitY;
//            }

//            public void Draw() => Rabcr.spriteBatch.Draw(Texture, Position, Source, Color*(Disepeard/50f));
//        }

//        class ParticleRain {
//            public Vector2 Position;

//            public float HSpeed;
//            public float VSpeed;
//            public Color Color;

//            public float Size;

//            public ParticleRain(float size, float vSpeed) {
//                Color=Color.Blue*(Size=size);
//                VSpeed=vSpeed*(size*0.5f+0.5f);
//            }

//            public void Update() {
//                Position.X+=HSpeed*Size;
//                Position.Y+=VSpeed;
//            }

//            public void Draw(float x, float y) => Rabcr.spriteBatch.Draw(
//                    texture: Rabcr.Pixel,
//                    destinationRectangle: new Rectangle((int)(Position.X+0.5f+x), (int)(Position.Y+0.5f+y), 1, Size<0.5f ? 2 : 3),
//                    color: Color
//                );
//        }

//        class ParticleSnow {
//            public Vector2 Position;

//            public float HSpeed;
//            public float VSpeed;
//            public Color Color;
//            int time;
//            public float Size;

//            public ParticleSnow(float size, float vSpeed) {
//                Color=Color.White*(Size=size);
//                VSpeed=vSpeed*size;
//            }

//            public void Update() {
//                time++;
//                Position.X+=HSpeed+((float)Math.Cos(time/10f))*0.25f;
//                Position.Y+=VSpeed+((float)Math.Sin(time/10f))*HSpeed*0.5f/*+0.2f*/;
//            }

//            public void Draw(float x, float y) => Rabcr.spriteBatch.Draw(
//                    texture: Rabcr.Pixel,
//                    destinationRectangle: new Rectangle((int)(Position.X+0.5f+x), (int)(Position.Y+0.5f+y), Size>0.5f ? 2 : 1, Size>0.5f ? 2 : 1),
//                    color: Color
//                );

//        }

//        class FallingLeave {
//            public Texture2D texture;
//            public Vector2 Position;
//            public float angle;
//            public float time;
//            Vector2 vecOrigin;
//            public float VSpeed;
//            public Rectangle srcrec;
//            public Color Color = Color.White;
//            public FallingLeave(int x, int y, float size, bool leftWind, bool rain, Rectangle src) {
//                Position=new Vector2(x, y);
//                vecOrigin=new Vector2(size, size);
//                if (rain) {
//                    if (leftWind) VSpeed=-0.01f; else VSpeed=0.01f;
//                } else {
//                    if (leftWind) VSpeed=-0.09f; else VSpeed=0.09f;
//                }
//                srcrec=src;
//            }

//            public void Update() {
//                time+=0.07f;
//                Position.X+=VSpeed;
//                Position.Y+=(float)Math.Cos(time)*0.1f+0.2f;
//                angle=(float)Math.Cos(time)*0.3f+FastMath.PI/2f;
//            }

//            public void Draw() {
//                Rabcr.spriteBatch.Draw(
//                    texture: texture,
//                    destinationRectangle: new Rectangle((int)Position.X, (int)Position.Y, srcrec.Width, srcrec.Height),
//                    sourceRectangle: srcrec,
//                    effects: SpriteEffects.None,
//                    color: Color,
//                    rotation: angle,
//                    origin: vecOrigin,
//                    layerDepth: 1f);
//            }
//        }
//    }
//}