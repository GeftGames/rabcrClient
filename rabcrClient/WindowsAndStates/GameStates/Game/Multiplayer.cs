using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Sockets;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace rabcrClient {
    partial class Multiplayer : Screen {
        int animationInvBack=0;
        #region Multiplayer
   //List<SendedBlockToRemove> sendedBlockToRemove = new List<SendedBlockToRemove>();
   //List<SendedBlockToAdd> sendedBlockToRemove = new List<SendedBlockToRemove>();
    	
        //List<DataToSend> Queue = new List<DataToSend>();
        //const string toServer = "{Server}";
        //const string toEveryone = "{Everyone}";
        //string SomeoneWantTeleportToYouName;

        //Password password;

        //enum LoginType {
        //    Null,

        //    Banned,
        //    BannedWithInfo,

        //    FirstConnectPassword,
        //    FirstConnect,

        //    NotOnWhitelistNoInfo,
        //    NotOnWhitelist,

        //    LoginWithPassword,
        //    BasicLogin,
        //}
        //int state = 0;
        volatile MTerrain[] terrain;
        //  string web;

        //const int downloadingSpawnAreaMax = 53;
        //int downloadedSpawnArea = 0;
        ////  bool cmdWeb;
        //byte[] byteData = new byte[1024];
        //Current current;
        //bool Error = false;
        //int joinedPlayers = 0;
        //Socket clientSocket;
        //string serverName = "";
        //int maxplayers = 10;
        //DateTime tpPlayerTime;
        //string tpPlayerMsgWaiting;
        //int safeSpawn = 0;
        //List<Player> players = new List<Player>();
        ////   bool UseBackColor;
        ////    Color BackColor;
        //// bool UseGedo;
        //GameButtonMedium menu;
        //float Process {
        //    get { return state/496f; }
        //}
        //string sn = "";

        // public string playedWorld = "";


        //  const int hour=3000;
        //const int dayLenght=72000;
        // List<Item> DroppedItems=new List<Item>();
        //#region Mouse & keyboard
        //bool mouseLeftPress;
        //bool mouseLeftRelease;
        //bool mouseLeftDown;

        //bool mouseRightPress;
        //bool mouseRightRelease;
        //bool mouseRightDown;

        //Vector2 mousePos;

        //MouseState newMouseState;
        //MouseState oldMouseState;
        //int previousScrollValue;
        //KeyboardState oldKeyboardState;
        //KeyboardState newKeyboardState;
        //#endregion
        // #region Weather & time (day/night)
        // Rain
        //int rainDuration;
        //int changeRain = 1250;
        //List<DInt> rainDots;
        //bool wind, rain;

        ////Time
        //int day, timeToChageWind, timer5;
        //int time;
        //int _secondTimer=60;

        //// Day / night
        //float dayAlpha;
        //float moonSpeed;
        //#endregion
        //       #region Debug
        //bool debug;
        //  List<Energy> energy;
        //PerformanceCounter cpu;
        //PerformanceCounter ram;
        //PerformanceCounter cpuUsage;
        //PerformanceCounter freeRam;

        //float usageCpuProcess;
        //float usageCpu;
        //float usageRamProcess;
        //float usageRam;

        //bool show;
        //bool showBlocks;
        //#endregion
        //   #region
        //   int inventory =0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf

        //   int inventoryScrollbarValue=0;
        //   int selectedCraftingItem;
        //   int inventoryScrollbarValueCrafting=0;
        //   int inventoryScrollbarValueCraftingMax=0;
        //   int boxSelected;

        //   bool mouseDraw =false;
        //   bool invMove;
        //   int invStart;
        //   DInt invStartDInt;
        //   bool leftMove;
        //   int maxInvCount;

        //   DInt selectedMashine;

        //   GeDo gedo;
        //   List<DInt> Inventory;
        //   List<DInt> Crafting;
        //   List<DInt> Need;

        //   int diserpeard=255;
        //   string text="";

        //   int craftingType;

        ////   string newKey;
        //   bool hold;
        //   int timeHold;
        //   string lastKey;
        // string olderKey;
        // #endregion
        //  #region Bars
        //float barWater = 16;
        //float barEat = 16;
        //readonly float barOxygen=0;
        //float barHeart=16;
        //float barEnergy=0;
        //#endregion
        //  #region Player
        // int PlayerX, PlayerY;

        //  int playerImg;
        //  int playerState;
        //  int distanceToGround=0;
        //  float gravitySpeed=0;
        // #endregion

        //  #region Block destruction
        //DInt destroyBlock;

        //float destroingIndex;
        //float destringMaxIndex;

        //bool destroing;

        //int destroingBlockDepth;
        //byte destroingBlockType;
        //#endregion

        //    #region Varibles
        // RenderTarget2D fogTarget;
        //         #region Inventory

        //        int terrainStartIndexX, terrainStartIndexY, terrainStartIndexW, terrainStartIndexH;

        //      #endregion
        //       //    float itemAnimationPos;
        //      #region Buttons
        //      Button
        //          buttonNext,
        //          buttonPrev,
        //          buttonCraft1x,
        //          buttonCraft10x,
        //          buttonCraft100x;

        //ImgButton

        //          buttonClose,
        //          buttonInvTabBlocks,
        //          buttonInvTabPlants,
        //          buttonInvTabTools,
        //          buttonInvTabMashines,
        //          buttonInvTabItems,
        //          buttonInvTabCeramics,
        //          buttonInvTabFood,
        //          buttonInvTabGlass,
        //          buttonInvTabMaterials;
        //      #endregion

        //      int WindowXWithout;
        //      int WindowYWithout;

        //      int WindowCenterX;
        //      int WindowCenterY;

        //      float WindowXPlayer;
        //      float WindowYPlayer;

        //      int WindowX;
        //      int WindowY;

        //      readonly BlendState Multiply = new BlendState() {
        //          AlphaSourceBlend = Blend.Zero,
        //          AlphaDestinationBlend = Blend.SourceColor,
        //          ColorSourceBlend = Blend.Zero,
        //          ColorDestinationBlend = Blend.SourceColor
        //      };

        // readonly int Zoom16=(int)(16*Setting.Zoom);


        //List<MashineBlockBasic> lightsLamp;
        //  #region Inventory
        //int inventory =0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf

        //int inventoryScrollbarValue=0;
        //int selectedCraftingItem;
        //int inventoryScrollbarValueCrafting=0;
        //int inventoryScrollbarValueCraftingMax=0;
        //int boxSelected;

        //bool mouseDraw =false;
        //bool invMove;
        //int invStart;
        //DInt invStartDInt;
        //bool leftMove;
        //int maxInvCount;

        //DInt selectedMashine;

        //GeDo gedo;
        //List<DInt> Inventory;
        //List<DInt> Crafting;
        //List<DInt> Need;

        //int diserpeard=255;
        //string text="";

        //int craftingType;

        //string newKey;
        //bool hold;
        //int timeHold;
        //string lastKey;
        //string olderKey;
        // #endregion
        //         #region Textures
        //        Texture2D
        //messageLeft,
        //            bottleFullTexture,
        //            boxWoodenTexture,
        //            messageCenter,
        //            messageRight,
        //           // pixel,
        //            lightmap,
        //            jugTexture,
        //            jugWithWaterTexture,
        //            //backDolomiteTexture,
        //            //backBasaltTexture,
        //            //backLimestoneTexture,
        //            //backRhyoliteTexture,
        //            //backGneissTexture,
        //            //backSandstoneTexture,
        //            //backSchistTexture,
        //            //backGabbroTexture,
        //            //backDioritTexture,
        //       //     boxTexture,
        //            flaxSeedsTexture,
        //            fishCookedTexture,
        //            flaxInvTexture,
        //            invStrawberryTexture,
        //            invRashberryTexture,
        //            invBlueberryTexture,
        //            //ItemPlantBlueberryTexture,
        //            shelfTexture,
        //            boxAdvTexture,
        //            nailTexture,
        //            siliciumTexture,
        //            //Player
        //	        playerTexture,
        //            playerLeftTexture,
        //            playerRightTexture,

        //            //Items
        //            condenserTexture,
        //            diodeTexture,
        //            tranzistorTexture,
        //            resistanceTexture,
        //            motorTexture,
        //            bareLabelTexture,

        //            //Blocks
        //            roof1Texture,
        //            roof2Texture,
        //            scrollbarUpTexture,
        //            scrollbarBetweenTexture,
        //            scrollbarDownTexture,
        //            // Inventories
        //            inventoryNeedTexture,
        //            //inventoryChooseTexture,
        //            //inventoryCreativeTexture,
        //            inventorySlotTexture,
        //            inventoryBasicTexture,
        //           // inventoryClothesTexture,

        //            //deskInventoryTexture,
        //			//maceratorInventoryTexture,
        //			//furnaceInventoryStoneTexture,
        //			//furnaceInventoryElectricTexture,
        //            clothTexture,
        //            yarnTexture,
        //            chickenEatTexture,
        //            chickenWalkTexture,
        //            rabbitEatTexture,
        //            rabbitJumpTexture,
        //            rabbitWalkTexture, sunTexture,

        //              sawCopperTexture,
        //        sawBronzeTexture,
        //        sawIronTexture,


        //        electricDrillTexture,

        //        electricSawTexture,

        //        //Fonts
        // //hammerBronzeTexture,
        //        hammerBronzeTexture,
        //            hammerIronTexture,
        //            barEnergyTexture,
        //            shearsCopperTexture,
        //            shearsBronzeTexture,
        //            shearsIronTexture,

        //            plateCopperTexture,
        //            plateIronTexture,
        //            plateBronzeTexture,
        //            plateAluminiumTexture,
        //            plateGoldTexture,

        //            oneBrickTexture,
        //            oneMudBrickTexture,

        //            //buttonCraftTexture,


        //            boletusTexture,
        //          //  onionTexture,
        //            coralTexture,
        //            flaxTexture,
        //            toadstoolTexture,
        //            champignonTexture,
        //            sugarCaneTexture,
        //            seaweedTexture,
        //            heatherTexture,
        //            clayTexture,

        //            dolomiteTexture,
        //            basaltTexture,
        //            limestoneTexture,
        //            rhyoliteTexture,
        //            gneissTexture,
        //            sandstoneTexture,
        //            schistTexture,
        //            gabbroTexture,
        //            dioritTexture,

        //            lavaTexture,

        //          //  dolomiteBrickTexture,
        //          //  basaltBrickTexture,
        //          //  limestoneBrickTexture,
        //          //  rhyoliteBrickTexture,
        //         //   gneissBrickTexture,
        //           // sandstoneBrickTexture,
        //           // schistBrickTexture,
        //           // gabbroBrickTexture,
        //            //dioritBrickTexture,

        //            radioInvTexture,
        //            advancedSpaceBackTexture,
        //            advancedSpaceWindowTexture,
        //            advancedSpaceBlockTexture,
        //            advancedSpacePart1Texture,
        //            advancedSpacePart2Texture,
        //            advancedSpacePart3Texture,
        //            advancedSpacePart4Texture,
        //            advancedSpaceFloorTexture,
        //            doorInvTexture,


        //            orangeWoodTexture,
        //            lemonWoodTexture,
        //           ItemOrangeWoodTexture,
        //           ItemLemonWoodTexture,
        //            orangeLeavesTexture,
        //            orangeLeavesWithOrangesTexture,
        //            lemonLeavesTexture,
        //            lemonLeavesWithLemonsTexture,
        //            orangeSaplingTexture,
        //            lemonSaplingTexture,
        //            ItemOrangeTexture,
        //            ItemLemonTexture,

        //			ItemIronAxeTexture,
        //			ItemIronShovelTexture,
        //			ItemIronPickaxeTexture,
        //            Snow,
        //			branchesTexture,
        //			oilTexture,
        //			lianaTexture,
        //			ItemStoneAxeTexture,
        //			ItemStoneShovelTexture,
        //			ItemStonePickaxeTexture,

        //			//ItemStoneHeadAxeTexture,
        //			//ItemStoneHeadShovelTexture,
        //			//ItemStoneHeadPickaxeTexture,

        //			ItemIronHeadAxeTexture,
        //			ItemIronHeadShovelTexture,
        //			ItemIronHeadPickaxeTexture,

        //			//ItemFrameworkAxeTexture,
        //			//ItemFrameworkShovelTexture,
        //			//ItemFrameworkPickaxeTexture,


        //			//shelfInventoryTexture,

        //			//logo,

        //            branchWithoutTexture,
        //            branchALittle1Texture,
        //            branchALittle2Texture,
        //            branchFullTexture,

        //			// Still Items
        //			furnaceStoneOneTexture,
        //			maceratorOneTexture,
        //			furnaceElectricOneTexture,
        //			labelOneTexture,
        //			ashTexture,
        //			coalWoodTexture,
        //			snowTopTexture,

        //			// Bars
        //			barEatTexture,
        //			barWaterTexture,
        //			barOxygenTexture,
        //			barHeartTexture,

        //			// Textures blocks
        //			//stoneTexture,
        //			rocks0Texture,
        //            rocks1Texture,
        //            rocks2Texture,
        //            rocks3Texture,
        //            dirtTexture,
        //			gravelTexture,
        //			//lavaTexture,
        //			sandTexture,
        //			waterTexture,
        //			snowTexture,
        //			iceTexture,
        //			cobblestoneTexture,

        //			//Oak
        //			oakWoodTexture,
        //			oakLeavesTexture,
        //			oakSaplingTexture,

        //			//Pine
        //			pineWoodTexture,
        //			pineLeavesTexture,
        //			pineSaplingTexture,

        //			//Spruce
        //			spruceWoodTexture,
        //			spruceLeavesTexture,
        //			spruceSaplingTexture,

        //			//Linden
        //			lindenWoodTexture,
        //			lindenLeavesTexture,
        //			lindenSaplingTexture,

        //			//Apple
        //			appleWoodTexture,
        //			appleLeavesTexture,
        //			appleSaplingTexture,
        //			appleLeavesWithApplesTexture,

        //			//Plum
        //			plumWoodTexture,
        //			plumLeavesTexture,
        //			plumSaplingTexture,
        //			plumLeavesWithPlumsTexture,

        //			//Cherry
        //			cherryWoodTexture,
        //			cherryLeavesTexture,
        //			cherrySaplingTexture,
        //			cherryLeavesWithCherriesTexture,

        //			//Ores
        //			ironOreTexture,
        //			coalOreTexture,
        //			goldOreTexture,
        //			silverOreTexture,
        //			aluminiumOreTexture,
        //			copperOreTexture,
        //			tinOreTexture,

        //			//GrassBlock
        //			grassBlockPlainsTexture,
        //			grassBlockHillsTexture,
        //			grassBlockForestTexture,
        //			grassBlockDesertTexture,
        //			grassBlockJungleTexture,

        //			//CraftingBlocks
        //			bricksTexture,
        //			deskTexture,
        //			doorOpenTexture,
        //            doorCloseTexture,
        //			furnaceElectricTexture,
        //			furnaceStoneTexture,
        //			glassTexture,
        //			hayBlockTexture,
        //			labelTexture,
        //			ladderTexture,
        //			lampTexture,
        //			//lindenPlanksTexture,
        //			maceratorTexture,
        //			minerTexture,
        //			//oakPlanksTexture,
        //			moonTexture,
        //			//pinePlanksTexture,
        //			//potatoesTexture,
        //			radioTexture,

        //			solarPanelTexture,
        //			planksTexture,

        //			torchTexture,
        //			flagTexture,
        //			fenceTexture,
        //			//rocketTexture,
        //			waterMillTexture,
        //			windMillTexture,
        //			//bonfireTexture,

        //			// Plants
        //			plantAloreTexture,
        //			plantCarrotTexture,
        //			plantOnionTexture,
        //			plantPeasTexture,

        //            ItemPeasTexture,
        //            ItemCarrotTexture,

        //            blueberryPlantTexture,
        //			strawberryPlantTexture,
        //			rashberryPlantTexture,

        //			wheatTexture,

        //			cactusBigTexture,
        //			cactusLittleTexture,

        //			grassJungleTexture,
        //			grassDesertTexture,
        //			grassForestTexture,
        //			grassHillsTexture,
        //			grassPlainsTexture,

        //			plantVioletTexture,
        //			plantRoseTexture,
        //			plantOrchidTexture,
        //			plantDandelionTexture,

        //			// Inventory
        //			//boxInventoryTexture,
        //			//boxBackpackTexture,
        //			//boxCraftingTexture,
        //			//boxSelectedTexture,

        //			torchInvTexture,

        //			// Background
        //			backgroundDirtTexture,
        //			backgroundGravelTexture,
        //			//backgroundStoneTexture,
        //			backgroundSandTexture,

        //			// Animals
        //			fishTexture0,
        //			fishTexture1,

        //			// Animations
        //			BoublesTexture,
        //			WaterSquirtTexture,
        //			destructionTexture,

        //            // Textures Other

        //            //scrollbarTexture,
        //            //buttonPlayTexture,
        //            //buttonSettingTexture,
        //            //buttonNewWorldTexture,
        //            //ButtonOkTexture,

        //            //// BackGround
        //            //backgroundTexture0,
        //            //backgroundTexture1,
        //            //backgroundTexture2,
        //            //backgroundTexture3,
        //            //backgroundTexture4,
        //            //backgroundTexture5,
        //            //backgroundTexture6,
        //            //backgroundTexture7,
        //            //backgroundTexture8,
        //            //backgroundTexture9,

        //            // Blocks - Items
        //            //ItemBlockLeavesTexture,
        //            //ItemBricksTexture,
        //            //ItemDirtTexture,
        //            //ItemGlassTexture,
        //            //ItemGravelTexture,
        //            //ItemHayBlockTexture,
        //            //ItemSandTexture,

        //            //Dusts
        //            ItemAluminiumDustTexture,
        //            ItemBronzeDustTexture,
        //            ItemCoalDustTexture,
        //            ItemCopperDustTexture,
        //            ItemGoldDustTexture,
        //            ItemIronDustTexture,
        //            ItemSilverDustTexture,
        //            ItemStoneDustTexture,
        //            //ItemDustSulfidTexture,
        //            ItemTinDustTexture,
        //            //ItemUranDustTexture,
        //            ItemWoodDustTexture,

        //            //Electronic
        //            ItemBatteryTexture,
        //            ItemBigCircuitTexture,
        //            ItemBulbTexture,
        //            ItemCircuitTexture,
        //            ItemRubberTexture,

        //            //Food
        //            ItemAppleTexture,
        //            ItemBananaTexture,
        //            ItemCherryTexture,
        //            ItemOnionTexture,
        //            ItemPlumTexture,
        //            ItemRabbtCookedMeatTexture,
        //            ItemRabbitMeatTexture,
        //            rashberryTexture,
        //            strawberryTexture,
        //            blueberryTexture,

        //            //Ingots
        //            ItemAluminiumIngotTexture,
        //            ItemBronzeIngotTexture,
        //            ItemCopperIngotTexture,
        //            ItemGoldIngotTexture,
        //            ItemIronIngotTexture,
        //            ItemSilverIngotTexture,
        //            ItemTinIngotTexture,
        //          //  ItemUranIngotTexture,

        //            //MashinesBlocks
        //            //ItemDeskTexture,
        //            ItemDoorTexture,
        //            ItemFlagTexture,
        //            //ItemFurnaceElectricTexture,
        //            //ItemFurnaceStoneTexture,
        //            //ItemLabelTexture,
        //            //ItemLadderTexture,
        //            //ItemLampTexture,
        //            //ItemMaceratorTexture,
        //            //ItemMinerTexture,
        //            //ItemRadioTexture,
        //            ItemRocketTexture,
        //            //ItemSolarPanelTexture,
        //            //ItemTorchTexture,
        //            ItemWaterMillTexture,
        //            ItemWindMillTexture,

        //            //Nature
        //            //ItemCactusTexture,
        //            //ItemDandelionTexture,
        //            ItemHayTexture,
        //            ItemLeatherTexture,
        //            ItemLeaveTexture,
        //            //ItemOrchidTexture,
        //            //ItemRoseTexture,
        //            ItemSeedsTexture,
        //            ItemStickTexture,
        //            ItemSticksTexture,
        //            //ItemVioletTexture,
        //            ItemWheatSeedsTexture,
        //            ItemWheatStrawTexture,

        //            ItemOakSaplingTexture,
        //            ItemPineSaplingTexture,
        //            ItemLindenSaplingTexture,
        //            ItemPlumSaplingTexture,
        //            ItemCherrySaplingTexture,
        //            ItemAppleSaplingTexture,
        //            ItemSpruceSaplingTexture,


        //            //Rocks
        //            ItemCoalTexture,
        //            ItemCopperTexture,
        //            ItemDiamondTexture,
        //			ItemAluminiumTexture,
        //            ItemGoldTexture,
        //            ItemIronTexture,
        //            ItemPlasticTexture,
        //            ItemRubyTexture,
        //            ItemSaphiriteTexture,
        //            ItemSilverTexture,
        //            ItemSmaragdTexture,
        //            ItemBigStoneTexture,
        //            ItemMediumStoneTexture,
        //            ItemSmallStoneTexture,
        //            ItemTinTexture,
        //         //   ItemUranTexture,

        //            //Tools
        //            ItemBackpackTexture,
        //            ItemBucketTexture,
        //            ItemBucketWaterTexture,
        //            ItemRopeTexture,

        //            //Wood
        //            //ItemLindenPlanksTexture,
        //            ItemLindenWoodTexture,
        //            //ItemSprucePlanksTexture,
        //            ItemSpruceWoodTexture,
        //            //ItemOakPlanksTexture,
        //            ItemOakWoodTexture,
        //            //ItemPinePlanksTexture,
        //            ItemPineWoodTexture,
        //            //ItemCherryPlanksTexture,
        //            ItemCherryWoodTexture,
        //            //ItemPlumPlanksTexture,
        //            ItemPlumWoodTexture,
        //            //ItemApplePlanksTexture,
        //            buttleTexture,
        //            ItemAppleWoodTexture;
        //        #endregion

        //Chunk[] terrain;
        //bool geft = false;

        //List<Energy> energy;

        //List<DInt> rainDots;


        //Vector2 mousePos;
        // readonly List<WaterSquirtAnimation> waterSquirt;
        //Texture2D playerTexture, playerLeftTexture, playerRightTexture;
        //int timer = 10;
        //List<bool> world = new List<bool>();



        #region Keyboard and Mouse
        //bool mouseLeftPress;
        //      bool mouseLeftRelease;
        //      bool mouseLeftDown;


        #endregion

        //  bool invMove =false;


        //  GeDo gedo;

        //float barOxygen=16;
        // int invStart=0;
        //      bool leftMove=true;
        //      string newKey;
        //bool hold;
        //int timeHold;
        //string lastKey;
        //string olderKey;
        // int walkingSoundDuration;
        //  SoundEffect walking,rainEffect,eating;
        //   Song songHappend, songMedium, songRoot, songStorm;

        //     CheckPassword chp;
        //  #region Interworking
        //MouseState oldMouseState, newMouseState;
        //KeyboardState oldKeyboardState, newKeyboardState;

        //Texture2D Pixel;
        //enum Step {
        //    Checking,
        //    Logining,
        //    Terrain,
        //    Assets,
        //}
        //MouseState ms=new MouseState();
        // int PlayerX = 200;
        //  float PlayerY = 200;

        // public Matrix Translation;




        //List<DInt> lightPos;



        //bool first=true;  public ContentManager cm;
        //KeyboardState ks=new KeyboardState();
        //KeyboardState oks=new KeyboardState();
        //  SoundEffect walking, eating, rainEffect;
        //Step step=Step.Checking;
        // SpriteFont spriteFont_small, spriteFont_small_italic, spriteFont_medium, spriteFont_big, spritefontBiggest;
        //SpriteBatch spriteBatch; /*List<int> LightPos=new List<int>();*/
        //   #endregion


        //    #region Blocks type

        //#region Block
        //List<Block>
        //    roof1,
        //    roof2,
        //rocket,
        //    heather,
        //    boletus,
        //    //onion,
        //    coral,
        //    //blueberriesFlowers,
        //    //blueberriesNone,
        //    //blueberriesFoodtable,
        //    seaweed,
        //    sugarCane,
        //    champignon,
        //    toadstool,


        //    dolomite,
        //    basalt,
        //    limestone,
        //    rhyolite,
        //    gneiss,
        //    sandstone,
        //    schist,
        //    gabbro,
        //    diorit,

        //    lava,

        //    dolomiteBrick,
        //    basaltBrick,
        //    limestoneBrick,
        //    rhyoliteBrick,
        //    gneissBrick,
        //    sandstoneBrick,
        //    schistBrick,
        //    gabbroBrick,
        //    dioritBrick,


        //    doorOpen,
        //doorClose,
        //    //Blocks
        //    advancedSpaceFloor,
        //     advancedSpaceBack,
        //    advancedSpaceWindow,
        //    advancedSpaceBlok,
        //    advancedSpacePart1,
        //    advancedSpacePart2,
        //    advancedSpacePart3,
        //    advancedSpacePart4,

        //     orangeWood,
        //     orangeSapling,
        //     lemonSapling,
        //    lemonWood,
        //    orangeLeaves,
        //    orangeLeavesWithOranges,
        //    lemonLeaves,
        //    lemonLeavesWithLemons,
        //    sand,
        //    liana,
        //    dirt,
        //    ice,
        //    snow,
        //    //strawberryNone,
        //    //rashberryNone,
        //    //         strawberryFoodtable,
        //    //rashberryFoodtable,
        //    //         strawberryWithFlowers,
        //    //rashberryWithFlowers,
        //    cobblestone,
        //    gravel,
        //    //stone,
        //    oil,
        //    snowTop,
        //    branches,
        //    branchWithout,
        //    branchALittle1,
        //    branchALittle2,
        //    branchFull,

        //    grassPlainsBlock,
        //    grassHillsBlock,
        //    grassJungleBlock,
        //    grassDesertBlock,
        //    grassForestBlock,

        //    //Plants
        //    plantViolet,
        //    plantRose,
        //    plantOrchid,
        //    plantDandelion,

        //    grassPlains,
        //    grassDesert,
        //    grassJungle,
        //    grassHills,
        //    grassForest,

        //    cactusBig,
        //    cactusLittle,
        //    plantAlore,

        //    //plantCarrot,
        //    //plantChives,

        //    //plantOnion,
        //    //plantPeas,

        //    //Ores
        //    ironOre,
        //    coalOre,
        //    goldOre,
        //    aluminiumOre,
        //    //  stoneOre,
        //    copperOre,
        //    silverOre,
        //    tinOre,

        //    //Apple
        //    appleWood,
        //    appleLeaves,
        //    appleSapling,
        //    appleLeavesWithApples,

        //    //Plum
        //    plumWood,
        //    plumLeaves,
        //    plumSapling,
        //    plumLeavesWithPlums,

        //    //Cherry
        //    cherryWood,
        //    cherryLeaves,
        //    cherrySapling,
        //    cherryLeavesWithCherries,

        //    //Oak
        //    oakWood,
        //    oakLeaves,
        //    oakSapling,

        //    //Spruce
        //    spruceWood,
        //    spruceLeaves,
        //    spruceSapling,

        //    //Pine
        //    pineWood,
        //    pineLeaves,
        //    pineSapling,

        //    //Linden
        //    lindenWood,
        //    lindenLeaves,
        //    lindenSapling,

        //    //Crafted
        //    bricks,
        //    glass,
        //    hayBlock,
        //    desk,
        //    ladder,

        //    oakPlanks,
        //    lindenPlanks,
        //    sprucePlanks,
        //    pinePlanks,

        //    solarPanel,

        //    //BackBlocks
        //    backgroundDirt,
        //    backgroundGravel,
        //    backgroundStone,
        //    backgroundSand;
        //#endregion

        //#region Animated Blocks
        //List<AnimatedBlock>
        //    torch,
        //    flag,
        //    windmill,
        //    watermill;
        //#endregion

        //#region Plants
        //List<Plant>
        //wheat,
        //strawberry,
        //rashberry,
        //blueberry,
        //onion,
        //flax,
        //carrot,
        //chives,
        //peas;
        //#endregion

        //#region ScreenBlocks
        //List<ScreenBlock> fence, rocks, label;
        //#endregion

        //#region MashinesBlocks
        //List<MashineBlock>
        //    macerator,
        //    furnaceElectric,
        //    radio,
        //    furnaceStone,
        //    lamp,
        //    miner;
        //#endregion

        //#region BoxBlocks
        //List<BoxBlock>
        //    shelf,
        //    box;
        //#endregion

        //#region Water
        //List<Water> waterBlock;
        //#endregion

        //#region Animals
        //List<Animal> chicken, rabbit;
        //#endregion

        //#region Fishs
        //List<Fish> fish;
        //#endregion

        //#endregion

        //FastRandom FastRandom;
        //bool existsWDown;
        //bool existsWRight;
        //bool existsWLeft;
        //int playerImg;
        //int playerState;
        //float playerGravity;
        // private bool geft;
        //private int playerJump;
        //private float barEat;
        //private float barWater;
        //private int walkingSoundDuration;
        //private bool wind;
        //private bool debug;
        // private bool destruction;
        //private bool notAnimated;
        //private AnimatedBlock destructionBlockIndexA;
        //   private Block destructionBlockIndex;
        //private float destructionIndex;
        //private float destructionTime;
        //private bool show=true;
        //private float time;
        // private int day;
        //int inventory = 0;// 0==not 1==normal 2==desk 3==furnace stone;4==furnace electric;5 ==macerator 6==shelf
        //List<DInt> Inventory;
        //private int moonSpeed;
        //bool smd = false;
        public int port;
        public IPAddress ip;
        string ErrorHeader = "";
        string ErrorText = "";
        //string password = "";
        //bool waitingPassword = false;
        //DateTime start;


        //string name;
        //bool active;
        //  bool backColor;
        //Color color;
        // public bool gedo;

        //bool autoJoinGroup;
        //string newGroup;
        //DateTime daysGoTo;

        //bool editMoreGroups;
        //string[] moreGroups;

        bool tpSpawn;
        bool tpEverywhere;
        bool tpPlayer;
        bool tpPlayerMessage;

        bool changeSpawn;
        bool changeTerrainSpawn;
        bool changeWarps;
        //bool otherWarpsDoNotChange;

        //public bool freeItems;
        // bool cmdRemoveItems;

        //  bool allowFly;
        bool allowChangeGametype;

        //bool paswords;
        //  bool doNotConnect;
        //bool kickOtherPlayerIfFull;
        //bool cannotBeKickedIfFull;

        bool cmdPing;
        bool cmdMsg;
        bool cmdMsgAll;
        bool cmdLog;
        bool cmdKick;

        bool cmdServerEnd;
        bool cmdServerReset;
        bool cmdServerBackup;

        // bool kit;

        int spawnX;
        int spawnY;
        #endregion

        //void DestroyBlockTopBlock(int x, int y) {
        //    MTerrain chunk=terrain[x];
        //    SendRemovedBlock(x, y, chunk.TopBlocks[y].Id,BlockType.Top);
        //    chunk.TopBlocks[y]=null;
        //    chunk.IsTopBlocks[y]=MBlockState.TmpRemoved;
        //}
        //void DestroyBlockBackBlock(int x, int y) {
        //    MTerrain chunk=terrain[x];
        //    SendRemovedBlock(x, y, chunk.TopBlocks[y].Id,BlockType.Back);
        //    chunk.BackBlocks[y]=null;
        //    chunk.IsTopBlocks[y]=MBlockState.TmpRemoved;
        //}

        //void DestroyBlockSolidBlock(int x, int y) {
        //    MTerrain chunk=terrain[x];
        //    SendRemovedBlock(x, y, chunk.SolidBlocks[y].Id,BlockType.Solid);
        //    chunk.TopBlocks[y]=null;
        //    chunk.IsTopBlocks[y]=MBlockState.TmpRemoved;
        //}

        //void DestroyBlockPlant(int x, int y) {
        //    MTerrain chunk=terrain[x];
        //    chunk.TopBlocks[y]=null;
        //    SendRemovedBlock(x, y, chunk.TopBlocks[y].Id,BlockType.Plant);
        //    chunk.Plants[y]=MBlockState.TmpRemoved;
        //}

        //void DestroyBlockTopBlock(int x, int y) {
        //    MTerrain chunk=terrain[x];
        //    chunk.TopBlocks[y]=null;
        //    SendRemovedBlock(x, y, chunk.TopBlocks[y].Id,BlockType.Top);
        //    chunk.IsTopBlocks[y]=MBlockState.TmpRemoved;
        //}

        #region Varibles
        TextWithMeasure textWriting;bool mousePosChanged;DInt startMovePos;	LiveObject[] LiveObjects;TextWithMeasure textHeader,textMore;        List<FallingLeave> FallingLeaves;
        List<ParticleMess> Particles;
        List<object> WavingPlants;
        	Color ColorNightColorBack;
		Color ColorNightColorBackRain;
        Rectangle Fullscreen;float ConstNightAlpha;
        Texture2D
			TextureParrotStill,
			TextureParrotFly;
        	int invStartId;
        List<ShortAndByte> FurnaceStone, Chargers, windable, Miners, Composters, bucketRubber, OxygenMachines/*, Barrels*/;
        Text itemText;
        const float divider_16=1f/16f;	Text textDie, textDieInfo, textRespawnIn, textOpenInventory, textChooseItemWindow;
        GameButtonSmall ButtonCrafting, ButtonItems, ButtonSeal;
        	ItemInv mouseItem;ushort mouseItemId;
        	string mouseItemName;
        ItemInv[] invStartInventory;
        int destroyBlockX, destroyBlockY;
        	readonly List<(Color, float)> Gradient=new() {
			(Color.CornflowerBlue, 0),
		   // (new Color(40, 120, 229), 152/542f),
			(new Color((byte)103, (byte)160, (byte)209), 268/542f),
			(new Color((byte)197, (byte)203, (byte)209), 333/542f),
			(new Color((byte)235, (byte)197, (byte)156), 375/542f),
			(new Color((byte)255, (byte)186, (byte)64), 455/542f),
			(new Color((byte)255, (byte)75, (byte)37), 1f),
		};
        const int
			InventoryClothesSlotCap=0,
			InventoryClothesSlotTShirt=1,
			InventoryClothesSlotTrousers=2,
			InventoryClothesSlotShoes=3,
			InventoryClothesSlotCoat=4,
			InventoryClothesSlotBra=5,
			InventoryClothesSlotUnderwear=6,
			InventoryClothesSlotBackpack=7;

        GameButtonSmall
			//buttonRocket,
			//buttonRadio,
			//buttonNext,
			//buttonPrev,
			//buttonCraft1x,
			//buttonCraft10x,
			//buttonCraft100x,

			buttonContinue,
			buttonExit,
			buttonUseGiftCode,
			buttonAcheavements;

        const int
			InvMaxComposter=9,
			InvMaxBarrel=2,
			InvMaxShelf=9,
			InvMaxBoxWooden=24,
			InvMaxBoxAdv=4*12,
			InvMaxFurnaceStone=4,
			InvMaxMiner=12*2;
        bool creativeTabCrafting=true;List<GunShot> GunShots;
        	bool easter;float scrollBarCreative;
        		readonly List<Rectangle> lightsFull=new List<Rectangle>();
		readonly List<Rectangle> lightsHalf=new List<Rectangle>();
        	bool showMouseItemWhileMooving;
        const float WalkingHandMaxAngle=0.4f;
        const int HandSize=18;
        int speedDir;
        int TerrainLength;
        	int mouseItemNameWidth;
        	Texture2D[] TextureEggDropE;
        	Vector2 Vector2_2;
        Texture2D[] TextureRocks;bool mouseDrawItemTextInfo =false;
        bool AchievementStoneAge,
			AchievementBronzeAge,
			AchievementIronAge,
			AchievementFutureAge;
        ItemInvBlank itemBlank;

        float swimmingTicks;
        	Vector2 Vector2Zero;
        	ItemInv[] InventoryClothes, InventoryCreative, InventoryCrafting, InventoryNormal;

        float handAngle;

       	int mousePosRoundX, mousePosRoundY;
        #region Clothes
		ClothesTypeUnderwearDown
			ClothesUnderwearDown,

			ClothesUnderpants,
			ClothesBoxerShorts,
			ClothesPanties,
			ClothesSwimsuit,
			ClothesBikiniDown;

		ClothesTypeUnderwearUp
			ClothesUnderwearUp,

			ClothesBra,
			ClothesBikiniTop;

		ClothesTypeBoots
			ClothesFeet,

			ClothesFormalShoes,
			ClothesPumps,
			ClothesSneakers,
			ClothesSpaceBoots;

		ClothesTypeTrousers
			ClothesLegs,

			ClothesJeans,
			ClothesShorts,
			ClothesSkirt,
			ClothesArmyTrousers,
			ClothesSpaceTrousers;

		ClothesTypeTShirt
			ClothesChest,

			ClothesTShirt,
			ClothesShirt,
			ClothesDress,
			ClothesTop;

		ClothesTypeCoat
			ClothesChestTop,

			ClothesCoatArmy,
			ClothesCoat,
			ClothesJacketDenim,
			ClothesJacketFormal,
			ClothesJacketShort,
			ClothesSpaceSuit;

		ClothesTypeHelmet
			ClothesHead,

			ClothesCap,
			ClothesHad,
			ClothesCrown,
			ClothesSpaceHelmet;
		#endregion
        Color
			ColorWhite,
			ColorSmokeWhite=new Color(240,240,240);
        // Texture2D TextureBarBarrel, pixel;

        bool radioplaying = false;
        int PopUpWindowSelectedItem;
        int PopUpWindowChoosingPotencialdItem;
        CraftingRecipe[] CurrentDeskCrafting;
        int SelectedCraftingRecipe = -1;
        bool displayPopUpWindow;
      GameScrollbar inventoryScrollbar, creativeScrollbar, craftingScrollbar;
        bool exit = false;
        bool inventoryChanged;
        DInt wantedBlocksInv = new DInt();
        bool getFromServerInv = false;
      //  readonly DInt[] InventoryClothes = new DInt[] { new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt(), new DInt() };


        #region Items
        List<Item> DroppedItems;
        float itemAnimationPos, itemAnimationPos2 = 3.1f;
        #endregion

        #region Blocks in lists
        //List<ShortAndByte> FurnaceStone, Chargers, windable, Miners, Composters, bucketRubber;
        List<int> chunksWithPlants;
        List<MashineBlockBasic> lightsLamp;
        List<Mob> movingAnimals;
        #endregion

        #region Player
        bool died = false;
        int timerStayDied;
        string diedInfo;

        bool rocket;
        bool swimming, waterDown;
        bool rocketDown;
        float gravity;

        bool notNeedScafander;

        int PlayerX, PlayerY;

        int playerImg;
        int playerState;
        int distanceToGround = 0;
        float gravitySpeed = 0;
        bool playerLight = false;
        #endregion

        #region Textures

		#region Dye
        Texture2D
            TextureBin,
			TextureEggDrop,TextureOxygenMachine, TextureAirTank, TextureAirTank2, TextureBarrel, TextureIngotSteel,
			TextureItemEgg, TextureItemBoiledEgg, TextureWaterGraystyle, TextureChristmasStar,
			TextureBarBarrel, pixel,
			TextureClouds,
			TextureSunGradient,

			TextureChristmasBall,
			TextureChristmasBallYellow,
			TextureChristmasBallOrange,
			TextureChristmasBallRed,
			TextureChristmasBallPurple,
			TextureChristmasBallPink,
			TextureChristmasBallLightGreen,
			TextureChristmasBallBlue,
			TextureChristmasBallTeal,
			TextureAngelHair,
			TextureAngelHairWithSpruceLeaves,

			TextureChristmasBallGrayWithLeaves,
			TextureChristmasBallYellowWithLeaves,
			TextureChristmasBallOrangeWithLeaves,
			TextureChristmasBallRedWithLeaves,
			TextureChristmasBallPurpleWithLeaves,
			TextureChristmasBallPinkWithLeaves,
			TextureChristmasBallLightGreenWithLeaves,
			TextureChristmasBallBlueWithLeaves,
			TextureChristmasBallTealWithLeaves,

			TextureDyeWhite,
			TextureDyeYellow,
			TextureDyeGold,
			TextureDyeOrange,
			TextureDyeRed,
			TextureDyeDarkRed,
			TextureDyePink,
			TextureDyePurple,
			TextureDyeLightBlue,
			TextureDyeBlue,
			TextureDyeDarkBlue,
			TextureDyeTeal,
			TextureDyeLightGreen,
			TextureDyeGreen,
			TextureDyeDarkGreen,
			TextureDyeBrown,
			TextureDyeLightGray,
			TextureDyeGray,
			TextureDyeDarkGray,
			TextureDyeBlack,
			TextureDyeArmy,
			TextureDyeMagenta,
			TextureDyeRoseQuartz,
			TextureDyeSpringGreen,
			TextureDyeViolet,
			TextureDyeOlive,
		#endregion

			TextureTestTube,

		#region Ore
			TextureOreCoal,
			TextureOreCopper,
			TextureOreTin,
			TextureOreGold,
			TextureOreIron,
			TextureOreSilver,
			TextureOreAluminium,
			TextureOreSulfur,
			TextureOreSaltpeter,
		#endregion

		#region Back blocks
			TextureBackSulfurOre,
			TextureBackSaltpeterOre,

			backgroundDirtTexture,
			backgroundGravelTexture,
			backgroundSandTexture,
			backgroundCobblestoneTexture,
			backgroundRegoliteTexture,
			backgroundRedSandTexture,
			backgroundClayTexture,

			backgroundAnorthositeTexture,
			backgroundBasaltTexture,
			backgroundDioritTexture,
			backgroundDolomiteTexture,
			backgroundFlintTexture,
			backgroundGabbroTexture,
			backgroundGneissTexture,
			backgroundLimestoneTexture,
			backgroundMudstoneTexture,
			backgroundRhyoliteTexture,
			backgroundSandstoneTexture,
			backgroundSchistTexture,

			backgroundCoalTexture,
			backgroundCopperTexture,
			backgroundTinTexture,
			backgroundIronTexture,
			backgroundAluminiumTexture,
			backgroundSilverTexture,
			backgroundGoldTexture,
		#endregion

		#region Tools
			// Axe
			TextureAxeStone,
			TextureAxeCopper,
			TextureAxeBronze,
			TextureAxeGold,
			TextureAxeIron,
			TextureAxeSteel,
			TextureAxeAluminium,

			// Pickaxe
			TexturePickaxeStone,
			TexturePickaxeCopper,
			TexturePickaxeBronze,
			TexturePickaxeGold,
			TexturePickaxeIron,
			TexturePickaxeSteel,
			TexturePickaxeAluminium,

			// Shovel
			TextureShovelStone,
			TextureShovelCopper,
			TextureShovelBronze,
			TextureShovelGold,
			TextureShovelIron,
			TextureShovelSteel,
			TextureShovelAluminium,

			// Hoe
			TextureHoeStone,
			TextureHoeCopper,
			TextureHoeBronze,
			TextureHoeGold,
			TextureHoeIron,
			TextureHoeSteel,
			TextureHoeAluminium,

			// Saw
			TextureSawCopper,
			TextureSawBronze,
			TextureSawIron,
			TextureSawSteel,
			TextureSawAluminium,
			TextureSawGold,

			// Hammer
			TextureHammerCopper,
			TextureHammerBronze,
			TextureHammerGold,
			TextureHammerIron,
			TextureHammerSteel,
			TextureHammerAluminium,

			// Shears
			TextureShearsCopper,
			TextureShearsBronze,
			TextureShearsGold,
			TextureShearsIron,
			TextureShearsSteel,
			TextureShearsAluminium,

			// Knife
		   // TextureKnifeStone,
			TextureKnifeCopper,
			TextureKnifeBronze,
			TextureKnifeGold,
			TextureKnifeIron,
			TextureKnifeSteel,
			TextureKnifeAluminium,

			// Electric
			TextureDrillElectric,
			TextureGun,
			TextureTorchOff,
			electricSawTexture,
		#endregion

		#region Tools head
			// Pickaxe
			TexturePickaxeHeadCopper,
			TexturePickaxeHeadBronze,
			TexturePickaxeHeadGold,
			TexturePickaxeHeadIron,
			TexturePickaxeHeadSteel,
			TexturePickaxeHeadAluminium,

			// Shovel
			TextureShovelHeadCopper,
			TextureShovelHeadBronze,
			TextureShovelHeadGold,
			TextureShovelHeadIron,
			TextureShovelHeadSteel,
			TextureShovelHeadAluminium,

			// Axe
			TextureAxeHeadCopper,
			TextureAxeHeadBronze,
			TextureAxeHeadGold,
			TextureAxeHeadIron,
			TextureAxeHeadSteel,
			TextureAxeHeadAluminium,

			// Hoe
			TextureHoeHeadCopper,
			TextureHoeHeadBronze,
			TextureHoeHeadGold,
			TextureHoeHeadIron,
			TextureHoeHeadSteel,
			TextureHoeHeadAluminium,

			// Shears
			TextureShearsHeadCopper,
			TextureShearsHeadBronze,
			TextureShearsHeadGold,
			TextureShearsHeadIron,
			TextureShearsHeadSteel,
			TextureShearsHeadAluminium,

			// Knife
			TextureKnifeHeadCopper,
			TextureKnifeHeadBronze,
			TextureKnifeHeadGold,
			TextureKnifeHeadIron,
			TextureKnifeHeadSteel,
			TextureKnifeHeadAluminium,



		#endregion

		#region player
			TextureHand,
		 //   TextureHandDown,

			// Static
			TexturePlayerStaticFeet,
			TexturePlayerStaticLegs,
			TexturePlayerStaticChest,
		   // TexturePlayerStaticHead,
			TexturePlayerStaticHair,
			TexturePlayerStaticFace,
			TexturePlayerStaticMoustage,
			TexturePlayerStaticMouth,
			TexturePlayerStaticEyes,

			// Walking
			TexturePlayerWalkingFeet,
			TexturePlayerWalkingFeetForShoes,
			TexturePlayerWalkingLegs,
			TexturePlayerWalkingChest,
			TexturePlayerWalkingFace,
			TexturePlayerWalkingHair,
			TexturePlayerWalkingMoustage,
			TexturePlayerWalkingMouth,
			TexturePlayerWalkingEyes,
		  //  TexturePlayerWalkingLegsWoman,

			// Swimming
		   TexturePlayerSwimmingFeet,
			TexturePlayerSwimmingLegs,
		  //  TexturePlayerSwimmingChest,
		 //   TexturePlayerSwimmingLegsWoman,


			TextureInventoryClothes,
			//TextureWalkingClothesHead,
			//TextureWalkingClothesFeet,
			//TextureWalkingClothesChest,
			//TextureWalkingClothesChestTop,
			//TextureWalkingClothesLegs,
			//TextureWalkingClothesUnderwearUp,
			//TextureWalkingClothesUnderwearDown,
			 //ClothesHead,
			 //ClothesFeet,
			 //ClothesChest,
			 //ClothesChestTop,
			 //ClothesLegs,
			 //ClothesUnderwearUp,
			 //ClothesUnderwearDown,
			//TextureSwimmingClothesFeet,
			//TextureSwimmingClothesChest,
			//TextureSwimmingClothesChestTop,
			//TextureSwimmingClothesLegs,
			//TextureSwimmingClothesUnderwearUp,
			//TextureSwimmingClothesUnderwearDown,


			TextureWalkingUpCensored,
			TextureWalkingDownCensored,

			TextureStaticUpCensored,
			TextureStaticDownCensored,

			TextureSwimmingUpCensored,
			TextureSwimmingDownCensored,


			//TextureWalkingFormalShoes,
			//TextureWalkingPumps,
			//TextureWalkingSneakers,
			//TextureWalkingSpaceBoots,

			//TextureWalkingJeans,
			//TextureWalkingShorts,
			//TextureWalkingSkirt,
			//TextureWalkingArmyTrousers,
			//TextureWalkingSpaceTrousers,

			//TextureWalkingTShirt,
			//TextureWalkingSpaceSuit,
			//TextureWalkingShirt,
			//TextureWalkingDress,

			//TextureWalkingCap,
			//TextureWalkingHad,
			//TextureWalkingCrown,
			//TextureWalkingSpaceHelmet,

			//TextureWalkingUnderpants,
			//TextureWalkingBoxerShorts,
			//TextureWalkingPanties,
			//TextureWalkingSwimsuit,
			//TextureWalkingBikiniDown,

			//TextureWalkingCoatArmy,
			//TextureWalkingCoat,
			//TextureWalkingJacketDenim,
			//TextureWalkingJacketFormal,
			//TextureWalkingJacketShort,

			//TextureWalkingBra,
			//TextureWalkingBikiniTop,

		  //  TextureStaticFormalShoes,
		  //  TextureStaticPumps,
		  //  TextureStaticSneakers,
		  //  TextureStaticSpaceBoots,

		  //  TextureStaticJeans,
		  //  TextureStaticShorts,
		  //  TextureStaticSkirt,
		  //  TextureStaticArmyTrousers,
		  //  TextureStaticSpaceTrousers,

		  //  TextureStaticTShirt,
		  //  TextureStaticSpaceSuit,
		  //  TextureStaticShirt,
		  //  TextureStaticDress,

		  //  TextureStaticCap,
		  //  TextureStaticHad,
		  //  TextureStaticCrown,
		  //  TextureStaticSpaceHelmet,

		  //  TextureStaticUnderpants,
		  //  TextureStaticBoxerShorts,
		  //  TextureStaticPanties,
		  //  TextureStaticSwimsuit,
		  //  TextureStaticBikiniDown,

		  //  TextureStaticCoatArmy,
		  //  TextureStaticCoat,
		  //  TextureStaticJacketDenim,
		  //  TextureStaticJacketFormal,
		  ////  TextureStaticJacket,
		  //  TextureStaticJacketShort,

		  //  TextureStaticBra,
		  //  TextureStaticBikiniTop,

		  //  TextureSwimmingFormalShoes,
		  //  TextureSwimmingPumps,
		  //  TextureSwimmingSneakers,
		  //  TextureSwimmingSpaceBoots,

		  //  TextureSwimmingJeans,
		  //  TextureSwimmingShorts,
		  //  TextureSwimmingSkirt,
		  //  TextureSwimmingArmyTrousers,
		  //  TextureSwimmingSpaceTrousers,

		  //  TextureSwimmingTShirt,
		  //  TextureSwimmingSpaceSuit,
		  //  TextureSwimmingShirt,
		  //  TextureSwimmingDress,

		  //  TextureSwimmingUnderpants,
		  //  TextureSwimmingBoxerShorts,
		  //  TextureSwimmingPanties,
		  //  TextureSwimmingSwimsuit,
		  //  TextureSwimmingBikiniDown,

		  //  TextureSwimmingCoatArmy,
		  //  TextureSwimmingCoat,
		  //  TextureSwimmingJacketDenim,
		  //  TextureSwimmingJacketFormal,
		  ////  TextureSwimmingJacket,
		  //  TextureSwimmingJacketShort,

		  //  TextureSwimmingBra,
		  //  TextureSwimmingBikiniTop,
		#endregion

		#region Trees
			TextureBranches,

			//  Oak
			TextureOakWood,
			TextureOakLeaves,
			oakSaplingTexture,

			// Pine
			pineWoodTexture,
			pineLeavesTexture,
			pineSaplingTexture,

			//Spruce
			spruceWoodTexture,
			spruceLeavesTexture,
			spruceSaplingTexture,

			// Linden
			TextureLindenWood,
			TextureLindenLeaves,
			TextureLindenSapling,

			// Apple
			TextureAppleWood,
			TextureAppleLeaves,
			TextureAppleBlossom,
			TextureAppleSapling,
			TextureAppleLeavesWithApples,

			// Plum
			TexturePlumWood,
			TexturePlumLeaves,
			TexturePlumBlossom,
			plumSaplingTexture,
			TexturePlumLeavesWithPlums,

			// Cherry
			cherryWoodTexture,
			TextureCherryBlossom,
			TextureCherryLeaves,
			cherrySaplingTexture,
			TextureCherryLeavesWithCherries,

			// Orange
			TextureOrangeWood,
			TextureOrangeLeaves,
			TextureOrangeLeavesWithOranges,
			orangeSaplingTexture,

			// Lemon
			TextureLemonWood,
			TextureLemonLeaves,
			lemonLeavesWithLemonsTexture,
			lemonSaplingTexture,

			// Willow
			TextureWillowLeaves,
			TextureWillowWood,
			TextureWillowSapling,

			// Mangrove
			TextureMangroveLeaves,
			TextureMangroveWood,
			TextureMangroveSapling,

			// Eucalyptus
			TextureEucalyptusLeaves,
			TextureEucalyptusWood,
			TextureEucalyptusSapling,

			// Olive
			TextureOliveLeavesWithOlives,
			TextureOliveLeaves,
			TextureOliveWood,
			TextureOliveSapling,

			// Rubber
			TextureRubberTreeLeaves,
			TextureRubberTreeWood,
			TextureRubberTreeSapling,

			// Accacia
			TextureAcaciaLeaves,
			TextureAcaciaWood,
			TextureAcaciaSapling,

			// Kapok
			TextureKapokBlossom,
			TextureKapokLeavesFibre,
			TextureKapokLeaves,
			TextureKapokSapling,
			TextureKapokWood,
		#endregion

		#region Clothes
			// Shoes
			TextureItemFormalShoes,
			TextureItemPumps,
			TextureItemSneakers,
			TextureItemSpaceBoots,

			// Trousers + skirt
			TextureItemJeans,
			TextureItemShorts,
			TextureItemSpaceTrousers,
			TextureItemArmyTrousers,
			TextureItemSkirt,

			// T-shirts + dress
			TextureItemTShirt,
			TextureItemSpaceSuit,
			TextureItemDress,
			TextureItemShirt,

			// head
			TextureItemCap,
			TextureItemHat,
			TextureItemCrown,
			TextureItemSpaceHelmet,

			// bottom
			TextureItemUnderpants,
			TextureItemBoxerShorts,
			TextureItemPanties,
			TextureItemSwimsuit,
			TextureItemBikiniDown,

			// Top
			TextureItemBra,
			TextureItemBikiniTop,

			// Coat
			TextureItemCoatArmy,
			TextureItemCoat,
			ItemJacketDenimTexture,
			ItemJacketFormalTexture,
		  //  ItemJacketTexture,
			TextureItemJacketShort,
		#endregion

		#region Foods

			// Fruit
			ItemOrangeTexture,
			ItemLemonTexture,
			ItemAppleTexture,
			ItemBananaTexture,
			ItemCherryTexture,
			ItemPlumTexture,

			rashberryTexture,
			strawberryTexture,
			blueberryTexture,

			// Wegetable
			ItemOnionTexture,

			// Meat
			ItemRabbtCookedMeatTexture,
			ItemRabbitMeatTexture,


		#endregion

			TextureSulfur,
			TextureSaltpeter,
			TextureGunpowder,
			TextureAmmo,


			TextureBucketForRubber,
			TextureBucketWithLatex,
			TextureResin,
			TextureSelectCrafting,
			RadioButtonPause,
			RadioButtonPlay,
			sewingMachineTexture,

			ItemOliveTexture,
			ItemKapokFibreTexture,

			CompostTexture,
			ComposterTexture,
			ComposterFullTexture,
			LightElectricTexture,
			lightMaskLineTexture,
			lightMaskRoundTexture,
			rabbitStillTexture,
			chickenStillTexture,
			lightMaskTexture,
			RodTexture,
			chargerTexture,
			TextureRedSand,
			mudstoneTexture,
			flintTexture,
			stoneHeadTexture,

			rocketTexture,
			anorthositeTexture,
			regoliteTexture,
			solidFuelSmokeTexture,
			mobileTexture,
			bucketOilTexture,
			bottleOilTexture,
			bowlEmptyTexture,
			bowlMushroomsTexture,
			bowlVegetablesTexture,
			messageLeft,
			bottleEmptyTexture,
			bottleWaterTexture,
			boxWoodenTexture,
			messageCenter,
			messageRight,
			flaxSeedsTexture,
			fishCookedTexture,
			flaxInvTexture,
			invStrawberryTexture,
			invRashberryTexture,
			invBlueberryTexture,
			shelfTexture,
			boxAdvTexture,
			nailTexture,
			siliciumTexture,

			//Items
			condenserTexture,
			diodeTexture,
			tranzistorTexture,
			resistanceTexture,
			motorTexture,
			bareLabelTexture,

			//Blocks
			roof1Texture,
			roof2Texture,
			scrollbarUpTexture,
			scrollbarBetweenTexture,
			scrollbarDownTexture,
			inventoryNeedTexture,
			inventorySlotTexture,
			inventorySlotInTexture,
			inventorySlotOutTexture,

			clothTexture,
			yarnTexture,
			chickenEatTexture,
			chickenWalkTexture,
			rabbitEatTexture,
			rabbitJumpTexture,
			rabbitWalkTexture,
			sunTexture,

			barEnergyTexture,

			plateCopperTexture,
			plateIronTexture,
			plateBronzeTexture,
			plateAluminiumTexture,
			plateGoldTexture,

			oneBrickTexture,
			oneMudBrickTexture,

			boletusTexture,

			coralTexture,
			flaxTexture,
			toadstoolTexture,
			champignonTexture,
			sugarCaneTexture,
			seaweedTexture,
			heatherTexture,

			dolomiteTexture,
			basaltTexture,
			limestoneTexture,
			rhyoliteTexture,
			gneissTexture,
			sandstoneTexture,
			schistTexture,
			gabbroTexture,
			dioritTexture,

			lavaTexture,

			radioInvTexture,
			advancedSpaceBackTexture,
			advancedSpaceWindowTexture,
			advancedSpaceBlockTexture,
			advancedSpacePart1Texture,
			advancedSpacePart2Texture,
			advancedSpacePart3Texture,
			advancedSpacePart4Texture,
			advancedSpaceFloorTexture,
			doorInvTexture,

			oilTexture,
			lianaTexture,

			branchWithoutTexture,
			branchALittle1Texture,
			branchALittle2Texture,
			branchFullTexture,

			// Still Items
			furnaceStoneOneTexture,
			maceratorOneTexture,
			furnaceElectricOneTexture,
			labelOneTexture,
			ashTexture,
			coalWoodTexture,
			snowTopTexture,

			// Bars
			barEatTexture,
			barWaterTexture,
			barOxygenTexture,
			barHeartTexture,

			// Textures blocks
			//rocks0Texture,
			//rocks1Texture,
			//rocks2Texture,
			//rocks3Texture,
			TextureDirt,
			gravelTexture,
			sandTexture,
			waterTexture,
			snowTexture,
			iceTexture,
			cobblestoneTexture,

			//GrassBlock
			TextureGrassBlockPlains,
			TextureGrassBlockHills,
			TextureGrassBlockForest,
			TextureGrassBlockDesert,
			TextureGrassBlockJungle,
			TextureGrassBlockClay,
			TextureGrassBlockCompost,
			TextureGrassBlockSnow,

			//CraftingBlocks
			bricksTexture,
			deskTexture,
			doorOpenTexture,
			doorCloseTexture,
			furnaceElectricTexture,
			furnaceStoneTexture,
			glassTexture,
			hayBlockTexture,
			labelTexture,
			ladderTexture,
			lampTexture,

			maceratorTexture,
			minerTexture,
			TextureMoon,
			radioTexture,

			solarPanelTexture,
			planksTexture,

			torchTexture,
			flagTexture,
			waterMillTexture,
			windMillTexture,

			// Plants
			plantAloreTexture,
			plantCarrotTexture,
			plantOnionTexture,
			plantPeasTexture,

			ItemPeasTexture,
			ItemCarrotTexture,

			blueberryPlantTexture,
			strawberryPlantTexture,
			rashberryPlantTexture,

			wheatTexture,

			cactusBigTexture,
			cactusLittleTexture,

			grassJungleTexture,
			grassDesertTexture,
			grassForestTexture,
			grassHillsTexture,
			grassPlainsTexture,

			plantVioletTexture,
			plantRoseTexture,
			plantOrchidTexture,
			plantDandelionTexture,

			torchInvTexture,
			clayTexture,



			// Animals
			fishTexture0,
			fishTexture1,

			// Animations
			destructionTexture,

			//Dusts
			ItemAluminiumDustTexture,
			ItemBronzeDustTexture,
			ItemCoalDustTexture,
			ItemCopperDustTexture,
			ItemGoldDustTexture,
			ItemIronDustTexture,
			ItemSilverDustTexture,
			ItemStoneDustTexture,
			ItemTinDustTexture,
			ItemWoodDustTexture,

			//Electronic
			ItemBatteryTexture,
			ItemBigCircuitTexture,
			ItemBulbTexture,
			ItemCircuitTexture,
			ItemRubberTexture,



		#region Ingots
			ItemAluminiumIngotTexture,
			ItemBronzeIngotTexture,
			ItemCopperIngotTexture,
			ItemGoldIngotTexture,
			ItemIronIngotTexture,
			ItemSilverIngotTexture,
			ItemTinIngotTexture,
		#endregion

			// MashinesBlocks
			ItemDoorTexture,
			ItemFlagTexture,
			ItemRocketTexture,
			ItemWaterMillTexture,
			ItemWindMillTexture,

			//Nature
			ItemHayTexture,
			ItemLeaveTexture,
			ItemSeedsTexture,
			ItemStickTexture,
			ItemSticksTexture,
			ItemWheatSeedsTexture,
			ItemWheatStrawTexture,

		#region Rocks
			ItemCoalTexture,
			ItemCopperTexture,
			ItemDiamondTexture,
			ItemAluminiumTexture,
			ItemGoldTexture,
			ItemIronTexture,
			ItemPlasticTexture,
			ItemRubyTexture,
			ItemSaphiriteTexture,
			ItemSilverTexture,
			ItemSmaragdTexture,
			ItemBigStoneTexture,
			ItemMediumStoneTexture,
			ItemSmallStoneTexture,
			ItemTinTexture,
		#endregion

			ItemBackpackTexture,
			ItemBucketTexture,
			ItemBucketWaterTexture,
			ItemRopeTexture;
        #endregion

        #region Weather & time (day/night)
        float windForce;
        int dayLenght = 4800;
        const int hour = 200;


        List<Rectangle> lights = new List<Rectangle>();

        // Rain
        int rainDuration;
        int changeRain = 1250;
        List<DInt> rainDots;
        bool wind, rain;

        //Time
        int day, timeToChageWind, timer5 = 10;
        int time;
        int _secondTimer = 60;
        int timerDraw60 = 60;

        // Day / night
        float dayAlpha;
        float moonSpeed;
        #endregion

        #region Inventory
        InventoryType lastMashineType;
        InventoryType inventory = InventoryType.Normal;
        Mobile.System mobileOS;
        string[] radioSongs;
        int inventoryScrollbarValue = 0;
        int selectedCraftingItem;
        int inventoryScrollbarValueCrafting = 0;
        int inventoryScrollbarValueCraftingMax = 0;
        int boxSelected;

        bool mouseDraw = false;
        bool invMove;
        int invStart;
        DInt invStartDInt;
        bool leftMove;
        int maxInvCount;

        DInt selectedMashine;

        GeDo gedo;
      //  List<DInt> Inventory;
      //  List<DInt> Crafting;
       // List<DInt> Need;

        int diserpeard = 255;
        string text = "";

        //  int craftingType;

        bool hold;
        int timeHold;
        string lastKey;
        #endregion

        #region Buttons
        GameButtonSmall
            buttonNext,
            buttonRocket,
            buttonRadio,
            buttonPrev,
            buttonCraft1x,
            buttonCraft10x,
            buttonCraft100x;

        ImgButton
            buttonClose,
             buttonClosePopUp,
            buttonInvTabBlocks,
            buttonInvTabPlants,
            buttonInvTabTools,
            buttonInvTabMashines,
            buttonInvTabItems,
            buttonInvTabCeramics,
            buttonInvTabFood,
            buttonInvTabGlass,
            buttonInvTabMaterials,
            buttonInvAnimals,


            buttonInvHead,
            buttonInvChest,
            buttonInvLegs,
            buttonInvShoes,
            buttonInvUnderwear;
        #endregion

        #region Window
        Matrix camera, ZoomMatrix, Translation;

        int WindowXWithout, WindowYWithout,
            WindowCenterX, WindowCenterY,
            WindowX, WindowY;

        float WindowXPlayer, WindowYPlayer;

        RenderTarget2D sunLightTarget, modificatedLightTarget;

        readonly BlendState Multiply = new BlendState() {
            AlphaSourceBlend=Blend.Zero,
            AlphaDestinationBlend=Blend.SourceColor,
            ColorSourceBlend=Blend.Zero,
            ColorDestinationBlend=Blend.SourceColor
        };

        //        readonly int Zoom16=(int)(16*Setting.Zoom);

        int terrainStartIndexX, terrainStartIndexY, terrainStartIndexW, terrainStartIndexH;
        #endregion

        #region Mouse & keyboard
        bool mouseLeftPress,
            mouseLeftRelease,
            mouseLeftDown,

            mouseRightPress,
            mouseRightRelease,
            mouseRightDown;

        MouseState newMouseState, oldMouseState;
        KeyboardState oldKeyboardState, newKeyboardState;

        int previousScrollValue;

        Vector2 mousePos;
        //DInt mousePosDiv16 = new DInt(),
        //       mouseRealPos = new DInt(),
        //    mousePosRound = new DInt();
        readonly DInt mousePosDiv16=new DInt();
		  //  mousePosRound=new DInt(),
		  //  mouseRealPos=new DInt();
	   public static int mouseRealPosX, mouseRealPosY;
        #endregion

        #region Bars
        float barWater = 16;
        float barEat = 16;
        float barOxygen = 0;
        float barHeart = 16;
        float barEnergy = 0;
        #endregion

        #region Debug
        bool debug;
        float fps;
        float fpss = 0;
        PerformanceCounter cpu;
        PerformanceCounter ram;
        PerformanceCounter cpuUsage;
        PerformanceCounter freeRam;

        float usageCpuProcess;
        float usageCpu;
        float usageRamProcess;
        float usageRam;

        bool showInventory = true;
        bool showPlayer = true;
        #endregion

        #region World
        int TerrainLenght;

        public string pathToWorld;
        readonly string world = "Earth";
        int autoSave = 300;
        List<Energy> energy;
        #endregion

        #region Block destruction
        DInt destroyBlock;

        float destroingIndex;
        float destringMaxIndex;

        bool destroing;

        BlockType destroingBlockDepth;
        ushort destroingBlockType;

        const int DistanceBlockEdit = 200;
        #endregion

        #region Fonts
        SpriteFont
            spriteFont_small,
            spriteFont_small_italic,
            spriteFont_medium,
            spriteFont_big,
            spriteFont_biggest;
        #endregion

        #region Colors
        readonly Color
            color_r200_g200_b200_a100 = new Color(200, 200, 200, 100),
            color_r0_g0_b0_a200 = new Color(0, 0, 0, 200),
            color_r10_g140_b255 = new Color(10, 140, 255),
            color_r128_g128_b128 = new Color(128, 128, 128),
            color_r128_g128_b128_a128 = new Color(128, 128, 128, 128),
            color_r150_g150_b150 = new Color(150, 150, 150),
            color_r0_g0_b0_a100 = new Color(0, 0, 0, 100),
            color_r255_g0_b0_a100 = new Color(255, 0, 0, 100),
            color_r200_g200_b200 = new Color(200, 200, 200),
            lampColorLight = new Color(255, 255, 220, 255);
        #endregion

        #region Other
        int walkingSoundDuration;
        #endregion

        #endregion

        public override void Init() {
            FallingLeaves=new List<FallingLeave>();
			Particles=new List<ParticleMess>();
			WavingPlants=new List<object>();

			Fullscreen=new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight);
			Vector2_2=new Vector2(2,2);

			float m=0.5f+Setting.NightBrightness*0.5f;
			ConstNightAlpha=0.1f+0.4f*Setting.NightBrightness;
			ColorNightColorBack=new Color(m, m, m);
			ColorNightColorBackRain=new Color(m, m, (int)(m*1.1f+0.5f));

			itemBlank=new ItemInvBlank();
			ColorWhite=Color.White;
			pixel=Rabcr.Pixel;
			Vector2Zero=Vector2.Zero;

            buttonRadio=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
                Text="Otevřít",
            };

            currentState=Current.Checking;
            SetMultiplayerLoadingText();
            Connect();

            CountGravity(new GeneratePlanetSystem().SunSystem());

			#region Load textures
			TextureTestTube=GetDataTexture(@"Items\Dye\TestTube");

			TextureChristmasBall=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBall");
			TextureChristmasBallYellow=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallYellow");
			TextureChristmasBallOrange=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallOrange");
			TextureChristmasBallRed=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallRed");
			TextureChristmasBallPurple=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallPurple");
			TextureChristmasBallPink=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallPink");
			TextureChristmasBallLightGreen=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallLightGreen");
			TextureChristmasBallBlue=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallBlue");
			TextureChristmasBallTeal=GetDataTexture(@"Items/Decorations/CristmasBalls/ChristmasBallTeal");

			TextureAngelHair=GetDataTexture(@"Items/Decorations/AngelHair");
			TextureAngelHairWithSpruceLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/AngelHair");

			TextureChristmasBallGrayWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Gray");
			TextureChristmasBallYellowWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Yellow");
			TextureChristmasBallOrangeWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Orange");
			TextureChristmasBallRedWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Red");
			TextureChristmasBallPurpleWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Purple");
			TextureChristmasBallPinkWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Pink");
			TextureChristmasBallLightGreenWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/LightGreen");
			TextureChristmasBallBlueWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Blue");
			TextureChristmasBallTealWithLeaves=GetDataTexture(@"Blocks/TreeBlocks/Spruce/ChristmasBalls/Teal");

			CreateGradientTexture();

			#region Imventory
			TextureBin=GetDataTexture("Inventories/bin");
			TextureSelectCrafting=GetDataTexture("Buttons/Other/SelectyCrafting");

			inventoryNeedTexture=GetDataTexture("Inventories/InventoryNeed");
			inventorySlotTexture=GetDataTexture("Inventories/Slot");
			inventorySlotInTexture=GetDataTexture("Inventories/SlotIn");
			inventorySlotOutTexture=GetDataTexture("Inventories/SlotOut");

			TextureInventoryClothes=GetDataTexture("Inventories/InventoryClothes");
			TextureBarBarrel=GetDataTexture("Inventories/BarBarrel");
			#endregion
			TextureClouds=GetDataTexture("Animations\\Clouds");
			#region Items
			#region Tools
			// Axe
			TextureAxeStone = GetDataTexture("Items/Tools/Axe/AxeStone");
			TextureAxeCopper = GetDataTexture("Items/Tools/Axe/AxeCopper");
			TextureAxeBronze = GetDataTexture("Items/Tools/Axe/AxeBronze");
			TextureAxeGold = GetDataTexture("Items/Tools/Axe/AxeGold");
			TextureAxeIron = GetDataTexture("Items/Tools/Axe/AxeIron");
			TextureAxeSteel = GetDataTexture("Items/Tools/Axe/AxeSteel");
			TextureAxeAluminium = GetDataTexture("Items/Tools/Axe/AxeAluminium");

			// Pickaxe
			TexturePickaxeStone = GetDataTexture("Items/Tools/Pickaxe/PickaxeStone");
			TexturePickaxeCopper = GetDataTexture("Items/Tools/Pickaxe/PickaxeCopper");
			TexturePickaxeBronze = GetDataTexture("Items/Tools/Pickaxe/PickaxeBronze");
			TexturePickaxeGold = GetDataTexture("Items/Tools/Pickaxe/PickaxeGold");
			TexturePickaxeIron = GetDataTexture("Items/Tools/Pickaxe/PickaxeIron");
			TexturePickaxeSteel = GetDataTexture("Items/Tools/Pickaxe/PickaxeSteel");
			TexturePickaxeAluminium = GetDataTexture("Items/Tools/Pickaxe/PickaxeAluminium");

			// Shovel
			TextureShovelStone = GetDataTexture("Items/Tools/Shovel/ShovelStone");
			TextureShovelBronze = GetDataTexture("Items/Tools/Shovel/ShovelBronze");
			TextureShovelCopper = GetDataTexture("Items/Tools/Shovel/ShovelCopper");
			TextureShovelGold = GetDataTexture("Items/Tools/Shovel/ShovelGold");
			TextureShovelIron = GetDataTexture("Items/Tools/Shovel/ShovelIron");
			TextureShovelSteel = GetDataTexture("Items/Tools/Shovel/ShovelSteel");
			TextureShovelAluminium = GetDataTexture("Items/Tools/Shovel/ShovelAluminium");

			//Hoe
			TextureHoeStone=GetDataTexture("Items/Tools/Hoe/StoneHoe");
			TextureHoeCopper=GetDataTexture("Items/Tools/Hoe/CopperHoe");
			TextureHoeBronze=GetDataTexture("Items/Tools/Hoe/BronzeHoe");
			TextureHoeGold=GetDataTexture("Items/Tools/Hoe/GoldHoe");
			TextureHoeIron=GetDataTexture("Items/Tools/Hoe/IronHoe");
			TextureHoeSteel=GetDataTexture("Items/Tools/Hoe/SteelHoe");
			TextureHoeAluminium=GetDataTexture("Items/Tools/Hoe/AluminiumHoe");

			// Saw
			TextureSawCopper=GetDataTexture("Items/Tools/Saw/SawCopper");
			TextureSawBronze=GetDataTexture("Items/Tools/Saw/SawBronze");
			TextureSawGold=GetDataTexture("Items/Tools/Saw/SawGold");
			TextureSawIron=GetDataTexture("Items/Tools/Saw/SawIron");
			TextureSawSteel=GetDataTexture("Items/Tools/Saw/SawSteel");
			TextureSawAluminium=GetDataTexture("Items/Tools/Saw/SawAluminium");

			// Shears
			TextureShearsCopper=GetDataTexture("Items/Tools/Shears/ShearsCopper");
			TextureShearsBronze=GetDataTexture("Items/Tools/Shears/ShearsBronze");
			TextureShearsGold=GetDataTexture("Items/Tools/Shears/ShearsGold");
			TextureShearsIron=GetDataTexture("Items/Tools/Shears/ShearsIron");
			TextureShearsSteel=GetDataTexture("Items/Tools/Shears/ShearsSteel");
			TextureShearsAluminium=GetDataTexture("Items/Tools/Shears/ShearsAluminium");

			// Hammer
			TextureHammerCopper=GetDataTexture("Items/Tools/Hammer/HammerCopper");
			TextureHammerBronze=GetDataTexture("Items/Tools/Hammer/HammerBronze");
			TextureHammerGold=GetDataTexture("Items/Tools/Hammer/HammerGold");
			TextureHammerIron=GetDataTexture("Items/Tools/Hammer/HammerIron");
			TextureHammerSteel=GetDataTexture("Items/Tools/Hammer/HammerSteel");
			TextureHammerAluminium=GetDataTexture("Items/Tools/Hammer/HammerAluminium");

			// Knife
			//TextureKnifeStone = GetDataTexture("Items/Tools/Knife/KnifeStone");
			TextureKnifeCopper = GetDataTexture("Items/Tools/Knife/KnifeCopper");
			TextureKnifeBronze = GetDataTexture("Items/Tools/Knife/KnifeBronze");
			TextureKnifeGold = GetDataTexture("Items/Tools/Knife/KnifeGold");
			TextureKnifeIron = GetDataTexture("Items/Tools/Knife/KnifeIron");
			TextureKnifeSteel = GetDataTexture("Items/Tools/Knife/KnifeSteel");
			TextureKnifeAluminium = GetDataTexture("Items/Tools/Knife/KnifeAluminium");

			// Electronics
			TextureTorchOff=GetDataTexture("Blocks/ForInventory/TorchOFF");
			LightElectricTexture=GetDataTexture("Items/Tools/Electric/Light");
			TextureDrillElectric=GetDataTexture("Items/Tools/Electric/Drill");
			electricSawTexture=GetDataTexture("Items/Tools/Electric/Saw");
			mobileTexture=GetDataTexture("Items/NonTools/mobile");

			// Air tank
			TextureAirTank=GetDataTexture("Items/NonTools/OxygenTank");
			TextureAirTank2=GetDataTexture("Items/NonTools/OxygenTank2");

			// Gun
			TextureAmmo = GetDataTexture("Items/NonTools/Ammo");
			TextureGun = GetDataTexture("Items/NonTools/Gun");

			// Other
			stoneHeadTexture = GetDataTexture("Items/Tools/StoneAxe");
			#endregion

			#region Tool heads
			// Axe
			TextureAxeHeadCopper = GetDataTexture("Items/ToolsHeads/Axe/Copper");
			TextureAxeHeadBronze = GetDataTexture("Items/ToolsHeads/Axe/Bronze");
			TextureAxeHeadGold = GetDataTexture("Items/ToolsHeads/Axe/Gold");
			TextureAxeHeadIron = GetDataTexture("Items/ToolsHeads/Axe/Iron");
			TextureAxeHeadSteel = GetDataTexture("Items/ToolsHeads/Axe/Steel");
			TextureAxeHeadAluminium = GetDataTexture("Items/ToolsHeads/Axe/Aluminium");

			// Shovel
			TextureShovelHeadCopper = GetDataTexture("Items/ToolsHeads/Shovel/Copper");
			TextureShovelHeadBronze = GetDataTexture("Items/ToolsHeads/Shovel/Bronze");
			TextureShovelHeadGold = GetDataTexture("Items/ToolsHeads/Shovel/Gold");
			TextureShovelHeadIron = GetDataTexture("Items/ToolsHeads/Shovel/Iron");
			TextureShovelHeadSteel = GetDataTexture("Items/ToolsHeads/Shovel/Steel");
			TextureShovelHeadAluminium = GetDataTexture("Items/ToolsHeads/Shovel/Aluminium");

			// Pickaxe
			TexturePickaxeHeadCopper= GetDataTexture("Items/ToolsHeads/Pickaxe/Copper");
			TexturePickaxeHeadBronze= GetDataTexture("Items/ToolsHeads/Pickaxe/Bronze");
			TexturePickaxeHeadGold= GetDataTexture("Items/ToolsHeads/Pickaxe/Gold");
			TexturePickaxeHeadIron= GetDataTexture("Items/ToolsHeads/Pickaxe/Iron");
			TexturePickaxeHeadSteel= GetDataTexture("Items/ToolsHeads/Pickaxe/Steel");
			TexturePickaxeHeadAluminium= GetDataTexture("Items/ToolsHeads/Pickaxe/Aluminium");

			// Shears
			TextureShearsHeadCopper= GetDataTexture("Items/ToolsHeads/Shears/Copper");
			TextureShearsHeadBronze= GetDataTexture("Items/ToolsHeads/Shears/Bronze");
			TextureShearsHeadGold= GetDataTexture("Items/ToolsHeads/Shears/Gold");
			TextureShearsHeadIron= GetDataTexture("Items/ToolsHeads/Shears/Iron");
			TextureShearsHeadSteel= GetDataTexture("Items/ToolsHeads/Shears/Steel");
			TextureShearsHeadAluminium= GetDataTexture("Items/ToolsHeads/Shears/Aluminium");

			// Knife
			TextureKnifeHeadCopper= GetDataTexture("Items/ToolsHeads/Knife/Copper");
			TextureKnifeHeadBronze= GetDataTexture("Items/ToolsHeads/Knife/Bronze");
			TextureKnifeHeadGold= GetDataTexture("Items/ToolsHeads/Knife/Gold");
			TextureKnifeHeadIron= GetDataTexture("Items/ToolsHeads/Knife/Iron");
			TextureKnifeHeadSteel= GetDataTexture("Items/ToolsHeads/Knife/Steel");
			TextureKnifeHeadAluminium= GetDataTexture("Items/ToolsHeads/Knife/Aluminium");

			// Hoe
			TextureHoeHeadCopper=GetDataTexture("Items/ToolsHeads/Hoe/Copper");
			TextureHoeHeadBronze=GetDataTexture("Items/ToolsHeads/Hoe/Bronze");
			TextureHoeHeadGold=GetDataTexture("Items/ToolsHeads/Hoe/Gold");
			TextureHoeHeadIron=GetDataTexture("Items/ToolsHeads/Hoe/Iron");
			TextureHoeHeadSteel=GetDataTexture("Items/ToolsHeads/Hoe/Steel");
			TextureHoeHeadAluminium=GetDataTexture("Items/ToolsHeads/Hoe/Aluminium");
			#endregion

			#region Clothes
			// Head
			TextureItemCap=GetDataTexture("Items/Clothes/Head/Cap");
			TextureItemHat=GetDataTexture("Items/Clothes/Head/Hat");
			TextureItemCrown=GetDataTexture("Items/Clothes/Head/Crown");
			TextureItemSpaceHelmet=GetDataTexture("Items/Clothes/Head/SpaceHelmet");

			// Feet
			TextureItemFormalShoes=GetDataTexture("Items/Clothes/Feet/FormalShoes");
			TextureItemPumps=GetDataTexture("Items/Clothes/Feet/Pumps");
			TextureItemSneakers=GetDataTexture("Items/Clothes/Feet/Sneakers");
			TextureItemSpaceBoots=GetDataTexture("Items/Clothes/Feet/SpaceBoots");

			// Chest top
			TextureItemCoatArmy=GetDataTexture("Items/Clothes/ChestTop/CoatArmy");
			TextureItemCoat=GetDataTexture("Items/Clothes/ChestTop/Coat");
			ItemJacketDenimTexture=GetDataTexture("Items/Clothes/ChestTop/JacketDenim");
			ItemJacketFormalTexture=GetDataTexture("Items/Clothes/ChestTop/JacketFormal");
			TextureItemJacketShort=GetDataTexture("Items/Clothes/ChestTop/JacketShort");

			// Legs
			TextureItemJeans=GetDataTexture("Items/Clothes/Legs/Jeans");
			TextureItemShorts=GetDataTexture("Items/Clothes/Legs/Shorts");
			TextureItemSpaceTrousers=GetDataTexture("Items/Clothes/Legs/SpaceTrousers");
			TextureItemArmyTrousers=GetDataTexture("Items/Clothes/Legs/ArmyTrousers");
			TextureItemSkirt=GetDataTexture("Items/Clothes/Legs/Skirt");
			TextureItemTShirt=GetDataTexture("Items/Clothes/Chest/TShirt");
			TextureItemSpaceSuit=GetDataTexture("Items/Clothes/ChestTop/SpaceSuit");
			TextureItemDress=GetDataTexture("Items/Clothes/Chest/Dress");
			TextureItemShirt=GetDataTexture("Items/Clothes/Chest/Shirt");

			// Underwear Down
			TextureItemUnderpants=GetDataTexture("Items/Clothes/DownUnderwear/Underpants");
			TextureItemBoxerShorts=GetDataTexture("Items/Clothes/DownUnderwear/BoxerShorts");
			TextureItemPanties=GetDataTexture("Items/Clothes/DownUnderwear/Panties");
			TextureItemSwimsuit=GetDataTexture("Items/Clothes/DownUnderwear/Swimsuit");
			TextureItemBikiniDown=GetDataTexture("Items/Clothes/DownUnderwear/Bikini");

			// Underwear Up
			TextureItemBra=GetDataTexture("Items/Clothes/UpUnderwear/Bra");
			TextureItemBikiniTop=GetDataTexture("Items/Clothes/UpUnderwear/TopBikini");

			#endregion

			#region Electronics
			condenserTexture=GetDataTexture("Items/Electronic/Condenser");
			diodeTexture=GetDataTexture("Items/Electronic/Diode");
			tranzistorTexture=GetDataTexture("Items/Electronic/Transistor");
			resistanceTexture=GetDataTexture("Items/Electronic/Resistance");
			motorTexture=GetDataTexture("Items/Electronic/Motor");
			ItemBatteryTexture = GetDataTexture("Items/Electronic/Battery");
			ItemBigCircuitTexture = GetDataTexture("Items/Electronic/BigCircuit");
			ItemBulbTexture = GetDataTexture("Items/Electronic/Bulb");
			ItemCircuitTexture = GetDataTexture("Items/Electronic/Circuit");
			bareLabelTexture=GetDataTexture("Items/Electronic/label");
			#endregion

			#region Nature
			// From plants
			flaxSeedsTexture=GetDataTexture("Items/Nature/FlaxSeeds");
			ItemHayTexture = GetDataTexture("Items/Nature/Hay");
			ItemLeaveTexture = GetDataTexture("Items/Nature/Leave");
			ItemSeedsTexture = GetDataTexture("Items/Nature/Seeds");
			ItemStickTexture = GetDataTexture("Items/Nature/Stick");
			ItemSticksTexture = GetDataTexture("Items/Nature/Sticks");
			ItemWheatSeedsTexture = GetDataTexture("Items/Nature/WheatSeeds");
			ItemWheatStrawTexture = GetDataTexture("Items/Nature/WheatStraw");
			ItemKapokFibreTexture=GetDataTexture("Items/Nature/KapokFibre");

			// Crafted
			clothTexture=GetDataTexture("Items/Nature/Cloth");
			yarnTexture=GetDataTexture("Items/Nature/Yarn");
			TextureResin=GetDataTexture("Items/Nature/Resin");
			#endregion

			#region Rocks
			ItemAluminiumTexture = GetDataTexture("Items/Rocks/Aluminium");
			ItemCoalTexture = GetDataTexture("Items/Rocks/Coal");
			ItemCopperTexture = GetDataTexture("Items/Rocks/Copper");
			ItemDiamondTexture = GetDataTexture("Items/Rocks/Diamond");
			ItemGoldTexture = GetDataTexture("Items/Rocks/Gold");
			ItemIronTexture = GetDataTexture("Items/Rocks/Iron");
			ItemPlasticTexture= GetDataTexture("Items/Rocks/Plastic");
			ItemRubyTexture = GetDataTexture("Items/Rocks/Ruby");
			ItemSaphiriteTexture = GetDataTexture("Items/Rocks/Saphirite");
			ItemSilverTexture = GetDataTexture("Items/Rocks/Silver");
			ItemSmaragdTexture = GetDataTexture("Items/Rocks/Smaragd");
			ItemBigStoneTexture = GetDataTexture("Items/Rocks/StoneBig");
			ItemMediumStoneTexture = GetDataTexture("Items/Rocks/StoneMedium");
			ItemSmallStoneTexture = GetDataTexture("Items/Rocks/StoneSmall");
			ItemTinTexture = GetDataTexture("Items/Rocks/Tin");
			#endregion

			#region Dye
			TextureDyeWhite= GetDataTexture("Items/Dye/White");
			TextureDyeYellow = GetDataTexture("Items/Dye/Yellow");
			TextureDyeGold = GetDataTexture("Items/Dye/Gold");
			TextureDyeOrange = GetDataTexture("Items/Dye/Orange");
			TextureDyeRed = GetDataTexture("Items/Dye/Red");
			TextureDyeDarkRed = GetDataTexture("Items/Dye/DarkRed");
			TextureDyePink = GetDataTexture("Items/Dye/Pink");
			TextureDyePurple = GetDataTexture("Items/Dye/Purple");
			TextureDyeLightBlue = GetDataTexture("Items/Dye/LightBlue");
			TextureDyeBlue = GetDataTexture("Items/Dye/Blue");
			TextureDyeDarkBlue = GetDataTexture("Items/Dye/DarkBlue");
			TextureDyeTeal = GetDataTexture("Items/Dye/Teal");
			TextureDyeLightGreen = GetDataTexture("Items/Dye/LightGreen");
			TextureDyeGreen = GetDataTexture("Items/Dye/Green");
			TextureDyeDarkGreen = GetDataTexture("Items/Dye/DarkGreen");
			TextureDyeBrown = GetDataTexture("Items/Dye/Brown");
			TextureDyeLightGray = GetDataTexture("Items/Dye/LightGray");
			TextureDyeGray = GetDataTexture("Items/Dye/Gray");
			TextureDyeDarkGray = GetDataTexture("Items/Dye/DarkGray");
			TextureDyeBlack = GetDataTexture("Items/Dye/Black");
			TextureDyeArmy = GetDataTexture("Items/Dye/Army");
			TextureDyeMagenta = GetDataTexture("Items/Dye/Magenta");
			TextureDyeRoseQuartz = GetDataTexture("Items/Dye/RoseQuartz");
			TextureDyeSpringGreen = GetDataTexture("Items/Dye/SpringGreen");
			TextureDyeViolet = GetDataTexture("Items/Dye/Violet");
			TextureDyeOlive = GetDataTexture("Items/Dye/Olive");
			#endregion

			#region Food
			// Raw vegetable
			ItemPeasTexture=GetDataTexture("Items/Food/Peas");
			ItemCarrotTexture=GetDataTexture("Items/Food/Carrot");

			// Raw fruit
			ItemOrangeTexture=GetDataTexture("Items/Food/Orange");
			ItemLemonTexture=GetDataTexture("Items/Food/Lemon");
			ItemOliveTexture=GetDataTexture("Items/Food/Olive");
			ItemAppleTexture = GetDataTexture("Items/Food/Apple");
			ItemBananaTexture = GetDataTexture("Items/Food/Banana");
			ItemCherryTexture = GetDataTexture("Items/Food/Cherry");
			ItemOnionTexture = GetDataTexture("Items/Food/Onion");
			ItemPlumTexture = GetDataTexture("Items/Food/Plum");
			rashberryTexture = GetDataTexture("Items/Food/Rashberry");
			blueberryTexture=GetDataTexture("Items/Food/Blueberry");
			strawberryTexture = GetDataTexture("Items/Food/Strawberry");

			// Raw other
			TextureItemEgg=GetDataTexture("Items/Food/egg");
			ItemRabbitMeatTexture = GetDataTexture("Items/Food/RabbitMeat");

			// Boiled
			TextureItemBoiledEgg=GetDataTexture("Items/Food/eggboiled");
			fishCookedTexture=GetDataTexture("Items/Food/FishCooked");
			ItemRabbtCookedMeatTexture = GetDataTexture("Items/Food/RabbitCookedMeat");

			// Combined
			bowlMushroomsTexture=GetDataTexture("Items/Food/BowlWithMushrooms");
			bowlVegetablesTexture=GetDataTexture("Items/Food/BowlWithVegetable");
			#endregion

			#region Other
			RodTexture=GetDataTexture("Items/NonTools/Rod");
			nailTexture=GetDataTexture("Items/NonTools/Nail");
			plateCopperTexture=GetDataTexture("Items/Plates/PlateCopper");
			plateIronTexture=GetDataTexture("Items/Plates/PlateIron");
			plateBronzeTexture=GetDataTexture("Items/Plates/PlateBronze");
			plateAluminiumTexture=GetDataTexture("Items/Plates/PlateAluminium");
			plateGoldTexture=GetDataTexture("Items/Plates/PlateGold");
			#endregion



			bottleWaterTexture=GetDataTexture("Items/NonTools/BottleWater");
			bottleEmptyTexture=GetDataTexture("Items/NonTools/BottleEmpty");
			bottleOilTexture=GetDataTexture("Items/NonTools/BottleOil");
			bucketOilTexture=GetDataTexture("Items/NonTools/BucketOil");

			coalWoodTexture = GetDataTexture("Items/Rocks/CoalWood");
			ItemBackpackTexture = GetDataTexture("Items/Clothes/Backpack");
			ItemBucketTexture = GetDataTexture("Items/NonTools/Bucket");
			ItemBucketWaterTexture = GetDataTexture("Items/NonTools/BucketWater");
			ItemRopeTexture = GetDataTexture("Items/NonTools/Rope");

			#region Ingots
			ItemAluminiumIngotTexture= GetDataTexture("Items/Ingots/Aluminium");
			ItemBronzeIngotTexture = GetDataTexture("Items/Ingots/Bronze");
			ItemCopperIngotTexture = GetDataTexture("Items/Ingots/Copper");
			ItemGoldIngotTexture = GetDataTexture("Items/Ingots/Gold");
			ItemIronIngotTexture = GetDataTexture("Items/Ingots/Iron");
			ItemSilverIngotTexture = GetDataTexture("Items/Ingots/Silver");
			ItemTinIngotTexture = GetDataTexture("Items/Ingots/Tin");
			TextureIngotSteel=GetDataTexture("Items/Ingots/Steel");

			siliciumTexture=GetDataTexture("Items/Ingots/Silicium");

			oneBrickTexture=GetDataTexture("Items/Ingots/Brick");
			oneMudBrickTexture=GetDataTexture("Items/Ingots/Mud");
			#endregion

			#region Dusts
			// Metal
			ItemCopperDustTexture = GetDataTexture("Items/Dusts/Copper");
			ItemTinDustTexture = GetDataTexture("Items/Dusts/Tin");
			ItemBronzeDustTexture = GetDataTexture("Items/Dusts/Bronze");
			ItemGoldDustTexture = GetDataTexture("Items/Dusts/Gold");
			ItemSilverDustTexture = GetDataTexture("Items/Dusts/Silver");
			ItemIronDustTexture = GetDataTexture("Items/Dusts/Iron");
			ItemAluminiumDustTexture= GetDataTexture("Items/Dusts/Aluminium");

			// Other
			ItemCoalDustTexture = GetDataTexture("Items/Dusts/Coal");
			ItemStoneDustTexture = GetDataTexture("Items/Dusts/Stone");
			ItemWoodDustTexture = GetDataTexture("Items/Dusts/Wood");
			ashTexture= GetDataTexture("Items/Dusts/Ash");
			TextureSulfur = GetDataTexture("Items/Dusts/Sulfur");
			TextureSaltpeter = GetDataTexture("Items/Dusts/Saltpeter");
			TextureGunpowder = GetDataTexture("Items/Dusts/Gunpowder");
			#endregion

			ItemRubberTexture = GetDataTexture("Items/Electronic/Rubber");
			bowlEmptyTexture=GetDataTexture("Items/NonTools/Bowl");
			#endregion

			#region Blocks
			#region Mashines
			// Mechanical
			ComposterTexture=GetDataTexture("Blocks/Mashines/Composter");
			TextureBucketForRubber=GetDataTexture("Blocks/Mashines/BucketForRubber");
			TextureBucketWithLatex=GetDataTexture("Blocks/Mashines/BucketWithLatex");
			ComposterFullTexture=GetDataTexture("Blocks/Mashines/ComposterFull");
			shelfTexture=GetDataTexture("Blocks/Mashines/shelf");
			boxAdvTexture=GetDataTexture("Blocks/Mashines/box");
			boxWoodenTexture=GetDataTexture("Blocks/Mashines/boxWooden");
			deskTexture = GetDataTexture("Blocks/Mashines/Desk");
			doorOpenTexture = GetDataTexture("Blocks/Mashines/DoorOpen");
			doorCloseTexture = GetDataTexture("Blocks/Mashines/DoorClose");
			furnaceStoneTexture = GetDataTexture("Blocks/Mashines/FurnaceStone");
			torchTexture = GetDataTexture("Blocks/Mashines/Torch");
			TextureBarrel = GetDataTexture("Blocks/Mashines/Barrel");

			// Electrinics
			TextureOxygenMachine=GetDataTexture("Blocks/Mashines/OxygenMachine");
			chargerTexture=GetDataTexture("Blocks/Mashines/Charger");
			rocketTexture=GetDataTexture("Space/Rocket");
			radioTexture = GetDataTexture("Blocks/Mashines/Radio");
			maceratorTexture = GetDataTexture("Blocks/Mashines/Macerator");
			minerTexture = GetDataTexture("Blocks/Mashines/Miner");
			lampTexture = GetDataTexture("Blocks/Mashines/Lamp");
			solarPanelTexture = GetDataTexture("Blocks/Mashines/SolarPanel");
			labelTexture = GetDataTexture("Blocks/Mashines/Label");
			furnaceElectricTexture = GetDataTexture("Blocks/Mashines/FurnaceElectric");
			waterMillTexture = GetDataTexture("Blocks/Mashines/Watermill");
			windMillTexture = GetDataTexture("Blocks/Mashines/Windmill");
			sewingMachineTexture=GetDataTexture("Blocks/Mashines/SewingMachine");
			#endregion

			#region Trees
			TextureBranches = GetDataTexture("Blocks/TreeBlocks/Branches");
			// Oak
			TextureOakWood = GetDataTexture("Blocks/TreeBlocks/Oak/Wood");
			TextureOakLeaves = GetDataTexture("Blocks/TreeBlocks/Oak/Leaves");

			// Spruce
			spruceWoodTexture = GetDataTexture("Blocks/TreeBlocks/Spruce/Wood");
			spruceLeavesTexture = GetDataTexture("Blocks/TreeBlocks/Spruce/Leaves");

			// Linden
			TextureLindenWood = GetDataTexture("Blocks/TreeBlocks/Linden/Wood");
			TextureLindenLeaves = GetDataTexture("Blocks/TreeBlocks/Linden/Leaves");

			// Pine
			pineLeavesTexture = GetDataTexture("Blocks/TreeBlocks/Pine/Leaves");
			pineWoodTexture = GetDataTexture("Blocks/TreeBlocks/Pine/Wood");

			// Apple
			TextureAppleWood = GetDataTexture("Blocks/TreeBlocks/Apple/Wood");
			TextureAppleLeaves = GetDataTexture("Blocks/TreeBlocks/Apple/Leaves");
			TextureAppleBlossom = GetDataTexture("Blocks/TreeBlocks/Apple/Blossom");
			TextureAppleLeavesWithApples = GetDataTexture("Blocks/TreeBlocks/Apple/LeavesWithApples");

			// Cherry
			cherryWoodTexture = GetDataTexture("Blocks/TreeBlocks/Cherry/Wood");
			TextureCherryLeaves = GetDataTexture("Blocks/TreeBlocks/Cherry/Leaves");
			TextureCherryBlossom = GetDataTexture("Blocks/TreeBlocks/Cherry/Blossom");
			TextureCherryLeavesWithCherries = GetDataTexture("Blocks/TreeBlocks/Cherry/LeavesWithCherries");

			// Plum
			TexturePlumWood = GetDataTexture("Blocks/TreeBlocks/Plum/Wood");
			TexturePlumLeaves = GetDataTexture("Blocks/TreeBlocks/Plum/Leaves");
			TexturePlumBlossom = GetDataTexture("Blocks/TreeBlocks/Plum/Blossom");
			TexturePlumLeavesWithPlums = GetDataTexture("Blocks/TreeBlocks/Plum/LeavesWithPlums");

			// Orange
			TextureOrangeLeaves=GetDataTexture("Blocks/TreeBlocks/Orange/Leaves");
			TextureOrangeLeavesWithOranges=GetDataTexture("Blocks/TreeBlocks/Orange/LeavesWithOranges");
			TextureOrangeWood=GetDataTexture("Blocks/TreeBlocks/Orange/Wood");

			// Lemon
			TextureLemonWood=GetDataTexture("Blocks/TreeBlocks/Lemon/Wood");
			TextureLemonLeaves=GetDataTexture("Blocks/TreeBlocks/Lemon/Leaves");
			lemonLeavesWithLemonsTexture=GetDataTexture("Blocks/TreeBlocks/Lemon/LeavesWithLemons");

			// Olive
			TextureOliveLeavesWithOlives=GetDataTexture("Blocks/TreeBlocks/Olive/LeavesWithOlives");
			TextureOliveLeaves=GetDataTexture("Blocks/TreeBlocks/Olive/Leaves");
			TextureOliveWood=GetDataTexture("Blocks/TreeBlocks/Olive/Wood");

			// Mangrove
			TextureMangroveLeaves=GetDataTexture("Blocks/TreeBlocks/Mangrove/Leaves");
			TextureMangroveWood=GetDataTexture("Blocks/TreeBlocks/Mangrove/Wood");

			// Willow
			TextureWillowLeaves=GetDataTexture("Blocks/TreeBlocks/Willow/Leaves");
			TextureWillowWood=GetDataTexture("Blocks/TreeBlocks/Willow/Wood");

			// Eucaliptus
			TextureEucalyptusLeaves=GetDataTexture("Blocks/TreeBlocks/Eucalyptus/Leaves");
			TextureEucalyptusWood=GetDataTexture("Blocks/TreeBlocks/Eucalyptus/Wood");

			// Rubber
			TextureRubberTreeLeaves=GetDataTexture("Blocks/TreeBlocks/RubberTree/Leaves");
			TextureRubberTreeWood=GetDataTexture("Blocks/TreeBlocks/RubberTree/Wood");

			// Accacia
			TextureAcaciaLeaves=GetDataTexture("Blocks/TreeBlocks/Acacia/Leaves");
			TextureAcaciaWood=GetDataTexture("Blocks/TreeBlocks/Acacia/Wood");

			// Kapok
			TextureKapokBlossom=GetDataTexture("Blocks/TreeBlocks/Kapok/Blossom");
			TextureKapokLeavesFibre=GetDataTexture("Blocks/TreeBlocks/Kapok/LeavesWithFibre");
			TextureKapokLeaves=GetDataTexture("Blocks/TreeBlocks/Kapok/Leaves");
			TextureKapokWood=GetDataTexture("Blocks/TreeBlocks/Kapok/Wood");
			#endregion

			#region Saplings
			cherrySaplingTexture = GetDataTexture("Plants/Saplings/Cherry");
			oakSaplingTexture = GetDataTexture("Plants/Saplings/Oak");
			spruceSaplingTexture = GetDataTexture("Plants/Saplings/Spruce");
			TextureLindenSapling = GetDataTexture("Plants/Saplings/Linden");
			TextureAppleSapling = GetDataTexture("Plants/Saplings/Apple");
			plumSaplingTexture = GetDataTexture("Plants/Saplings/Plum");
			TextureMangroveSapling=GetDataTexture("Plants/Saplings/Mangrove");
			lemonSaplingTexture=GetDataTexture("Plants/Saplings/Lemon");
			orangeSaplingTexture=GetDataTexture("Plants/Saplings/Orange");
			pineSaplingTexture = GetDataTexture("Plants/Saplings/Pine");
			TextureWillowSapling=GetDataTexture("Plants/Saplings/Willow");
			TextureEucalyptusSapling=GetDataTexture("Plants/Saplings/Eucalyptus");
			TextureOliveSapling=GetDataTexture("Plants/Saplings/Olive");
			TextureRubberTreeSapling=GetDataTexture("Plants/Saplings/RubberTree");
			TextureAcaciaSapling=GetDataTexture("Plants/Saplings/Acacia");
			TextureKapokSapling=GetDataTexture("Plants/Saplings/Kapok");
			#endregion

			#region Plants
			branchWithoutTexture=GetDataTexture("Plants/Branch/Without");
			branchALittle1Texture=GetDataTexture("Plants/Branch/Little1");
			branchALittle2Texture=GetDataTexture("Plants/Branch/Little2");
			branchFullTexture=GetDataTexture("Plants/Branch/Full");

			plantAloreTexture = GetDataTexture("Plants/Flowers/Alore");
			plantCarrotTexture = GetDataTexture("Plants/ForInventory/Carrot");
			plantOnionTexture = GetDataTexture("Plants/ForInventory/Onion");
			plantPeasTexture = GetDataTexture("Plants/ForInventory/Peas");
			grassForestTexture = GetDataTexture("Plants/Grass/Forest");
			grassPlainsTexture = GetDataTexture("Plants/Grass/Plains");
			grassJungleTexture = GetDataTexture("Plants/Grass/Jungle");
			grassDesertTexture = GetDataTexture("Plants/Grass/Desert");
			grassHillsTexture = GetDataTexture("Plants/Grass/Hills");
			strawberryPlantTexture = GetDataTexture("Plants/Grow/Strawberry");
			rashberryPlantTexture = GetDataTexture("Plants/Grow/Rashberry");
			wheatTexture = GetDataTexture("Plants/Grow/WheatGrow");
			plantDandelionTexture = GetDataTexture("Plants/Flowers/Dandelion");
			plantOrchidTexture = GetDataTexture("Plants/Flowers/Orchid");
			plantRoseTexture = GetDataTexture("Plants/Flowers/Rose");
			plantVioletTexture = GetDataTexture("Plants/Flowers/Violet");
			cactusLittleTexture = GetDataTexture("Plants/Cactus/Small");
			cactusBigTexture = GetDataTexture("Plants/Cactus/Big");
			blueberryPlantTexture=GetDataTexture("Plants/Grow/Blueberry");

			coralTexture=GetDataTexture("Plants/Flowers/Coral");
			flaxTexture=GetDataTexture("Plants/Grow/Flax");
			toadstoolTexture=GetDataTexture("Plants/Mushrooms/Toadstoll");
			champignonTexture=GetDataTexture("Plants/Mushrooms/Champignon");
			sugarCaneTexture=GetDataTexture("Plants/Flowers/Sugarcane");
			seaweedTexture=GetDataTexture("Plants/Flowers/Seaweed");
			heatherTexture=GetDataTexture("Plants/Flowers/Heather");
			boletusTexture=GetDataTexture("Plants/Mushrooms/Boletus");
			lianaTexture = GetDataTexture("Plants/Flowers/Liana");
			#endregion

			#region Stone
			mudstoneTexture=GetDataTexture("Blocks/BasicBlocks/Mudstone");
			dolomiteTexture=GetDataTexture("Blocks/BasicBlocks/Dolomite");
			basaltTexture=GetDataTexture("Blocks/BasicBlocks/Basalt");
			limestoneTexture=GetDataTexture("Blocks/BasicBlocks/Limestone");
			rhyoliteTexture=GetDataTexture("Blocks/BasicBlocks/Rhyolite");
			gneissTexture=GetDataTexture("Blocks/BasicBlocks/Gneiss");
			sandstoneTexture=GetDataTexture("Blocks/BasicBlocks/SandStone");
			schistTexture=GetDataTexture("Blocks/BasicBlocks/Schist");
			gabbroTexture=GetDataTexture("Blocks/BasicBlocks/Gabbro");
			dioritTexture=GetDataTexture("Blocks/BasicBlocks/Diorit");
			anorthositeTexture=GetDataTexture("Blocks/BasicBlocks/Anorthosite");
			regoliteTexture=GetDataTexture("Blocks/BasicBlocks/Regolite");
			flintTexture=GetDataTexture("Blocks/BasicBlocks/Flint");
			#endregion

			#region Ore
			TextureOreCoal = GetDataTexture("Blocks/OreBlocks/Coal");
			TextureOreCopper = GetDataTexture("Blocks/OreBlocks/Copper");
			TextureOreTin = GetDataTexture("Blocks/OreBlocks/Tin");
			TextureOreGold = GetDataTexture("Blocks/OreBlocks/Gold");
			TextureOreSilver = GetDataTexture("Blocks/OreBlocks/Silver");
			TextureOreIron = GetDataTexture("Blocks/OreBlocks/Iron");
			TextureOreAluminium = GetDataTexture("Blocks/OreBlocks/Aluminium");
			TextureOreSulfur = GetDataTexture("Blocks/OreBlocks/Sulfur");
			TextureOreSaltpeter = GetDataTexture("Blocks/OreBlocks/Saltpeter");


			#endregion

			#region Basic
			// Grass block
			TextureGrassBlockPlains= GetDataTexture("Blocks/GrassBlocks/Plains");
			TextureGrassBlockHills = GetDataTexture("Blocks/GrassBlocks/Hills");
			TextureGrassBlockJungle = GetDataTexture("Blocks/GrassBlocks/Jungle");
			TextureGrassBlockForest = GetDataTexture("Blocks/GrassBlocks/Forest");
			TextureGrassBlockDesert = GetDataTexture("Blocks/GrassBlocks/Desert");
			TextureGrassBlockClay= GetDataTexture("Blocks/GrassBlocks/Clay");
			TextureGrassBlockCompost= GetDataTexture("Blocks/GrassBlocks/Compost");
			TextureGrassBlockSnow= GetDataTexture("Blocks/GrassBlocks/Snow");

			// Sand
			sandTexture = GetDataTexture("Blocks/BasicBlocks/Sand");
			TextureRedSand=GetDataTexture("Blocks/BasicBlocks/Redsand");

			// Liquid
			waterTexture = GetDataTexture("Blocks/BasicBlocks/Water");
			oilTexture = GetDataTexture("Blocks/OreBlocks/Oil");

			TextureDirt = GetDataTexture("Blocks/BasicBlocks/Dirt");
			gravelTexture = GetDataTexture("Blocks/BasicBlocks/Gravel");
			clayTexture= GetDataTexture("Blocks/BasicBlocks/Clay");
			iceTexture = GetDataTexture("Blocks/BasicBlocks/Ice");
			snowTexture = GetDataTexture("Blocks/BasicBlocks/snow");
			snowTopTexture = GetDataTexture("Blocks/BasicBlocks/SnowTop");
			cobblestoneTexture = GetDataTexture("Blocks/BasicBlocks/Cobblestone");

			#endregion

			#region Backgrounds
			// Basic
			backgroundDirtTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Dirt");
			backgroundGravelTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Gravel");
			backgroundSandTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Sand");
			backgroundCobblestoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Cobblestone");
			backgroundRegoliteTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/Regolite");
			backgroundRedSandTexture= GetDataTexture("Blocks/BlockBackgrounds/Other/RedSand");
			backgroundClayTexture=GetDataTexture("Blocks/BlockBackgrounds/Other/Clay");

			// Stone
			backgroundAnorthositeTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Anorthosite");
			backgroundBasaltTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Basalt");
			backgroundDioritTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Diorit");
			backgroundDolomiteTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Dolomite");
			backgroundFlintTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Flint");
			backgroundGabbroTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Gabbro");
			backgroundGneissTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Gneiss");
			backgroundLimestoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Limestone");
			backgroundMudstoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Mudstone");
			backgroundRhyoliteTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Rhyolite");
			backgroundSandstoneTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Sandstone");
			backgroundSchistTexture= GetDataTexture("Blocks/BlockBackgrounds/Stone/Schist");

			// Ore
			TextureBackSulfurOre= GetDataTexture("Blocks/BlockBackgrounds/Ore/Sulfur");
			TextureBackSaltpeterOre= GetDataTexture("Blocks/BlockBackgrounds/Ore/Saltpeter");
			backgroundCoalTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Coal");
			backgroundCopperTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Copper");
			backgroundTinTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Tin");
			backgroundIronTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Iron");
			backgroundAluminiumTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Aluminium");
			backgroundSilverTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Silver");
			backgroundGoldTexture= GetDataTexture("Blocks/BlockBackgrounds/Ore/Gold");
			#endregion

			if (easter) {
				TextureEggDropE=new Texture2D[4]{
					GetDataTexture("Blocks/BasicBlocks/eggdrop2"),
					GetDataTexture("Blocks/BasicBlocks/eggdrop3"),
					GetDataTexture("Blocks/BasicBlocks/eggdrop4"),
					GetDataTexture("Blocks/BasicBlocks/eggdrop5"),
				};
			}

			TextureChristmasStar=GetDataTexture("Blocks/CraftedBlocks/Star");

			TextureWaterGraystyle=GetDataTexture("Blocks/BasicBlocks/WaterGraystyle");
			TextureEggDrop=GetDataTexture("Blocks/BasicBlocks/eggdrop");
			CompostTexture=GetDataTexture("Blocks/BasicBlocks/Compost");

			roof1Texture=GetDataTexture("Blocks/CraftedBlocks/Roof1");
			roof2Texture=GetDataTexture("Blocks/CraftedBlocks/Roof2");
			flagTexture = GetDataTexture("Blocks/CraftedBlocks/Flag");
			ladderTexture = GetDataTexture("Blocks/CraftedBlocks/Ladder");
			TextureRocks = new Texture2D[] {
				GetDataTexture("Blocks/BasicBlocks/Rocks0"),
				GetDataTexture("Blocks/BasicBlocks/Rocks1"),
				GetDataTexture("Blocks/BasicBlocks/Rocks2"),
				GetDataTexture("Blocks/BasicBlocks/Rocks3")
			};
			bricksTexture = GetDataTexture("Blocks/CraftedBlocks/Bricks");
			glassTexture = GetDataTexture("Blocks/CraftedBlocks/Glass");
			hayBlockTexture = GetDataTexture("Blocks/CraftedBlocks/HayBlock");
			planksTexture = GetDataTexture("Blocks/CraftedBlocks/Planks");
			ItemRocketTexture = GetDataTexture("Blocks/ForInventory/Rocket");
			ItemWaterMillTexture = GetDataTexture("Blocks/ForInventory/WaterMill");
			ItemWindMillTexture = GetDataTexture("Blocks/ForInventory/WindMill");
			ItemDoorTexture = GetDataTexture("Blocks/ForInventory/Door");
			ItemFlagTexture = GetDataTexture("Blocks/ForInventory/Flag");
			labelOneTexture = GetDataTexture("Blocks/ForInventory/Label");
			maceratorOneTexture = GetDataTexture("Blocks/ForInventory/Macerator");
			furnaceStoneOneTexture = GetDataTexture("Blocks/ForInventory/FurnaceStone");
			furnaceElectricOneTexture = GetDataTexture("Blocks/ForInventory/FurnaceElectric");
			torchInvTexture = GetDataTexture("Blocks/ForInventory/Torch");
			advancedSpaceBackTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceBack");
			advancedSpaceWindowTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceWindow");
			advancedSpaceBlockTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceBlok");
			advancedSpacePart1Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart");
			advancedSpacePart2Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart2");
			advancedSpacePart3Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart3");
			advancedSpacePart4Texture= GetDataTexture("Blocks/Advanced/AdvancedSpacePart4");
			advancedSpaceFloorTexture= GetDataTexture("Blocks/Advanced/AdvancedSpaceFloor");
			doorInvTexture=GetDataTexture("Blocks/ForInventory/Door");
			lavaTexture=GetDataTexture("Blocks/BasicBlocks/Lava");
			#endregion

			#region Other
			lightMaskLineTexture=GetDataTexture("Particles/lightMaskLine");
			lightMaskTexture=GetDataTexture("Particles/lightMask");
			lightMaskRoundTexture=GetDataTexture("Particles/lightMaskRound");

			solidFuelSmokeTexture=GetDataTexture("Particles/AnimationsRocket/Solid");

			messageLeft= GetDataTexture("Particles/MessageBox/Left");
			messageCenter = GetDataTexture("Particles/MessageBox/Center");
			messageRight = GetDataTexture("Particles/MessageBox/Right");

			invStrawberryTexture=GetDataTexture("Plants/ForInventory/Strawberry");
			invRashberryTexture=GetDataTexture("Plants/ForInventory/Rashberry");
			invBlueberryTexture=GetDataTexture("Plants/ForInventory/Blueberry");
			flaxInvTexture=GetDataTexture("Plants/ForInventory/Flax");
 barEnergyTexture=GetDataTexture("Bars/Lightning");
 scrollbarUpTexture=GetDataTexture("Buttons/Scrollbar/Top");
			scrollbarBetweenTexture=GetDataTexture("Buttons/Scrollbar/Center");
			scrollbarDownTexture=GetDataTexture("Buttons/Scrollbar/Bottom");
		radioInvTexture=GetDataTexture("Blocks/ForInventory/Radio");
  sunTexture = GetDataTexture("Particles/Sun");

			fishTexture0 = GetDataTexture("Animals/Fish/Fish0");
			fishTexture1 = GetDataTexture("Animals/Fish/Fish1");

			RadioButtonPause=GetDataTexture("Buttons/Radio/Pause");
			RadioButtonPlay=GetDataTexture("Buttons/Radio/Play");
			chickenEatTexture = GetDataTexture("Animals/Chicken/Eating");
			chickenWalkTexture = GetDataTexture("Animals/Chicken/Walking");
			rabbitStillTexture = GetDataTexture("Animals/Rabbit/Still");
			chickenStillTexture = GetDataTexture("Animals/Chicken/Still");

			rabbitEatTexture = GetDataTexture("Animals/Rabbit/Eating");
			rabbitWalkTexture = GetDataTexture("Animals/Rabbit/Walking");
			rabbitJumpTexture = GetDataTexture("Animals/Rabbit/Jumping");

destructionTexture = GetDataTexture("Animations/destruction");
			TextureMoon = GetDataTexture("Animations/Moon");
			barEatTexture= GetDataTexture("Bars/Eat");
			barWaterTexture = GetDataTexture("Bars/Water");
			barOxygenTexture = GetDataTexture("Bars/Oxygen");
			barHeartTexture = GetDataTexture("Bars/Heart");

			#endregion

			#region Player
			string dirLegs=(Setting.MaturePlayer==0 ? "Young" : "")+(Setting.sex==Sex.Girl ? "Girl" : "Men");
			string dirChest=Setting.sex==Sex.Men ? "0": Setting.MaturePlayer.ToString();

			if (Setting.sex==Sex.Girl) {
				TextureWalkingUpCensored=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Censored");
				TextureStaticUpCensored=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Censored");
				TextureSwimmingUpCensored=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Censored");
			}

			// Hair
			if (Setting.hairType!=0) {
				TexturePlayerStaticHair=GetDataTexture("ClothesAnimations/Static/Body/Hair/"+Setting.hairType);
				TexturePlayerWalkingHair=GetDataTexture("ClothesAnimations/Walking/Body/Hair/"+Setting.hairType);
			}

			// Moustage
			if (Setting.moustageType!=0) {
				TexturePlayerWalkingMoustage=GetDataTexture("ClothesAnimations/Walking/Body/Moustage/"+Setting.moustageType);
				TexturePlayerStaticMoustage=GetDataTexture("ClothesAnimations/Static/Body/Moustage/"+Setting.moustageType);
			}

			// Face
			TexturePlayerWalkingFace=GetDataTexture("ClothesAnimations/Walking/Body/Face");
			TexturePlayerStaticFace=GetDataTexture("ClothesAnimations/Static/Body/Face");

			// Mouth
			TexturePlayerStaticMouth=GetDataTexture("ClothesAnimations/Static/Body/Mouth/Normal");
			TexturePlayerWalkingMouth=GetDataTexture("ClothesAnimations/Walking/Body/Mouth/Normal");

			// Eyes
			TexturePlayerStaticEyes=GetDataTexture("ClothesAnimations/Static/Body/Eyes/"+Setting.eyesType);
			TexturePlayerWalkingEyes=GetDataTexture("ClothesAnimations/Walking/Body/Eyes/"+Setting.eyesType);

			// Feet
			TexturePlayerStaticFeet=GetDataTexture("ClothesAnimations/Static/Body/Feet");
			TexturePlayerWalkingFeet=GetDataTexture("ClothesAnimations/Walking/Body/Feet");
			TexturePlayerSwimmingFeet=GetDataTexture("ClothesAnimations/Swimming/Body/Feet");

			TexturePlayerWalkingFeetForShoes=GetDataTexture("ClothesAnimations/Walking/Body/FeetForShoes");

			// Legs
			TexturePlayerStaticLegs=GetDataTexture("ClothesAnimations/Static/Body/Legs/"+dirLegs);
			TexturePlayerWalkingLegs=GetDataTexture("ClothesAnimations/Walking/Body/Legs/"+dirLegs);
			TexturePlayerSwimmingLegs=GetDataTexture("ClothesAnimations/Swimming/Body/Legs/"+dirLegs);

			// Chest
			TexturePlayerStaticChest=GetDataTexture("ClothesAnimations/Static/Body/Chest/"+dirChest);
			TexturePlayerWalkingChest=GetDataTexture("ClothesAnimations/Walking/Body/Chest/"+dirChest);
			//TexturePlayerSwimmingChest=GetDataTexture("ClothesAnimations/Swimming/Body/Chest/"+dirChest);


			// Censored
			TextureWalkingDownCensored=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Censored");
			TextureStaticDownCensored=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Censored");
			TextureSwimmingDownCensored=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Censored");

			//TexturePlayerSwimmingLegsWoman=Rabcr.ColorizeTexture(GetDataTexture("ClothesAnimations/Swimming/Legs/YoungGirl"),Setting.ColorSkin);

			TextureHand=GetDataTexture(@"ClothesAnimations\Hand");
			//TextureHandDown=GetDataTexture(@"ClothesAnimations\Static\Hand\Down");

			#region Boots
			ClothesFormalShoes=new ClothesTypeBoots{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/FormalShoes"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/FormalShoes"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/FormalShoes"),
				Color=ColorWhite,
			};

			ClothesPumps=new ClothesTypeBoots{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/Pumps"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/Pumps"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/Pumps"),
				Colorize=true,
			};

			ClothesSneakers=new ClothesTypeBoots{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/Sneakers"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/Sneakers"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/Sneakers"),
				Colorize=true,
			};

			ClothesSpaceBoots=new ClothesTypeBoots{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Feet/SpaceBoots"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Feet/SpaceBoots"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Feet/SpaceBoots"),
				Color=ColorWhite,
			};
			#endregion

			#region Trousers
			ClothesJeans = new ClothesTypeTrousers {
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Jeans"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Jeans"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Jeans"),
				Colorize=true,
			};

			ClothesShorts=new ClothesTypeTrousers{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Shorts"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Shorts"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Shorts"),
				ShowBodyLegs=true,
				Colorize=true,
			};
			ClothesSkirt=new ClothesTypeTrousers{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/Skirt"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/Skirt"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/Skirt"),
				ShowBodyLegs=true,
				Colorize=true,
			};
			ClothesArmyTrousers=new ClothesTypeTrousers{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/ArmyTrousers"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/ArmyTrousers"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/ArmyTrousers"),
				Colorize=true,
			};
			ClothesSpaceTrousers=new ClothesTypeTrousers{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Legs/SpaceTrousers"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/Legs/SpaceTrousers"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Legs/SpaceTrousers"),
				Color=ColorWhite,
			};
			#endregion

			#region TShirt
			ClothesTShirt=new ClothesTypeTShirt{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/TShirt"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/TShirt"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/TShirt"),
				//Texture2DClothHandDown=GetDataTexture("ClothesAnimations/Hand/Chest/Down/TShirt"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesShirt=new ClothesTypeTShirt{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Shirt"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Shirt"),
			  //  Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/Chest/Up/Shirt"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/Shirt"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesDress=new ClothesTypeTShirt{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Dress"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Dress"),
			   // Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/Chest/Up/Dress"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/Chest/Dress"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesTop=new ClothesTypeTShirt{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/Chest/"+dirChest+"/Top"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Chest/"+dirChest+"/Top"),
			   // Texture2DClothHandUp=GetDataTexture("ClothesAnimations/Hand/ChestTop/Up/Top"),
			  //  Texture2DClothHandDown=GetDataTexture("ClothesAnimations/Hand/ChestTop/Down/Top"),
				Colorize=true,
				handSize=HandClothSize.None,
				ShowBodyChest=true,
			};
			#endregion

			#region Helmet
			ClothesCap=new ClothesTypeHelmet{
				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Cap"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Cap"),
				Colorize=true,
			};
			ClothesHad=new ClothesTypeHelmet{
				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Had"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Had"),
				Color=ColorWhite,
			};
			ClothesCrown=new ClothesTypeHelmet{
				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/Crown"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/Crown"),
				Color=ColorWhite,
			};
			ClothesSpaceHelmet=new ClothesTypeHelmet{
				TextureWalkingOrSwimming=GetDataTexture("ClothesAnimations/Walking/Head/SpaceHelmet"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/Head/SpaceHelmet"),
				Color=ColorWhite,
			};
			#endregion

			#region UnderwearDown
			ClothesUnderpants=new ClothesTypeUnderwearDown{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Underpants"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Underpants"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Underpants"),
				Colorize=true,
			};
			ClothesBoxerShorts=new ClothesTypeUnderwearDown{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/BoxerShorts"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/BoxerShorts"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/BoxerShorts"),
				Colorize=true,
			};
			ClothesPanties=new ClothesTypeUnderwearDown{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Panties"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Panties"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Panties"),
				Colorize=true,
			};
			ClothesSwimsuit=new ClothesTypeUnderwearDown{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Swimsuit"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Swimsuit"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Swimsuit"),
				Colorize=true,
			};
			ClothesBikiniDown=new ClothesTypeUnderwearDown{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/DownUnderwear/Bikini"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/DownUnderwear/Bikini"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/DownUnderwear/Bikini"),
				Colorize=true,
			};
			#endregion

			#region UnderwearUp
			ClothesBra=new ClothesTypeUnderwearUp{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Bra"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Bra"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Bra"),
				Colorize=true,
			};
			ClothesBikiniTop=new ClothesTypeUnderwearUp{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/UpUnderwear/Bikini"),
				TextureSwimming=GetDataTexture("ClothesAnimations/Swimming/UpUnderwear/Bikini"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/UpUnderwear/Bikini"),
				Colorize=true,
			};
			#endregion

			#region Coat
			ClothesCoatArmy=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/CoatArmy"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/CoatArmy"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/CoatArmy"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesCoat=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/Coat"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/Coat"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/Coat"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesJacketDenim=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketDenim"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketDenim"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketDenim"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesJacketFormal=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketFormal"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketFormal"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketFormal"),
				Colorize=true,
				handSize=HandClothSize.NearlyFull,
			};
			ClothesJacketShort=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/JacketShort"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/JacketShort"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/JacketShort"),
				Colorize=true,
				handSize=HandClothSize.Half,
			};
			ClothesSpaceSuit=new ClothesTypeCoat{
				TextureWalking=GetDataTexture("ClothesAnimations/Walking/ChestTop/"+dirChest+"/SpaceSuit"),
				TextureStatic=GetDataTexture("ClothesAnimations/Static/ChestTop/"+dirChest+"/SpaceSuit"),
				Texture2DClothHand=GetDataTexture("ClothesAnimations/Hand/ChestTop/SpaceSuit"),
				Color=ColorWhite,
				handSize=HandClothSize.Full,
			};
			#endregion


			#endregion
			#endregion

          inventoryScrollbar=new GameScrollbar(scrollbarUpTexture,scrollbarBetweenTexture,scrollbarDownTexture);
			creativeScrollbar=new GameScrollbar(scrollbarUpTexture,scrollbarBetweenTexture,scrollbarDownTexture);
			craftingScrollbar=new GameScrollbar(scrollbarUpTexture, scrollbarBetweenTexture, scrollbarDownTexture) {
				maxheight=4*40
			};

            #region Set lists other
            energy=new List<Energy>();
            rainDots=new List<DInt>();
            lightsLamp=new List<MashineBlockBasic>();

            //Inventory=new List<DInt>();
            //Crafting=new List<DInt>();
            //Need=new List<DInt>();
            #endregion

            #region Load buttons
            buttonClose=new ImgButton(GetDataTexture("Buttons/Square/Close"));
            buttonClosePopUp=new ImgButton(GetDataTexture("Buttons/Square/Close"));
            buttonInvTabBlocks=new ImgButton(GetDataTexture("Buttons/Square/Blocks"));
            buttonInvTabPlants=new ImgButton(GetDataTexture("Buttons/Square/Plants"));
            buttonInvTabTools=new ImgButton(GetDataTexture("Buttons/Square/Tools"));
            buttonInvTabMashines=new ImgButton(GetDataTexture("Buttons/Square/Mashines"));
            buttonInvTabItems=new ImgButton(GetDataTexture("Buttons/Square/Items"));
            buttonInvTabCeramics=new ImgButton(GetDataTexture("Buttons/Square/Ceramics"));
            buttonInvTabFood=new ImgButton(GetDataTexture("Buttons/Square/Food"));
            buttonInvTabGlass=new ImgButton(GetDataTexture("Buttons/Square/Glass"));
            buttonInvTabMaterials=new ImgButton(GetDataTexture("Buttons/Square/Materials"));
            buttonInvAnimals=new ImgButton(GetDataTexture("Buttons/Square/Animals"));

            buttonRocket=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
                Text="Odletět",
                //center=true
            };

            buttonRadio=new GameButtonSmall(Textures.ButtonCenter/*,spriteFont_small,spriteFont_medium*/) {
                Text="Otevřít",
                //  center=true
            };

           {
				Texture2D button=GetDataTexture("Buttons/Other/Craft");
				buttonNext=new GameButtonSmall(button) { Text="->" };
				buttonPrev=new GameButtonSmall(button) { Text="<-" };

				buttonCraft1x=new GameButtonSmall(button) { Text="1×" };
				buttonCraft10x=new GameButtonSmall(button) { Text="10×" };
				buttonCraft100x=new GameButtonSmall(button) { Text="100×" };
			}
            #endregion

            #region Set lists other
            DroppedItems=new List<Item>();
            windable=new List<ShortAndByte>();
            FurnaceStone=new List<ShortAndByte>();
            chunksWithPlants=new List<int>();
            Chargers=new List<ShortAndByte>();
            Miners=new List<ShortAndByte>();
            movingAnimals=new List<Mob>();
            Composters=new List<ShortAndByte>();


            energy=new List<Energy>();
            rainDots=new List<DInt>();
            lightsLamp=new List<MashineBlockBasic>();

            //    Inventory = new List<DInt>();
            //Crafting=new List<DInt>();
            //Need=new List<DInt>();
            #endregion

            #region Set basic
            //fogTarget= new RenderTarget2D(Graphics, Graphics.Viewport.Width, Graphics.Viewport.Height);
            ZoomMatrix = Matrix.CreateScale(Setting.Zoom, Setting.Zoom, 0);

			newKeyboardState = Keyboard.GetState();
			newMouseState = Mouse.GetState();
			oldKeyboardState = newKeyboardState;
			oldMouseState = newMouseState;
			previousScrollValue = oldMouseState.ScrollWheelValue;

			InventoryCreative=new ItemInv[600];
			InventoryCrafting=new ItemInv[600];
			InventoryNormal=new ItemInv[200];
			InventoryClothes=new ItemInv[8];

            maxInvCount=32+8;
            #endregion

            //dayAlpha
            if (time>hour*6&&time<hour*7) {
                dayAlpha=((time-hour*7f)/hour/2f)+1f;
            } else if (time>hour*18&&time<hour*19) {
                dayAlpha=(hour*19f-time)/hour/2f+0.5f;
            } else if (time>=hour*7&&time<=hour*18) {
                dayAlpha=1f;
            } else {
                dayAlpha=0.5f;
            }


            menu=new GameButtonMedium(Textures.ButtonCenter/*, spriteFont_medium, spriteFont_big*/) {
                Text="Zpět do menu",
                // center=true
            };

            state++;
            Resize();
        }

        public static void AddStringToByteList(List<byte> bytes, string str) {
            bytes.Add((byte)str.Length);
            bytes.AddRange(System.Text.Encoding.UTF8.GetBytes(str));
        }

        public override void Shutdown() {
            exit=true;
            #region Send logout
            if (currentState==Current.Playing) {
                //Queue.Add(
                //    new DataToSend {
                //        Bytes=new Data {
                //            To="{Server}",
                //            Cmd=Command.Logout
                //        }.ToByte(),
                //        Importance=Importance.VeryImportant
                //    }
                //);
            }

            // if (cancelExit) {
            try {
                clientSocket.Disconnect(false);
            } catch { }
            try {
                clientSocket.Close();
                clientSocket.Dispose();
            } catch { }
            //}

            #endregion

            // return cancelExit;
        }

        public override void Update(GameTime gameTime) {
            if (Queue.Count!=0) {
                try {
                    if (Queue[0]!=null) {
                        byte[] bytes = Queue[0].Bytes;
                        clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
                    } // } catch (Exception ex){
                      //     Console.WriteLine(ex.Message+"2");
                } finally { //Console.WriteLine("sending...");
                    Queue.RemoveAt(0);
                }
            }

            if (Current.Playing!=currentState) {
                #region Mouse
                oldMouseState=newMouseState;
                previousScrollValue=oldMouseState.ScrollWheelValue;
                newMouseState=Mouse.GetState();
                mouseLeftPress=false;
                mouseLeftRelease=false;
                mouseRightPress=false;
                mouseRightRelease=false;

                if (newMouseState.LeftButton==ButtonState.Pressed) {
                    mouseLeftDown=true;
                    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
                } else {
                    mouseLeftDown=false;
                    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
                }

                if (newMouseState.RightButton==ButtonState.Pressed) {
                    mouseRightDown=true;
                    if (oldMouseState.RightButton==ButtonState.Released) mouseRightPress=true;
                } else {
                    mouseRightDown=false;
                    if (oldMouseState.RightButton==ButtonState.Pressed) mouseRightRelease=true;
                }
                SetMousePos();
                //mousePosDiv16.X=(int)mousePos.X/16;
                //mousePosDiv16.Y=(int)mousePos.Y/16;

                //mousePosRound.X=mousePosDiv16.X*16;
                //mousePosRound.Y=mousePosDiv16.Y*16;
                #endregion

                MousePos.mouseRealPosY=newMouseState.Y;

                MousePos.mouseRealPosX=newMouseState.X;
                MousePos.mouseLeftDown=newMouseState.LeftButton==ButtonState.Pressed;
                MousePos.mouseLeftRelease=!MousePos.mouseLeftDown && oldMouseState.LeftButton==ButtonState.Pressed;
                //#region Set Mouse State and Keyboard
                //oldMouseState=newMouseState;
                //oldKeyboardState=newKeyboardState;

                //newKeyboardState=Keyboard.GetState();
                //newMouseState=Mouse.GetState();

                //mouseLeftPress=false;
                //mouseLeftRelease=false;

                //if (newMouseState.LeftButton==ButtonState.Pressed) {
                //    mouseLeftDown=true;
                //    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
                //} else {
                //    mouseLeftDown=false;
                //    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
                //}
                //#endregion

                if (sn!="") {
                    System.Windows.Forms.Form MyGameForm = (System.Windows.Forms.Form)System.Windows.Forms.Control.FromHandle(Rabcr.Game.Window.Handle);
                    MyGameForm.Text=sn;

                    sn="";
                }

                if (menu.Update()) {
                    Rabcr.GoTo(new Menu(new MenuMultiplayer()));
                }
            } else {

                Rabcr.Game.Window.Title=serverName+" - "+Global.GameName;

                #region Mouse
                oldMouseState=newMouseState;
                previousScrollValue=oldMouseState.ScrollWheelValue;
                newMouseState=Mouse.GetState();
                mouseLeftPress=false;
                mouseLeftRelease=false;
                mouseRightPress=false;
                mouseRightRelease=false;

                if (newMouseState.LeftButton==ButtonState.Pressed) {
                    mouseLeftDown=true;
                    if (oldMouseState.LeftButton==ButtonState.Released) mouseLeftPress=true;
                } else {
                    mouseLeftDown=false;
                    if (oldMouseState.LeftButton==ButtonState.Pressed) mouseLeftRelease=true;
                }

                if (newMouseState.RightButton==ButtonState.Pressed) {
                    mouseRightDown=true;
                    if (oldMouseState.RightButton==ButtonState.Released) mouseRightPress=true;
                } else {
                    mouseRightDown=false;
                    if (oldMouseState.RightButton==ButtonState.Pressed) mouseRightRelease=true;
                }
                SetMousePos();

                mousePosDiv16.X=(int)mousePos.X/16;
                mousePosDiv16.Y=(int)mousePos.Y/16;

                mousePosRoundX=mousePosDiv16.X*16;
                mousePosRoundY=mousePosDiv16.Y*16;

                mouseRealPosX=newMouseState.X;
                mouseRealPosY=newMouseState.Y;
                #endregion

                #region Keyboard
                oldKeyboardState=newKeyboardState;
                newKeyboardState=Keyboard.GetState();

                if (oldKeyboardState.IsKeyDown(Keys.F12)) {
                    if (newKeyboardState.IsKeyUp(Keys.F12)) {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                    }
                }

                if (oldKeyboardState.IsKeyDown(Keys.F1)) {
                    if (newKeyboardState.IsKeyUp(Keys.F1)) {
                        if (debug) {
                            debug=false;

                            cpu.Close();
                            cpu.Dispose();
                            cpu=null;

                            ram.Close();
                            ram.Dispose();
                            ram=null;

                            cpuUsage.Close();
                            cpuUsage.Dispose();
                            cpuUsage=null;

                            freeRam.Close();
                            freeRam.Dispose();
                            freeRam=null;
                        } else {
                            //  timer60=-1;
                            string processName = System.Diagnostics.Process.GetCurrentProcess().ProcessName;
                            //cpu=new PerformanceCounter("Process", "Working Set - Private", processName);
                            //ram =new PerformanceCounter("Process", "% Processor Time", processName);

                            //cpuUsage = new PerformanceCounter("Processor", "% Processor Time", "_Total");
                            //freeRam = new PerformanceCounter("Memory", "Available MBytes");
                            try {
                                cpu=new PerformanceCounter() {
                                    CategoryName="Process",
                                    CounterName="% Processor Time",
                                    InstanceName=processName,
                                };
                                ram=new PerformanceCounter() {
                                    CategoryName="Process",
                                    CounterName="Working Set - Private",
                                    InstanceName=processName,
                                };
                                cpuUsage=new PerformanceCounter() {
                                    CategoryName="Processor",
                                    CounterName="% Processor Time",
                                    InstanceName="_Total",
                                };
                                freeRam=new PerformanceCounter() {
                                    CategoryName="Memory",
                                    CounterName="Available MBytes"
                                };

                                // cpu=new PerformanceCounter("Process", "% Processor Time", processName);
                                // ram =new PerformanceCounter("Process", "Working Set - Private", processName);

                                // cpuUsage = new PerformanceCounter("Processor", "% Processor Time", "_Total");
                                // freeRam = new PerformanceCounter("Memory", "Available MBytes");

                                debug=true;
                            } catch {
                                System.Windows.Forms.MessageBox.Show("Chyba při inicializaci PerformanceCounter, Informace pro vývojáře budou skryty", "ERROR");
                                debug=false;
                            }

                        }
                    }
                }

                if (oldKeyboardState.IsKeyDown(Keys.F2)) {
                    if (newKeyboardState.IsKeyUp(Keys.F2)) {
                        if (showInventory) showInventory=false; else showInventory=true;
                    }
                }

                if (oldKeyboardState.IsKeyDown(Keys.F3)) {
                    if (newKeyboardState.IsKeyUp(Keys.F3)) {
                        if (showPlayer) showPlayer=false; else showPlayer=true;
                    }
                }

                if (newKeyboardState.IsKeyDown(Setting.KeyExit)) {
                    if (oldKeyboardState.IsKeyUp(Setting.KeyExit)) {
                        ////////////////exit3,
                        //Shutdown();
                        // Shutdown();
                     //   Log.WriteLine("Odhlašování ze serveru");
                        Rabcr.GoTo(new Menu(new MenuMultiplayer()));

                    }
                }

                if (newKeyboardState.IsKeyDown(Setting.KeyInventory)) {
                    if (oldKeyboardState.IsKeyUp(Setting.KeyInventory)) {
                        ChangeInventoryState();

                    }// Console.WriteLine("!!!!!!!!!!!!!!!!!");
                }

                if (newKeyboardState.IsKeyDown(Setting.KeyMessage)) {
                    if (oldKeyboardState.IsKeyUp(Setting.KeyMessage)) {
                        if (inventory==0) inventory=InventoryType.Typing;
                    }
                }
                #endregion

                #region Player pos in Window
                if (PlayerX>TerrainLenght*16-Global.WindowWidth) SetPlayerPos(Global.WindowWidth, PlayerY);

                if (PlayerX<Global.WindowWidth) SetPlayerPos(TerrainLenght*16-Global.WindowWidth, PlayerY);


                if (PlayerX-WindowCenterX>4 || PlayerY-WindowCenterY>4 || PlayerX-WindowCenterX<-4 || PlayerY-WindowCenterY<-4) {
                    WindowXPlayer+=(PlayerX-WindowCenterX)/16f;
                    WindowYPlayer+=(PlayerY-WindowCenterY)/16f;

                    WindowXWithout=(int)WindowXPlayer;
                    WindowYWithout=(int)WindowYPlayer;
                }

                WindowCenterX=WindowXWithout+Global.WindowWidthHalf;
                WindowCenterY=WindowYWithout+Global.WindowHeightHalf;

                WindowX=WindowCenterX-(int)(Global.WindowWidthHalf/Setting.Zoom);
                WindowY=WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom);

                terrainStartIndexX=(WindowX-1)/16;
                terrainStartIndexY=WindowY/16;

                if (terrainStartIndexX<0) terrainStartIndexX=0;
                if (terrainStartIndexY<0) terrainStartIndexY=0;

                terrainStartIndexW=(int)((WindowX+Global.WindowWidth/Setting.Zoom)/16)+1;
                terrainStartIndexH=(int)((WindowY+Global.WindowHeight/Setting.Zoom)/16)+1;

                if (terrainStartIndexW>TerrainLenght) terrainStartIndexW=TerrainLenght;
                if (terrainStartIndexH>124) terrainStartIndexH=124;
                if (terrainStartIndexH<0) terrainStartIndexH=0;

                if (terrainStartIndexY>terrainStartIndexH) terrainStartIndexY=terrainStartIndexH;
                #endregion

                #region Movement
                if (inventory==InventoryType.Normal) {
                    if (newMouseState.ScrollWheelValue!=previousScrollValue) {
                        if (newMouseState.ScrollWheelValue<previousScrollValue) {
                            if (boxSelected<4) boxSelected++;
                        } else if (newMouseState.ScrollWheelValue>previousScrollValue) {
                            if (boxSelected!=0) boxSelected--;
                        }
                    }

                    if (rocket) {
                        if (rocketDown) PlayerY+=8;
                        else PlayerY-=10;
                    } else if (Global.WorldDifficulty==2) {

                        if (newKeyboardState.IsKeyDown(Keys.Up)) {
                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerY-=10;
                            else PlayerY-=3;
                        }

                        if (newKeyboardState.IsKeyDown(Keys.Down)) {
                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerY+=10;
                            else PlayerY+=3;
                        }

                        if (newKeyboardState.IsKeyDown(Keys.Left)) {
                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX-=10;
                            else PlayerX-=3;
                        }

                        if (newKeyboardState.IsKeyDown(Keys.Right)) {
                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX+=10;
                            else PlayerX+=3;
                        }

                        if (newKeyboardState.IsKeyDown(Keys.Left)) {
                            if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) PlayerX-=10;
                            else PlayerX-=3;
                        }
                    } else {
                        swimming=CheckWater();
                        bool canbreatheDuringSwimming = !CheckWaterUp();
                        waterDown=CheckWaterDown();

                        //if (waterDown || swimming){
                        //    barWater--;
                        //    if (barWater<0)barWater=0;
                        //}

                        if (canbreatheDuringSwimming) {
                            barOxygen--;
                            if (barOxygen<0) barOxygen=0;
                        } else {
                            barOxygen+=0.05f;
                            if (barOxygen>32) {
                                barHeart+=.08f;
                                if (barHeart>32) Die(Lang.Texts[161] /*"Nemůžeš dýchat vodu","You can't breathe water"*/);
                            }
                        }

                        if (newKeyboardState.IsKeyDown(Setting.KeyJump)) {
                            if (CheckLadder()) {
                                PlayerY--;

                                barEnergy+=0.01f;
                                barWater+=0.01f;
                                gravitySpeed=-2f;
                            } else if (swimming) {
                                PlayerY--;
                                barEnergy+=0.01f;
                                barWater+=0.01f;
                                gravitySpeed=-1f;
                            } else {
                                if (distanceToGround==0) {
                                    if (gravitySpeed==0) {
                                        gravitySpeed=-7;
                                        PlayerY--;

                                        barEnergy+=0.05f;
                                    }
                                }
                            }
                        }


                        //         //playerImg+=20;
                        //         //if (playerImg==420)playerImg=0;
                        //   if (newKeyboardState.IsKeyDown(Setting.KeyJump)) {
                        //             if (distanceToGround==0 && gravitySpeed==0){
                        //                 gravitySpeed=-7;
                        //                 PlayerY--;

                        //                 barEnergy+=0.05f;
                        //             }
                        //}
                        if (!swimming&&!waterDown) playerState=0;

                        //    playerState=0;

                        if (newKeyboardState.IsKeyDown(Setting.KeyLeft)) {
                            int dis = 1000;
                            for (int y = (PlayerY-20-1)/16; y<(PlayerY+20)/16; y++) {
                                int x = (PlayerX-11-16)/16;
                                if (terrain[x]!=null) {
                                    if (y>=0&&y<125) {
                                        if (terrain[x].IsSolidBlocks[y]) {
                                            if (PlayerX-11-x*16<dis) {
                                                dis=PlayerX-11-x*16;
                                            }
                                        }
                                    }
                                }
                            }
                            if (dis>18) {
                                if (newKeyboardState.IsKeyDown(Setting.KeyRun)) {
                                    if (barEnergy<31) {
                                        if (dis<4) PlayerX-=dis;
                                        else PlayerX-=4;

                                        barEnergy+=0.08f;

                                        playerImg+=40;

                                        if (walkingSoundDuration<0) {
                                            if (Global.HasSoundGraphics) {
                                                SoundEffects.Steps.Play();
                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                            }
                                        } else walkingSoundDuration--;

                                    } else {
                                        if (dis==1) PlayerX-=dis;
                                        else PlayerX-=2;

                                        barEnergy+=0.045f;

                                        playerImg+=20;

                                        if (walkingSoundDuration<0) {
                                            if (Global.HasSoundGraphics) {
                                                SoundEffects.Steps.Play();
                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                            }
                                        } else walkingSoundDuration--;
                                    }
                                    if (playerImg>=420) playerImg=0;

                                } else {
                                    if (dis==1) PlayerX-=dis;
                                    else PlayerX-=2;

                                    barEnergy+=0.045f;

                                    playerImg+=20;
                                    if (playerImg>=420) playerImg=0;

                                    if (walkingSoundDuration<0) {
                                        if (Global.HasSoundGraphics) {
                                            SoundEffects.Steps.Play();
                                            walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                        }
                                    } else walkingSoundDuration--;
                                }
                                playerState=1;
                            }
                        }

                        if (newKeyboardState.IsKeyDown(Setting.KeyRight)) {
                            int dis = 1000;
                            for (int y = (PlayerY-20/*-16*/-1)/16; y<(PlayerY+20)/16; y++) {
                                int x = (PlayerX+11+16)/16;
                                if (terrain[x]!=null) {
                                    if (y>=0&&y<125) {
                                        if (terrain[x].IsSolidBlocks[y]/*==MBlockState.Exists*/) {
                                            if (x*16-PlayerX-11<dis) {
                                                dis=x*16-PlayerX-11;
                                            }
                                        }
                                    }
                                }

                            }

                            if (dis>2) {
                                if (newKeyboardState.IsKeyDown(Setting.KeyRun)) {
                                    if (barEnergy<31) {
                                        if (dis<4) PlayerX+=dis;
                                        else PlayerX+=4;

                                        barEnergy+=0.08f;

                                        playerImg+=40;

                                        if (walkingSoundDuration<0) {
                                            if (Global.HasSoundGraphics) {
                                                SoundEffects.Steps.Play();
                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                            }
                                        } else walkingSoundDuration--;
                                    } else {
                                        if (dis==1) PlayerX+=dis;
                                        else PlayerX+=2;

                                        barEnergy+=0.045f;

                                        playerImg+=20;

                                        if (walkingSoundDuration<0) {
                                            if (Global.HasSoundGraphics) {
                                                SoundEffects.Steps.Play();
                                                walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                            }
                                        } else walkingSoundDuration--;
                                    }

                                    if (playerImg>=420) playerImg=0;
                                } else {
                                    if (dis==1) PlayerX+=dis;
                                    else PlayerX+=2;

                                    barEnergy+=0.045f;

                                    playerImg+=20;
                                    if (playerImg>=420) playerImg=0;

                                    if (walkingSoundDuration<0) {
                                        if (Global.HasSoundGraphics) {
                                            SoundEffects.Steps.Play();
                                            walkingSoundDuration=SoundEffects.Steps.Duration.Milliseconds/16;
                                        }
                                    } else walkingSoundDuration--;
                                }
                                playerState=2;
                            }

                        }

                        if (barEnergy>32) barEnergy=32;

                        PlayerGravity();
                        // }
                    }
                    #endregion

                    // #region Mouse scroll
                    // if (newMouseState.ScrollWheelValue != previousScrollValue) {
                    //     if (inventory==0) {
                    //if (newMouseState.ScrollWheelValue < previousScrollValue) {
                    // if (boxSelected<4) boxSelected++;
                    //} else if (newMouseState.ScrollWheelValue > previousScrollValue) {
                    // if (boxSelected!=0) boxSelected--;
                    //}
                    //     } else if (inventory==InventoryType.BasicInv) {
                    //         if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4 && newMouseState.X<Global.WindowWidthHalf+300
                    //             && newMouseState.Y>Global.WindowHeightHalf-200+2 && newMouseState.Y<Global.WindowHeightHalf) {

                    //             if (newMouseState.ScrollWheelValue < previousScrollValue) {
                    //                 inventoryScrollbarValue+=9;
                    //     if (inventoryScrollbarValue>maxInvCount) inventoryScrollbarValue=maxInvCount;

                    //    } else if (newMouseState.ScrollWheelValue > previousScrollValue) {
                    //                 inventoryScrollbarValue-=9;
                    //     if (inventoryScrollbarValue<0) inventoryScrollbarValue=0;
                    //    }
                    //             if (maxInvCount<45) inventoryScrollbarValue=0;
                    //         } else if (newMouseState.X>Global.WindowWidthHalf-300+4+40 && newMouseState.X<Global.WindowWidthHalf
                    //             && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8 && newMouseState.Y<Global.WindowHeightHalf+200) {
                    //             if (newMouseState.ScrollWheelValue < previousScrollValue) {
                    //                 inventoryScrollbarValueCrafting+=6;
                    //     if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax;

                    //    } else if (newMouseState.ScrollWheelValue > previousScrollValue) {
                    //                 inventoryScrollbarValueCrafting-=6;
                    //     if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
                    //    }
                    //             if (inventoryScrollbarValueCraftingMax<6*4) inventoryScrollbarValueCrafting=0;
                    //          }
                    //     }
                    // }
                    // #endregion

                    // #region Player pos in Window
                    // if (PlayerX> TerrainLenght * 16-Global.WindowWidth) {
                    //     SetPlayerPos(Global.WindowWidth, PlayerY);
                    //    // PlayerX=(int)(Global.WindowWidthHalf*Setting.Zoom);
                    // }
                    // if (PlayerX<Global.WindowWidth) {
                    //     SetPlayerPos(TerrainLenght * 16-Global.WindowWidth, PlayerY);
                    //     // PlayerX=(int)(Global.WindowWidthHalf*Setting.Zoom);
                    // }

                    // if (PlayerX-WindowCenterX>4 || PlayerY-WindowCenterY>4 || PlayerX-WindowCenterX<-4 || PlayerY-WindowCenterY<-4){
                    //     WindowXPlayer=WindowXPlayer+(PlayerX-WindowCenterX)/16f;
                    //     WindowYPlayer=WindowYPlayer+(PlayerY-WindowCenterY)/16f;

                    //     WindowXWithout=(int)WindowXPlayer;
                    //     WindowYWithout=(int)WindowYPlayer;
                    // }

                    // WindowCenterX=WindowXWithout+Global.WindowWidthHalf;
                    // WindowCenterY=WindowYWithout+Global.WindowHeightHalf;

                    // WindowX=WindowCenterX-(int)(Global.WindowWidthHalf/Setting.Zoom);
                    // WindowY=WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom);

                    //// Console.WriteLine(WindowX);
                    // //int deltaX = (int)((Global.WindowWidth-Global.WindowWidth/Setting.Zoom)/2);
                    // //int deltaY = (int)((Global.WindowHeight-Global.WindowHeight/Setting.Zoom)/2);
                    // terrainStartIndexX=(WindowX-1)/16;
                    // terrainStartIndexY=WindowY/16;

                    // if (terrainStartIndexX<0)terrainStartIndexX=0;
                    // if (terrainStartIndexY<0)terrainStartIndexY=0;

                    // terrainStartIndexW=(int)((WindowX+Global.WindowWidth/Setting.Zoom)/16)+1;
                    // terrainStartIndexH=(int)((WindowY+Global.WindowHeight/Setting.Zoom)/16)+1;

                    // if (terrainStartIndexW>TerrainLenght)terrainStartIndexW=TerrainLenght;
                    // if (terrainStartIndexH>125) terrainStartIndexH=125;

                    //     #endregion
                    if (diserpeard==250) { DoCommand(); }
                    if (diserpeard>0) diserpeard--;

                    #region Game - destruction + place blocks + drop item
                    if (mouseRightDown) MouseRightAction();
                    if (mouseRightPress) ItemEat();

                    if (mouseLeftDown) {
                        if (destroing) {
                            if (destroyBlock.X==mousePosDiv16.X&&destroyBlock.Y==mousePosDiv16.Y) {
                                destroingIndex++;

                                if (destroingIndex>destringMaxIndex) {
                                    if (destroyBlock.X>spawnX/16+safeSpawn||destroyBlock.X<spawnX/16-safeSpawn) {
                                        if (Global.WorldDifficulty==2) {
                                            switch (destroingBlockDepth) {
                                                case BlockType.Back:
                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].Background[destroyBlock.Y].Id, BlockType.Back);
                                                    //terrain[destroyBlock.X].Background[destroyBlock.Y]=null;
                                                    //terrain[destroyBlock.X].IsBackground[destroyBlock.Y]=false;
                                                    break;

                                                case BlockType.Solid:
                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y].Id, BlockType.Solid);
                                                  //  terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y]=null;
                                                 //   terrain[destroyBlock.X].IsSolidBlocks[destroyBlock.Y]=false;

                                                    //if (destroingBlockType==(byte)BlockId.Dirt
                                                    //||destroingBlockType==(byte)BlockId.GrassBlockDesert
                                                    //||destroingBlockType==(byte)BlockId.GrassBlockForest
                                                    //||destroingBlockType==(byte)BlockId.GrassBlockHills
                                                    //||destroingBlockType==(byte)BlockId.GrassBlockJungle
                                                    //||destroingBlockType==(byte)BlockId.GrassBlockPlains) {
                                                    //    DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);

                                                    //    terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=new NormalBlock(backgroundDirtTexture, (byte)BlockId.BackDirt, destroyBlock.ToVector());
                                                    //  //  terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=true;
                                                    //}
                                                    //if (destroingBlockType==(byte)BlockId.Sand) DestroySandUp(destroyBlock.X, destroyBlock.Y-1);

                                                    //RefreshLighting(destroyBlock.X);
                                                    break;

                                                case BlockType.Top:
                                                    //if (destroingBlockType==(byte)BlockId.Charger) RemovefromChargers(destroyBlock.X, destroyBlock.Y);
                                                    //if (destroingBlockType==(byte)BlockId.Miner) RemovefromMiners(destroyBlock.X, destroyBlock.Y);
                                                    //if (destroingBlockType==(byte)BlockId.Windmill) RemovefromWintable(destroyBlock.X, destroyBlock.Y);
                                                    //if (destroingBlockType==(byte)BlockId.Flag) RemovefromWintable(destroyBlock.X, destroyBlock.Y);
                                                    //if (destroingBlockType==(byte)BlockId.Lamp) lightsLamp.Remove((MashineBlockBasic)terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]);

                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].TopBlocks[destroyBlock.Y].Id,BlockType.Top);
                                                   // terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=null;
                                                   // terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=false;

                                                    //if (destroingBlockType==(byte)BlockId.Label
                                                    //||destroingBlockType==(byte)BlockId.SolarPanel
                                                    //||destroingBlockType==(byte)BlockId.Watermill
                                                    //||destroingBlockType==(byte)BlockId.Windmill
                                                    //||destroingBlockType==(byte)BlockId.FurnaceElectric
                                                    //||destroingBlockType==(byte)BlockId.Macerator
                                                    //||destroingBlockType==(byte)BlockId.Radio
                                                    //||destroingBlockType==(byte)BlockId.Lamp
                                                    //||destroingBlockType==(byte)BlockId.Miner) {
                                                    //    RefreshAroundLabels(destroyBlock.X, destroyBlock.Y);
                                                    //}
                                                    break;

                                                case BlockType.Plant:
                                                    foreach (Plant plant in terrain[destroyBlock.X].Plants) {
                                                        if (plant.Height==destroyBlock.Y) {
                                                           // terrain[destroyBlock.X].Plants.Remove(plant);
                                                          //  RemovePlant(destroyBlock.Y);
                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id, BlockType.Plant);
                                                            break;
                                                        }
                                                    }
                                                    break;

                                                case BlockType.Mob:
                                                    foreach (MMob mob in terrain[destroyBlock.X].Mobs) {
                                                        if (mob.Height==destroyBlock.Y) {
                                                          //  terrain[destroyBlock.X].Mobs.Remove(mob);
                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, mob.Id, BlockType.Mob);
                                                            break;
                                                        }
                                                    }
                                                    break;
                                            }
                                        } else {
                                            switch (destroingBlockDepth) {
                                                case BlockType.Back:
                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].Background[destroyBlock.Y].Id, BlockType.Back);
                                                   // terrain[destroyBlock.X].Background[destroyBlock.Y]=null;
                                                  //  terrain[destroyBlock.X].IsBackground[destroyBlock.Y]=false;
                                                    //GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);
                                                    //RemovePartTool();
                                                    break;

                                                case BlockType.Solid:
                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y].Id, BlockType.Solid);
                                                  //  terrain[destroyBlock.X].SolidBlocks[destroyBlock.Y]=null;
                                                 //   terrain[destroyBlock.X].IsSolidBlocks[destroyBlock.Y]=MBlockState.TmpRemoved;
                                                    //GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);
                                                    //RefreshLighting(destroyBlock.X);

                                                   // RemovePartTool();
                                                    break;

                                                case BlockType.Top:
                                                    //switch ((BlockId)destroingBlockType) {
                                                    //    case BlockId.Lamp:
                                                    //        lightsLamp.Remove((MashineBlockBasic)terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]);
                                                    //        break;

                                                    //    case BlockId.Windmill:
                                                    //        RemovefromWintable(destroyBlock.X, destroyBlock.Y);
                                                    //        break;

                                                    //    case BlockId.Flag:
                                                    //        RemovefromWintable(destroyBlock.X, destroyBlock.Y);
                                                    //        break;

                                                    //    case BlockId.CactusBig:
                                                    //        DestroyCactusBig(destroyBlock.X, destroyBlock.Y);
                                                    //        break;

                                                    //    case BlockId.CactusSmall:
                                                    //        DestroyCactusSmall(destroyBlock.X, destroyBlock.Y);
                                                    //        break;
                                                    //}

                                                    SendRemovedBlock(destroyBlock.X, destroyBlock.Y, terrain[destroyBlock.X].TopBlocks[destroyBlock.Y].Id, BlockType.Top);

                                                   // terrain[destroyBlock.X].TopBlocks[destroyBlock.Y]=null;
                                                   // terrain[destroyBlock.X].IsTopBlocks[destroyBlock.Y]=false;

                                                    //GetItemsFromBlock(destroingBlockType, destroyBlock.X, destroyBlock.Y);

                                                    //if (destroingBlockType==(byte)BlockId.Label
                                                    //|| destroingBlockType==(byte)BlockId.SolarPanel
                                                    //|| destroingBlockType==(byte)BlockId.Watermill
                                                    //|| destroingBlockType==(byte)BlockId.Windmill
                                                    //|| destroingBlockType==(byte)BlockId.FurnaceElectric
                                                    //|| destroingBlockType==(byte)BlockId.Macerator
                                                    //|| destroingBlockType==(byte)BlockId.Radio
                                                    //|| destroingBlockType==(byte)BlockId.Lamp
                                                    //|| destroingBlockType==(byte)BlockId.Miner) {
                                                    //    RefreshAroundLabels(destroyBlock.X,destroyBlock.Y);
                                                    //}
                                                    //RemovePartTool();

                                                    break;

                                                case BlockType.Plant:
                                                    foreach (Plant plant in terrain[destroyBlock.X].Plants) {
                                                        if (plant.Height==destroyBlock.Y) {
                                                            //GetItemsFromPlant(destroingBlockType, destroyBlock, plant.Grow==255);
                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id,BlockType.Plant);
                                                          //  terrain[destroyBlock.X].Plants.Remove(plant);

                                                          //  SendRemovedBlock(destroyBlock.X, destroyBlock.Y, plant.Id);
                                                            break;
                                                        }
                                                    }
                                                    break;

                                                case BlockType.Mob:
                                                    foreach (MMob mob in terrain[destroyBlock.X].Mobs) {
                                                        if (mob.Height==destroyBlock.Y) {
                                                           // GetItemsFromMob(destroingBlockType, destroyBlock.X, destroyBlock.Y);
                                                            SendRemovedBlock(destroyBlock.X, destroyBlock.Y, mob.Id, BlockType.Mob);
                                                          //  terrain[destroyBlock.X].Mobs.Remove(mob);
                                                          //  RemovePartTool();
                                                            break;
                                                        }
                                                    }
                                                    break;
                                            }
                                            destroing=false;
                                        }
                                    } else {
                                        DisplayText("V oblasti spawnu je zakázána úprava terénu");
                                        destroing=false;
                                    }
                                }
                            } else destroing=false;
                        } else {
                            if (mousePosDiv16.Y>0&&mousePosDiv16.Y<125) {
                                if (terrain[mousePosDiv16.X]!=null) {
                                    Destroy(mousePosDiv16.X, mousePosDiv16.Y);
                                }
                            }
                        }
                    } else destroing=false;

                    if (newKeyboardState.IsKeyDown(Setting.KeyDropItem)) {
						if (oldKeyboardState.IsKeyUp(Setting.KeyDropItem)) {
						   // bool all=newKeyboardState.IsKeyDown(Setting.KeyRun);

							if (InventoryNormal[boxSelected].Id!=0) {
								Do();

								void Do() {
									switch (InventoryNormal[boxSelected]) {
										case ItemInvBasic16 i1:
											if (i1.GetCount>1) {
												i1.SetCount=i1.GetCount-1;
											} else {
												InventoryNormal[boxSelected]=itemBlank;
											}
											if (i1.GetCount>0){
												if (PlayerX-mousePos.X>0) {
													DroppedItems.Add(new Item{
														X = (int)PlayerX-11-16-1,
														Y = (int)PlayerY-22,
														item=new ItemNonInvBasic(i1.Id,1/*i1.GetCount*/),
														Texture=i1.Texture,
													});
												} else {
														DroppedItems.Add(new Item {
														X = (int)PlayerX+11+1,
														Y = (int)PlayerY-22,
														item=new ItemNonInvBasic(i1.Id,1/*i1.GetCount*/),
														Texture=i1.Texture,
													});
												}
											}
											break;

									case ItemInvFood16 i1:
										i1.SetCount=i1.GetCount-1;

										if (PlayerX-mousePos.X>0) {
											DroppedItems.Add(new Item{
												X = (int)PlayerX-11-16-1,
												Y = (int)PlayerY-22,
												item=new ItemNonInvFood(i1.Id,i1.GetCount,i1.CountMaximum,i1.GetDescay,i1.DescayMaximum),
												Texture=i1.Texture,
											});
										} else {
											DroppedItems.Add(new Item{
												X =(int)PlayerX+11+1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvFood(i1.Id,i1.GetCount,i1.CountMaximum,i1.GetDescay,i1.DescayMaximum),
												Texture=i1.Texture,
											});
										}

										if (i1.GetCount==0) InventoryNormal[boxSelected]=itemBlank;
										return;

									case ItemInvBasicColoritzed32NonStackable i1:
										if ((int)PlayerX-mousePos.X>0) {
											DroppedItems.Add(new Item{
												X =(int)PlayerX-11-16-1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvBasicColoritzedNonStackable(i1.Id,i1.color),
												Texture=i1.Texture,
											});
										} else {
												DroppedItems.Add(new Item{
												X =(int)PlayerX+11+1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvBasicColoritzedNonStackable(i1.Id,i1.color),
												Texture=i1.Texture,
											});
										}

										InventoryNormal[boxSelected]=itemBlank;
										return;

									case ItemInvNonStackable16 i1:
										if ((int)PlayerX-mousePos.X>0) {
											DroppedItems.Add(new Item{
												X =(int)PlayerX-11-16-1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvNonStackable(i1.Id),
												Texture=i1.Texture,
											});
										} else {
												DroppedItems.Add(new Item{
												X =(int)PlayerX+11+1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvNonStackable(i1.Id),
												Texture=i1.Texture,
											});
										}

										InventoryNormal[boxSelected]=itemBlank;
										return;

									case ItemInvNonStackable32 i1:
										if (PlayerX-mousePos.X>0) {
											DroppedItems.Add(new Item {
												X =(int)PlayerX-11-16-1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvNonStackable(i1.Id),
												Texture=i1.Texture,
											});
										} else {
												DroppedItems.Add(new Item {
												X =(int)PlayerX+11+1,
												Y=(int)PlayerY-22,
												item=new ItemNonInvNonStackable(i1.Id),
												Texture=i1.Texture,
											});
										}

										InventoryNormal[boxSelected]=itemBlank;
										return;
									}
								}
							}
						}
					}
                    #endregion
                    // do not write here
                    #region Inventory
                } else {
                    switch (inventory) {
                        #region 1 Typing
                        case InventoryType.Typing:
							string newText=text;
							text =TextEdit(text);
							while (text.Length*13>750) text=text.Substring(0,text.Length-1);
							if (newText!=text || textWriting==null) {
								int xx=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);
								while (text.Length*13>750) text=text.Substring(0,text.Length-1);

								int m = BitmapFont.bitmapFont18.MeasureTextSingleLineX(text);
								textWriting=new TextWithMeasure(text,xx-m/2+5,Global.WindowHeightHalf-55-50+5+5/*,BitmapFont.bitmapFont18*/);
							}

							if (newKeyboardState.IsKeyDown(Keys.Enter)) {
								if (oldKeyboardState.IsKeyUp(Keys.Enter)) {
									inventory=0;
									diserpeard=255;

								   // DInt m=;

									int texts= BitmapFont.bitmapFont18.MeasureTextSingleLineX(text)/2;
									int x=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);
									gedo=new GeDo(text,x-texts+20-10,Global.WindowHeightHalf-40-50-3);
									textWriting=null;
								}
							}
							break;
                        #endregion

                        #region 2 Basic inventory
                        case InventoryType.BasicInv:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}

							if (displayPopUpWindow) {
								if (buttonClosePopUp.Update()) {
									displayPopUpWindow=false;
								}
							} else {
								if (previousScrollValue!=newMouseState.ScrollWheelValue) {
									if (In(Global.WindowWidthHalf-300+4+200+4,Global.WindowHeightHalf-200+2,Global.WindowWidthHalf+300,Global.WindowHeightHalf)) {
										inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
										inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(maxInvCount-45));
									}

									if (inventoryScrollbarValueCraftingMax>6*4) {
										if (In(Global.WindowWidthHalf-300+4+40+4, Global.WindowHeightHalf-200+2+4+200+8,Global.WindowWidthHalf-300+4+40+4+40*6+10, Global.WindowHeightHalf-200+2+4+200+8+40*4+10)) {
											int d=previousScrollValue-newMouseState.ScrollWheelValue;
											if (d>0) {
												inventoryScrollbarValueCrafting+=6;
												if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax-6*3) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax-6*3;
												ReSetCraftingInventoryPositions();
											}
											if (d<0) {
												inventoryScrollbarValueCrafting-=6;
												if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
												ReSetCraftingInventoryPositions();
											}

									} }
								}


								ChangeInventory();

								SelectItemCraft();
								CraftingEvents();
								CraftingEventsCraft();

								if (buttonClose.Update()) {
									inventory=0;
									SetPlayerClothes();
								}

								if (buttonInvTabBlocks.Update()) SetInvCraftingBlocks();
								if (buttonInvTabMashines.Update()) SetInvCraftingMashines();
								if (buttonInvTabTools.Update()) SetInvCraftingTools();
								if (buttonInvTabPlants.Update()) SetInvCraftingNature();
								if (buttonInvTabItems.Update()) SetInvCraftingItems();
							}
							break;
                        #endregion

                        #region 3 Crafting
                        case InventoryType.Desk:
                       //     ChangeInventoryBasic();

                            SelectItemCraft();

                            //if (buttonNext.Click) {
                            //    craftingType++;
                            //    DListInt[] l = GameMethods.Craft(Crafting[selectedCraftingItem].X);
                            //    if (l!=null) {
                            //        if (craftingType>l.Length-1) craftingType=0;
                            //        Need=l[craftingType].List1;
                            //    }
                            //}

                            //if (buttonPrev.Click) {
                            //    craftingType--;
                            //    DListInt[] l = GameMethods.Craft(Crafting[selectedCraftingItem].X);
                            //    if (l!=null) {
                            //        if (craftingType<0) craftingType=l.Length-1;
                            //        Need=l[craftingType].List1;
                            //    }
                            //}

                            //if (buttonClose.Click) inventory=0;
                            break;
                        #endregion

                        #region 4 Furnace stone
                        case InventoryType.FurnaceStone:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							if (displayPopUpWindow) {
								if (buttonClosePopUp.Update()) {
									displayPopUpWindow=false;
								}
							} else {
								if (In(Global.WindowWidthHalf-300+4+200+4,Global.WindowHeightHalf-200+2,Global.WindowWidthHalf+300,Global.WindowHeightHalf)) {
									inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
									inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(maxInvCount-45));
								}

								if (inventoryScrollbarValueCraftingMax>6*4) {
									if (In(Global.WindowWidthHalf-300+4+40+4, Global.WindowHeightHalf-200+2+4+200+8,Global.WindowWidthHalf-300+4+40+4+40*6+10, Global.WindowHeightHalf-200+2+4+200+8+40*4+10)) {
										int d=previousScrollValue-newMouseState.ScrollWheelValue;
										if (d>0) {
											inventoryScrollbarValueCrafting+=6;
											if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax-6*3) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax-6*3;
											ReSetCraftingInventoryPositions();
										}
										if (d<0) {
											inventoryScrollbarValueCrafting-=6;
											if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
											ReSetCraftingInventoryPositions();
										}
									}
								}

								ChangeInventory();

								SelectItemBake();

								if (buttonInvTabMaterials.Update()) SetInvBakeIngots();
								if (buttonInvTabGlass.Update()) SetInvBakeItems();
								if (buttonInvTabCeramics.Update()) SetInvBakeCeramics();
								if (buttonInvTabFood.Update()) SetInvBakeFood();
								if (buttonInvTabTools.Update()) SetInvBakeTools();

								if (buttonClose.Update()) inventory=0;
								CraftingEvents();

								ItemInv[] inv=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;
								float energy=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy;

								//for (int i=0; i<3; i++){
								//	if (inv[i].Id!=0) {
								//		float ammout=GameMethods.FurnaceStoneBurnWood(inv[i].Id);

								//		if (energy+ammout<1f) {
								//			((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy+=ammout;
								//			break;
								//		}
								//	}
								//}

								if (energy/*((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy*/>0.05f)
									CraftingEventsCraft();
								if (buttonClose.Update()) inventory=0;
							}
							break;
                        #endregion

                        #region 6 Macerator
                        case InventoryType.Macerator:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							if (displayPopUpWindow) {
								if (buttonClosePopUp.Update()) {
									displayPopUpWindow=false;
								}
							} else {

								if (In(Global.WindowWidthHalf-300+4+200+4,Global.WindowHeightHalf-200+2,Global.WindowWidthHalf+300,Global.WindowHeightHalf)) {
									inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
									inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(maxInvCount-45));
								} else if (inventoryScrollbarValueCraftingMax>6*4) {
											if (In(Global.WindowWidthHalf-300+4+40+4, Global.WindowHeightHalf-200+2+4+200+8,Global.WindowWidthHalf-300+4+40+4+40*6+10, Global.WindowHeightHalf-200+2+4+200+8+40*4+10)) {
												int d=previousScrollValue-newMouseState.ScrollWheelValue;
												if (d>0) {
													inventoryScrollbarValueCrafting+=6;
													if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax-6*3) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax-6*3;
													ReSetCraftingInventoryPositions();
												}
												if (d<0) {
													inventoryScrollbarValueCrafting-=6;
													if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
													ReSetCraftingInventoryPositions();
												}
											}
										}

								ChangeInventory();

								SelectItemToDust();

								if (buttonInvTabMaterials.Update()) SetInvToDustDusts();
								if (buttonInvTabPlants.Update()) SetInvToDustNature();
								if (buttonInvTabTools.Update()) SetInvToDustTools();
								if (buttonInvTabItems.Update()) SetInvToDustStone();
								if (buttonInvTabCeramics.Update()) SetInvToDustOther();

								if (buttonClose.Update()) inventory=0;
							}

							CraftingEvents();
							if (((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy>0) CraftingEventsCraft();
							break;
                        #endregion


                        #region Creative
                        case InventoryType.Creative:
								if (Constants.AnimationsControls) {
									if (animationInvBack<100) {
										animationInvBack+=5;
									}
								}

								if (displayPopUpWindow) {
									if (buttonClosePopUp.Update()) {
										displayPopUpWindow=false;
									}
								} else {
									if (In(Global.WindowWidthHalf-300+4+200+4,Global.WindowHeightHalf-200+2,Global.WindowWidthHalf+300,Global.WindowHeightHalf)) {
										inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
										inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(maxInvCount-45));
									}

									if (!creativeTabCrafting) ReSetInventoryCreativePositions();

									if (!displayPopUpWindow) {
										if (buttonClose.Update()) {
											inventory=0;
											SetPlayerClothes();
										}
									}

									ChangeInventory();

									if (!displayPopUpWindow) {
										if (ButtonCrafting.Update()) {creativeTabCrafting=true; SetInvCraftingBlocks(); }
										if (ButtonItems.Update()) {creativeTabCrafting=false; SetInvCreativeBlocks(); }
									}

									if (creativeTabCrafting) {
										//if (In(Global.WindowWidthHalf-300+4+200+4-100-100+60-14,Global.WindowHeightHalf-200+2+200+16+40-8,Global.WindowWidthHalf+300,Global.WindowHeightHalf+200+16)) {
										//    inventoryScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
										//    inventoryScrollbarValue=(int)(inventoryScrollbar.scale*(inventoryScrollbarValueCraftingMax-45));
										//}

										if (inventoryScrollbarValueCraftingMax>6*4) {
											if (In(Global.WindowWidthHalf-300+4+40+4, Global.WindowHeightHalf-200+2+4+200+8,Global.WindowWidthHalf-300+4+40+4+40*6+10, Global.WindowHeightHalf-200+2+4+200+8+40*4+10)) {
												int d=previousScrollValue-newMouseState.ScrollWheelValue;
												if (d>0) {
													inventoryScrollbarValueCrafting+=6;
													if (inventoryScrollbarValueCrafting>inventoryScrollbarValueCraftingMax-6*3) inventoryScrollbarValueCrafting=inventoryScrollbarValueCraftingMax-6*3;
													ReSetCraftingInventoryPositions();
												}
												if (d<0) {
													inventoryScrollbarValueCrafting-=6;
													if (inventoryScrollbarValueCrafting<0) inventoryScrollbarValueCrafting=0;
													ReSetCraftingInventoryPositions();
												}
											}
										}

										SelectItemCraftPlus();
										CraftingEventsPlus();

										if (buttonInvTabBlocks.Update()) SetInvCraftingBlocks();
										if (buttonInvTabMashines.Update()) SetInvCraftingMashines();
										if (buttonInvTabTools.Update()) SetInvCraftingTools();
										if (buttonInvTabPlants.Update()) SetInvCraftingNature();
										if (buttonInvTabItems.Update()) SetInvCraftingItems();

									} else {
										CreativeGetItems();

										if (In(Global.WindowWidthHalf-300+4+200+4-100-100+60-14,Global.WindowHeightHalf-200+2+200+16+40-8,Global.WindowWidthHalf+300,Global.WindowHeightHalf+200+16)) {
											creativeScrollbar.Scroll((previousScrollValue-newMouseState.ScrollWheelValue)/2);
											scrollBarCreative=(int)(inventoryScrollbar.scale*(inventoryScrollbarValueCraftingMax-45));
										}

										if (buttonInvTabBlocks.Update()) SetInvCreativeBlocks();
										if (buttonInvTabMashines.Update()) SetInvCreativeMashines();
										if (buttonInvTabTools.Update()) SetInvCreativeTools();
										if (buttonInvTabPlants.Update()) SetInvCreativePlants();
										if (buttonInvTabItems.Update()) SetInvCreativeItems();
									}
								}
                            break;
                        #endregion

                        #region 8 Shelf
                        case InventoryType.Shelf:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) {
								inventory=0;
								ShelfBlock block=(ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];
								if (block.Inv[4].Id==0) block.IsSmallItem=false;
								else {
									Texture2D tex=ItemIdToTexture(block.Inv[4].Id);
									if (tex!=null) {
										block.SmalItemTexture=tex;
										block.IsSmallItem=true;
									}else block.IsSmallItem=false;
								}
							}

							break;
                        #endregion

                        #region 9 Wooden box
                        case InventoryType.BoxWooden:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) inventory=0;
							break;
                        #endregion

                        #region 10 Adv box
                       case InventoryType.BoxAdv:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) inventory=0;
							break;
                        #endregion


                        #region Mobile
                        case InventoryType.Mobile:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							if (buttonClose.Update()) inventory=0;
						  //  mobileOS.mouse.X=mouseRealPos;
							mobileOS.mouseDown=newMouseState.LeftButton==ButtonState.Pressed;
							mobileOS.Update();
							break;
                        #endregion

                        #region Rocket
                        case InventoryType.Rocket:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							if (buttonClose.Update()) inventory=0;
							if (buttonRocket.Update()) {
								AchievementFutureAge=true;
								//Save();
								rocket=true;
								rocketDown=false;
								PlayerX=selectedMashine.X;
								PlayerY=selectedMashine.Y;
								inventory=0;
								File.WriteAllText(pathToWorld+"UseRocket.txt","");
								MTerrain chunk=terrain[selectedMashine.X];
							//	chunk.IsTopBlocks[selectedMashine.Y]=MBlockState.TmpRemoved;
							//	chunk.TopBlocks[selectedMashine.Y]=null;
							}
							break;
                        #endregion

                        #region Charger
                       case InventoryType.Charger:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) {
								inventory=0;
							}
							break;
                        #endregion

                        #region Miner
                        case InventoryType.Miner:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) inventory=0;
							break;
                        #endregion

                        #region Radio
                        case InventoryType.Radio:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							if (buttonRocket.Update()) { }
							if (buttonClose.Update()) inventory=0;

							if (radioplaying) {
								if (MediaPlayer.PlayPosition==TimeSpan.MinValue) radioplaying=false;
							}
						   if (((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy>0) {
							if (radioSongs!=null) {
								for (int i=0; i<radioSongs.Length; i++) {
										if (newMouseState.LeftButton==ButtonState.Pressed) {
									if (newMouseState.X>Global.WindowWidthHalf-300-2+10+240 && newMouseState.Y>Global.WindowHeightHalf-234+10+40+i*40
							 && newMouseState.X<Global.WindowWidthHalf+200 && newMouseState.Y<Global.WindowHeightHalf-234+10+40+i*40+48) {
								if (radioplaying) {
									MediaPlayer.Stop();
								} radioplaying=true;
												}

												Song song = GetDataSong("Radio/"+new FileInfo(radioSongs[i]).Name.Substring(0, (new FileInfo(radioSongs[i]).Name).LastIndexOf(".")));
												MediaPlayer.Play(song);
											}

								} }
							}
							 if (newMouseState.LeftButton==ButtonState.Pressed) {
							if (newMouseState.X>Global.WindowWidthHalf-24 && newMouseState.Y>Global.WindowHeightHalf-200+2+400-50
							 && newMouseState.X<Global.WindowWidthHalf-24+48 && newMouseState.Y<Global.WindowHeightHalf-200+2+400-50+48) {
								if (radioplaying) {
									MediaPlayer.Stop();
											radioplaying=false;

								} }
							}
							break;
                        #endregion

                        #region Composter
                        case InventoryType.Composter:
							if (Constants.AnimationsControls) {
								if (animationInvBack<100) {
									animationInvBack+=5;
								}
							}
							ChangeInventory();

							if (buttonClose.Update()) inventory=0;
							break;
                            #endregion
                    }
                }
                #endregion

                #region Update items
                if (DroppedItems.Count!=0) {
                    itemAnimationPos+=0.1047197551f;
                    if (itemAnimationPos>6.283185307f) itemAnimationPos=0f;
                    Global.ItemAnimation=(float)Math.Cos(itemAnimationPos);

                    itemAnimationPos2+=0.1047197551f;
                    if (itemAnimationPos2>6.283185307f) itemAnimationPos2=0f;
                    Global.ItemAnimation2=(float)Math.Cos(itemAnimationPos2);
                    UpdateItem(DroppedItems);
                }
                #endregion

                #region  bars
                if (barEnergy<=32) {
                    if (barEnergy>0) {
                        if (barEat>=0) {
                            if (barWater>=0) {
                                barEat+=0.0006f;
                                barWater+=0.0008f;
                                barEnergy-=0.04f;

                                if (barEat<0) barEat=0;
                                if (barWater<0) barWater=0;
                                if (barEnergy<0) barEnergy=0;
                            }
                        }
                    }
                }
                #endregion

                #region Wheather
                if (rain) {
                    rainDots.Add(new DInt(FastRandom.Int(848), -10));
                    if (Global.HasSoundGraphics) {
                        if (rainDuration==0) {
                            SoundEffects.Rain.Play();
                            rainDuration=(int)(SoundEffects.Rain.Duration.TotalMilliseconds/16.3333334d);
                        } else rainDuration--;
                    }
                }
                #endregion

                #region Chunks
                for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
                    MTerrain chunk = terrain[x];

                    if (chunk.state==MChunkState.NotDownloaded) {
                        SendRequestChunk(x);
                    } else if (chunk.state==MChunkState.SendRequest) {
                        if ((DateTime.Now-chunk.sended).TotalSeconds>10) {
                            SendRequestChunk(x);
                        }
                    }

                }
                #endregion

                EnergySystem();

                {
					lightsFull.Clear();
					lightsHalf.Clear();

					int w=(int)WindowY-8, w2=(int)WindowY/*+*/-8;

					for (int x=(terrainStartIndexX>2 ? terrainStartIndexX-2 : terrainStartIndexX); x<terrainStartIndexW+2 && x<TerrainLength; x++) {
						MTerrain chunk=terrain[x];
						int f=chunk.LightPosFull16;

						//if (chunk.Half) {
							if (w<f) {
								int h=chunk.LightPosHalf16-8;

							//	if (w<h) {
									lightsHalf.Add(new Rectangle(x*16-40, (int)WindowY, 16+40+40, h-w2));
									lightsFull.Add(new Rectangle(x*16-40, (int)WindowY, 16+40+40, chunk.LightPosFull16-w2));
								//original:	lightsHalf.Add(new Rectangle(x*16-40,h/* /*(int)WindowY+(f-h)*/, 16+40+40, f-h+8));
								//	lightsHalf.Add(new Rectangle(x*16-40,(int)WindowY /*h*//* /*(int)WindowY+(f-h)*/, 16+40+40, f-h+8));
							//	}else{
								//	lightsHalf.Add(new Rectangle(x*16-40, (int)WindowY+h, 16+40+40, f-h-w2));
								//}
							}
						//} else {
						//	if (w<f) lightsFull.Add(new Rectangle(x*16-40, (int)WindowY, 16+40+40, f-w2));
						//	lightsHalf.Add(new Rectangle(x*16-40, (int)WindowY, 16+40+40, f-w2));

						//}
					}
				}

				// Update Shot
				for (int i=0; i<GunShots.Count; i++) {
					GunShot gs = GunShots[i];

					// Live of shot
					gs.Time++;
					if (gs.Time>60) {
						GunShots.RemoveAt(i);
						i--;
						continue;
					}
					gs.Update();

					// Kill mob with gun
					int x=(int)(gs.X*divider_16);
					MTerrain chunk=terrain[x];
					if (chunk!=null) {
						int y=(int)(gs.Y*divider_16);

						for (int j = 0; j<chunk.Mobs.Count; j++) {
							MMob m = chunk.Mobs[j];
							if (m.Height==y) {
								GetItemsFromMob(m.Id, x, y);
								chunk.Mobs.RemoveAt(j);
								break;
							}
						}
					}
				}

                if (timer5<0) {

                   // foreach (ShortAndByte ch in Chargers) ChargerJob(ch);

                    if (rocket) {
                        if (rocketDown) {
                            if (PlayerY>0) {
                                rocket=false;
                                PlayerY=0;
                             //   InventoryAdd((int)Items.Rocket);
                               // File.Delete(pathToWorld+"UseRocket.txt");
                            }
                        } else {
                            if (PlayerY<=-10000) {
                                //Save();

                                //File.WriteAllText(pathToWorld+@"\Settings.txt",
                                //    debug+"\r\n"+
                                //    time+"\r\n"+
                                //    dayAlpha+"\r\n"+

                                //    barWater+"\r\n"+
                                //    barEat+"\r\n"+
                                //    barHeart+"\r\n"+
                                //    barOxygen+"\r\n"+

                                //    PlayerX+"\r\n"+
                                //    PlayerY+"\r\n"+
                                //    moonSpeed);

                                //using (StreamWriter sr = new StreamWriter(pathToWorld+@"\Inventory.txt")) {
                                //    foreach (DInt x in Inventory) {
                                //        sr.WriteLine(x.X);
                                //        sr.WriteLine(x.Y);
                                //    }
                                //}
                                Rabcr.GoTo(new PlanetSystem(pathToWorld));
                            }
                        }
                    }

                    //	UpdateWater();

                    // int x = WindowX<0 ? 0 : WindowX/16;
                    //  int w= (WindowX+Global.WindowWidth)/16 >TerrainLenght ? TerrainLenght : (WindowX + Global.WindowWidth) / 16;
                    //for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
                    //    MTerrain chunk;

                    //    if ((chunk=terrain[x])!=null) {
                    //        for (int y = chunk.StartSomething; y<100; y++) {
                    //            if (chunk.IsTopBlocks[y]) {
                    //                switch ((BlockId)chunk.TopBlocks[y].Id) {
                    //                    case BlockId.SolarPanel:
                    //                        if (chunk.LightPos+2>y) NewEnergySolarPanel(x, y);
                    //                        break;

                    //                    case BlockId.Watermill:
                    //                        NewEnergyWatermill(x, y);
                    //                        break;

                    //                    case BlockId.Windmill:
                    //                        NewEnergySolarPanel(x, y);
                    //                        break;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}


                    if (Global.HasSoundGraphics) {
                        if (MediaPlayer.State==MediaState.Stopped) {
                            Song play = null;

                            if (notNeedScafander) {
                                switch (FastRandom.Int(4)) {
                                    case 0: play=Songs.Happend; break;
                                    case 1: play=Songs.Medium; break;
                                    case 2: play=Songs.Root; break;
                                    default: play=Songs.Storm; break;
                                }
                            } else play=Songs.Spacelandia;

                            MediaPlayer.Play(play);
                        }
                    }

                    #region Time
                    time++;//1hod=3000x zvýšení
                    if (time==dayLenght) {
                        day++;
                        if (day>365) day=0;
                        time=0;
                    }

                    //Východ
                    if (time>hour*6&&time<hour*7) {
                        dayAlpha=((time-hour*7f)/hour)/2f+1f;

                        //Západ
                    } else if (time>hour*18&&time<hour*19) dayAlpha=((hour*19f-time)/hour)/2f+0.5f;
                    else if (time>=hour*7&&time<=hour*18) dayAlpha=1f;
                    else dayAlpha=.5f;


                    moonSpeed+=368f/(7f*dayLenght);
                    if (moonSpeed>=368) moonSpeed=0;
                    #endregion

                    #region Furnace Stone burning
                    foreach (ShortAndByte d in FurnaceStone) {
						MashineBlockBasic block = (MashineBlockBasic)terrain[d.X].TopBlocks[d.Y];
						if (block==null) {
							FurnaceStone.Remove(d);
							break;
						}

						if (block.Inv[0].Id!=0 || block.Inv[1].Id!=0 || block.Inv[2].Id!=0) {
							if (block.Inv[3].Id==(ushort)Items.None) Do();
							else if (block.Inv[3].Id==(ushort)Items.Ash) {
								if (((ItemInvBasic16)block.Inv[3]).GetCount<99) Do();
							}

							void Do() {
								for (int i=0; i<3; i++) {
									//0
									float add = GameMethods.FurnaceStoneBurnWood(block.Inv[i].Id);
									if (add!=-1f) {
										if (add+block.Energy<1f) {
											block.Energy+=add;

											ItemInvBasic16 invI=(ItemInvBasic16)block.Inv[i];

											if (invI.GetCount==1) {
												block.Inv[i]=itemBlank;
												AddAsh();
												return;
											} else {
												invI.SetCount=invI.GetCount-1;
												AddAsh();
												return;
											}

											void AddAsh() {
												if (block.Inv[3].Id==(ushort)Items.Ash) {
													ItemInvBasic16 inv3 = (ItemInvBasic16)block.Inv[3];
													inv3.SetCount=inv3.GetCount+1;
												} else {
													DInt pos=InventoryGetPosFurnaceStone(3);
													block.Inv[3]=new ItemInvBasic16(ashTexture, (ushort)Items.Ash, 1, pos.X, pos.Y);

												}
											}
										}
									}
								}
							}
						}
						if (block.Energy>0) {
							block.Energy-=0.001f;
							block.Energy-=0.001f;
						}else if (block.Energy<0) {
							block.Energy=0;
						}
					}
                    #endregion

                    //Animatable
                    if (wind) {
                        if (windForce<1) {
                            windForce+=.05f;
                            SetWintableSources();
                        }
                    } else {
                        if (windForce>0) {
                            windForce-=.05f;
                            SetWintableSources();
                        }
                    }

                    #region Auto-destroy leaves
                    if (terrainStartIndexW-terrainStartIndexX>0) {
      //                  #region Auto-destroy leaves
						//AutoDestroyLeaves((ushort)BlockId.OakWood, (ushort)BlockId.OakLeaves);
						//AutoDestroyLeaves((ushort)BlockId.SpruceWood, (ushort)BlockId.SpruceLeaves);
						//AutoDestroyLeaves((ushort)BlockId.PineWood, (ushort)BlockId.PineLeaves);
						//AutoDestroyLeaves((ushort)BlockId.LindenWood, (ushort)BlockId.LindenLeaves);

						//AutoDestroyLeaves((ushort)BlockId.AppleWood, (ushort)BlockId.AppleLeaves, (ushort)BlockId.AppleLeavesWithApples);
						//AutoDestroyLeaves((ushort)BlockId.PlumWood, (ushort)BlockId.PlumLeaves, (ushort)BlockId.PlumLeavesWithPlums);
						//AutoDestroyLeaves((ushort)BlockId.CherryWood, (ushort)BlockId.CherryLeaves, (ushort)BlockId.CherryLeavesWithCherries);
						//AutoDestroyLeaves((ushort)BlockId.OrangeWood, (ushort)BlockId.OrangeLeaves, (ushort)BlockId.OrangeLeavesWithOranges);
						//AutoDestroyLeaves((ushort)BlockId.LemonWood, (ushort)BlockId.LemonLeaves, (ushort)BlockId.LemonLeavesWithLemons);
						//AutoDestroyLeaves((ushort)BlockId.AcaciaWood, (ushort)BlockId.AcaciaLeaves);
						//AutoDestroyLeaves((ushort)BlockId.EucalyptusWood, (ushort)BlockId.EucalyptusLeaves);
						//AutoDestroyLeaves((ushort)BlockId.KapokWood, (ushort)BlockId.KapokLeacesFibre,(ushort)BlockId.KapokLeacesFlowering);
						//AutoDestroyLeaves((ushort)BlockId.KapokWood, (ushort)BlockId.KapokLeaves);
						//AutoDestroyLeaves((ushort)BlockId.MangroveWood, (ushort)BlockId.MangroveLeaves);
						//AutoDestroyLeaves((ushort)BlockId.OliveWood, (ushort)BlockId.OliveLeaves,(ushort)BlockId.OliveLeavesWithOlives);
						//AutoDestroyLeaves((ushort)BlockId.RubberTreeWood, (ushort)BlockId.RubberTreeWood);
						//AutoDestroyLeaves((ushort)BlockId.WillowWood, (ushort)BlockId.WillowLeaves);
						//#endregion
                    }
                    #endregion

                    // Start mooving
                    //if (terrainStartIndexW-terrainStartIndexX>0) {
                    //    MoveChicken();
                    //    MoveRabbit();
                    //}

                    //// Finish mooving
                    //FinishMooving();

                    timer5=5;
                } else timer5--;

                if (_secondTimer<0) {
                    //for (int i = 0; i<TerrainLenght/1000; i++) GrowTreeFood(i*1000);

                    //if (FastRandom.Int(5)==1) {
                    //    for (int i = 0; i<chunksWithPlants.Count; i++) {
                    //        foreach (Plant p in terrain[chunksWithPlants[i]].Plants) {
                    //            if (p.Growing) p.Update();

                    //            if (p.Growing) {
                    //                if (terrain[p.chunkId].IsSolidBlocks[p.Height+1]/*==MBlockState.Exists*/) {
                    //                    if (terrain[p.chunkId].SolidBlocks[p.Height+1].Id==(byte)BlockId.Compost) p.Update();
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                    //if (FastRandom.Int(50)==1) {
                    //    foreach (ShortAndByte p in Composters) {
                    //        ShelfBlock block = (ShelfBlock)terrain[p.X].TopBlocks[p.Y];
                    //        int i = FastRandom.Int(9);
                    //        if (block.Inv[i].X!=0) {
                    //            if (GameMethods.IsCompostable((Items)block.Inv[i].X)) {
                    //                if (FastRandom.Int(block.Inv[i].Y)<=1) {
                    //                    block.Inv[i].X=(int)Items.Compost;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                    #region Bars
                    if (barEat<5&&barWater<5) {
                        barHeart-=.06f;
                        if (barHeart<0) barHeart=0;
                    }

                    if (barEat>25&&barWater>25) {
                        barHeart+=.06f;
                        if (barHeart>32) Die(Lang.Texts[162] /*"Měl bys jíst a pít","You shoud eat and drink"*/);
                    }

                    if (CheckLava()) {
                        barHeart+=.06f;
                        if (barHeart>32) Die(Lang.Texts[163] /*"Dávej pozor! Láva..","Pay attention! Lava..."*/);
                    }

                    if (barEnergy>31) {
                        if (FastRandom.Int(3)==1) {
                            barHeart+=.01f;
                            if (barHeart>32) Die(Lang.Texts[164] /*"Bez energie + spatné srdíčko = srmt","Without energy + wrong heart = die"*/);
                        }
                    }
                    #endregion

                    if (debug) {
                        if (cpu!=null) {
                            usageCpuProcess=cpu.NextValue();
                            usageCpu=cpuUsage.NextValue();
                            usageRamProcess=ram.NextValue();
                            usageRam=freeRam.NextValue();
                        }
                    }

                    #region Weather
                    if (changeRain<0) {
                        changeRain=100+FastRandom.Int(50);
                        if (rain) rain=false; else rain=true;
                    } else changeRain--;

                    if (timeToChageWind<0) {
                        timeToChageWind=2000+FastRandom.Int(1000);
                        wind=!wind;
                    } else timeToChageWind--;

                    foreach (DInt r in rainDots) {
                        if (Global.WindowHeight<r.Y) {
                            rainDots.Remove(r);
                            break;
                        }
                    }
                    #endregion

                    #region Optimalize
                    if (energy.Count>5000) energy.RemoveRange(5000, energy.Count-5000);
                    #endregion

                    switch (InventoryNormal[boxSelected].Id) {
						case (ushort)Items.TorchON:
							{
								ItemInvTool16 t=(ItemInvTool16)InventoryNormal[boxSelected];
								if (t.GetCount>1) {
									t.SetCount=t.GetCount-1;
								} else {
									InventoryAddOne((ushort)Items.Stick);
								}
								playerLight=true;
							}
							break;

						case (ushort)Items.TorchElectricON:
							{
								ItemInvTool32 t=(ItemInvTool32)InventoryNormal[boxSelected];
								if (t.GetCount>1) {
									t.SetCount=t.GetCount-1;
								} else {
									InventoryAddOne((ushort)Items.TorchElectricOFF);
								}
								playerLight=true;
							}
							break;

						default:
							playerLight=false;
							break;
                    }

                   // foreach (ShortAndByte d in Miners) MinerJob(d);

                    //autoSave--;
                    //if (autoSave==0) {
                        //Save();

                        //File.WriteAllText(pathToWorld+@"\Settings.txt",
                        //    debug+"\r\n"+
                        //    time+"\r\n"+
                        //    dayAlpha+"\r\n"+

                        //    barWater+"\r\n"+
                        //    barEat+"\r\n"+
                        //    barHeart+"\r\n"+
                        //    barOxygen+"\r\n"+

                        //    PlayerX+"\r\n"+
                        //    PlayerY+"\r\n"+
                        //    moonSpeed);

                        //using (StreamWriter sr = new StreamWriter(pathToWorld+@"\Inventory.txt")) {
                        //    foreach (DInt x in Inventory) {
                        //        sr.WriteLine(x.X);
                        //        sr.WriteLine(x.Y);
                        //    }
                        //}
                      //  autoSave=300;
                   // }

                    if (inventory==InventoryType.Radio) {
                        try {
                            if (Directory.Exists(new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).Directory.FullName+"\\RabcrData\\Default\\Songs\\Radio")) {
                                radioSongs=Directory.GetFiles(new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).Directory.FullName+"\\RabcrData\\Default\\Songs\\Radio");
                                List<string> songs = new List<string>();
                                foreach (string s in radioSongs) {
                                    if (s.EndsWith(".wma")) songs.Add(s);
                                }
                                radioSongs=songs.ToArray();
                            }
                        } catch { }
                    }


                    #region Multiplayer
                    //Queue.Add(new DataToSend {
                    //    Bytes=new Data {
                    //        Cmd=Command.MyPlayerData,
                    //        Message=PlayerX+"|"+PlayerY,
                    //        To=toServer,
                    //    }.ToByte(),
                    //    Importance=Importance.Low
                    //});
                    #endregion

                    //if (Inventory[boxSelected].X==(int)Items.TorchON) {
                    //    if (Inventory[boxSelected].Y>2) {
                    //        if (FastRandom.Int(2)==1) InventoryRemoveDInt();
                    //    } else {
                    //        Inventory[boxSelected].X=(int)Items.Stick;
                    //    }

                    //    playerLight=true;
                    //} else playerLight=false;

                    _secondTimer=60;
                } else _secondTimer--;

                CameraMatrix();
            }


            base.Update(gameTime);
        }

        public override void Draw(GameTime gameTime) {
            Rabcr.spriteBatch=spriteBatch;
            oldMouseState=newMouseState;
            newMouseState=Mouse.GetState();

            if (currentState==Current.Playing) {
                #region Died
                if (died) {
                    Graphics.SetRenderTarget(null);
                    Graphics.Clear(Color.DarkRed);
                    spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp);
                    Vector2 text = spriteFont_small.MeasureString(diedInfo);
                    float a;
                    if (timerStayDied>200) a=1-(timerStayDied-200)/110f;
                    else if (timerStayDied<100) a=timerStayDied/100f;
                    else a=1;
                    string m = Lang.Texts[28];// Setting.czechLanguage? "Právě jsi zemřel(a)": "You died";
                    string respawntext = Lang.Texts[28]+" "+(timerStayDied/60+1);//(Setting.czechLanguage? "Znovuzrodíš se za ": "Respawn in ")+(timerStayDied/60+1);

                    spriteBatch.DrawString(spriteFont_medium, m, new Vector2(Global.WindowWidthHalf-(int)spriteFont_medium.MeasureString(m).X/2, Global.WindowHeightHalf-60), Color.White*a);
                    GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-(int)text.X/2, Global.WindowHeightHalf, diedInfo, Color.White*a);
                    GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-(int)spriteFont_small.MeasureString(respawntext).X/2, Global.WindowHeightHalf+30, respawntext, Color.White*a);

                    spriteBatch.End();
                } else {
                    #endregion

                    #region Draw lighting
                    Graphics.SetRenderTarget(sunLightTarget);
                    Graphics.Clear(Color.Black);
                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, null, null, null, null, camera);
                    for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) spriteBatch.Draw(lightMaskTexture, terrain[x].LightVec, Color.White);
                    foreach (Rectangle r in lights) spriteBatch.Draw(lightMaskLineTexture, r, Color.White);
                    spriteBatch.End();

                    // Modificate sunlight target with lamp's, lorch's or fireplace's lights
                    Graphics.SetRenderTarget(modificatedLightTarget);
                    spriteBatch.Begin();
                    spriteBatch.Draw(sunLightTarget, Vector2.Zero, new Color(dayAlpha, dayAlpha, dayAlpha, dayAlpha));
                    spriteBatch.End();

                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, null, null, null, null, camera);

                    foreach (MashineBlockBasic m in lightsLamp) {
                        if (m.Position.X>=terrainStartIndexX*16) {
                            if (m.Position.X<=terrainStartIndexW*16) {
                                if (m.Position.Y>=terrainStartIndexY*16) {
                                    if (m.Position.Y<=terrainStartIndexH*16) {
                                        if (m.Energy>0) {
                                            m.Energy-=0.01f;
                                            if (m.Energy<0) m.Energy=0;
                                            spriteBatch.Draw(lightMaskRoundTexture, new Rectangle((int)m.Position.X-48*2*2+8, (int)m.Position.Y-48*2*2+8, 96*2*2, 96*2*2), lampColorLight);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //    playerLight=true;
                    if (playerLight) spriteBatch.Draw(lightMaskRoundTexture, new Rectangle(PlayerX-48*2+8, PlayerY-48*2+8, 96*2, 96*2), lampColorLight);
                    spriteBatch.End();
                    #endregion

                    //#region Draw lighting
                    //Graphics.SetRenderTarget(fogTarget);
                    //Graphics.Clear(/*Color.Black*/Color.White*0.1f);
                    //spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.Additive, SamplerState.PointClamp ,null, null, null, camera);
                    ////for (int x= startIndex-2>0 ? startIndex-2:0; x<endIndex; x++) {
                    ////    if (terrain[x]!=null) {
                    //for (int x= terrainStartIndexX; x<terrainStartIndexW; x++) {
                    //    if (terrain[x]!=null) {
                    //        if (terrain[x].state==MChunkState.Downloaded){
                    //            if (WindowY/*WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom)*/<terrain[x].LightPos16) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x*16, WindowY/*(WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom))*/, 16, terrain[x].LightPos16-WindowY/*(WindowCenterY-(int)(Global.WindowHeightHalf/Setting.Zoom))*/+8), Color.White);
                    //            spriteBatch.Draw(lightmap, terrain[x].LightVec/*new Vector2(x*16-48+8, terrain[x].LightPos*16-48+8)*/, Color.White);

                    //        }
                    //    }
                    //}

                    //foreach (MashineBlockBasic m in lightsLamp){
                    //    if (m.Position.X>=terrainStartIndexX*16){
                    //        if (m.Position.X<=terrainStartIndexW*16){
                    //            if (m.Position.Y>=terrainStartIndexY*16){
                    //                if (m.Position.Y<=terrainStartIndexH*16){
                    //                    if (m.Energy>0){
                    //                        m.Energy-=0.01f;
                    //                        if (m.Energy<0)m.Energy=0;
                    //                        spriteBatch.Draw(lightmap, new Rectangle((int)m.Position.X-48*2+8, (int)m.Position.Y-48*2+8,96*2,96*2), Color.White);
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    //spriteBatch.End();
                    //#endregion

                    #region Draw game
                    Graphics.SetRenderTarget(null);
                    Graphics.Clear(Color.LightSkyBlue);
                    spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, null, null, null, camera);

                    #region Weather
                    if (rain) {
                        if (WindowY<0) {
                            foreach (DInt r in rainDots) {

                                r.Y++;

                                if (wind) {
                                    if (FastRandom.Int(4)==1) r.X--; else if (FastRandom.Int(2)==1) r.X++;
                                } else {
                                    if (FastRandom.Int(3)==1) r.X++; else if (FastRandom.Int(2)==1) r.X--;
                                }
                                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(WindowX+r.X, WindowY+r.Y, 1, 1), Color.White);
                            }
                        } else {
                            foreach (DInt r in rainDots) {

                                r.Y+=3;

                                if (wind) {
                                    if (FastRandom.Int(2)==1) r.X++;
                                }
                                spriteBatch.Draw(Rabcr.Pixel, new Rectangle(WindowX+r.X, WindowY+r.Y, 1, 2), Color.Blue);
                            }
                        }
                    }
                    #endregion

                    for (int x = terrainStartIndexX; x<terrainStartIndexW; x++) {
                        MTerrain chunk = terrain[x];

                        if (chunk.state==MChunkState.Downloaded) {
                            //   int start=chunk.StartSomething<terrainStartIndexY ? terrainStartIndexY : chunk.StartSomething;

                            for (int y = chunk.StartSomething>terrainStartIndexY ? chunk.StartSomething : terrainStartIndexY; y<terrainStartIndexH; y++) {
                                if (chunk.IsSolidBlocks[y]) chunk.SolidBlocks[y].Draw();
                                else {
                                    if (chunk.IsBackground[y]) chunk.Background[y].Draw();
                                    if (chunk.IsTopBlocks[y]) chunk.TopBlocks[y].Draw();
                                }
                            }

                            for (int i = 0; i<chunk.Plants.Count; i++) chunk.Plants[i].Draw();
                            for (int i = 0; i<chunk.Mobs.Count; i++) chunk.Mobs[i].Draw();
                        }
                    }

                    if (destroing) spriteBatch.Draw(destructionTexture, new Vector2(destroyBlock.X*16, destroyBlock.Y*16), new Rectangle((int)(destroingIndex/destringMaxIndex*336)/16*16, 0, 16, 16), Color.White);

                    foreach (Item i in DroppedItems) i.DrawItem();


                    // Player
                   #region Player
				if (rocket) {
					if (rocketDown) {
						spriteBatch.Draw(solidFuelSmokeTexture, new Rectangle((int)WindowCenterX-10, (int)WindowCenterY-40+rocketTexture.Height-10,26,20+FastRandom.Int(10)), ColorWhite);
						spriteBatch.Draw(rocketTexture, new Vector2(WindowCenterX-10, WindowCenterY-40), ColorWhite);
					} else {
						spriteBatch.Draw(solidFuelSmokeTexture, new Rectangle((int)WindowCenterX-10, (int)WindowCenterY-40+rocketTexture.Height-10,26,70+FastRandom.Int(15)), ColorWhite);
						spriteBatch.Draw(rocketTexture, new Vector2(WindowCenterX-10, WindowCenterY-40), ColorWhite);
					}

				} else if (showPlayer) {
					if (swimming || waterDown) {
						if (speedDir==-1) {
							// <-
							Rectangle curImg=new Rectangle(playerImg/22*39, 0, 39, 20);
							Vector2 vector=new Vector2(PlayerX-11, PlayerY+8);

							Vector2 vectorHead=new Vector2(PlayerX-11+78/2, PlayerY+8);
							Vector2 vectorChest=new Vector2(PlayerX-11+78/2-75/2-1, PlayerY+8+58/2-3-2);

							Vector2 rameno=new Vector2(vector.X-11+2+1+27/2-2+7/*?*/, vector.Y-39/2+12-1+38/2);
							handAngle=(1-swimmingTicks)*2*FastMath.PI;

							Rectangle recHand, recCloth;
							Vector2 vecOrigin;

							if (ClothesChestTop is null) {
								if (ClothesChest is null) DrawItemInHandBack(null, Color.White, 0);
								else DrawItemInHandBack(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
							} else DrawItemInHandBack(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

							//Feet
							if (ClothesFeet!=null) spriteBatch.Draw(ClothesFeet.TextureSwimming, vector, curImg, ClothesFeet.Color, 0, Vector2Zero, 1,SpriteEffects.None, 1f);
							else spriteBatch.Draw(TexturePlayerSwimmingFeet, vector, curImg, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.None, 0);

							// Legs
							if (ClothesLegs!=null) {
								if (ClothesLegs.ShowBodyLegs) spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Setting.ColorSkin);
								spriteBatch.Draw(ClothesLegs.TextureSwimming, vector, curImg, ClothesLegs.Color, 0, Vector2Zero, 1, SpriteEffects.None, 0);
							} else {
								spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.None, 0);
								if (ClothesUnderwearDown!=null) {
									if (ClothesChest==null) spriteBatch.Draw(ClothesUnderwearDown.TextureSwimming, vector, curImg, ClothesUnderwearDown.Color, 0, Vector2Zero, 1, SpriteEffects.None, 0);
									else if (!ClothesChest.IsDress) spriteBatch.Draw(ClothesUnderwearDown.TextureSwimming, vector, curImg, ClothesUnderwearDown.Color, 0, Vector2Zero, 1, SpriteEffects.None, 0);
								} else {
									if (Global.YoungPlayer) spriteBatch.Draw(TextureSwimmingDownCensored, vector, null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.None, 0);
								}
							}

							//Head
							spriteBatch.Draw(TexturePlayerWalkingFace, vectorHead, null, Setting.ColorSkin, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipVertically, 0);
							spriteBatch.Draw(TexturePlayerWalkingEyes, vectorHead, null, Setting.eyesColor, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipVertically, 0);
							spriteBatch.Draw(TexturePlayerWalkingMouth, vectorHead, null, ColorWhite, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipVertically, 0);
							if (Setting.moustageType!=0)spriteBatch.Draw(TexturePlayerWalkingMoustage, vectorHead, null, Setting.moustageColor, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipVertically, 0);
							if (Setting.hairType!=0)spriteBatch.Draw(TexturePlayerWalkingHair, vectorHead, null, Setting.hairColor, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipVertically, 0);

							if (ClothesHead!=null) spriteBatch.Draw(ClothesHead.TextureWalkingOrSwimming, new Vector2(vectorHead.X-78/2, vectorHead.Y+46/2), null, ClothesHead.Color, FastMath.PIHalf*3, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);

							// Chest
							if (ClothesChestTop is null || ClothesChestTop?.ShowTShirt==true) {
								if (ClothesChest!=null) spriteBatch.Draw(ClothesChest.TextureWalking, /*new Vector2(vectorChest.X,vectorChest.Y-2)*/ vectorChest, null, ClothesChest.Color, FastMath.PI1_5, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								else {
									spriteBatch.Draw(TexturePlayerWalkingChest, vectorChest, null, Setting.ColorSkin, FastMath.PI1_5, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									if (ClothesUnderwearUp!=null) spriteBatch.Draw(ClothesUnderwearUp.TextureSwimming/*TextureWalking*/, new Vector2(vector.X,vector.Y-2)/*vectorChest*/, null, ClothesUnderwearUp.Color, 0,/*FastMath.PIHalf,*/ Vector2Zero, 1, SpriteEffects.None/*.FlipHorizontally*/, 0);
									else {
										if (Setting.sex==Sex.Girl) {
											if (Global.YoungPlayer) {
												if (Setting.MaturePlayer>0) spriteBatch.Draw(TextureSwimmingUpCensored, vector, null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
											}
										}
									}
								}
							}
							if (ClothesChestTop!=null) spriteBatch.Draw(ClothesChestTop.TextureWalking, vectorChest, null, ClothesChestTop.Color, FastMath.PI1_5, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
							if (ClothesChestTop is null) {
								if (ClothesChest is null) DrawItemInHandTop(null, Color.White, 0);
								else DrawItemInHandTop(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
							} else DrawItemInHandTop(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

							void DrawItemInHandTop(Texture2D texCloth, Color colorCloth, int size){
								spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, handAngle, vecOrigin, 1, SpriteEffects.None,1f);
								if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth, colorCloth, handAngle, Vector2_2, 1, SpriteEffects.None,1f);

								if (InventoryNormal[boxSelected]!=null){
									if (InventoryNormal[boxSelected].Id!=0) {
										Rectangle recItem=new Rectangle(
											(int)(((float)Math.Cos(handAngle+FastMath.PIHalf)*(HandSize-4))+rameno.X-4),
											(int)(((float)Math.Sin(handAngle+FastMath.PIHalf))*(HandSize-4)+rameno.Y-4),
											8,
											8
										);

										switch (InventoryNormal[boxSelected]) {
											case ItemInvBasic16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvBasic32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvBasicColoritzed32NonStackable i:
												spriteBatch.Draw(i.Texture, recItem, i.color);
												break;

											case ItemInvFood16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvFood32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvNonStackable32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvNonStackable16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

												case ItemInvTool16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

												case ItemInvTool32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											#if DEBUG
											default: throw new Exception("Unknown category");
											#endif
										}
									}
								}
							}

							void DrawItemInHandBack(Texture2D texCloth, Color colorCloth, int size){
								recHand = new Rectangle(0,0,4,HandSize-size);
								vecOrigin=new Vector2(2,2-size);
								recCloth =new Rectangle(0,0,4,size);

								spriteBatch.Draw(
									TextureHand,
									rameno,
									recHand,
									new Color(
										(byte)(Setting.ColorSkin.R*0.75f),
										(byte)(Setting.ColorSkin.G*0.75f),
										(byte)(Setting.ColorSkin.B*0.75f),
										(byte)255
									),
									handAngle-FastMath.PI,
									vecOrigin,
									1f,
									SpriteEffects.None,
									1f);
								if (texCloth!=null) spriteBatch.Draw(texCloth, rameno, recCloth, new Color((byte)(colorCloth.R*0.75f),(byte)(colorCloth.G*0.75f),(byte)(colorCloth.B*0.75f),(byte)255), handAngle-FastMath.PI, Vector2_2, 1, SpriteEffects.None,1f);
							}
						} else {
							//->
							Rectangle curImg=new Rectangle(playerImg/22*39, 0, 39, 20);
							Vector2 vector=new Vector2(PlayerX-11-15-3, PlayerY+8);
							Vector2 vectorHead=new Vector2(PlayerX-11+46/2, PlayerY+8);
							Vector2 vectorChest=new Vector2(PlayerX-11-22+44, PlayerY+8+2-3+2);

							Vector2 rameno=new Vector2(vector.X-11+2+1+27/2-2+7+20, vector.Y-39/2+12-1+38/2);
							handAngle=swimmingTicks*2*FastMath.PI;

							Rectangle recHand, recCloth;
							Vector2 vecOrigin;

							if (ClothesChestTop is null) {
								if (ClothesChest is null) DrawItemInHandBack(null, Color.White, 0);
								else DrawItemInHandBack(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
							} else DrawItemInHandBack(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

							//feet
							if (ClothesFeet!=null) spriteBatch.Draw(ClothesFeet.TextureSwimming, vector, curImg, ClothesFeet.Color, 0, Vector2Zero, 1,SpriteEffects.FlipHorizontally, 1f);
							else spriteBatch.Draw(TexturePlayerSwimmingFeet, vector, curImg, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);

							// legs
							if (ClothesLegs!=null) {
								if (ClothesLegs.ShowBodyLegs) spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								spriteBatch.Draw(ClothesLegs.TextureSwimming, vector, curImg, ClothesLegs.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
							} else {
								spriteBatch.Draw(TexturePlayerSwimmingLegs, vector, curImg, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								if (ClothesUnderwearDown!=null) {
									if (ClothesChest==null) spriteBatch.Draw(ClothesUnderwearDown.TextureSwimming, vector, curImg, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									else if (!ClothesChest.IsDress) spriteBatch.Draw(ClothesUnderwearDown.TextureSwimming, vector, curImg, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								} else {
									if (Global.YoungPlayer) spriteBatch.Draw(TextureSwimmingDownCensored, vector, null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								}
							}

							// Head
							spriteBatch.Draw(TexturePlayerWalkingFace, vectorHead, null, Setting.ColorSkin,FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
							if (Setting.moustageType!=0)spriteBatch.Draw(TexturePlayerWalkingMoustage, vectorHead, null, Setting.moustageColor,FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
							spriteBatch.Draw(TexturePlayerWalkingMouth, vectorHead, null, ColorWhite,FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
							if (Setting.hairType!=0)spriteBatch.Draw(TexturePlayerWalkingHair, vectorHead, null, Setting.hairColor,FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
							spriteBatch.Draw(TexturePlayerWalkingEyes, vectorHead, null, Setting.eyesColor,FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);

							if (ClothesHead!=null) spriteBatch.Draw(ClothesHead.TextureStatic, vectorHead, null, ClothesHead.Color, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);

							//Chest
							if (ClothesChestTop is null || ClothesChestTop?.ShowTShirt==true) {
								if (ClothesChest!=null) spriteBatch.Draw(ClothesChest.TextureWalking, /*vectorChest*/new Vector2(vectorChest.X, vectorChest.Y-2), null, ClothesChest.Color, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
								else {
									spriteBatch.Draw(TexturePlayerWalkingChest, vectorChest, null, Setting.ColorSkin, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
									if (ClothesUnderwearUp!=null) spriteBatch.Draw(ClothesUnderwearUp.TextureSwimming,new Vector2(vector.X-5,vector.Y) /*vectorChest*/, null, ClothesUnderwearUp.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									else {
										if (Setting.sex==Sex.Girl) {
											if (Global.YoungPlayer) {
												if (Setting.MaturePlayer>0) spriteBatch.Draw(TextureSwimmingUpCensored, vector, null,Color.White /*ClothesUnderwearUp.Color*/, 0, Vector2Zero, 1, SpriteEffects.None, 0);
											}
										}
									}
								}
							}
							if (ClothesChestTop!=null) spriteBatch.Draw(ClothesChestTop.TextureWalking, vectorChest, null, ClothesChestTop.Color, FastMath.PIHalf, Vector2Zero, 1, SpriteEffects.None, 0);
							if (ClothesChestTop is null) {
								if (ClothesChest is null) DrawItemInHandTop(null, Color.White, 0);
								else DrawItemInHandTop(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
							} else DrawItemInHandTop(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

							void DrawItemInHandTop(Texture2D texCloth, Color colorCloth, int size){
								spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, handAngle, vecOrigin, 1, SpriteEffects.None,1f);
								if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth, colorCloth, handAngle, Vector2_2, 1, SpriteEffects.None,1f);

								if (InventoryNormal[boxSelected]!=null){
									if (InventoryNormal[boxSelected].Id!=0) {
										Rectangle recItem=new Rectangle(
											(int)(((float)Math.Cos(handAngle+FastMath.PIHalf)*(HandSize-4))+rameno.X-4),
											(int)(((float)Math.Sin(handAngle+FastMath.PIHalf))*(HandSize-4)+rameno.Y-4),
											8,
											8
										);

										switch (InventoryNormal[boxSelected]) {
											case ItemInvBasic16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvBasic32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvBasicColoritzed32NonStackable i:
												spriteBatch.Draw(i.Texture, recItem, i.color);
												break;

											case ItemInvFood16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvFood32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvNonStackable32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											case ItemInvNonStackable16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

												case ItemInvTool16 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

												case ItemInvTool32 i:
												spriteBatch.Draw(i.Texture, recItem, ColorWhite);
												break;

											#if DEBUG
											default: throw new Exception("Unknown category");
											#endif
										}
									}
								}
							}

							void DrawItemInHandBack(Texture2D texCloth, Color colorCloth, int size){
								recHand = new Rectangle(0,0,4,HandSize-size);
								vecOrigin=new Vector2(2,2-size);
								recCloth=new Rectangle(0,0,4,size);

								spriteBatch.Draw(TextureHand, rameno, recHand, new Color((byte)(Setting.ColorSkin.R*0.75f), (byte)(Setting.ColorSkin.G*0.75f), (byte)(Setting.ColorSkin.B*0.75f),(byte)255), handAngle-FastMath.PI, vecOrigin, 1, SpriteEffects.None,1f);
								if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth, new Color((byte)(colorCloth.R*0.75f),(byte)(colorCloth.G*0.75f),(byte)(colorCloth.B*0.75f),(byte)255), handAngle-FastMath.PI, Vector2_2, 1, SpriteEffects.None,1f);
							}
						}
					} else {
						switch (playerState) {
							default:
								{
									Vector2 vector=new Vector2((int)PlayerX-11, (int)PlayerY-(int)(39*0.5f));

									Vector2 pointing=new Vector2(mouseRealPosX-Global.WindowWidthHalf, mouseRealPosY-Global.WindowHeightHalf);
									Vector2 rameno=new Vector2(vector.X-11+2+1+27/2-2, vector.Y-39/2+12-1+38/2);
									Vector2 hand=Vector2.Normalize(pointing)*HandSize;
									hand.X+=rameno.X;
									hand.Y+=rameno.Y;
									Vector2 center=(hand+rameno)/2;

									handAngle=(float)Math.Atan2(rameno.Y-hand.Y, rameno.X-hand.X)+FastMath.PIHalf;

									// Legs
									if (ClothesLegs!=null) {
										if (ClothesLegs.ShowBodyLegs) spriteBatch.Draw(TexturePlayerStaticLegs, vector, Setting.ColorSkin);
										spriteBatch.Draw(ClothesLegs.TextureStatic, vector, ClothesLegs.Color);
									} else {
										spriteBatch.Draw(TexturePlayerStaticLegs, vector, Setting.ColorSkin);
										if (ClothesUnderwearDown!=null) {
											if (ClothesChest==null)spriteBatch.Draw(ClothesUnderwearDown.TextureStatic, vector, ClothesUnderwearDown.Color);
											else if (!ClothesChest.IsDress) spriteBatch.Draw(ClothesUnderwearDown.TextureStatic, vector, ClothesUnderwearDown.Color);
										} else {
											if (Global.YoungPlayer) spriteBatch.Draw(TextureStaticDownCensored, vector, ColorWhite);
										}
									}

									// Chest
									if (ClothesChestTop is null || ClothesChestTop?.ShowTShirt==true) {
										if (ClothesChest!=null) {
											spriteBatch.Draw(ClothesChest.TextureStatic, vector, ClothesChest.Color);
										} else {
											spriteBatch.Draw(TexturePlayerStaticChest, vector, Setting.ColorSkin);
											if (ClothesUnderwearUp!=null) spriteBatch.Draw(ClothesUnderwearUp.TextureStatic, vector, ClothesUnderwearUp.Color);
											else {
												if (Setting.sex==Sex.Girl) {
													if (Global.YoungPlayer) {
														if (Setting.MaturePlayer>0) spriteBatch.Draw(TextureStaticUpCensored, vector, ColorWhite);
													}
												}
											}
										}
									}

									if (ClothesChestTop!=null) spriteBatch.Draw(ClothesChestTop.TextureStatic, vector, ClothesChestTop.Color);

									// Feet
									if (ClothesFeet!=null) spriteBatch.Draw(ClothesFeet.TextureStatic, vector, ClothesFeet.Color);
									else spriteBatch.Draw(TexturePlayerStaticFeet, vector, Setting.ColorSkin);

									// Head
									spriteBatch.Draw(TexturePlayerStaticFace, vector, Setting.ColorSkin);
									if (Setting.moustageType!=0)spriteBatch.Draw(TexturePlayerStaticMoustage, vector, Setting.moustageColor);
									spriteBatch.Draw(TexturePlayerStaticMouth, vector, ColorWhite);
									if (Setting.hairType!=0)spriteBatch.Draw(TexturePlayerStaticHair, vector, Setting.hairColor);
									spriteBatch.Draw(TexturePlayerStaticEyes, vector, Setting.eyesColor);

									if (ClothesHead!=null) spriteBatch.Draw(ClothesHead.TextureStatic, vector, ClothesHead.Color);

									if (ClothesChestTop is null) {
										if (ClothesChest is null)DrawItemInHand(null, Color.White, 0);
										else DrawItemInHand(ClothesChest?.Texture2DClothHand, ClothesChest.Color, (int)ClothesChest?.handSize);
									} else DrawItemInHand(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color, (int)ClothesChestTop.handSize);

									void DrawItemInHand(Texture2D texCloth, Color colorCloth, int size) {
										Rectangle recHand= new Rectangle(0,0,4,HandSize-size), recCloth=new Rectangle(0,0,4,size);
										Vector2 vecOrigin=new Vector2(2,2-size);

										spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, handAngle, vecOrigin, 1, SpriteEffects.None,1f);
										if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth, colorCloth, handAngle, Vector2_2, 1, SpriteEffects.None,1f);

										// Right
										rameno.X+=17;
										spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, 0, vecOrigin, 1, SpriteEffects.None,1f);
										if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth, colorCloth, 0, Vector2_2, 1, SpriteEffects.None,1f);
										rameno.X-=17;

										if (InventoryNormal[boxSelected]!=null){
											if (InventoryNormal[boxSelected].Id!=0) {
												Rectangle recItem=new Rectangle(
													(int)(((float)Math.Cos(handAngle+FastMath.PIHalf)*(HandSize-4))+rameno.X-4),
													(int)(((float)Math.Sin(handAngle+FastMath.PIHalf))*(HandSize-4)+rameno.Y-4),
													8,
													8
												);

												switch (InventoryNormal[boxSelected]) {
													case ItemInvBasic16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasic32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasicColoritzed32NonStackable i:
														spriteBatch.Draw(i.Texture, recItem, i.color);
														break;

													case ItemInvFood16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvFood32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													#if DEBUG
													default: throw new Exception("Unknown category");
													#endif
												}
											}
										}

									}
								}
								break;

							case 2://->
								{
									Rectangle curImg=new Rectangle((playerImg/20)*20, 0, 20, 39);
									Vector2 vector=new Vector2(PlayerX-11, PlayerY-39/2);

									Vector2 rameno=new Vector2(vector.X-11+2+1+27/2-2+7, vector.Y-39/2+12-1+38/2+1);
									int ticks=gameTime.TotalGameTime.Milliseconds;

									Rectangle recHand, recCloth;
									Vector2 vecOrigin;

									if (ticks<250) handAngle=-ticks/250f*WalkingHandMaxAngle;
									else if (ticks<750) handAngle=((ticks-250)/250f)*WalkingHandMaxAngle-WalkingHandMaxAngle;
									else handAngle=WalkingHandMaxAngle-((ticks-750)/250f)*WalkingHandMaxAngle;

									if (ClothesChestTop is null) {
										if (ClothesChest is null) DrawItemInHandBack(null, Color.White, 0);
										else DrawItemInHandBack(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
									} else DrawItemInHandBack(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

									// Feet
									if (ClothesFeet!=null) {
										spriteBatch.Draw(TexturePlayerWalkingFeetForShoes, vector, curImg, Setting.ColorSkin);
										spriteBatch.Draw(ClothesFeet.TextureWalking, vector, curImg, ClothesFeet.Color);
									} else spriteBatch.Draw(TexturePlayerWalkingFeet, vector, curImg, Setting.ColorSkin);

									// Head
									spriteBatch.Draw(TexturePlayerWalkingFace, new Vector2(vector.X-1, vector.Y), Setting.ColorSkin);
									spriteBatch.Draw(TexturePlayerWalkingEyes, new Vector2(vector.X-1, vector.Y), Setting.eyesColor);
									spriteBatch.Draw(TexturePlayerWalkingMouth, new Vector2(vector.X-1, vector.Y), ColorWhite);
									if (Setting.moustageType!=0)spriteBatch.Draw(TexturePlayerWalkingMoustage, new Vector2(vector.X-1, vector.Y), Setting.moustageColor);
									if (Setting.hairType!=0)spriteBatch.Draw(TexturePlayerWalkingHair, new Vector2(vector.X-1, vector.Y), Setting.hairColor);

									// Legs
									if (ClothesLegs!=null) {
										if (ClothesLegs.ShowBodyLegs) spriteBatch.Draw(TexturePlayerWalkingLegs, vector, curImg, Setting.ColorSkin);
										spriteBatch.Draw(ClothesLegs.TextureWalking, vector, curImg, ClothesLegs.Color);
									} else {
										spriteBatch.Draw(TexturePlayerWalkingLegs, vector, curImg, Setting.ColorSkin);
										if (ClothesUnderwearDown!=null) {
											if (ClothesChest==null) spriteBatch.Draw(ClothesUnderwearDown.TextureWalking, vector, curImg, ClothesUnderwearDown.Color);
											else if (!ClothesChest.IsDress) spriteBatch.Draw(ClothesUnderwearDown.TextureWalking, vector, curImg, ClothesUnderwearDown.Color);
										} else {
											if (Global.YoungPlayer) spriteBatch.Draw(TextureWalkingDownCensored, vector, null, ColorWhite);
										}
									}
									// Chest
									if (ClothesChestTop is null || ClothesChestTop?.ShowTShirt==true) {
										if (ClothesChest!=null) spriteBatch.Draw(ClothesChest.TextureWalking, vector, null, ClothesChest.Color);
										else {
											spriteBatch.Draw(TexturePlayerWalkingChest, vector, null, Setting.ColorSkin);
											if (ClothesUnderwearUp!=null) spriteBatch.Draw(ClothesUnderwearUp.TextureWalking, vector, null, ClothesUnderwearUp.Color);
											else {
												if (Setting.sex==Sex.Girl) {
													if (Global.YoungPlayer) {
														if (Setting.MaturePlayer>0) spriteBatch.Draw(TextureWalkingUpCensored, vector, null, /*ClothesUnderwearUp.*/Color.White);
													}
												}
											}
										}
									}

									if (ClothesChestTop!=null) spriteBatch.Draw(ClothesChestTop.TextureWalking, vector, null, ClothesChestTop.Color);
									if (ClothesHead!=null) spriteBatch.Draw(ClothesHead.TextureWalkingOrSwimming, new Vector2(vector.X-1, vector.Y), ClothesHead.Color);


									if (ClothesChestTop is null) {
										if (ClothesChest is null) DrawItemInHandTop(null, Color.White, 0);
										else DrawItemInHandTop(ClothesChest.Texture2DClothHand, ClothesChest.Color, (int)ClothesChest.handSize);
									} else DrawItemInHandTop(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color, (int)ClothesChestTop.handSize);

									void DrawItemInHandTop(Texture2D texCloth, Color colorCloth, int size){
										spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, handAngle, vecOrigin, 1, SpriteEffects.None,1f);
										if (texCloth!=null) spriteBatch.Draw(texCloth, rameno, recCloth, colorCloth, handAngle, Vector2_2, 1, SpriteEffects.None,1f);

										if (InventoryNormal[boxSelected]!=null){
											if (InventoryNormal[boxSelected].Id!=0) {
												Rectangle recItem=new Rectangle(
													(int)(((float)Math.Cos(handAngle+FastMath.PIHalf)*(HandSize-4))+rameno.X-4),
													(int)(((float)Math.Sin(handAngle+FastMath.PIHalf))*(HandSize-4)+rameno.Y-4),
													8,
													8
												);

												switch (InventoryNormal[boxSelected]) {
													case ItemInvBasic16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasic32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasicColoritzed32NonStackable i:
														spriteBatch.Draw(i.Texture, recItem, i.color);
														break;

													case ItemInvFood16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvFood32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													#if DEBUG
													default: throw new Exception("Unknown category");
													#endif
												}
											}
										}
									}

									void DrawItemInHandBack(Texture2D texCloth, Color colorCloth, int size){
										recHand= new Rectangle(0,0,4,HandSize-size);
										vecOrigin=new Vector2(2,2-size);

										spriteBatch.Draw(TextureHand, rameno, recHand, new Color((byte)(Setting.ColorSkin.R*0.75f), (byte)(Setting.ColorSkin.G*0.75f), (byte)(Setting.ColorSkin.B*0.75f),(byte)255), -handAngle, vecOrigin, 1, SpriteEffects.None,1f);

											recCloth=new Rectangle(0,0,4,size);
										if (texCloth!=null) {
											spriteBatch.Draw(texCloth, rameno, recCloth, new Color((byte)(colorCloth.R*0.75f),(byte)(colorCloth.G*0.75f),(byte)(colorCloth.B*0.75f),(byte)255), -handAngle, Vector2_2, 1, SpriteEffects.None,1f);
										}
									}
								}
								break;

							case 1://<-
								{
									Rectangle curImg=new Rectangle((playerImg/20)*20, 0, 20, 39);
								//	Rectangle curImg2=new Rectangle((playerImg2/20)*20, 0, 20, 39);

									Vector2 vector=new Vector2(PlayerX-11, PlayerY-39/2);

									Vector2 rameno=new Vector2(vector.X-11+2+1+27/2-2+7, vector.Y-39/2+12-1+38/2+1);
									int ticks=gameTime.TotalGameTime.Milliseconds;

									Rectangle recHand, recCloth;
									Vector2 vecOrigin;

									if (ticks<250) handAngle=-ticks/250f*WalkingHandMaxAngle;
									else if (ticks<750) handAngle=((ticks-250)/250f)*WalkingHandMaxAngle-WalkingHandMaxAngle;
									else handAngle=WalkingHandMaxAngle-((ticks-750)/250f)*WalkingHandMaxAngle;

									if (ClothesChestTop is null) {
										if (ClothesChest is null) DrawItemInHandBack(null, Color.White, 0);
										else DrawItemInHandBack(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
									} else DrawItemInHandBack(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

									// Feet
									if (ClothesFeet!=null) {
										spriteBatch.Draw(TexturePlayerWalkingFeetForShoes, vector, curImg/*2*/, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
										spriteBatch.Draw(ClothesFeet.TextureWalking, vector, curImg/*2*/, ClothesFeet.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									} else spriteBatch.Draw(TexturePlayerWalkingFeet, vector, curImg/*2*/, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);


									spriteBatch.Draw(TexturePlayerWalkingFace, new Vector2(vector.X-1,vector.Y), null, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									spriteBatch.Draw(TexturePlayerWalkingEyes, new Vector2(vector.X-1,vector.Y), null, Setting.eyesColor, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									spriteBatch.Draw(TexturePlayerWalkingMouth,new Vector2(vector.X-1,vector.Y), null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									if (Setting.moustageType!=0)spriteBatch.Draw(TexturePlayerWalkingMoustage, new Vector2(vector.X-1,vector.Y), null, Setting.moustageColor, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									if (Setting.hairType!=0)spriteBatch.Draw(TexturePlayerWalkingHair, new Vector2(vector.X-1,vector.Y), null, Setting.hairColor, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);

									if (ClothesHead!=null) spriteBatch.Draw(ClothesHead.TextureWalkingOrSwimming, new Vector2(vector.X-1,vector.Y), null, ClothesHead.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);

									// Legs
									if (ClothesLegs!=null) {
										if (ClothesLegs.ShowBodyLegs) spriteBatch.Draw(TexturePlayerWalkingLegs, vector, curImg, Setting.ColorSkin);
										spriteBatch.Draw(ClothesLegs.TextureWalking, vector, curImg, ClothesLegs.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
									} else {
										spriteBatch.Draw(TexturePlayerWalkingLegs, vector, curImg, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
										if (ClothesUnderwearDown!=null) {
											if (ClothesChest==null) spriteBatch.Draw(ClothesUnderwearDown.TextureWalking, vector, curImg, ClothesUnderwearDown.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
											else if (!ClothesChest.IsDress) spriteBatch.Draw(ClothesUnderwearDown.TextureWalking, vector, curImg, ClothesUnderwearDown.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
										} else {
											if (Global.YoungPlayer) spriteBatch.Draw(TextureWalkingDownCensored, vector, null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
										}
									}
									// Chest
									if (ClothesChestTop is null || ClothesChestTop?.ShowTShirt==true) {
										if (ClothesChest!=null) spriteBatch.Draw(ClothesChest.TextureWalking, new Vector2(vector.X-2, vector.Y) , null, ClothesChest.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
										else {
											spriteBatch.Draw(TexturePlayerWalkingChest,new Vector2(vector.X-2, vector.Y)/*vector*//*vector*/, null, Setting.ColorSkin, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
											if (ClothesUnderwearUp!=null) spriteBatch.Draw(ClothesUnderwearUp.TextureWalking, vector, null, ClothesUnderwearUp.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
											else {
												if (Setting.sex==Sex.Girl) {
													if (Global.YoungPlayer) {
														if (Setting.MaturePlayer>0) spriteBatch.Draw(TextureWalkingUpCensored, vector, null, ColorWhite, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);
													}
												}
											}
										}
									}
									if (ClothesChestTop!=null) spriteBatch.Draw(ClothesChestTop.TextureWalking, vector, null, ClothesChestTop.Color, 0, Vector2Zero, 1, SpriteEffects.FlipHorizontally, 0);


									if (ClothesChestTop is null) {
										if (ClothesChest is null) DrawItemInHandTop(null, Color.White, 0);
										else DrawItemInHandTop(ClothesChest.Texture2DClothHand, ClothesChest.Color,(int)ClothesChest.handSize);
									} else DrawItemInHandTop(ClothesChestTop.Texture2DClothHand, ClothesChestTop.Color,(int)ClothesChestTop.handSize);

									void DrawItemInHandTop(Texture2D texCloth, Color colorCloth, int size){
										spriteBatch.Draw(TextureHand, rameno, recHand, Setting.ColorSkin, handAngle, vecOrigin, 1, SpriteEffects.None,1f);
										if (texCloth!=null)spriteBatch.Draw(texCloth, rameno, recCloth/*new Rectangle(0,0,4,size)*/, colorCloth, handAngle, Vector2_2, 1, SpriteEffects.None,1f);

										if (InventoryNormal[boxSelected]!=null){
											if (InventoryNormal[boxSelected].Id!=0) {
												Rectangle recItem=new Rectangle(
													(int)(((float)Math.Cos(handAngle+FastMath.PIHalf)*(HandSize-4))+rameno.X-4),
													(int)(((float)Math.Sin(handAngle+FastMath.PIHalf))*(HandSize-4)+rameno.Y-4),
													8,
													8
												);

												switch (InventoryNormal[boxSelected]) {
													case ItemInvBasic16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasic32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvBasicColoritzed32NonStackable i:
														spriteBatch.Draw(i.Texture, recItem, i.color);
														break;

													case ItemInvFood16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvFood32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													case ItemInvNonStackable16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool16 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													 case ItemInvTool32 i:
														spriteBatch.Draw(i.Texture, recItem, ColorWhite);
														break;

													#if DEBUG
													default: throw new Exception("Unknown category");
													#endif
												}
											}
										}
									}

									void DrawItemInHandBack(Texture2D texCloth, Color colorCloth, int size){
										recHand= new Rectangle(0,0,4,HandSize-size);
										vecOrigin=new Vector2(2,2-size);

										spriteBatch.Draw(TextureHand, rameno, recHand, new Color((byte)(Setting.ColorSkin.R*0.75f), (byte)(Setting.ColorSkin.G*0.75f), (byte)(Setting.ColorSkin.B*0.75f),(byte)255), -handAngle, vecOrigin, 1, SpriteEffects.None,1f);
											recCloth = new Rectangle(0,0,4,size);
										if (texCloth!=null) {
											spriteBatch.Draw(texCloth, rameno, new Rectangle(0,0,4,size), new Color((byte)(colorCloth.R*0.75f),(byte)(colorCloth.G*0.75f),(byte)(colorCloth.B*0.75f), (byte)255), -handAngle, Vector2_2, 1, SpriteEffects.None,1f);
										}
									}
								}
							break;
						}
					}
				}
				#endregion

                    for (int i = 0; i<players.Count; i++) {
                        Player p = players[i];
                        if (p!=null) {
                            spriteBatch.Draw(TextureAirTank/*player*/, new Vector2(p.x-11, p.y-20), Color.White);
                            spriteBatch.DrawString(spriteFont_small, p.name, new Vector2(p.x-spriteFont_small.MeasureString(p.name).X/2+11-11, p.y-20-15), Color.White);
                        }
                    }

                    if (debug) {
                        foreach (Energy r in energy) r.Draw();
                        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(mousePosRoundX, mousePosRoundY, 16, 16), null, color_r200_g200_b200_a100);
                    }
                    spriteBatch.End();

                    // Draw lighting on game
                    spriteBatch.Begin(SpriteSortMode.Deferred, Multiply);
                    spriteBatch.Draw(modificatedLightTarget, Vector2.Zero, Color.White);
                    spriteBatch.End();
                    #endregion

                    #region Draw inv
                    if (showInventory) {
                        spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp);

                        #region Draw Bars
                        if (Global.WorldDifficulty!=2) {
                            // Energy bar
                            spriteBatch.Draw(barEnergyTexture, new Vector2(Global.WindowWidth-150-36, 8), new Rectangle(0, 0, 32, (int)barEnergy), Color.Gray);
                            spriteBatch.Draw(barEnergyTexture, new Vector2(Global.WindowWidth-150-36, 8+(int)barEnergy), new Rectangle(0, (int)barEnergy, 32, 32-(int)barEnergy), Color.White);

                            // Oxygen bar
                            spriteBatch.Draw(barOxygenTexture, new Vector2(Global.WindowWidth-150, 8), new Rectangle(0, 0, 32, (int)barOxygen), Color.Gray);
                            spriteBatch.Draw(barOxygenTexture, new Vector2(Global.WindowWidth-150, 8+(int)barOxygen), new Rectangle(0, (int)barOxygen, 32, 32-(int)barOxygen), Color.White);

                            // Water bar
                            spriteBatch.Draw(barWaterTexture, new Vector2(Global.WindowWidth-114, 8), new Rectangle(0, 0, 32, (int)barWater), Color.Gray);
                            spriteBatch.Draw(barWaterTexture, new Vector2(Global.WindowWidth-114, 8+(int)barWater), new Rectangle(0, (int)barWater, 32, 32-(int)barWater), Color.White);

                            // Eat bar
                            spriteBatch.Draw(barEatTexture, new Vector2(Global.WindowWidth-78, 8), new Rectangle(0, 0, 32, (int)barEat), Color.Gray);
                            spriteBatch.Draw(barEatTexture, new Vector2(Global.WindowWidth-78, 8+(int)barEat), new Rectangle(0, (int)barEat, 32, 32-(int)barEat), Color.White);

                            // Heart bar
                            spriteBatch.Draw(barHeartTexture, new Vector2(Global.WindowWidth-40, 8), new Rectangle(0, 0, 32, (int)barHeart), Color.Gray);
                            spriteBatch.Draw(barHeartTexture, new Vector2(Global.WindowWidth-40, 8+(int)barHeart), new Rectangle(0, (int)barHeart, 32, 32-(int)barHeart), Color.White);
                        }
                        #endregion

                        #region Draw Inventory
					switch (inventory) {

						#region Normal
						case InventoryType.Normal:
							if (diserpeard!=0) {
								if (gedo!=null) {
									#if DEBUG
									if (text.StartsWith("*time-set ")) {
										if (int.TryParse(text.Substring("*time-set ".Length), out int num)){
											time=num*hour;
										} else if (float.TryParse(text.Substring("*time-set ".Length), out float num2)){
											time=(int)(num2*hour);
										}
										text="";
										diserpeard=0;
									}
									if (text.StartsWith("*day-set ")){
										if (int.TryParse(text.Substring("*day-set ".Length), out int num)){
											day=num;
											ChangeLeavesForceEverything();
										}
										text="";
										diserpeard=0;
									}
									if (text=="*give-mobile") {
										InventoryAddOne((ushort)Items.Mobile);
										text="";
										diserpeard=0;text="";diserpeard=0;
									}
									if (text=="*wd0") {
										Global.WorldDifficulty=0;text="";diserpeard=0;
									}
									if (text=="*wd1") {
										Global.WorldDifficulty=1;text="";diserpeard=0;
									}
									if (text=="*wd2") {
										Global.WorldDifficulty=2;text="";diserpeard=0;
									}
									if (text=="*rain-change") {
										changeRain=1;
										text="";diserpeard=0;
									}
									if (text=="*wind-change") {
										timeToChageWind=1;
										text="";diserpeard=0;
									}
									#endif
									if (text.StartsWith("*error")) {
										throw new Exception("Manual error");
									}
									int meas=BitmapFont.bitmapFont18.MeasureTextSingleLineX(gedo.Text);
									int texts=meas/2;
									int x=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);
									gedo.SetPos(x-texts+20-10-5,Global.WindowHeightHalf-40-50-4);
									if (diserpeard>100) {
										spriteBatch.Draw(messageLeft,new Vector2(x-texts-10,Global.WindowHeightHalf-55-50), ColorWhite);
										spriteBatch.Draw(messageCenter,new Rectangle(x-texts+19-10,Global.WindowHeightHalf-55-50,texts*2,57), ColorWhite);
										spriteBatch.Draw(messageRight,new Vector2(x+texts+19-10,Global.WindowHeightHalf-55-50), ColorWhite);

										gedo.DrawGedo(1f,spriteBatch);
									} else {
										float alphaC =diserpeard/100f;
										Color alphaCC=new Color(alphaC,alphaC,alphaC,alphaC);

										spriteBatch.Draw(messageLeft,new Vector2(x-texts-10,Global.WindowHeightHalf-55-50), alphaCC);
										spriteBatch.Draw(messageCenter,new Rectangle(x-texts+19-10,Global.WindowHeightHalf-55-50,texts*2,57), alphaCC);
										spriteBatch.Draw(messageRight,new Vector2(x+texts+19-10,Global.WindowHeightHalf-55-50), alphaCC);

										gedo.DrawGedo(alphaC,spriteBatch);
									}
								}
							}

							#region Basic right inventory
							{
								int w=Global.WindowWidth-40, h=Global.WindowHeightHalf-80;
								for (int i = 0; i<5; i++) {
									if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(w, h+i*40), Color.LightBlue);
									else spriteBatch.Draw(inventorySlotTexture, new Vector2(w, h+i*40), ColorWhite);
								}
							}

							for (int i = 0; i<5; i++) InventoryNormal[i].Draw();
							#endregion

							break;
						#endregion

						#region Writing message
						case InventoryType.Typing:
							{
								int xx=Global.WindowWidthHalf+((int)PlayerX-(int)WindowCenterX);

								int half=textWriting.MeasureX/2;
								spriteBatch.Draw(messageLeft,new Vector2(xx-half-10,Global.WindowHeightHalf-55-50), ColorWhite);
								spriteBatch.Draw(messageCenter,new Rectangle(xx-half+19-10,Global.WindowHeightHalf-55-50,textWriting.MeasureX,57), ColorWhite);
								spriteBatch.Draw(messageRight,new Vector2(xx+half+19-10,Global.WindowHeightHalf-55-50), ColorWhite);

								textWriting.Draw(spriteBatch);

								spriteBatch.Draw(pixel,new Rectangle(xx+half+20-10,Global.WindowHeightHalf-40-50+3,1,15), Color.Black);

								DrawSideInventory();
							}
							break;
						#endregion

						#region Basic inventory - clothes, inventory and basic crafting
						case InventoryType.BasicInv:
							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(TextureInventoryClothes,new Vector2(Global.WindowWidthHalf-300+4+60, Global.WindowHeightHalf-200+2+4), ColorWhite);
							textOpenInventory.Draw(spriteBatch);

							DrawInventoryWithMoving();
							InventoryDrawClothes();

							#region Crafting
							{
								if (inventoryScrollbarValueCraftingMax>6*4) {
									int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );

									int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / (inventoryScrollbarValueCraftingMax-6*3)*(160-size2) )*8;
									if (size2>20) {
										spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
									} else {
										spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
									}
								}

								int xx =0;
								int yh=0;

								for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
									if (i>inventoryScrollbarValueCraftingMax) break;
									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

									if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
									} else {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
									}

									InventoryCrafting[i].DrawCreative();
									//Texture2D tex=ItemIdToTexture(InventoryCrafting[i].X);
									//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
									xx+=40;

									if (xx==6*40) {
										xx=0;
										yh+=40;
									}
								}
							}
							#endregion

							DrawNeedNew();

							buttonInvTabBlocks.ButtonDraw();
							buttonInvTabMashines.ButtonDraw();
							buttonInvTabTools.ButtonDraw();
							buttonInvTabPlants.ButtonDraw();
							buttonInvTabItems.ButtonDraw();

							DrawSideInventory();

							if (displayPopUpWindow)DrawChooseItemWindow();
							else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region Desk
						case InventoryType.Desk:
							spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(deskTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
							textOpenInventory.Draw(spriteBatch);

							DrawInventoryNormal();

							#region Crafting
							{
								if (inventoryScrollbarValueCraftingMax>6*4) {
									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);

									int pos2 = (int)(((float)(inventoryScrollbarValueCrafting*5/40f)/(inventoryScrollbarValueCraftingMax-3*6))*(160-size2));
									if (size2>20) {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
									} else {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
									}
								}

								int xx =0;
								int yh=0;

								for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
									if (i>inventoryScrollbarValueCraftingMax) break;
									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
										//if (mouseLeftRelease) {
										//    selectedCraftingItem=i;

										//    craftingType=0;
										//    DListInt[]x=GameMethods.Craft(Crafting[selectedCraftingItem].X);
										//    if (x!=null) Need=x[craftingType].List1;
										//}
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8),color_r200_g200_b200);
									} else {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
										else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
									}
									InventoryCrafting[i].DrawCreative();
									//Texture2D tex=ItemIdToTexture(InventoryCrafting[i].X);
									//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
									xx+=40;

									if (xx==6*40) {
										xx=0;
										yh+=40;
									}
								}
							}
							#endregion

							DrawNeedNew();

							buttonInvTabBlocks.ButtonDraw();
							buttonInvTabMashines.ButtonDraw();
							buttonInvTabTools.ButtonDraw();
							buttonInvTabPlants.ButtonDraw();
							buttonInvTabItems.ButtonDraw();

							DrawSideInventory();

							if (displayPopUpWindow)DrawChooseItemWindow();
							else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region Furnace stone
						case InventoryType.FurnaceStone:
							{
								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								ItemInv[] inv=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;
								float energy=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Energy;

								spriteBatch.Draw(furnaceStoneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200),new Rectangle(energy>0 ?0 :16,0,16,16), ColorWhite);

								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-2, Global.WindowHeightHalf-200+2+4-6,202+2,5),Color.Black);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-1, Global.WindowHeightHalf-200+2+4-5,(int)(energy*2.02),3),Color.Green);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300+4-1+(int)(energy*2.02),Global.WindowHeightHalf-200+2+4-5,202-(int)(energy*2.02),3),Color.Red);
								textOpenInventory.Draw(spriteBatch);

								DrawInventoryWithMoving();

								#region Bake
								{
									if (inventoryScrollbarValueCraftingMax>6*4) {
										int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
										int pos2 = (int)(((inventoryScrollbarValueCrafting*5/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
										if (size2>20) {
											spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
											spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
											spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
										} else {
											spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
											spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
										}
									}

									int xx = 0;
									int yh = 0;

									for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
										if (i>inventoryScrollbarValueCraftingMax) break;
										if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
										//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
										//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
											//if (mouseLeftRelease) {
											//    selectedCraftingItem=i;
											//    craftingType=0;
											//    DListInt[] x = GameMethods.Bake(Crafting[selectedCraftingItem].X);
											//    if (x!=null) Need=x[craftingType].List1;
											//}
											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
											else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
										} else {
											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
											else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
										}
										InventoryCrafting[i].Draw();
										//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
										//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
										xx+=40;

										if (xx==6*40) {
											xx=0;
											yh+=40;
										}
									}
								}
								#endregion

								DrawNeedNew();
								#region burn wood
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40*2+40, Global.WindowHeightHalf-200+2+4+60), ColorWhite*0.5f);
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+1+40+40, Global.WindowHeightHalf-200+2+4+60+40+8), ColorWhite*0.5f);
								spriteBatch.Draw(ashTexture, new Rectangle(Global.WindowWidthHalf-300+4+1+40+40+4, Global.WindowHeightHalf-200+2+4+60+40+8+4,32,32), ColorWhite*0.25f);

								inv[0].Draw();
								inv[1].Draw();
								inv[2].Draw();
								inv[3].Draw();
								#endregion

								buttonInvTabMaterials.ButtonDraw();
								buttonInvTabGlass.ButtonDraw();
								buttonInvTabCeramics.ButtonDraw();
								buttonInvTabFood.ButtonDraw();
								buttonInvTabTools.ButtonDraw();

								DrawSideInventory();

								if (displayPopUpWindow)DrawChooseItemWindow();
								else if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
								if (buttonClose.Update()) inventory=0;
							}
							break;
							#endregion

						#region Furnace electric
						case InventoryType.FurnaceElectric:
							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(furnaceElectricOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
							textOpenInventory.Draw(spriteBatch);
							DrawInventoryNormal();

							#region Bake
							{
								if (inventoryScrollbarValueCraftingMax>6*4) {
									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
									int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
									if (size2>20) {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
									} else {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
									}
								}

								int xx = 0;
								int yh = 0;

								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
									if (i>inventoryScrollbarValueCraftingMax) break;
									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
									} else {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
									}
									InventoryCrafting[i].Draw();
								   // Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
								   // if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
									xx+=40;

									if (xx==6*40) {
										xx=0;
										yh+=40;
									}
								}
							}
							#endregion

							DrawNeedNew();

							buttonInvTabMaterials.ButtonDraw();
							buttonInvTabGlass.ButtonDraw();
							buttonInvTabCeramics.ButtonDraw();
							buttonInvTabFood.ButtonDraw();
							buttonInvTabTools.ButtonDraw();

							DrawSideInventory();
							if (displayPopUpWindow)DrawChooseItemWindow();
							else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region Macerator
						case InventoryType.Macerator:
							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255 );
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(maceratorOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
							textOpenInventory.Draw(spriteBatch);

							DrawInventoryNormal();

							#region ToDust
							{
								if (inventoryScrollbarValueCraftingMax>6*4) {
									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
									int pos2 = (int)(((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax*(160-size2))*8;
									if (size2>20) {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
									} else {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
									}
								}

								int xx = 0;
								int yh = 0;

								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
									if (i>inventoryScrollbarValueCraftingMax) break;
									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
									} else {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
									}
									InventoryCrafting[i].Draw();
									//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
									//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
									xx+=40;

									if (xx==6*40) {
										xx=0;
										yh+=40;
									}
								}
							}
							#endregion

							DrawNeedNew();

							buttonInvTabMaterials.ButtonDraw();
							buttonInvTabPlants.ButtonDraw();
							buttonInvTabTools.ButtonDraw();
							buttonInvTabItems.ButtonDraw();
							buttonInvTabCeramics.ButtonDraw();

							DrawSideInventory();
							if (displayPopUpWindow)DrawChooseItemWindow();
							else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region Creative
						case InventoryType.Creative:
							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2+30,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434+30,1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2+30), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(TextureInventoryClothes, new Vector2(Global.WindowWidthHalf-300+4+60, Global.WindowHeightHalf-200+2+4), ColorWhite);

							textOpenInventory.Draw(spriteBatch);

							int AddH=35;
							DrawInventoryWithMoving();
							InventoryDrawClothes();

							if (creativeTabCrafting) {
								#region Crafting
								{
									if (inventoryScrollbarValueCraftingMax>6*4) {
										int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
										int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / (inventoryScrollbarValueCraftingMax-6*3)*(160-size2) )*8+50-15;
										if (size2>20) {
											spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
											spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), ColorWhite);
											spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
										} else {
											spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
											spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
										}
									}

									int xx =0;
									int yh=0;

									for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
										if (i>inventoryScrollbarValueCraftingMax) break;

										if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH)) {
											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r128_g128_b128);
											else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r200_g200_b200);
										} else {
											if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), color_r150_g150_b150);
											else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH), ColorWhite);
										}
									 //   InventoryCrafting[i].SetPos(xx,yh);
										InventoryCrafting[i].DrawCreative();
										//Texture2D tex=ItemIdToTexture(InventoryInventoryCrafting[i].X);
										//if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8+AddH);
										xx+=40;

										if (xx==6*40) {
											xx=0;
											yh+=40;
										}
									}
								}
								#endregion

								DrawNeedNewPlus();
							}

							buttonInvTabBlocks.ButtonDraw();
							buttonInvTabMashines.ButtonDraw();
							buttonInvTabTools.ButtonDraw();
							buttonInvTabPlants.ButtonDraw();
							buttonInvTabItems.ButtonDraw();

							DrawSideInventory();

							if (creativeTabCrafting) {
								ButtonCrafting.ButtonDrawSelected();
								ButtonItems.ButtonDraw();
							} else {
								DrawCreative();
								ButtonCrafting.ButtonDraw();
								ButtonItems.ButtonDrawSelected();
							}

							if (displayPopUpWindow)DrawChooseItemWindow();
							else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region Shelf
						case InventoryType.Shelf:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(shelfTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);
								ItemInv[] invShelf=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Shelf inventory
								{
								  //  int i=0;
									for (int y = 0; y<3*40; y+=40) {
										for (int x = 0; x<3*40; x+=40) {
											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+x+20+5+1+2, Global.WindowHeightHalf+20-2+y+20+3+2), ColorWhite);

										  //  if (!invMove||(invMove && invStartInventory[invStartId]!=invShelf[i])) {

												//Texture2D tex = ItemIdToTexture(invShelf[i].X);
												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invShelf[i], Global.WindowWidthHalf-300+10+x+20+5+1+2+4, Global.WindowHeightHalf+20-2+y+20+3+2+4);
											//}
										  //  i++;
										}
									}

									invShelf[0].Draw();
									invShelf[1].Draw();
									invShelf[2].Draw();

									invShelf[3].Draw();
									invShelf[4].Draw();
									invShelf[5].Draw();

									invShelf[6].Draw();
									invShelf[7].Draw();
									invShelf[8].Draw();
								}
								#endregion

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Wooden box
						case InventoryType.BoxWooden:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(boxWoodenTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);
								ItemInv[] invBoxWooden=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Box
								{
									int i=0;
									for (int y = 0; y<2*40; y+=40) {
										for (int x = 0; x<12*40; x+=40) {
											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+x+59, Global.WindowHeightHalf+59+y), ColorWhite);

										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invBoxWooden[i])) {
											invBoxWooden[i].Draw();
												//Texture2D tex = ItemIdToTexture(invBoxWooden[i].X);
												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invBoxWooden[i], Global.WindowWidthHalf-300+x+63,  Global.WindowHeightHalf+y+63);
											//}
											i++;
										}
									}
								}
								#endregion

								 if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Adv box
						case InventoryType.BoxAdv:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(boxAdvTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);

								textOpenInventory.Draw(spriteBatch);
								ItemInv[] invAdvBox=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Box
								{
									int i=0;
									for (int y = 0; y<4*40; y+=40) {
										for (int x = 0; x<12*40; x+=40) {
											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+20+x, Global.WindowHeightHalf+23+y), ColorWhite);

										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invAdvBox[i])) {
											invAdvBox[i].Draw();
												//Texture2D tex = ItemIdToTexture(invAdvBox[i].X);
												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invAdvBox[i], Global.WindowWidthHalf-300+24+x, Global.WindowHeightHalf+23+4+y);
											//}
											i++;
										}
									}
								}
								#endregion

							   if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
							#endregion

						#region Phone
						case InventoryType.Mobile:
							spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234,304,464+2,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233,302,464,1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232,300,34), color_r10_g140_b255);

							buttonClose.ButtonDraw();
							textOpenInventory.Draw(spriteBatch);

							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430), Color.Black);
							mobileOS.Draw(spriteBatch,Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430);
							break;
							#endregion

						#region Rocket
						case InventoryType.Rocket:
							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234,304,464+2,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233,302,464,1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232,300,34), color_r10_g140_b255);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198,300,430), Color.LightBlue);

							buttonClose.ButtonDraw();

							textOpenInventory.Draw(spriteBatch);
							spriteBatch.Draw(rocketTexture,new Rectangle(Global.WindowWidthHalf-62, Global.WindowHeightHalf-190,123,380), ColorWhite);

							buttonRocket.ButtonDraw();
							break;
						#endregion

						#region Charger
						case InventoryType.Charger:
							{
								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(chargerTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);

								ItemInv[] invCharger=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								#region Place for charging
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+40+20+5+1+2, Global.WindowHeightHalf+20-2+40+20+3+2), ColorWhite);

							   // if (!invMove||(invMove&&invStartInventory[invStartId]!=invCharger[0])) {
									invCharger[0].Draw();
									//Texture2D tex = ItemIdToTexture(invCharger[0].X);
									//if (tex!=null) GameDraw.DrawItemInInventory(tex, invCharger[0], Global.WindowWidthHalf-300+10+40+20+5+1+2+4, Global.WindowHeightHalf+20-2+40+20+3+2+4);
							   // }
								#endregion

								DrawSideInventory();

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Miner
						case InventoryType.Miner:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(minerTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);

								ItemInv[] invMiner=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Box
								{
									int i=0;
									for (int y = 0; y<2*40; y+=40) {
										for (int x = 0; x<12*40; x+=40) {
											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+x+59, Global.WindowHeightHalf+59+y), ColorWhite);

										//    if (!invMove||(invMove&&invStartInventory[invStartId]!=invMiner[i])) {
												invMiner[i].Draw();
												//Texture2D tex = ItemIdToTexture(invMiner[i].Id);
												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invMiner[i], Global.WindowWidthHalf-300+x+63,  Global.WindowHeightHalf+y+63);
										  //  }
											i++;
										}
									}
								}
								#endregion

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Radio
						case InventoryType.Radio:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(radioTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200),new Rectangle(16*(int)(15*_secondTimer/60f),0,16,16), ColorWhite);
								textOpenInventory.Draw(spriteBatch);


								if (radioSongs!=null) {
									for (int i=0; i<radioSongs.Length; i++) {
										BitmapFont.bitmapFont18.DrawText(spriteBatch,new FileInfo(radioSongs[i]).Name.Substring(0,(new FileInfo(radioSongs[i]).Name).LastIndexOf(".")),Global.WindowWidthHalf-300-2+10+240, Global.WindowHeightHalf-234+10+40+i*40,Color.Black);
									}
								}

								if (radioplaying) {
									spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2+400-50,600,50), Color.Gray);
									spriteBatch.Draw(RadioButtonPause,new Vector2(Global.WindowWidthHalf-24, Global.WindowHeightHalf-200+2+400-50), ColorWhite);
								}
							}
							break;
						#endregion

						#region Composter
						case InventoryType.Composter:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(ComposterFullTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);

								ItemInv[] invComposter=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Composter inventory
								{
									int i=0;
									for (int y = 0; y<3*40; y+=40) {
										for (int x = 0; x<3*40; x+=40) {
											spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+x+20+5+1+2, Global.WindowHeightHalf+20-2+y+20+3+2), ColorWhite);

										  //  if (!invMove||(invMove&&invStartInventory[invStartId]!=invComposter[i])) {
												invComposter[i].Draw();
												//Texture2D tex = ItemIdToTexture(invComposter[i].X);
												//if (tex!=null) GameDraw.DrawItemInInventory(tex, invComposter[i], Global.WindowWidthHalf-300+10+x+20+5+1+2+4, Global.WindowHeightHalf+20-2+y+20+3+2+4);
										   // }
											i++;
										}
									}
								}
								#endregion

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region SewingMachine
						case InventoryType.SewingMachine:
							spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

							buttonClose.ButtonDraw();

							spriteBatch.Draw(sewingMachineTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
							textOpenInventory.Draw(spriteBatch);

							DrawInventoryNormal();

							#region Clothes
							{
								if (inventoryScrollbarValueCraftingMax>6*4) {
									int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
									int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
									if (size2>20) {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), ColorWhite);
									} else {
										spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), ColorWhite);
										spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), ColorWhite);
									}
								}

								int xx = 0;
								int yh = 0;

								for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
									if (i>inventoryScrollbarValueCraftingMax) break;
									if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
									//if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
									//&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
									} else {
										if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
										else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), ColorWhite);
									}
									InventoryCrafting[i].Draw();
									//Texture2D tex = ItemIdToTexture(InventoryCrafting[i].X);
									//if (tex!=null) GameDraw.DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
									xx+=40;

									if (xx==6*40) {
										xx=0;
										yh+=40;
									}
								}
							}
							#endregion


							DrawNeedNew();

							buttonInvHead.ButtonDraw();
							buttonInvChest.ButtonDraw();
							buttonInvLegs.ButtonDraw();
							buttonInvShoes.ButtonDraw();
							buttonInvUnderwear.ButtonDraw();

							DrawSideInventory();
							if (displayPopUpWindow)DrawChooseItemWindow();
						   else if (showMouseItemWhileMooving) InvMouseDraw();
							else if (mouseDrawItemTextInfo) DrawItemMouse();
							break;
						#endregion

						#region OxygenMachine
						case InventoryType.OxygenMachine:
							{
								spriteBatch.Draw(pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), color_r10_g140_b255);
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(TextureOxygenMachine, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);

								ItemInv[] invOxygenMachine=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv;

								DrawInventoryWithMoving();

								#region Place for charging
								spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+10+40+20+5+1+2, Global.WindowHeightHalf+20-2+40+20+3+2), ColorWhite);

							   // if (!invMove||(invMove&&invStartInventory[invStartId]!=invOxygenMachine[0])) {
									invOxygenMachine[0].Draw();
								//}
								#endregion

								DrawSideInventory();

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Barrel
						case InventoryType.Barrel:
							{
								spriteBatch.Draw(pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,animationInvBack));

								DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
								DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
								spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

								buttonClose.ButtonDraw();

								spriteBatch.Draw(TextureBarrel, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), ColorWhite);
								textOpenInventory.Draw(spriteBatch);
								Barrel barrel=(Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];
								ItemInv[] invBarrel=barrel.Inv;

								DrawInventoryWithMoving();

								DrawSideInventory();

								#region Barel inventory
								Vector2 vec=new Vector2(Global.WindowWidthHalf-300+119, Global.WindowHeightHalf-198+250);
								// In
								spriteBatch.Draw(inventorySlotInTexture, vec, ColorWhite);
								invBarrel[0].Draw();

								// Out
								vec.Y+=64;
								spriteBatch.Draw(inventorySlotOutTexture, vec, ColorWhite);
								invBarrel[1].Draw();

								//bar
								spriteBatch.Draw(TextureBarBarrel, new Vector2(Global.WindowWidthHalf-300+4+42, Global.WindowHeightHalf-200+2+4+217), ColorWhite);

								int a=(int)(barrel.LiquidAmount/255f*146);

								switch (barrel.LiquidId) {
									case (byte)LiquidId.Water:
										spriteBatch.Draw(waterTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a),new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
										break;

									case (byte)LiquidId.WaterSalt:
										spriteBatch.Draw(waterTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a),new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
										break;

									case (byte)LiquidId.Lava:
										spriteBatch.Draw(lavaTexture, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
										break;

									case (byte)LiquidId.DyeArmy:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(34,48,17));
										break;

									case (byte)LiquidId.DyeBlack:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Black);
										break;

									case (byte)LiquidId.DyeBlue:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Blue);
										break;

									case (byte)LiquidId.DyeBrown:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Brown);
										break;

									case (byte)LiquidId.DyeGray:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Gray);
										break;

									case (byte)LiquidId.DyeWhite:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.White);
										break;

									case (byte)LiquidId.DyeYellow:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Yellow);
										break;

									case (byte)LiquidId.DyeViolet:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Violet);
										break;

									case (byte)LiquidId.DyeTeal:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Teal);
										break;

									case (byte)LiquidId.DyeSpringGreen:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(143, 225, 44));
										break;

									case (byte)LiquidId.DyeRoseQuartz:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), new Color(170, 152, 169));
										break;

									case (byte)LiquidId.DyeRed:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Red);
										break;

									case (byte)LiquidId.DyeDarkRed:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkRed);
										break;

									case (byte)LiquidId.DyePurple:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Purple);
										break;

									case (byte)LiquidId.DyePink:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Pink);
										break;

									case (byte)LiquidId.DyeOrange:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Orange);
										break;

									case (byte)LiquidId.DyeOlive:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Olive);
										break;

									case (byte)LiquidId.DyeMagenta:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Magenta);
										break;

									case (byte)LiquidId.DyeLightGreen:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightGreen);
										break;

									case (byte)LiquidId.DyeLightGray:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightGray);
										break;

									case (byte)LiquidId.DyeLightBlue:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.LightBlue);
										break;

									case (byte)LiquidId.DyeGreen:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Green);
										break;

									case (byte)LiquidId.DyeDarkGreen:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkGreen);
										break;

									case (byte)LiquidId.DyeGold:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.Gold);
										break;

									case (byte)LiquidId.DyeDarkBlue:
										spriteBatch.Draw(TextureWaterGraystyle, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), Color.DarkBlue);
										break;

									default:
										spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+42+5, Global.WindowHeightHalf-200+2+4+217+5+146-a, 25, a), new Rectangle(0,0,25,(int)(barrel.LiquidAmount/255f*16)), ColorWhite);
										break;

								}
								#endregion

								if (showMouseItemWhileMooving) InvMouseDraw();
								else if (mouseDrawItemTextInfo) DrawItemMouse();
							}
							break;
						#endregion

						#region Game menu
						case InventoryType.GameMenu:
							//spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							//DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, color_r0_g0_b0_a100);
							//DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, color_r0_g0_b0_a200);
							//spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), color_r10_g140_b255);
							//spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), ColorLightBlue);

							spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), new Color(0,0,0,animationInvBack));

							DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-234+50, 304, 464+2-100,1, color_r0_g0_b0_a100);
							DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-233+50, 302, 464-100,  1, color_r0_g0_b0_a200);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-232+50,300,34), color_r10_g140_b255);
							spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-198+50,300,430-100), Color.LightBlue);
							textOpenInventory.Draw(spriteBatch);
							// Exit button [X]
							buttonClose.ButtonDraw();


							// Continue game
							buttonContinue.ButtonDraw();

							// Exit game
							buttonExit.ButtonDraw();

							// Acheavements
							buttonAcheavements.ButtonDraw();

							// Use a gift code
							buttonUseGiftCode.ButtonDraw();


							break;
						#endregion

					}
					#endregion

                        #region Draw debug
                        if (debug) {
                            fpss+=1000f/(float)gameTime.ElapsedGameTime.TotalMilliseconds;
                            timerDraw60--;
                            if (timerDraw60<0) {
                                timerDraw60=59;
                                fps=fpss/60f;

                                fpss=0;
                            }
                            if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) GameDraw.DrawTextShadowMin(5, 5, "< Informace pro vývojáře > (F1 skrýt)"+Environment.NewLine+"----------------------------------"+Environment.NewLine+
                                "[Pozice hráče] X: "+PlayerX+", Y: "+PlayerY+Environment.NewLine+
                                "[Pozice myše] X: "+(int)mousePos.X+", Y: "+(int)mousePos.Y+Environment.NewLine+
                                Environment.NewLine+
                                "[Velikost světa]: "+TerrainLenght+Environment.NewLine+
                                "[Vykreslovací plocha] "+((terrainStartIndexW-terrainStartIndexX)*(terrainStartIndexH-terrainStartIndexY))+Environment.NewLine+
                                "[Svět]: "+world+Environment.NewLine+
                                "[Gravitační zrychlení]: "+(gravity*20)+Environment.NewLine+
                                Environment.NewLine+
                                "[Počet Itemů]: "+DroppedItems.Count+Environment.NewLine+
                                "[Energie]:  "+energy.Count+Environment.NewLine+
                                "[Čas]: "+time/hour+":"+((int)((time-(time/hour*hour))*(60f/hour))).ToString("00")+Environment.NewLine+
                                "[Světlo]: "+dayAlpha+Environment.NewLine+
                                "[Moon]: "+(moonSpeed/46)+Environment.NewLine+
                                Environment.NewLine+
                                "[Fps]:  "+(int)Math.Round(fps, 2)+Environment.NewLine+
                                "[CPU] Proces: "+(usageCpuProcess/Environment.ProcessorCount).ToString("0.00")+"%, Volné cpu: "+(100-usageCpu).ToString("0.00")+"%"+Environment.NewLine+
                                "[RAM] Proces: "+(usageRamProcess/1048576).ToString("0.00")+"MB, Volná ram: "+usageRam.ToString("0.00")+"MB"+Environment.NewLine, Color.White);
                        } else if (Setting.Fps) {
                            fpss+=1000f/(float)gameTime.ElapsedGameTime.TotalMilliseconds;
                            timerDraw60--;
                            if (timerDraw60<0) {
                                timerDraw60=59;
                                fps=fpss/60f;

                                fpss=0;
                            }
                            if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) GameDraw.DrawTextShadowMin(5, 5, "Fps: "+(int)Math.Round(fps, 2), new Color(dayAlpha, dayAlpha, dayAlpha));
                        }
                        #endregion

                        spriteBatch.End();
                        #endregion


                        //             DrawPlayer(spriteBatch);
                        //             spriteBatch.End();

                        //             spriteBatch.Begin(SpriteSortMode.Deferred, null, Setting.SamplerState, null, null, null);

                        //             if (show) {

                        //             #region Draw Bars
                        //             if (Global.WorldDifficulty!=2) {
                        //                 // Energy bar
                        //                 spriteBatch.Draw(barEnergyTexture,new Vector2(Global.WindowWidth-150-36,8),new Rectangle(0,0,32,(int)barEnergy),Color.Gray);
                        //                 spriteBatch.Draw(barEnergyTexture,new Vector2(Global.WindowWidth-150-36,8+(int)barEnergy),new Rectangle(0,(int)barEnergy,32,32-(int)barEnergy),Color.White);

                        //                 // Oxygen bar
                        //                 spriteBatch.Draw(barOxygenTexture,new Vector2(Global.WindowWidth-150,8),new Rectangle(0,0,32,(int)barOxygen),Color.Gray);
                        //                 spriteBatch.Draw(barOxygenTexture,new Vector2(Global.WindowWidth-150,8+(int)barOxygen),new Rectangle(0,(int)barOxygen,32,32-(int)barOxygen),Color.White);

                        //                 // Water bar
                        //                 spriteBatch.Draw(barWaterTexture,new Vector2(Global.WindowWidth-114,8),new Rectangle(0,0,32,(int)barWater),Color.Gray);
                        //                 spriteBatch.Draw(barWaterTexture,new Vector2(Global.WindowWidth-114,8+(int)barWater),new Rectangle(0,(int)barWater,32,32-(int)barWater),Color.White);

                        //                 // Eat bar
                        //                 spriteBatch.Draw(barEatTexture,new Vector2(Global.WindowWidth-78,8),new Rectangle(0,0,32,(int)barEat),Color.Gray);
                        //                 spriteBatch.Draw(barEatTexture,new Vector2(Global.WindowWidth-78,8+(int)barEat),new Rectangle(0,(int)barEat,32,32-(int)barEat),Color.White);

                        //                 // Heart bar
                        //                 spriteBatch.Draw(barHeartTexture,new Vector2(Global.WindowWidth-40,8),new Rectangle(0,0,32,(int)barHeart),Color.Gray);
                        //                 spriteBatch.Draw(barHeartTexture,new Vector2(Global.WindowWidth-40,8+(int)barHeart),new Rectangle(0,(int)barHeart,32,32-(int)barHeart),Color.White);
                        //             }
                        //	#endregion

                        //             buttonInv.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidth-32,Global.WindowHeight-32);

                        //             if (buttonInv.Click) ChangeInventoryState(false);

                        //#region Draw Inventory
                        //            switch (inventory) {
                        //                #region Normal
                        //                case 0:
                        //	    if (diserpeard==0) {
                        //                        gedo=null;
                        //                        text="";
                        //                    } else {
                        //	        if (gedo!=null) {
                        //                            if (gedo.Text!="") {
                        //                                float alphaC;
                        //                                if (diserpeard>100) alphaC=1f;
                        //                                else alphaC=diserpeard/100f;
                        //                                Color alphaCC=new Color(alphaC,alphaC,alphaC,alphaC);

                        //                                spriteBatch.Draw(messageLeft,new Vector2(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2),Global.WindowHeightHalf-55), alphaCC);
                        //                                spriteBatch.Draw(messageCenter,new Rectangle(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+19,Global.WindowHeightHalf-55,(int)spriteFont_small.MeasureString(gedo.Text).X,57), alphaCC);
                        //                                spriteBatch.Draw(messageRight,new Vector2(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+19,Global.WindowHeightHalf-55), alphaCC);

                        //                                gedo.DrawGedo(spriteBatch,true,Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(gedo.Text).X/2)+20,Global.WindowHeightHalf-40,(int)(alphaC*255));
                        //                            }
                        //                        }
                        //                    }

                        //                  // Basic right inventory
                        //                    for (int i=0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

                        //                        if (!invMove || (invMove && invStart!=i)) {
                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
                        //                        }
                        //                    }
                        //                    break;
                        //                #endregion

                        //                #region Writing message
                        //                case 1:
                        //        text =TextEdit(text);
                        //        while (text.Length*13>750) text=text.Substring(0,text.Length-1);
                        //                    text =text.Replace("€","#");

                        //                    spriteBatch.Draw(messageLeft,new Vector2(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2),Global.WindowHeightHalf-55), Color.White);
                        //                    spriteBatch.Draw(messageCenter,new Rectangle(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2)+19,Global.WindowHeightHalf-55,(int)spriteFont_small.MeasureString(text).X,57), Color.White);
                        //                    spriteBatch.Draw(messageRight,new Vector2(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(text).X/2)+19,Global.WindowHeightHalf-55), Color.White);

                        //                    DrawTextShadowMin(Global.WindowWidthHalf-(int)(spriteFont_small.MeasureString(text).X/2)+20,Global.WindowHeightHalf-40,text);
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf+(int)(spriteFont_small.MeasureString(text).X/2)+20,Global.WindowHeightHalf-40,1,15),Color.Black);

                        //                   // ChangeInventory();

                        //                    // Basic right inventory
                        //                    for (int i=0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+4+i*40),Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+4+i*40),null);

                        //                        if (!invMove || (invMove && invStart!=i)) {
                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80-4+i*40);
                        //                        }
                        //                    }
                        //                    break;
                        //                #endregion

                        //                #region Basic inventory - clothes, inventory and basic crafting
                        //                case 2:
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,100));

                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, new Color(0,0,0,100));
                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, new Color(0,0,0,200));
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), new Color(10,140,255));
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

                        //                    buttonClose.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf+300-32,Global.WindowHeightHalf-232+1);

                        //                    spriteBatch.Draw(ItemBackpackTexture,new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4,200,200), Color.White);
                        //                    if (Setting.czechLanguage)DrawTextShadowMin(spriteFont_small,Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Baťůžek");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, "Backpack");
                        //                    #region Inventory
                        //                    {
                        //                        int xx =0;
                        //                        int yh=0;
                        //                        for (int i=inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
                        //                        if (i>maxInvCount) break;
                        //                            spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

                        //                            if (!invMove || (invMove && invStart!=i)) {
                        //                                Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                                if (tex!=null) DrawItemInInventory(tex,Inventory[i].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);
                        //                            }
                        //                             xx+=40;

                        //                            if (xx==9*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                        if (maxInvCount>45) {
                        //                            int size=(int)( (1f/((( (int)(maxInvCount/9f)+1  )*40)/200f))*200 );
                        //                            int pos=(int)( ( ((inventoryScrollbarValue*9)/40f) / maxInvCount)*(200-size) )*4;
                        //                            if (size>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1,20,size-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Crafting
                        //                    {
                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
                        //                            int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
                        //                            int pos2=(int)( ( ((inventoryScrollbarValueCrafting*5)/40f) / inventoryScrollbarValueCraftingMax)*(160-size2) )*8;
                        //                            if (size2>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
                        //                            }
                        //                        }

                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
                        //                        int xx =0;
                        //                        int yh=0;

                        //                        for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
                        //                            && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
                        //                                if (mouseLeftRelease) {
                        //                                    selectedCraftingItem=i;

                        //                                    craftingType=0;
                        //                                    DListInt[]x=Craft(Crafting[selectedCraftingItem].X);
                        //                                    if (x!=null) Need=x[craftingType].List1;
                        //                                }
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128,128,128));
                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200,200,200));
                        //                            } else {
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150,150,150));
                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
                        //                            }
                        //                            Texture2D tex=ItemIdToTexture(Crafting[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
                        //                            xx+=40;

                        //                            if (xx==6*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Need
                        //                    {
                        //                        spriteBatch.Draw(inventoryNeedTexture,new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
                        //                        int i=0;
                        //                        for (int y=0; y<2; y++) {
                        //                             for (int x=0; x<6; x++) {
                        //                                if (Need.Count<=i)break;
                        //                                Texture2D tex=ItemIdToTexture(Need[i].X);
                        //                                if (tex!=null) {
                        //                                    bool disamble=false;
                        //                                    foreach (DInt n in Need) {
                        //                                        int inInv = 0;
                        //                                        foreach (DInt ii in Inventory) {
                        //                                            if (n.X==ii.X) {
                        //                                                inInv+=ii.Y;
                        //                                            }
                        //                                        }
                        //                                        if (inInv<Need[i].Y) {
                        //                                        disamble=true;
                        //                                        break;
                        //                                        }
                        //                                    }
                        //                                   // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                    //else
                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8,40,40), new Color(255,0,0,100));

                        //                                     DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                }
                        //                                i++;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20-2);
                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+2-2);
                        //                    buttonInvTabTools.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+4-2);
                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+32+6-2);
                        //                    buttonInvTabItems.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+64+32+8-2);

                        //                    if (buttonInvTabBlocks.Click) SetInvCraftingBlocks();
                        //                    if (buttonInvTabMashines.Click) SetInvCraftingMashines();
                        //                    if (buttonInvTabTools.Click) SetInvCraftingTools();
                        //                    if (buttonInvTabPlants.Click) SetInvCraftingNature();
                        //                    if (buttonInvTabItems.Click) SetInvCraftingItems();

                        //                 //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

                        //                    if (buttonClose.Click) {
                        //                        inventory=0;
                        //                    }

                        //                    if (buttonNext.Click) {
                        //                        craftingType++;
                        //                        DListInt[] l=Craft(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType>l.Length-1) craftingType=0;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    if (buttonPrev.Click) {
                        //                        craftingType--;
                        //                        DListInt[] l=Craft(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType<0) craftingType=l.Length-1;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    buttonCraft1x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10,Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+80+8+10+10,Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+170+8,Global.WindowHeightHalf+160-30+8+16));

                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));
                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));

                        //                    #region Craft new item
                        //                    if (buttonCraft1x.Click) {
                        //                         bool ok=true;
                        //                         foreach (DInt n in Need) {
                        //                            int inInv = 0;
                        //                            foreach (DInt ii in Inventory) {
                        //                                if (n.X==ii.X) {
                        //                                    inInv+=ii.Y;
                        //                                }
                        //                            }
                        //                            if (inInv<n.Y) {
                        //                                ok=false;
                        //                                break;
                        //                            }
                        //                        }
                        //                        if (ok) {
                        //                            DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                            foreach (DInt d in craft.List1) {
                        //                                int count=d.Y;
                        //                                for (int i=0; i<maxInvCount; i++) {
                        //                                    if (Inventory[i].X==d.X) {
                        //                                        if (Inventory[i].Y>count) {
                        //                                            Inventory[i].Y-=count;
                        //                                            break;
                        //                                        } else {
                        //                                            count-=Inventory[i].Y;
                        //                                            Inventory[i]=new DInt();
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }


                        //                            foreach (DInt d in craft.List2) {
                        //                                ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft10x.Click) {
                        //                        for (int mm=0; mm<10; mm++) {
                        //                            bool ok=true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count=d.Y;
                        //                                    for (int i=0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft100x.Click) {
                        //                        for (int mm=0; mm<100; mm++) {
                        //                            bool ok=true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count=d.Y;
                        //                                    for (int i=0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    // Basic right inventory
                        //                    for (int i=0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

                        //                        if (!invMove || (invMove && invStart!=i)) {
                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
                        //                        }
                        //                    }
                        //                    ChangeInventoryBasic();
                        //                    text="";
                        //                    break;
                        //                #endregion

                        //                #region Basic inventory - clothes, inventory and full crafting
                        //                case 3:
                        //                   spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight),new Color(0,0,0,100));

                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234,604,434+2,1, new Color(0,0,0,100));
                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233,602,434,1, new Color(0,0,0,200));
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232,600,34), new Color(10,140,255));
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2,600,400-2), Color.LightBlue);

                        //                    buttonClose.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf+300-32,Global.WindowHeightHalf-232+1);

                        //                  //  spriteBatch.Draw(inventoryClothesTexture,new Vector2(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4), null);

                        //                    spriteBatch.Draw(deskTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Stůl");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Desk");
                        //                    #region Inventory
                        //                    {
                        //                        int xx =0;
                        //                        int yh=0;
                        //                        for (int i=inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
                        //                        if (i>maxInvCount) break;
                        //                            spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

                        //                            if (!invMove || (invMove && invStart!=i)) {
                        //                                Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                                if (tex!=null) DrawItemInInventory(tex,Inventory[i].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);
                        //                            }
                        //                             xx+=40;

                        //                            if (xx==9*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                        if (maxInvCount>45) {
                        //                            int size=(int)( (1f/((( (int)(maxInvCount/9f)+1  )*40)/200f))*200 );
                        //                            int pos=(int)( ( ((inventoryScrollbarValue*9)/40f) / maxInvCount)*(200-size) )*4;
                        //                            if (size>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1,20,size-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Crafting
                        //                    {
                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
                        //                            int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
                        //                            int pos2=(int)( ( ((inventoryScrollbarValueCrafting*5)/40f) / inventoryScrollbarValueCraftingMax)*(160-size2) )*8;
                        //                            if (size2>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
                        //                            }
                        //                        }

                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
                        //                        int xx =0;
                        //                        int yh=0;

                        //                        for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
                        //                            && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
                        //                                if (mouseLeftRelease) {
                        //                                    selectedCraftingItem=i;

                        //                                    craftingType=0;
                        //                                    DListInt[]x=Craft(Crafting[selectedCraftingItem].X);
                        //                                    if (x!=null) Need=x[craftingType].List1;
                        //                                }
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128,128,128));
                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200,200,200));
                        //                            } else {
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150,150,150));
                        //                                else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
                        //                            }
                        //                            Texture2D tex=ItemIdToTexture(Crafting[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
                        //                            xx+=40;

                        //                            if (xx==6*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Need
                        //                    {
                        //                        spriteBatch.Draw(inventoryNeedTexture,new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
                        //                        int i=0;
                        //                        for (int y=0; y<2; y++) {
                        //                             for (int x=0; x<6; x++) {
                        //                                if (Need.Count<=i)break;
                        //                                Texture2D tex=ItemIdToTexture(Need[i].X);
                        //                                if (tex!=null) {
                        //                                    bool disamble=false;
                        //                                    foreach (DInt n in Need) {
                        //                                        int inInv = 0;
                        //                                        foreach (DInt ii in Inventory) {
                        //                                            if (n.X==ii.X) {
                        //                                                inInv+=ii.Y;
                        //                                            }
                        //                                        }
                        //                                        if (inInv<Need[i].Y) {
                        //                                        disamble=true;
                        //                                        break;
                        //                                        }
                        //                                    }
                        //                                   // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                    //else
                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8,40,40), new Color(255,0,0,100));

                        //                                     DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                }
                        //                                i++;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20-2);
                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+2-2);
                        //                    buttonInvTabTools.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+4-2);
                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+32+32+6-2);
                        //                    buttonInvTabItems.ButtonDraw(spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf-300+10,Global.WindowHeightHalf+20+32+64+32+8-2);

                        //                    if (buttonInvTabBlocks.Click) SetInvCraftingBlocksA();
                        //                    if (buttonInvTabMashines.Click) SetInvCraftingMashinesA();
                        //                    if (buttonInvTabTools.Click) SetInvCraftingToolsA();
                        //                    if (buttonInvTabPlants.Click) SetInvCraftingNatureA();
                        //                    if (buttonInvTabItems.Click) SetInvCraftingItemsA();

                        //                 //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

                        //                    if (buttonClose.Click) {
                        //                        inventory=0;
                        //                    }

                        //                    if (buttonNext.Click) {
                        //                        craftingType++;
                        //                        DListInt[] l= Craft(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType>l.Length-1) craftingType=0;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    if (buttonPrev.Click) {
                        //                        craftingType--;
                        //                        DListInt[] l= Craft(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType<0) craftingType=l.Length-1;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    buttonCraft1x.ButtonDraw(spriteBatch,newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10,Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+80+8+10+10,Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+10+170+8,Global.WindowHeightHalf+160-30+8+16));

                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));
                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X,newMouseState.Y),new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4,Global.WindowHeightHalf+160-30+8+16-20-30+5));

                        //                    #region Craft new item
                        //                    if (buttonCraft1x.Click) {
                        //                         bool ok=true;
                        //                         foreach (DInt n in Need) {
                        //                            int inInv = 0;
                        //                            foreach (DInt ii in Inventory) {
                        //                                if (n.X==ii.X) {
                        //                                    inInv+=ii.Y;
                        //                                }
                        //                            }
                        //                            if (inInv<n.Y) {
                        //                                ok=false;
                        //                                break;
                        //                            }
                        //                        }
                        //                        if (ok) {
                        //                            DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                            foreach (DInt d in craft.List1) {
                        //                                int count=d.Y;
                        //                                for (int i=0; i<maxInvCount; i++) {
                        //                                    if (Inventory[i].X==d.X) {
                        //                                        if (Inventory[i].Y>count) {
                        //                                            Inventory[i].Y-=count;
                        //                                            break;
                        //                                        } else {
                        //                                            count-=Inventory[i].Y;
                        //                                            Inventory[i]=new DInt();
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }


                        //                            foreach (DInt d in craft.List2) {
                        //                                ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft10x.Click) {
                        //                        for (int mm=0; mm<10; mm++) {
                        //                            bool ok=true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft=Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count=d.Y;
                        //                                    for (int i=0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft100x.Click) {
                        //                        for (int mm=0; mm<100; mm++) {
                        //                            bool ok=true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft= Craft(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count=d.Y;
                        //                                    for (int i=0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X,d.Y,new DInt(PlayerX,(int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    // Basic right inventory
                        //                    for (int i=0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidth-40,Global.WindowHeightHalf-80+i*40),null);

                        //                        if (!invMove || (invMove && invStart!=i)) {
                        //                            Texture2D tex=ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y,Global.WindowWidth-36,Global.WindowHeightHalf-80+i*40+4);
                        //                        }
                        //                    }
                        //                    ChangeInventoryBasic();
                        //                    text="";
                        //                    break;
                        //                #endregion

                        //                #region Furnace
                        //                case 4:
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, 100));

                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, new Color(0, 0, 0, 100));
                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, new Color(0, 0, 0, 200));
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), new Color(10, 140, 255));
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

                        //                    buttonClose.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+300-32, Global.WindowHeightHalf-232+1);

                        //                    //  spriteBatch.Draw(inventoryClothesTexture,new Vector2(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4), null);

                        //                    spriteBatch.Draw(furnaceElectricOneTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Pec");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Furnace");

                        //                    #region Inventory
                        //                    {
                        //                        int xx = 0;
                        //                        int yh = 0;
                        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
                        //                            if (i>maxInvCount) break;
                        //                            spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

                        //                            if (!invMove||(invMove&&invStart!=i)) {
                        //                                Texture2D tex = ItemIdToTexture(Inventory[i].X);
                        //                                if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
                        //                            }
                        //                            xx+=40;

                        //                            if (xx==9*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                        if (maxInvCount>45) {
                        //                            int size = (int)((1f/((((int)(maxInvCount/9f)+1)*40)/200f))*200);
                        //                            int pos = (int)((((inventoryScrollbarValue*9)/40f)/maxInvCount)*(200-size))*4;
                        //                            if (size>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), null);
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Bake
                        //                    {
                        //                        if (inventoryScrollbarValueCraftingMax>6*4) {
                        //                            int size2 = (int)((1f/((((int)(inventoryScrollbarValueCraftingMax/5f)+1)*40)/160f))*160);
                        //                            int pos2 = (int)((((inventoryScrollbarValueCrafting*5)/40f)/inventoryScrollbarValueCraftingMax)*(160-size2))*8;
                        //                            if (size2>20) {
                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8, 20, size2-20), Color.White);
                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), null);
                        //                            } else {
                        //                                spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), null);
                        //                                spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), null);
                        //                            }
                        //                        }

                        //                        //spriteBatch.Draw(inventoryChooseTexture,new Vector2(Global.WindowWidthHalf-300+4+40, Global.WindowHeightHalf-200+2+4+200+8), null);
                        //                        int xx = 0;
                        //                        int yh = 0;

                        //                        for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
                        //                            if (i>inventoryScrollbarValueCraftingMax) break;

                        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
                        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
                        //                                if (mouseLeftRelease) {
                        //                                    selectedCraftingItem=i;

                        //                                    craftingType=0;
                        //                                    DListInt[] x = Bake(Crafting[selectedCraftingItem].X);
                        //                                    if (x!=null) Need=x[craftingType].List1;
                        //                                }
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(128, 128, 128));
                        //                                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(200, 200, 200));
                        //                            } else {
                        //                                if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), new Color(150, 150, 150));
                        //                                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
                        //                            }
                        //                            Texture2D tex = ItemIdToTexture(Crafting[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, 1, Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
                        //                            xx+=40;

                        //                            if (xx==6*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    #region Need
                        //                    {
                        //                        spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), null);
                        //                        int i = 0;
                        //                        for (int y = 0; y<2; y++) {
                        //                            for (int x = 0; x<6; x++) {
                        //                                if (Need.Count<=i) break;
                        //                                Texture2D tex = ItemIdToTexture(Need[i].X);
                        //                                if (tex!=null) {
                        //                                    bool disamble = false;
                        //                                    foreach (DInt n in Need) {
                        //                                        int inInv = 0;
                        //                                        foreach (DInt ii in Inventory) {
                        //                                            if (n.X==ii.X) {
                        //                                                inInv+=ii.Y;
                        //                                            }
                        //                                        }
                        //                                        if (inInv<Need[i].Y) {
                        //                                            disamble=true;
                        //                                            break;
                        //                                        }
                        //                                    }
                        //                                    // if (disamble)DrawItemInInventory(tex,Need[i].Y ,Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                    //else
                        //                                    if (disamble) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), new Color(255, 0, 0, 100));

                        //                                    DrawItemInInventory(tex, Need[i].Y, Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
                        //                                }
                        //                                i++;
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    buttonInvTabMaterials.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20-2);
                        //                    buttonInvTabGlass.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+2-2);
                        //                    buttonInvTabCeramics.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+32+4-2);
                        //                    buttonInvTabFood.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+32+32+6-2);
                        //                    buttonInvTabTools.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf+20+32+64+32+8-2);

                        //                    if (buttonInvTabMaterials.Click) SetInvBakeIngots();
                        //                    if (buttonInvTabGlass.Click) SetInvBakeItems();
                        //                    if (buttonInvTabCeramics.Click) SetInvBakeCeramics();
                        //                    if (buttonInvTabFood.Click) SetInvBakeFood();
                        //                    if (buttonInvTabTools.Click) SetInvBakeTools();

                        //                    //   if (buttonCreativeInvTabBlocks.Click) SetInvCraftingBlocks();

                        //                    if (buttonClose.Click) inventory=0;

                        //                    if (buttonNext.Click) {
                        //                        craftingType++;
                        //                        DListInt[] l = Bake(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType>l.Length-1) craftingType=0;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    if (buttonPrev.Click) {
                        //                        craftingType--;
                        //                        DListInt[] l = Bake(Crafting[selectedCraftingItem].X);
                        //                        if (l!=null) {
                        //                            if (craftingType<0) craftingType=l.Length-1;
                        //                            Need=l[craftingType].List1;
                        //                        }
                        //                    }

                        //                    buttonCraft1x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10, Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft10x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+10+80+8+10+10, Global.WindowHeightHalf+160-30+8+16));
                        //                    buttonCraft100x.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+10+170+8, Global.WindowHeightHalf+160-30+8+16));

                        //                    buttonPrev.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));
                        //                    buttonNext.ButtonDraw(spriteBatch, newMouseState, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));

                        //                    #region Craft new item
                        //                    if (buttonCraft1x.Click) {
                        //                        bool ok = true;
                        //                        foreach (DInt n in Need) {
                        //                            int inInv = 0;
                        //                            foreach (DInt ii in Inventory) {
                        //                                if (n.X==ii.X) {
                        //                                    inInv+=ii.Y;
                        //                                }
                        //                            }
                        //                            if (inInv<n.Y) {
                        //                                ok=false;
                        //                                break;
                        //                            }
                        //                        }
                        //                        if (ok) {
                        //                            DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

                        //                            foreach (DInt d in craft.List1) {
                        //                                int count = d.Y;
                        //                                for (int i = 0; i<maxInvCount; i++) {
                        //                                    if (Inventory[i].X==d.X) {
                        //                                        if (Inventory[i].Y>count) {
                        //                                            Inventory[i].Y-=count;
                        //                                            break;
                        //                                        } else {
                        //                                            count-=Inventory[i].Y;
                        //                                            Inventory[i]=new DInt();
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }


                        //                            foreach (DInt d in craft.List2) {
                        //                                ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft10x.Click) {
                        //                        for (int mm = 0; mm<10; mm++) {
                        //                            bool ok = true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count = d.Y;
                        //                                    for (int i = 0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonCraft100x.Click) {
                        //                        for (int mm = 0; mm<100; mm++) {
                        //                            bool ok = true;
                        //                            foreach (DInt n in Need) {
                        //                                int inInv = 0;
                        //                                foreach (DInt ii in Inventory) {
                        //                                    if (n.X==ii.X) {
                        //                                        inInv+=ii.Y;
                        //                                    }
                        //                                }
                        //                                if (inInv<n.Y) {
                        //                                    ok=false;
                        //                                    break;
                        //                                }
                        //                            }
                        //                            if (ok) {
                        //                                DListInt craft = Bake(Crafting[selectedCraftingItem].X)[craftingType];

                        //                                foreach (DInt d in craft.List1) {
                        //                                    int count = d.Y;
                        //                                    for (int i = 0; i<maxInvCount; i++) {
                        //                                        if (Inventory[i].X==d.X) {
                        //                                            if (Inventory[i].Y>count) {
                        //                                                Inventory[i].Y-=count;
                        //                                                break;
                        //                                            } else {
                        //                                                count-=Inventory[i].Y;
                        //                                                Inventory[i]=new DInt();
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }


                        //                                foreach (DInt d in craft.List2) {
                        //                                    ItemDrop(d.X, d.Y, new DInt(PlayerX, (int)PlayerY));
                        //                                }
                        //                            }
                        //                        }
                        //                    }
                        //                    #endregion

                        //                    // Basic right inventory
                        //                    for (int i = 0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), null);

                        //                        if (!invMove||(invMove&&invStart!=i)) {
                        //                            Texture2D tex = ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
                        //                        }
                        //                    }
                        //                    ChangeInventoryBasic();
                        //                    text="";
                        //                    break;
                        //                #endregion

                        //                #region Macerator
                        //                case 5:
                        //                    spriteBatch.Draw(Rabcr.Pixel,new Rectangle(PlayerX-424,(int)PlayerY-280,848,560),new Color(0,0,0,100));
                        //                    //spriteBatch.Draw(boxSelectedTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2+boxSelected*32),Color.White);
                        //                    //spriteBatch.Draw(boxInventoryTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2),Color.White);
                        //                    //spriteBatch.Draw(maceratorInventoryTexture,new Vector2(PlayerX-240,PlayerY-108),Color.White);
                        //                    //if (macerator[selectMacerator].Energy>5) {
                        //                    //    if (furnaceM1==0) {
                        //                    //        //TDust(64);

                        //                    //    }
                        //                    //}
                        //                    spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Drtič");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Macerator");
                        //                    InventoryDrawItems();
                        //                    //InventoryDrawDIntsMacerator();
                        //                    //ChangeInventoryMacerator();
                        //                    InventoryDrawItems();
                        //                    text ="";
                        //                    break;
                        //                #endregion

                        //                #region creative
                        //                case 7:
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), new Color(0, 0, 0, 100));

                        //                    DrawFrame(Global.WindowWidthHalf-300-2, Global.WindowHeightHalf-234, 604, 434+2, 1, new Color(0, 0, 0, 100));
                        //                    DrawFrame(Global.WindowWidthHalf-300-1, Global.WindowHeightHalf-233, 602, 434, 1, new Color(0, 0, 0, 200));
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-232, 600, 34), new Color(10, 140, 255));
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300, Global.WindowHeightHalf-200+2, 600, 400-2), Color.LightBlue);

                        //                    buttonClose.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+300-32, Global.WindowHeightHalf-232+1);
                        //                   // spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Itemy");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Items"); {
                        //                        int xx = 0;
                        //                        int yh = 0;
                        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+13*9+5; i++) {
                        //                            if (i>maxInvCount) break;
                        //                            spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+32+8+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

                        //                            if (!invMove||(invMove&&invStart!=i)) {
                        //                                Texture2D tex = ItemIdToTexture(Inventory[i].X);
                        //                                if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidthHalf-300+32+8+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
                        //                            }
                        //                            xx+=40;

                        //                            if (xx==13*40) {
                        //                                xx=0;
                        //                                yh+=40;
                        //                            }
                        //                        }
                        //                    }

                        //                    if (buttonClose.Click) inventory=0;

                        //                    buttonInvTabBlocks.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-200+20-2-8);
                        //                    buttonInvTabMashines.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+2-2);
                        //                    buttonInvTabTools.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+32+4-2);
                        //                    buttonInvTabPlants.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+32+32+6-2);
                        //                    buttonInvTabItems.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf-300+10, Global.WindowHeightHalf-208+20+32+64+32+8-2);

                        //                    if (buttonInvTabBlocks.Click) SetInvCreativeBlocks();
                        //                    if (buttonInvTabMashines.Click) SetInvCreativeMashines();
                        //                    if (buttonInvTabTools.Click) SetInvCreativeTools();
                        //                    if (buttonInvTabPlants.Click) SetInvCreativePlants();
                        //                    if (buttonInvTabItems.Click) SetInvCreativeItems();

                        //                        //buttonPrev.ButtonDraw(spriteBatch,<1>ew Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));
                        //                        ////buttonNext.ButtonDraw(spriteBatch, new Vector2(newMouseState.X, newMouseState.Y), new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5));

                        //                        // Basic right inventory
                        //                    for (int i = 0; i<5; i++) {
                        //                        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
                        //                        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), null);

                        //                        if (!invMove||(invMove&&invStart!=i)) {
                        //                            Texture2D tex = ItemIdToTexture(Inventory[i].X);
                        //                            if (tex!=null) DrawItemInInventory(tex, Inventory[i].Y, Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
                        //                        }
                        //                    }
                        //                    ChangeInventoryCreative();
                        //                    text="";


                        //                    break;
                        //                #endregion

                        //                #region Shelf
                        //                case 8:
                        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(PlayerX-424, (int)PlayerY-280, 848, 560), new Color(0, 0, 0, 100));
                        //                    //spriteBatch.Draw(boxSelectedTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2+boxSelected*32),Color.White);
                        //                    //spriteBatch.Draw(boxInventoryTexture,new Vector2(PlayerX+424-32,PlayerY-boxInventoryTexture.Height/2),Color.White);
                        //                    //spriteBatch.Draw(maceratorInventoryTexture,new Vector2(PlayerX-240,PlayerY-108),Color.White);
                        //                    //if (macerator[selectMacerator].Energy>5) {
                        //                    //    if (furnaceM1==0) {
                        //                    //        //TDust(64);

                        //                    //    }
                        //                    //}
                        //                    spriteBatch.Draw(ItemBackpackTexture, new Rectangle(Global.WindowWidthHalf-300+4, Global.WindowHeightHalf-200+2+4, 200, 200), Color.White);
                        //                    if (Setting.czechLanguage) DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Polička");
                        //                    else DrawTextShadowMin(Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10, "Shelf");
                        //                    InventoryDrawItems();
                        //                    //InventoryDrawDIntsMacerator();
                        //                    //ChangeInventoryMacerator();
                        //                    InventoryDrawItems();
                        //                    text="";
                        //                    break;
                        //                    #endregion
                        //            }
                        //            #endregion

                        //    #region Draw debug
                        //    if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) {
                        //        if (debug) DrawTextShadowMin(spriteFont_small,5, 5, "     Informace (F1 skrýt)" + Environment.NewLine +"----------------------------------"+Environment.NewLine +
                        //            "[Pozice hráče] X: " + PlayerX + ", Y: " + PlayerY + Environment.NewLine +
                        //            "[Pozice myše] X: " + (int)mousePos.X + ", Y: " + (int)mousePos.Y + Environment.NewLine +
                        //            "[počet instancí]: " + (
                        //grassPlains.Count +
                        //grassHills.Count +
                        //grassJungle.Count +
                        //grassForest.Count +
                        //grassDesert.Count +

                        //grassPlainsBlock.Count +
                        //grassForestBlock.Count +
                        //grassJungleBlock.Count +
                        //grassDesertBlock.Count +
                        //grassHillsBlock.Count +

                        //dirt.Count +
                        ////stone.Count +

                        //            dolomite.Count+
                        //            rhyolite.Count+
                        //            limestone.Count+
                        //            gneiss.Count+
                        //            schist.Count+
                        //            sandstone.Count+
                        //            basalt.Count+
                        //            gabbro.Count+
                        //            diorit.Count+

                        //sand.Count +
                        //gravel.Count+
                        //cobblestone.Count+
                        //ice.Count+
                        //snow.Count+
                        //waterBlock.Count+
                        //snowTop.Count+

                        //plantDandelion.Count +
                        //plantOrchid.Count +
                        //plantViolet.Count +
                        //plantRose.Count +

                        //ironOre.Count +
                        //goldOre.Count +
                        //aluminiumOre.Count +
                        //silverOre.Count +
                        //tinOre.Count +
                        //copperOre.Count +
                        //coalOre.Count+
                        //oil.Count+

                        //cactusBig.Count +
                        //cactusLittle.Count +
                        //plantAlore.Count+
                        //rocks.Count+
                        //liana.Count+

                        //appleLeaves.Count+
                        //appleWood.Count+
                        //plumLeaves.Count+
                        //plumWood.Count+
                        //cherryLeaves.Count+
                        //cherryWood.Count+
                        //oakLeaves.Count+
                        //oakWood.Count+
                        //lindenWood.Count+
                        //lindenLeaves.Count+
                        //spruceLeaves.Count+
                        //spruceWood.Count+
                        //pineLeaves.Count+
                        //pineWood.Count+
                        //            desk.Count+
                        //cherrySapling.Count+
                        //oakSapling.Count+
                        //appleSapling.Count+
                        //plumSapling.Count) + Environment.NewLine +
                        //            "[Počet Itemů]: "+(DIntBlockLeaves.Count+DIntBricks.Count+DIntDirt.Count+DIntGlass.Count+DIntGravel.Count+DIntHayBlock.Count+DIntSand.Count+DIntAluminiumDust.Count+DIntBronzeDust.Count+DIntCoalDust.Count+DIntCopperDust.Count+DIntGoldDust.Count+DIntIronDust.Count+DIntSilverDust.Count+DIntStoneDust.Count
                        //            +DIntDustSulfid.Count+DIntTinDust.Count+DIntUranDust.Count+DIntWoodDust.Count+DIntBattery.Count+DIntBigCircuit.Count+DIntBulb.Count+DIntCircuit.Count+DIntRubber.Count+DIntApple.Count+DIntBanana.Count+DIntCherry.Count+DIntOnion.Count+DIntPlum.Count+/*DIntPotatoes.Count+*/DIntRabbtCookedMeat.Count+DIntRabbitMeat.Count
                        //            +DIntRashberry.Count+DIntStrawberry.Count+DIntAluminiumIngot.Count+DIntBronzeIngot.Count+DIntCopperIngot.Count+DIntGoldIngot.Count+DIntIronIngot.Count+DIntSilverIngot.Count+DIntTinIngot.Count+DIntUranIngot.Count+DIntDesk.Count+DIntDoor.Count+DIntFlag.Count+DIntFurnaceElectric.Count+DIntFurnaceStone.Count
                        //            +DIntLabel.Count+DIntLadder.Count+DIntLamp.Count+DIntMacerator.Count+DIntMiner.Count+DIntRadio.Count+DIntRocket.Count+DIntSolarPanel.Count+DIntTorch.Count+DIntWaterMill.Count+DIntWindMill.Count+DIntCactus.Count+DIntDandelion.Count+DIntHay.Count+DIntLeather.Count+DIntLeave.Count+DIntOrchid.Count+DIntRose.Count
                        //            +DIntSeeds.Count+DIntStick.Count+DIntSticks.Count+DIntViolet.Count+DIntWheatSeeds.Count+DIntWheatStraw.Count+DIntOakSapling.Count+DIntPineSapling.Count+DIntLindenSapling.Count+DIntPlumSapling.Count+DIntCherrySapling.Count+DIntAppleSapling.Count+DIntSpruceSapling.Count+DIntStrawberryPlant.Count+DIntRashberryPlant.Count
                        //            +/*DIntPotatoesPlant.Count+*/DIntCoal.Count+DIntCopper.Count+DIntDiamond.Count+DIntGold.Count+DIntIron.Count+DIntPyrit.Count+DIntRuby.Count+DIntSaphirite.Count+DIntSilver.Count+DIntSmaragd.Count+DIntBigStone.Count+DIntMediumStone.Count+DIntSmallStone.Count+DIntTin.Count+/*DIntUran.Count+*/DIntBackpack.Count+DIntBucket.Count
                        //            +DIntBucketWater.Count+DIntRope.Count+DIntLindenPlanks.Count+DIntLindenWood.Count+DIntSprucePlanks.Count+DIntSpruceWood.Count+DIntOakPlanks.Count+DIntOakWood.Count+DIntPinePlanks.Count+DIntPineWood.Count+DIntCherryPlanks.Count+DIntCherryWood.Count+DIntPlumPlanks.Count+DIntPlumWood.Count+DIntApplePlanks.Count+DIntAppleWood.Count)+Environment.NewLine+
                        //            "[Počet animací]: "+ (waterSquirt.Count + backgroundDirt.Count+ backgroundStone.Count+ backgroundGravel.Count+ backgroundSand.Count)+Environment.NewLine+
                        //            "[Zvířata] Ryba(y):" + fish.Count + ", Zajíc(i): "+rabbit.Count+", Kur "+chicken.Count+Environment.NewLine +
                        //            "[Energie]:  "+energy.Count+Environment.NewLine+
                        //            "[Čas]: hodina(y): " + (time/3000)+" minuta(y): " + ((time- (time/3000)*3000)/50)+Environment.NewLine+
                        //"[Den]: "+day+Environment.NewLine,Color.DarkGray);
                        //        else {
                        //        if (Setting.Fps) {
                        //            if (show) DrawTextShadowMin(spriteFont_small,5, 5, "Fps: " + Math.Round(1000 / gameTime.ElapsedGameTime.TotalMilliseconds),Color.DarkGray);
                        //        }
                        //    }
                        //}
                        //#endregion
                        //  }

                        //#region Draw debug
                        //// if (gameTime.ElapsedGameTime.TotalMilliseconds!=0) {
                        //if (debug) DrawTextShadowMin(spriteFont_small, 5, 5, "     Informace (F1 skrýt)"+Environment.NewLine+"----------------------------------"+Environment.NewLine+
                        //   "[Pozice hráče] X: "+PlayerX+", Y: "+PlayerY+Environment.NewLine+
                        //   "[Pozice myše] X: "+(int)mousePos.X+", Y: "+(int)mousePos.Y+Environment.NewLine+
                        //   "[počet instancí]: "+(
                        //   grassPlains.Count+
                        //   grassHills.Count+
                        //   grassJungle.Count+
                        //   grassForest.Count+
                        //   grassDesert.Count+

                        //   grassPlainsBlock.Count+
                        //   grassForestBlock.Count+
                        //   grassJungleBlock.Count+
                        //   grassDesertBlock.Count+
                        //   grassHillsBlock.Count+

                        //   dirt.Count+
                        //   //stone.Count+
                        //   sand.Count+
                        //   gravel.Count+
                        //   cobblestone.Count+
                        //   ice.Count+
                        //   snow.Count+
                        //   waterBlock.Count+
                        //   snowTop.Count+

                        //   plantDandelion.Count+
                        //   plantOrchid.Count+
                        //   plantViolet.Count+
                        //   plantRose.Count+

                        //   ironOre.Count+
                        //   goldOre.Count+
                        //   aluminiumOre.Count+
                        //   silverOre.Count+
                        //   tinOre.Count+
                        //   copperOre.Count+
                        //   coalOre.Count+
                        //   oil.Count+

                        //   cactusBig.Count+
                        //   cactusLittle.Count+
                        //   plantAlore.Count+
                        //   rocks.Count+
                        //   liana.Count+

                        //   appleLeaves.Count+
                        //   appleWood.Count+
                        //   plumLeaves.Count+
                        //   plumWood.Count+
                        //   cherryLeaves.Count+
                        //   cherryWood.Count+
                        //   oakLeaves.Count+
                        //   oakWood.Count+
                        //   lindenWood.Count+
                        //   lindenLeaves.Count+
                        //   spruceLeaves.Count+
                        //   spruceWood.Count+
                        //   pineLeaves.Count+
                        //   pineWood.Count+
                        //   desk.Count+
                        //   cherrySapling.Count+
                        //   oakSapling.Count+
                        //   appleSapling.Count+
                        //   plumSapling.Count)+Environment.NewLine+
                        //   //            "[Počet DIntů]: "+(DIntBlockLeaves.Count+DIntBricks.Count+DIntDirt.Count+DIntGlass.Count+DIntGravel.Count+DIntHayBlock.Count+DIntSand.Count+DIntAluminiumDust.Count+DIntBronzeDust.Count+DIntCoalDust.Count+DIntCopperDust.Count+DIntGoldDust.Count+DIntIronDust.Count+DIntSilverDust.Count+DIntStoneDust.Count
                        //   //            +DIntDustSulfid.Count+DIntTinDust.Count+DIntUranDust.Count+DIntWoodDust.Count+DIntBattery.Count+DIntBigCircuit.Count+DIntBulb.Count+DIntCircuit.Count+DIntRubber.Count+DIntApple.Count+DIntBanana.Count+DIntCherry.Count+DIntOnion.Count+DIntPlum.Count+/*DIntPotatoes.Count+*/DIntRabbtCookedMeat.Count+DIntRabbitMeat.Count
                        //   //            +DIntRashberry.Count+DIntStrawberry.Count+DIntAluminiumIngot.Count+DIntBronzeIngot.Count+DIntCopperIngot.Count+DIntGoldIngot.Count+DIntIronIngot.Count+DIntSilverIngot.Count+DIntTinIngot.Count+DIntUranIngot.Count+DIntDesk.Count+DIntDoor.Count+DIntFlag.Count+DIntFurnaceElectric.Count+DIntFurnaceStone.Count
                        //   //            +DIntLabel.Count+DIntLadder.Count+DIntLamp.Count+DIntMacerator.Count+DIntMiner.Count+DIntRadio.Count+DIntRocket.Count+DIntSolarPanel.Count+DIntTorch.Count+DIntWaterMill.Count+DIntWindMill.Count+DIntCactus.Count+DIntDandelion.Count+DIntHay.Count+DIntLeather.Count+DIntLeave.Count+DIntOrchid.Count+DIntRose.Count
                        //   //            +DIntSeeds.Count+DIntStick.Count+DIntSticks.Count+DIntViolet.Count+DIntWheatSeeds.Count+DIntWheatStraw.Count+DIntOakSapling.Count+DIntPineSapling.Count+DIntLindenSapling.Count+DIntPlumSapling.Count+DIntCherrySapling.Count+DIntAppleSapling.Count+DIntSpruceSapling.Count+DIntStrawberryPlant.Count+DIntRashberryPlant.Count
                        //   //            +/*DIntPotatoesPlant.Count+*/DIntCoal.Count+DIntCopper.Count+DIntDiamond.Count+DIntGold.Count+DIntIron.Count+DIntPyrit.Count+DIntRuby.Count+DIntSaphirite.Count+DIntSilver.Count+DIntSmaragd.Count+DIntBigStone.Count+DIntMediumStone.Count+DIntSmallStone.Count+DIntTin.Count+/*DIntUran.Count+*/DIntBackpack.Count+DIntBucket.Count
                        //   //            +DIntBucketWater.Count+DIntRope.Count+DIntLindenPlanks.Count+DIntLindenWood.Count+DIntSprucePlanks.Count+DIntSpruceWood.Count+DIntOakPlanks.Count+DIntOakWood.Count+DIntPinePlanks.Count+DIntPineWood.Count+DIntCherryPlanks.Count+DIntCherryWood.Count+DIntPlumPlanks.Count+DIntPlumWood.Count+DIntApplePlanks.Count+DIntAppleWood.Count)+Environment.NewLine+
                        //   "[Počet animací]: "+(waterSquirt.Count+backgroundDirt.Count+backgroundStone.Count+backgroundGravel.Count+backgroundSand.Count)+Environment.NewLine+
                        //   "[Zvířata] Ryba(y):"+fish.Count+", Zajíc(i): "+rabbit.Count+", Kur "+chicken.Count+Environment.NewLine+
                        //   "[Energie]:  "+energy.Count+Environment.NewLine+

                        //   "[Čas]: hodina(y): "+((int)time).ToString()+" minuta(y): "+((int)((float)(time-(int)time)*60)).ToString()+" sekunda(y): "+((int)((((time-(int)time)*(float)60)-(int)((time-(int)time)*(float)60))*60)).ToString()+Environment.NewLine+
                        //   "[Den]: "+day.ToString()+Environment.NewLine+
                        //   "[Stattum Inv]: "+inventory, Color.DarkGray);
                        //else {
                        //    if (Setting.Fps) {
                        //        if (show) DrawTextShadowMin(spriteFont_small, 5, 5, "Fps: "+Math.Round(1000/gameTime.ElapsedGameTime.TotalMilliseconds), Color.DarkGray);
                        //    }
                        //    // }
                        //}
                        //#endregion
                        // } else {
                        //    spriteBatch.Begin();
                        //    Graphics.Clear(Color.White);

                        //    for (int i=0; i<WindowHeight; i++) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(0,i,WindowWidth,1), new Color((float)i/765,1,1));

                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32, 500-1, 1), Color.Gray);
                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250, WindowHeight/2+32, 1, 32), Color.Gray);
                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+32-1, 500-1-1, 1), Color.Gray);
                        //     spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidth/2-250+500-1, WindowHeight/2+1+32, 1, 32-1), Color.Gray);

                        //     if (Error) {
                        //         int f=255;
                        //for (int i=0; i<30; i++) {
                        //             spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+i+1,(int)(Process*498),1),new Color(f, 0, 0));
                        //    if (Process!=0) spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1+(int)(Process*498),WindowHeight/2+32+1+i,1,1),new Color(f, 0, 0, 128));
                        // f-=5;
                        //         }
                        //     } else {
                        //         int f=255;
                        //         for (int i=0; i<30; i++) {
                        //             spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1, WindowHeight/2+32+i+1,(int)(Process*498),1),new Color(0, f, 0));
                        //    if (Process!=1)spriteBatch.Draw(Rabcr.Pixel,new Rectangle(Global.WindowWidth/2-250+1+(int)(Process*498),WindowHeight/2+32+i,1,1),new Color(0, f, 0, 128));
                        //             f-=5;
                        //         }
                        //     }

                        //    // menu.ButtonDraw(spriteBatch,new Vector2(ms.X,ms.Y),new Vector2(Global.WindowWidth-400,WindowHeight-50));
                        //     DrawTextShadowMin(spriteFont_medium,WindowWidth-400+100,WindowHeight-50+5,"Zpět do menu");

                        //     //if (step==Step.Checking) {
                        //     //    if (gameTime.TotalGameTime.Seconds>4) {
                        //     //        Error=true;
                        //     //        ErrorCode="Server se příliš dlouho hledá.";
                        //     //        ErrorMessage="Časový limit vypršel";
                        //     //        try { clientSocket.Disconnect(false);}catch {}
                        //     //        menu.ButtonDraw(spriteBatch,new Vector2(ms.X,ms.Y),new Vector2(Global.WindowWidth-400,WindowHeight-50));
                        //     //        DrawTextShadowMin(spriteFont_medium,WindowWidth-400+100,WindowHeight-50+5,"Zpět do menu");
                        //     //    }
                        //     //}

                        //     if (Error) {
                        //         DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString(ErrorMessage).X)/2),WindowHeight/2-40,ErrorMessage);
                        //         DrawTextShadowMin(spriteFont_small,(int)((Global.WindowWidth-spriteFont_small.MeasureString(ErrorCode).X)/2),WindowHeight/2+80,ErrorCode);
                        //     } else {
                        //         switch (step) {
                        //             case Step.Checking:
                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Připojování...").X)/2),WindowHeight/2-50,"Připojování...");
                        //                 break;

                        //             case Step.Logining:
                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Připojování...").X)/2),WindowHeight/2-50,"Připojování...");
                        //                 break;

                        //             case Step.Terrain:
                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Získávání terénu").X)/2),WindowHeight/2-50,"Získávání terénu");
                        //                 break;

                        //             case Step.Assets:
                        //                 DrawTextShadowMin(spritefontBig,(int)((Global.WindowWidth-spritefontBig.MeasureString("Načítání herních komponent").X)/2),WindowHeight/2-50,"Načítání herních komponent");
                        //                 break;
                        //         }
                        //     }
                        //spriteBatch.End();
                    }
                }
            } else {
                Graphics.SetRenderTarget(null);
                Graphics.Clear(Color.White);
                spriteBatch.Begin();

                //Back
                for (int i = 0; i<Global.WindowHeight; i++) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, i, Global.WindowWidth, 1), new Color(i/765f, 1, 1));
                menu.ButtonDraw(/*spriteBatch, mouseLeftDown, new DInt(newMouseState.X, newMouseState.Y)*/);

                if (Error) {
                    textMore.Draw(spriteBatch);
                    textHeader.Draw(spriteBatch);
                    //GameMethods.DrawTextShadowMax(spriteFont_big, (int)(Global.WindowWidthHalf-spriteFont_big.MeasureString(ErrorHeader).X/2), Global.WindowHeightHalf-50, ErrorHeader, Color.White);
                    //GameMethods.DrawTextShadowMin(Global.WindowWidthHalf-(int)spriteFont_small.MeasureString(ErrorText).X/2, Global.WindowHeightHalf+40, ErrorText);
                } else {

                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32, 500-1, 1), Color.Gray);
                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250, Global.WindowHeightHalf+32, 1, 32), Color.Gray);
                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32+32-1, 500-1-1, 1), Color.Gray);
                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+500-1, Global.WindowHeightHalf+1+32, 1, 32-1), Color.Gray);


                    int f = 255;
                    for (int i = 0; i<30; i++) {
                        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1, Global.WindowHeightHalf+32+i+1, (int)(Process*498), 1), new Color(0, f, 0));
                        if (Process!=1) spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-250+1+(int)(Process*498), Global.WindowHeightHalf+32+i, 1, 1), new Color(0, f, 0, 128));
                        f-=5;
                    }

                    textHeader.Draw(spriteBatch);
                //    switch (current) {
                //        case Current.Checking:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Připojování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
                //            break;

                //        case Current.EndChecking:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
                //            break;

                //        case Current.EndLoging:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
                //            break;

                //        case Current.Loging:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
                //            break;

                //        case Current.SendingBasic:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Přihlašování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
                //            break;

                //        case Current.GettingSpawn:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Získávání terénu").X)/2), Global.WindowHeightHalf-50, "Získávání terénu", Color.Black);
                //            break;

                //        case Current.GettingPlayers:
                //            textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Informace o hráčích").X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
                //            break;

                //        case Current.LoadingAssets:
                //            spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Herních komponent").X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
                //            break;
                //    }
                }

                // menu.ButtonDraw(spriteBatch,newMouseState,newMouseState.Position.ToVector2(), new Vector2(Global.WindowWidth-400+70, Global.WindowHeight-55));
                spriteBatch.End();
            }

            base.Draw(gameTime);
        }

        //void SetMultiplayerLoadingText(){
        //    switch (currentState) {
        //        case Current.Checking:
        //            textHeader=new TextWithMeasure("Připojování...",0,0);
        //          //  textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //            break;

        //        case Current.EndChecking:
        //            textHeader=new TextWithMeasure("Přihlašování...",0,0);
        //         //   textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //            break;

        //        case Current.EndLoging:
        //            textHeader=new TextWithMeasure("Přihlašování...",0,0);
        //         //   textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //            break;

        //        case Current.Loging:
        //            textHeader=new TextWithMeasure("Přihlašování...",0,0);
        //          //  textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //            break;

        //        case Current.SendingBasic:
        //            textHeader=new TextWithMeasure("Přihlašování...",0,0);
        //          //  textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //            break;

        //        case Current.GettingSpawn:
        //            textHeader=new TextWithMeasure("Získávání terénu",0,0);
        //          //  textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Získávání terénu", Color.Black);
        //            break;

        //        case Current.GettingPlayers:
        //            textHeader=new TextWithMeasure("Informace o hráčích",0,0);
        //         //   textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
        //            break;

        //        case Current.LoadingAssets:
        //            textHeader=new TextWithMeasure("Herních komponent",0,0);
        //          //  textHeader.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString().X)/2), Global.WindowHeightHalf-50, "Načítání herních komponent", Color.Black);
        //            break;
        //    }
        ////}
        //  //  textHeader=new TextWithMeasure(,0,0);//.Draw(spriteFont_big, (int)((Global.WindowWidth-spriteFont_big.MeasureString("Připojování...").X)/2), Global.WindowHeightHalf-50, "Připojování...", Color.Black);
        //}



        public override void Resize() {
            if (Global.WindowWidth!=0) {
                Translation=ZoomMatrix*Matrix.CreateTranslation(new Vector3(Global.WindowWidthHalf, Global.WindowHeightHalf, 0));
                sunLightTarget=new RenderTarget2D(Graphics, Global.WindowWidth, Global.WindowHeight);
                modificatedLightTarget=new RenderTarget2D(Graphics, Global.WindowWidth, Global.WindowHeight);

                menu.Position=new Vector2(Global.WindowWidthHalf-70, Global.WindowHeightHalf+75);

                buttonNext.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10+40+70-4, Global.WindowHeightHalf+160-30+8+16-20-30+5);
                buttonPrev.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10+40-4, Global.WindowHeightHalf+160-30+8+16-20-30+5);
                buttonCraft1x.Position=new Vector2(Global.WindowWidthHalf+20+8+10+10, Global.WindowHeightHalf+160-30+8+16);
                buttonCraft10x.Position=new Vector2(Global.WindowWidthHalf+10+80+8+10+10, Global.WindowHeightHalf+160-30+8+16);
                buttonCraft100x.Position=new Vector2(Global.WindowWidthHalf+10+170+8, Global.WindowHeightHalf+160-30+8+16);

                buttonRocket.Position=new Vector2(Global.WindowWidthHalf-buttonRocket.texture.Width/2, Global.WindowHeightHalf-198+430-buttonRocket.texture.Height-5);
                buttonRadio.Position=new Vector2(Global.WindowWidthHalf-300-2+10+10+10, Global.WindowHeightHalf-234+10+240+40+40);

            }
        }

        bool DisplayInventory {
            get {
                if (!getFromServerInv) return false;
                return wantedBlocksInv.X==selectedMashine.X&&wantedBlocksInv.Y==selectedMashine.Y;
            }
        }

        void MouseRightAction() {
            int x = mousePosDiv16.X, y = mousePosDiv16.Y;

            if (y<0) return;
            if (y>125) return;

            MTerrain chunk = terrain[x];

            if (terrain[x]!=null) {
                #region Liquits
				if (InventoryNormal[boxSelected].Id==(ushort)Items.Bottle) {
					if (chunk.IsTopBlocks[y]) {
						switch (chunk.TopBlocks[y].Id) {
							case (ushort)BlockId.Oil:
								if (Global.WorldDifficulty!=2) {
									InventoryRemoveSelectedItem();
									InventoryAdd(new ItemNonInvTool((ushort)Items.BottleOil, 99, 99));
								}

								chunk.TopBlocks[y]=null;
								chunk.IsTopBlocks[y]=false;
								return;

							case (ushort)BlockId.WaterSalt:
								if (Global.WorldDifficulty!=2) {
									InventoryRemoveSelectedItem();
									InventoryAdd(new ItemNonInvTool((ushort)Items.BottleWater,99,99));
								}
								chunk.TopBlocks[y]=null;
								chunk.IsTopBlocks[y]=false;
								return;
						}
					}
				}
				if (InventoryNormal[boxSelected].Id==(ushort)Items.Bucket) {
					if (chunk.IsTopBlocks[y]) {
						switch (chunk.TopBlocks[y].Id) {
							case (ushort)BlockId.Oil:
								if (Global.WorldDifficulty!=2) {
									InventoryRemoveSelectedItem();
									InventoryAdd(new ItemNonInvTool((ushort)Items.BottleOil,99,99));
								}
								chunk.TopBlocks[y]=null;
								chunk.IsTopBlocks[y]=false;
								return;

							case (ushort)BlockId.WaterBlock:
								if (Global.WorldDifficulty!=2) {
									InventoryRemoveSelectedItem();
									InventoryAdd(new ItemNonInvTool((ushort)Items.BottleWater,99,99));
								}
								/*((AirSolidBlock)chunk.SolidBlocks[y]).Top=*/chunk.TopBlocks[y]=null;
								chunk.IsTopBlocks[y]=false;
								return;

							case (ushort)BlockId.WaterSalt:
								if (Global.WorldDifficulty!=2) {
									InventoryRemoveSelectedItem();
									InventoryAdd(new ItemNonInvTool((ushort)Items.BottleSaltWater,99,99));
								}
								/*((AirSolidBlock)chunk.SolidBlocks[y]).Top=*/chunk.TopBlocks[y]=null;
								chunk.IsTopBlocks[y]=false;
								return;
						}
					}

				}
				#endregion

            #region Get food
				if (chunk.IsTopBlocks[y]) {
					if (Global.WorldDifficulty!=1 || FastMath.DistanceInt(mousePosDiv16.X,mousePosDiv16.Y,PlayerX,PlayerY) < 8*16){
						switch (chunk.TopBlocks[y].Id) {
							case (ushort)BlockId.BucketWithLatex:
								DropItemFromLeaves((ushort)BlockId.BucketForRubber, (ushort)Items.Resin,TextureBucketForRubber);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Resin,1), mousePosRoundX, mousePosRoundY);

								//if (chunk.IsBackground[y]){
								//    ((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.BucketForRubber, new Vector2(mousePosRoundX, mousePosRoundY));
								//} else {
								//    chunk.SolidBlocks[y]=new AirSolidBlock{
								//        Top=TopBlockFromId((ushort)BlockId.BucketForRubber, new Vector2(mousePosRoundX, mousePosRoundY))
								//    };
								//}
								//chunk.IsTopBlocks[y]=true;

							  //  ((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.BucketForRubber, new Vector2(mousePosRoundX, mousePosRoundY));
								bucketRubber.Add(new ShortAndByte(x, y));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.PlumLeavesWithPlums:
								DropFoodFromLeaves((ushort)BlockId.PlumLeaves, (ushort)Items.Plum,TexturePlumLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Plum,1), mousePosRoundX, mousePosRoundY);
								////((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.PlumLeaves, new Vector2(mousePosRoundX, mousePosRoundY));

								//if (chunk.IsBackground[y]){
								//    ((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.PlumLeaves, new Vector2(mousePosRoundX, mousePosRoundY));
								//} else {
								//    chunk.SolidBlocks[y]=new AirSolidBlock{
								//        Top=TopBlockFromId((ushort)BlockId.PlumLeaves, new Vector2(mousePosRoundX, mousePosRoundY))
								//    };
								//}

								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.CherryLeavesWithCherries:
								DropFoodFromLeaves((ushort)BlockId.CherryLeaves, (ushort)Items.Cherry,TextureCherryLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Cherry,1), mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.CherryLeaves, new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.AppleLeavesWithApples:
								DropFoodFromLeaves((ushort)BlockId.AppleLeaves, (ushort)Items.Apple,TextureAppleLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Apple,1), mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.AppleLeaves, new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.LemonLeavesWithLemons:
								DropFoodFromLeaves((ushort)BlockId.LemonLeaves, (ushort)Items.Lemon,TextureLemonLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Lemon,1),mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.LemonLeaves, new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.OrangeLeavesWithOranges:
								DropFoodFromLeaves((ushort)BlockId.OrangeLeaves, (ushort)Items.Orange,TextureOrangeLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Orange,1),mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.OrangeLeaves,new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.OliveLeavesWithOlives:
								DropFoodFromLeaves((ushort)BlockId.OliveLeaves, (ushort)Items.Olive,TextureOliveLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.Olive,1),mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.OliveLeaves,new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;

							case (ushort)BlockId.KapokLeacesFibre:
								DropItemFromLeaves((ushort)BlockId.KapokLeaves, (ushort)Items.KapokFibre, TextureKapokLeaves);
								//DropItemToPos(new ItemNonInvBasic((ushort)Items.KapokFibre,1),mousePosRoundX, mousePosRoundY);
								//((AirSolidBlock)chunk.SolidBlocks[y]).Top=chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.KapokLeaces,new Vector2(mousePosRoundX, mousePosRoundY));
								//barEnergy+=0.02f;
								//if (barEnergy>32) barEnergy=32;
								return;
						}

						void DropFoodFromLeaves(ushort newLeavesId, ushort itemId, Texture2D leavesTexture) {
							DropItemToPos(new ItemNonInvFood(itemId, 1, GameMethods.FoodMaxDescay(itemId)), mousePosRoundX, mousePosRoundY);

							LeavesBlock leaves=(LeavesBlock)chunk.TopBlocks[y];
							leaves.Id=newLeavesId;
							leaves.Texture=leavesTexture;

							barEnergy+=0.02f;
							if (barEnergy>32) barEnergy=32;
						}
						void DropItemFromLeaves(ushort newLeavesId, ushort itemId, Texture2D leavesTexture) {
							DropItemToPos(new ItemNonInvBasic(itemId), mousePosRoundX, mousePosRoundY);

							LeavesBlock leaves=(LeavesBlock)chunk.TopBlocks[y];
							leaves.Id=newLeavesId;
							leaves.Texture=leavesTexture;

							barEnergy+=0.02f;
							if (barEnergy>32) barEnergy=32;
						}
					}
				}


				foreach (Plant m in chunk.Plants) {
					if (m.Height==y) {
						if (!m.Growing) {
							switch (m.Id) {
								case (ushort)BlockId.Blueberry:
									DropItemToPos(new ItemNonInvFood((ushort)Items.Blueberries,1,GameMethods.FoodMaxCount((ushort)Items.Blueberries),0,GameMethods.FoodMaxDescay((ushort)Items.Blueberries)), mousePosRoundX, mousePosRoundY);
									m.Grow=125;
									m.Growing=true;
									m.Update();
									barEnergy+=0.02f;
									if (barEnergy>32) barEnergy=32;
									return;

								case (ushort)BlockId.Strawberry:
									DropItemToPos(new ItemNonInvFood((ushort)Items.Strawberry,1,GameMethods.FoodMaxCount((ushort)Items.Strawberry),0,GameMethods.FoodMaxDescay((ushort)Items.Strawberry)), mousePosRoundX, mousePosRoundY);
									m.Grow=125;
									m.Growing=true;
									m.Update();
									barEnergy+=0.02f;
									if (barEnergy>32) barEnergy=32;
									return;

								case (ushort)BlockId.Rashberry:
									DropItemToPos(new ItemNonInvFood((ushort)Items.Rashberry,1,GameMethods.FoodMaxCount((ushort)Items.Rashberry),0,GameMethods.FoodMaxDescay((ushort)Items.Rashberry)), mousePosRoundX, mousePosRoundY);
									m.Grow=125;
									m.Growing=true;
									m.Update();
									barEnergy+=0.02f;
									if (barEnergy>32) barEnergy=32;
									return;
							}
						}
					}
				}
				#endregion

                #region Drink Water
				if (chunk.IsTopBlocks[y]) {
					if (chunk.TopBlocks[y].Id==(ushort)BlockId.WaterBlock) {
						barWater--;
						if (barWater<0)barWater=0;
						return;
					}
				}
				#endregion

				#region Hoe
				if (chunk.IsSolidBlocks[y]) {
					if (InventoryNormal[boxSelected].Id==(ushort)Items.HoeBronze
					|| InventoryNormal[boxSelected].Id==(ushort)Items.HoeCopper
					|| InventoryNormal[boxSelected].Id==(ushort)Items.HoeIron
					|| InventoryNormal[boxSelected].Id==(ushort)Items.HoeStone) {

						if (chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockDesert
						|| chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockForest
						|| chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockHills
						|| chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockJungle
						|| chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockPlains) {
							//chunk.SolidBlocks[y]=SolidBlockFromId((ushort)BlockId.Dirt, new Vector2(mousePosRoundX, mousePosRoundY));
							//barEnergy+=0.02f;
							//barWater+=0.02f;
							//if (barEnergy>32) barEnergy=32;
							//if (barWater>32) barWater=32;
                            SendHoeAction(x,y);
							//RemovePartTool();
							return;
						} else if (chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockClay) {
							// chunk.SolidBlocks[y]=SolidBlockFromId((ushort)BlockId.Clay, new Vector2(mousePosRoundX, mousePosRoundY));
							//barEnergy+=0.02f;
							//barWater+=0.02f;
							//if (barEnergy>32) barEnergy=32;
							//if (barWater>32) barWater=32;
                            SendHoeAction(x,y);
							//RemovePartTool();
							return;
						} else if (chunk.SolidBlocks[y].Id == (ushort)BlockId.GrassBlockCompost) {
							SendHoeAction(x,y);
       //                     chunk.SolidBlocks[y]=SolidBlockFromId((ushort)BlockId.Compost, new Vector2(mousePosRoundX, mousePosRoundY));
							//barEnergy+=0.02f;
							//barWater+=0.02f;
							//if (barEnergy>32) barEnergy=32;
							//if (barWater>32) barWater=32;
							//RemovePartTool();
							return;
						}
					}
				}
                #endregion

                #region Inventory
                //if (Inventory[boxSelected].X==(int)Items.Mobile) {
                //    MobileON();
                //    inventory=InventoryType.Mobile;
                //    return;
                //}

                if (FastMath.Distance(mousePosRoundX, mousePosRoundY, PlayerX, PlayerY)<5*16) {
                    if (terrain[x].IsTopBlocks[y]) {
                        switch ((BlockId)terrain[x].TopBlocks[y].Id) {
                            case BlockId.Desk:
                                inventory=InventoryType.Desk;
                                selectedMashine=mousePosDiv16.Clone();
                                SetInvCraftingBlocks();
                                if (lastMashineType!=inventory) SetUpInvToNew();

                                SetNeed();
                                return;

                            case BlockId.Shelf:
                                inventory=InventoryType.Shelf;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;

                            case BlockId.BoxWooden:
                                inventory=InventoryType.BoxWooden;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;

                            case BlockId.BoxAdv:
                                inventory=InventoryType.BoxAdv;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;

                            case BlockId.Radio:
                                inventory=InventoryType.Radio;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                //PrepareRadioDialog();
                                return;

                            case BlockId.FurnaceStone:
                                inventory=InventoryType.FurnaceStone;
                                selectedMashine=mousePosDiv16.Clone();
                                SetInvBakeIngots();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                SetNeed();
                                return;

                            case BlockId.FurnaceElectric:
                                inventory=InventoryType.FurnaceElectric;
                                selectedMashine=mousePosDiv16.Clone();
                                SetInvBakeIngots();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                SetNeed();
                                return;

                            case BlockId.Macerator:
                                inventory=InventoryType.Macerator;
                                selectedMashine=mousePosDiv16.Clone();
                                SetInvToDustDusts();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                SetNeed();
                                return;

                            case BlockId.Charger:
                                inventory=InventoryType.Charger;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;


                            case BlockId.SewingMachine:
                                inventory=InventoryType.SewingMachine;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                SetNeed();
                                return;

                            case BlockId.Miner:
                                inventory=InventoryType.Miner;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;

                            case BlockId.Composter:
                                inventory=InventoryType.Composter;
                                selectedMashine=mousePosDiv16.Clone();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;
                        }
                    }

                    for (int potencialRocketY = y; potencialRocketY>y-5; potencialRocketY--) {
                        if (potencialRocketY<0) break;

                        if (terrain[x].IsTopBlocks[potencialRocketY]) {
                            if (terrain[x].TopBlocks[potencialRocketY].Id==(byte)BlockId.Rocket) {
                                inventory=InventoryType.Rocket;
                                selectedMashine=new DInt(x, potencialRocketY);
                                //PrepareRocketDialog();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;
                            }
                        }
                        if (terrain[x-1].IsTopBlocks[potencialRocketY]) {
                            if (terrain[x-1].TopBlocks[potencialRocketY].Id==(byte)BlockId.Rocket) {
                                inventory=InventoryType.Rocket;
                                selectedMashine=new DInt(x-1, potencialRocketY);
                                //PrepareRocketDialog();
                                if (lastMashineType!=inventory) SetUpInvToNew();
                                return;
                            }
                        }
                    }
                }
                #endregion

                #region Place block
                if (FastMath.DistanceInt(mousePosRoundX,mousePosRoundY,(int)PlayerX, (int)PlayerY)<DistanceBlockEdit) {
                    ushort id =InventoryNormal[boxSelected].Id;
					if (id!=0) {

                        if (!chunk.IsSolidBlocks[y])  {
							ushort blockId=GameMethods.SolidBlockFromItem(id);
							if (blockId!=(ushort)BlockId.None) {
                            Block block = SolidBlockFromId(blockId, new Vector2(mousePosRoundX, mousePosRoundY));

                            if (block!=null) {
                                if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
                                SendAddedBlock(x,y,blockId,BlockType.Solid);
                             //   terrain[x].SolidBlocks[y]=block;
                              //  terrain[x].IsSolidBlocks[y]=MBlockState.TmpAdded;

                          //      RefreshLighting(x);

                               // Inventory[boxSelected].Y--;
                               // if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
                                return;
                            }

                            }

							if (y!=0) {
								if (y+1<=125)
								if (chunk.IsSolidBlocks[y+1]) {
									if (chunk.SolidBlocks[y+1].Id==(ushort)BlockId.Dirt || chunk.SolidBlocks[y+1].Id==(ushort)BlockId.Compost) {
										if (!chunk.IsTopBlocks[y]) {

											bool isNotPlant=true;
											foreach (Plant p in chunk.Plants) {
												if (p.Height==y) {
													isNotPlant=false;
													break;
												}
											}
											if (isNotPlant) {
												switch (id) {
													case (ushort)Items.Seeds:
														switch (FastRandom.Int(10)) {
															default: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.Dandelion,new Vector2(mousePosRoundX,mousePosRoundY)); break;
															case 1: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.Orchid, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 2: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.Rose, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 3: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.Heather, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 4: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.Violet, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 5: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.GrassDesert, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 6: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.GrassForest, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 7: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.GrassHills, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 8: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.GrassJungle, new Vector2(mousePosRoundX, mousePosRoundY)); break;
															case 9: chunk.TopBlocks[y]=TopBlockFromId((ushort)BlockId.GrassPlains, new Vector2(mousePosRoundX, mousePosRoundY)); break;
														}
														chunk.IsTopBlocks[y]=true;
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.WheatSeeds:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Wheat, (byte)y,0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.FlaxSeeds:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Flax, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.Carrot:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Carrot, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.Onion:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Onion, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.Peas:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Peas, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.PlantRashberry:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Rashberry, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.PlantStrawberry:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Strawberry, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;

													case (ushort)Items.PlantBlueberry:
														chunk.Plants.Add(GetPlantFromId((ushort)BlockId.Blueberry, (byte)y, 0, (short)x));
														RegisterPlant(x);
														if (chunk.StartSomething>y)chunk.StartSomething=/*(byte)*/y;
														InventoryRemoveSelectedItem();
														return;
												}
											}
										}
									}

                                        ushort mobId = GameMethods.MobFromItem(id);
                                        if (mobId!=(ushort)BlockId.None) {
                                            bool NotExists = true;
                                            foreach (MMob mob in terrain[x].Mobs) {
                                                if (mob.Height==y) {
                                                    NotExists=false;
                                                    break;
                                                }
                                            }

                                            if (NotExists) {
                                             //   MMob m = GetMobFromId(mobId, (byte)y, FastRandom.Bool(), x);
                                             //   if (m!=null) {
                                                    SendAddedBlock(x,y,mobId,BlockType.Mob);
                                                   // terrain[x].Mobs.Add(m);
                                              //  }
                                            }
                                        }
                                    }
                            }
                        }

                        if (!terrain[x].IsBackground[y]) {
                            Block block = BackBlockFromId((byte)GameMethods.BackBlockFromItem(id), new Vector2(mousePosRoundX, mousePosRoundY));

                            if (block!=null) {
                                SendAddedBlock(x,y,id,BlockType.Back);
                                //if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;
                                //terrain[x].Background[y]=block;
                                //terrain[x].IsBackground[y]=MBlockState.TmpAdded;

                                //Inventory[boxSelected].Y--;
                                //if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
                                return;
                            }
                        }

                        if (!terrain[x].IsTopBlocks[y]) {
                            ushort blockId=GameMethods.TopBlockFromItem(id);
                            Block block = TopBlockFromId(blockId, new Vector2(mousePosRoundX,mousePosRoundY));

                            if (block!=null) {
                                if (!GameMethods.IsDirtPlaceable(block.Id)) {
                                    if (terrain[x].IsSolidBlocks[y+1]) {
                                        if (terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.Dirt
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.Compost
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.Clay
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockClay
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockDesert
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockForest
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockHills
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockJungle
                                        ||terrain[x].SolidBlocks[y+1].Id==(ushort)BlockId.GrassBlockPlains) {
                                            SendAddedBlock(x,y,id,BlockType.Top);
                                       //     terrain[x].TopBlocks[y]=block;
                                           // terrain[x].IsTopBlocks[y]=true;
                                          //  if (terrain[x].StartSomething>y) terrain[x].StartSomething=(byte)y;

                                          //  Inventory[boxSelected].Y--;
                                           // if (Inventory[boxSelected].Y==0) Inventory[boxSelected].X=0;
                                            return;
                                        } else return;
                                    } else return;
                                } else {
                                    if (id==(ushort)Items.BucketForRubber) {
                                        if (!terrain[x].IsBackground[y]) return;
                                        if (terrain[x].Background[y].Id!=(int)BlockId.RubberTreeWood) return;
                                    }

                                    if (id==(ushort)Items.ChristmasStar) {
										if (chunk.IsTopBlocks[y+1]) {
											if (chunk.TopBlocks[y+1].Id==(ushort)BlockId.SpruceLeaves) {
												LeavesBlock leavesBlock=(LeavesBlock)block;
												(leavesBlock.tree=((LeavesBlock)chunk.TopBlocks[y+1]).tree).TitlesLeaves.Add(new UShortAndByte((ushort)x, (byte)y));
												leavesBlock.SetOrigin();

												chunk.TopBlocks[y]=block;
												chunk.IsTopBlocks[y]=true;
											//	chunk.RefreshLightingAddTop(y,(ushort)BlockId.SpruceLeaves);
												if (chunk.StartSomething>y) chunk.StartSomething=y;
											}
										}

										return;
									}

                                    chunk.TopBlocks[y]=block;
									chunk.IsTopBlocks[y]=true;
									if (chunk.StartSomething>y) chunk.StartSomething=y;
									terrain[x].RefreshLightingAddTop(y, id: blockId);

                                    if (blockId<(ushort)BlockId._MoreInLoad) {
											switch (blockId) {
												case (ushort)BlockId.FurnaceStone:
													((MashineBlockBasic)block).Inv=new ItemInv[InvMaxFurnaceStone]{
														itemBlank,
														itemBlank,
														itemBlank,
														itemBlank
													};
													FurnaceStone.Add(new ShortAndByte(x, y));
													break;

												case (ushort)BlockId.Charger:
													((MashineBlockBasic)block).Inv=new ItemInv[1]{ itemBlank };
													Chargers.Add(new ShortAndByte((short)x, (byte)y));
													RefreshAroundLabels(x, y);
													break;

												case (ushort)BlockId.OxygenMachine:
													((MashineBlockBasic)block).Inv=new ItemInv[1]{ itemBlank };
													OxygenMachines.Add(new ShortAndByte((short)x, (byte)y));
													break;

												case (ushort)BlockId.Miner:
													{
														MashineBlockBasic m=(MashineBlockBasic)block;
														m.Inv=new ItemInv[InvMaxMiner];
														for (int i = 0; i<12*2; i++) m.Inv[i]=itemBlank;
														Miners.Add(new ShortAndByte((short)x, (byte)y));
														RefreshAroundLabels(x, y);
													}
													break;

												case (ushort)BlockId.Composter:
													((ShelfBlock)block).Inv=new ItemInv[InvMaxComposter]{
														itemBlank, itemBlank, itemBlank,
														itemBlank, itemBlank, itemBlank,
														itemBlank, itemBlank, itemBlank
													};
													Composters.Add(new ShortAndByte((short)x, (byte)y));
													break;

												case (ushort)BlockId.BucketForRubber:
													if (chunk.IsBackground[y]) {
														if (chunk.Background[y].Id==(ushort)BlockId.RubberTreeWood) {
															bucketRubber.Add(new ShortAndByte((short)x, (byte)y));
														}else {
														ItemDrop(new ItemNonInvBasic((ushort)Items.BucketForRubber,1),x,y);
														chunk.IsBackground[y]=false;
														/*((AirSolidBlock)chunk.SolidBlocks[y]).Back=*/chunk.Background[y]=null;
													}
													} else {
														ItemDrop(new ItemNonInvBasic((ushort)Items.BucketForRubber,1),x,y);
														chunk.IsBackground[y]=false;
														/*((AirSolidBlock)chunk.SolidBlocks[y]).Back=*/chunk.Background[y]=null;
													}
													break;

												case (ushort)BlockId.Lamp:
													RefreshAroundLabels(x, y);
													break;

												case (ushort)BlockId.Radio:
													RefreshAroundLabels(x, y);
													break;

												case (ushort)BlockId.Label:
													SetIndexLabel(x,y);
													RefreshAroundLabels(x, y);
													break;

												case (ushort)BlockId.Shelf:
													((ShelfBlock)block).Inv=new ItemInv[InvMaxShelf]{
														itemBlank, itemBlank, itemBlank,
														itemBlank, itemBlank, itemBlank,
														itemBlank, itemBlank, itemBlank
													};
													break;

												case (ushort)BlockId.Barrel:
													((Barrel)block).Inv=new ItemInv[InvMaxBarrel] {
														itemBlank,
														itemBlank
													};
													break;

												case (ushort)BlockId.BoxWooden:
													{
														ItemInv[] inv=((BoxBlock)block).Inv=new ItemInv[InvMaxBoxWooden];
														for (int i=0; i<InvMaxBoxWooden; i++) inv[i]=itemBlank;
													}
													break;

												case (ushort)BlockId.BoxAdv:
													{
														ItemInv[] inv=((BoxBlock)block).Inv=new ItemInv[InvMaxBoxAdv];
														for (int i=0; i<InvMaxBoxAdv; i++)inv[i]=itemBlank;
													}
													break;

												case (ushort)BlockId.Flag:
													windable.Add(new ShortAndByte((short)x,(byte)y));
													break;

												case (ushort)BlockId.Windmill:
													windable.Add(new ShortAndByte((short)x,(byte)y));
													RefreshAroundLabels(x, y);
													break;
											}
										}
										InventoryRemoveSelectedItem();
										return;
									}
                            }
                        }
                    }
                }
                #endregion
            }
        }

        //Color StringToColor(string str) {
        //    string h = str.Replace("[", "").Replace("]", "").Replace(" ", "");
        //    return new Color(int.Parse(h.Substring(0, h.IndexOf(","))),
        //        int.Parse(h.Substring(h.IndexOf(",")+1, h.LastIndexOf(",")-h.IndexOf(",")-1)),
        //        int.Parse(h.Substring(h.LastIndexOf(",")+1)));
        //}

        void GrowTreeFood(int reg) {
            int id = FastRandom.Int(1000-1)+1+reg;

            int i = FastRandom.Int(124)+1;
            if (terrain[id].IsTopBlocks[i]) {
                switch (terrain[id].TopBlocks[i].Id) {
                    case (byte)BlockId.AppleLeaves:
                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.AppleLeavesWithApples, new Vector2(id*16, i*16));
                        return;

                    case (byte)BlockId.PlumLeaves:
                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.PlumLeavesWithPlums, new Vector2(id*16, i*16));
                        return;

                    case (byte)BlockId.LemonLeaves:
                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.LemonLeavesWithLemons, new Vector2(id*16, i*16));
                        return;

                    case (byte)BlockId.OrangeLeaves:
                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.OrangeLeavesWithOranges, new Vector2(id*16, i*16));
                        return;

                    case (byte)BlockId.CherryLeaves:
                        terrain[id].TopBlocks[i]=TopBlockFromId((byte)BlockId.CherryLeavesWithCherries, new Vector2(id*16, i*16));
                        return;
                }
            } else if (FastRandom.Int(10000)==1) {
                if (terrain[id].IsSolidBlocks[i]) {
                    switch (terrain[id].SolidBlocks[i].Id) {
                        case (byte)BlockId.Compost:
                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.Dirt, new Vector2(id*16, i*16));
                            return;

                        case (byte)BlockId.Dirt:
                            if (!terrain[id].IsSolidBlocks[i-1]) {
                                int r = FastRandom.Int(2)==1 ? 1 : -1;
                                if (terrain[id+r].IsSolidBlocks[i]) {
                                    switch (terrain[id+r].SolidBlocks[i].Id) {
                                        case (byte)BlockId.GrassBlockDesert:
                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockDesert, new Vector2(id*16, i*16));
                                            return;

                                        case (byte)BlockId.GrassBlockForest:
                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockForest, new Vector2(id*16, i*16));
                                            return;

                                        case (byte)BlockId.GrassBlockHills:
                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockHills, new Vector2(id*16, i*16));
                                            return;

                                        case (byte)BlockId.GrassBlockJungle:
                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockJungle, new Vector2(id*16, i*16));
                                            return;

                                        case (byte)BlockId.GrassBlockPlains:
                                            terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockPlains, new Vector2(id*16, i*16));
                                            return;
                                    }
                                }
                            }
                            return;

                        case (byte)BlockId.Clay:
                            if (!terrain[id].IsSolidBlocks[i-1]) {
                                int r = FastRandom.Int(2)==1 ? 1 : -1;
                                if (terrain[id+r].IsSolidBlocks[i]) {
                                    if (terrain[id+r].SolidBlocks[i].Id==(byte)BlockId.GrassBlockClay) {
                                        terrain[id].SolidBlocks[i]=SolidBlockFromId((byte)BlockId.GrassBlockClay, new Vector2(id*16, i*16));
                                        return;
                                    }
                                }
                            }
                            return;

                    }
                }
            }
        }

        //public void Connect() {
        //    clientSocket=new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp) {
        //        ReceiveTimeout=10
        //    };
        //    IPAddress ipAddress = ip;

        //    if (ipAddress.ToString()==IPAddress.Any.ToString()) { ipAddress=IPAddress.Loopback; ip=IPAddress.Loopback; }

        //    IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, port);

        //    Console.WriteLine("Připojování: "+ipAddress.ToString()+":"+port);

        //    clientSocket.BeginConnect(ipEndPoint, new AsyncCallback(OnCheck), null);
        //}

        //public void ConnectDuringGameError() {
        //    clientSocket=new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp) {
        //        ReceiveTimeout=10
        //    };
        //    IPAddress ipAddress = ip;

        //    if (ipAddress.ToString()==IPAddress.Any.ToString()) ipAddress=IPAddress.Loopback;

        //    IPEndPoint ipEndPoint = new IPEndPoint(ipAddress, port);

        //    Console.WriteLine("Znovupřipojování: "+ipAddress.ToString()+":"+port);

        //    clientSocket.BeginConnect(ipEndPoint, new AsyncCallback(OnCheck), null);
        //}

        //void SendMyInventory() {
        //    Data data = new Data {
        //        Cmd=Command.Message,
        //        To=toServer,
        //        Message="*int-set ",
        //    };

        //    data.Message+=maxInvCount+" ";

        //    for (int i = 0; i<maxInvCount; i++) {
        //        DInt p = Inventory[i];
        //        data.Message+=p.X+" "+p.Y+" ";
        //    }

        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=data.ToByte(),
        //            Importance=Importance.Middle,
        //        }
        //    );
        //}

        //void SendMachineInventory(int x, int y) {
        //    List<DInt> inv = null;
        //    int id = terrain[x].TopBlocks[y].Id;

        //    if (terrain[x].TopBlocks[y] is BoxBlock) {
        //        inv=((BoxBlock)terrain[x].TopBlocks[y]).Inv;
        //    } else if (terrain[x].TopBlocks[y] is MashineBlockBasic) {
        //        inv=((MashineBlockBasic)terrain[x].TopBlocks[y]).Inv;
        //    } else if (terrain[x].TopBlocks[y] is ShelfBlock) {
        //        inv=((ShelfBlock)terrain[x].TopBlocks[y]).Inv;
        //    } else return;

        //    Data data = new Data {
        //        Cmd=Command.Message,
        //        To=toServer,
        //        Message="*inv-machine-set "+x+" "+y+" ",
        //    };

        //    data.Message+=inv.Count+" ";

        //    for (int i = 0; i<inv.Count; i++) {
        //        DInt p = inv[i];
        //        data.Message+=p.X+" "+p.Y+" ";
        //    }

        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=data.ToByte(),
        //            Importance=Importance.Middle,
        //        }
        //    );
        //}

        //void GetMachineInventory(int x, int y) {
        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=new Data {
        //                Cmd=Command.Message,
        //                To=toServer,
        //                Message="*inv-machine-get "+x+" "+y,
        //            }.ToByte(),
        //            Importance=Importance.Middle,
        //        }
        //    );
        //}

        //void SendInventory() {
        //    // List<DInt> inv=null;


        //    Data data = new Data {
        //        Cmd=Command.Message,
        //        To=toServer,
        //        Message="*inv-set ",
        //    };

        //    data.Message+=maxInvCount+" ";

        //    for (int i = 0; i<maxInvCount; i++) {
        //        DInt p = Inventory[i];
        //        data.Message+=p.X+" "+p.Y+" ";
        //    }

        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=data.ToByte(),
        //            Importance=Importance.Middle,
        //        }
        //    );
        //}

        //void GetInventory() {
        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=new Data {
        //                Cmd=Command.Message,
        //                To=toServer,
        //                Message="*inv-get ",
        //            }.ToByte(),
        //            Importance=Importance.Middle,
        //        }
        //    );
        //}

        void CloseInv(bool machine) {
            if (inventoryChanged) {
                SendInventory();

                if (machine) SendMachineInventory(selectedMashine.X, selectedMashine.Y);
            }
            inventory=0;
        }

        #region Destroy
       void GetItemsFromMob(ushort type, int X, int Y) {
			int X16=X*16,Y16=Y*16;

			switch (type) {
				 case (ushort)BlockId.Chicken:
					if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatStraw, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.FlaxSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Seeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Hay, 1), X16, Y16);
					DropItemToPos(new ItemNonInvBasic((ushort)Items.RabbitMeat, 1), X16, Y16);
					return;

				case (ushort)BlockId.Rabbit:
					if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatStraw, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.FlaxSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Seeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Hay, 1), X16, Y16);
					DropItemToPos(new ItemNonInvBasic((ushort)Items.RabbitMeat, 1), X16, Y16);
					return;

				case (ushort)BlockId.MobParrot:
					if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatStraw, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.WheatSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.FlaxSeeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Seeds, 1), X16, Y16);
					else if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.Hay, 1), X16, Y16);
					DropItemToPos(new ItemNonInvBasic((ushort)Items.RabbitMeat, 1), X16, Y16);
					return;

				case (ushort)BlockId.Fish:
					DropItemToPos(new ItemNonInvBasic((ushort)Items.AnimalFish, 1), X16, Y16);
					if (FastRandom.Bool_12_5Percent()) DropItemToPos(new ItemNonInvBasic((ushort)Items.AnimalFish, 1), X16, Y16);
					return;
			}
		}
        float GetMobDestroingSpeed(byte type) {
            switch ((BlockId)type) {
                case BlockId.Rabbit: return 30;
                case BlockId.Chicken: return 30;
                case BlockId.Fish: return 30;
            }

            return 0;
        }
        void Destroy(int x, int y) {
			float destrustionSlow;
			{
				float distance=FastMath.DistanceInt(mousePosRoundX, mousePosRoundY, PlayerX, PlayerY);

				if (distance>DistanceBlockEdit) destrustionSlow=-1;
				else if (distance<DistanceBlockEdit/2) {
					destrustionSlow=1;
				} else {
					destrustionSlow=(float)Math.Pow(1.05,distance-DistanceBlockEdit/2);
				}
			}

			if (destrustionSlow>0) {
				if (Global.WorldDifficulty==2) {
					if (terrain[x].IsSolidBlocks[y]) {
						destroingIndex=0;
						destroingBlockType=terrain[x].SolidBlocks[y].Id;
						destringMaxIndex=10;
						destroyBlockX=x;
						destroyBlockY=y;

						destroingBlockDepth=BlockType.Solid;
						destroing=true;
						return;
					}

					foreach (Plant p in terrain[x].Plants) {
						if (p.Position.Y/16==y) {
							destroingIndex=0;
							destroingBlockType=p.Id;
							destringMaxIndex=10;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Plant;
							destroing=true;
							return;
						}
					}

					foreach (MMob m in terrain[x].Mobs) {
						if (m.Height==y) {
							destroingIndex=0;
							destroingBlockType=m.Id;
							destringMaxIndex=10;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Mob;
							destroing=true;
							return;
						}
					}

					if (terrain[x].IsTopBlocks[y]) {
						destroingBlockType=terrain[x].TopBlocks[y].Id;
						if (GameMethods.CanDestroy(destroingBlockType)) {
							destroingIndex=0;
							destringMaxIndex=10;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Top;
							destroing=true;
							return;
						} else destroing=false;
					}

					if (terrain[x].IsBackground[y]) {
						destroingIndex=0;
						destroingBlockType=terrain[x].Background[y].Id;
						destringMaxIndex=10;

						destroyBlockX=x;
						destroyBlockY=y;
						destroingBlockDepth=BlockType.Back;
						destroing=true;
						return;
					}
				} else {
					if (terrain[x].IsSolidBlocks[y]) {
						destroingIndex=0;
						destroingBlockType=terrain[x].SolidBlocks[y].Id;
						destringMaxIndex=GetSolidBlockDestroingSpeed(destroingBlockType)*destrustionSlow;
						destroyBlockX=x;
						destroyBlockY=y;
						destroingBlockDepth=BlockType.Solid;
						destroing=true;
						return;
					}

					foreach (Plant p in terrain[x].Plants) {
						if (p.Height==y) {
							destroingIndex=0;
							destroingBlockType=p.Id;
							destringMaxIndex=GetPlantDestroingSpeed(destroingBlockType)*destrustionSlow;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Plant;
							destroing=true;
							return;
						}
					}

					foreach (MMob m in terrain[x].Mobs) {
						if (m.Height==y) {
							destroingIndex=0;
							destroingBlockType=m.Id;
							destringMaxIndex=GetMobDestroingSpeed(destroingBlockType)*destrustionSlow;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Mob;
							destroing=true;
							return;
						}
					}

					if (terrain[x].IsTopBlocks[y]) {
						destroingBlockType=terrain[x].TopBlocks[y].Id;
						if (GameMethods.CanDestroy(destroingBlockType)) {
							destroingIndex=0;
							destringMaxIndex=GetTopBlockDestroingSpeed(destroingBlockType)*destrustionSlow;
							destroyBlockX=x;
							destroyBlockY=y;
							destroingBlockDepth=BlockType.Top;
							destroing=true;
							return;
						}else destroing=false;
					}

					if (terrain[x].IsBackground[y]) {
						destroingIndex=0;
						destroingBlockType=terrain[x].Background[y].Id;
						destringMaxIndex=GetBackBlockDestroingSpeed(destroingBlockType)*destrustionSlow;

						destroyBlockX=x;
						destroyBlockY=y;
						destroingBlockDepth=BlockType.Back;
						destroing=true;
						return;
					}
				}
			}
		}

        //void DestroyGrassUp(int x, int y) {
        //    if (terrain[x].IsTopBlocks[y]) {
        //        BlockId id = (BlockId)terrain[x].TopBlocks[y].Id;

        //        if (id==BlockId.Alore
        //        ||id==BlockId.Rose
        //        ||id==BlockId.Orchid
        //        ||id==BlockId.Dandelion
        //        ||id==BlockId.Violet
        //        ||id==BlockId.Heather
        //        ||id==BlockId.GrassDesert
        //        ||id==BlockId.GrassForest
        //        ||id==BlockId.GrassHills
        //        ||id==BlockId.GrassJungle
        //        ||id==BlockId.GrassPlains

        //        ||id==BlockId.BranchALittle1
        //        ||id==BlockId.BranchALittle2
        //        ||id==BlockId.BranchFull
        //        ||id==BlockId.BranchWithout

        //        ||id==BlockId.CherrySapling
        //        ||id==BlockId.AppleSapling
        //        ||id==BlockId.LemonSapling
        //        ||id==BlockId.LindenSapling
        //        ||id==BlockId.OakSapling
        //        ||id==BlockId.OrangeSapling
        //        ||id==BlockId.PineSapling
        //        ||id==BlockId.PlumSapling
        //        ||id==BlockId.SpruceSapling

        //        ||id==BlockId.Rocks

        //        ||id==BlockId.Boletus
        //        ||id==BlockId.Champignon
        //        ||id==BlockId.Toadstool) {
        //            destroingBlockDepth=BlockType.Top;
        //          //  GetItemsFromBlock((byte)id, x, y/*,destroingBlockDepth*/);
        //            terrain[x].IsTopBlocks[y]=false;

        //            terrain[x].TopBlocks[y]=null;
        //        }
        //    }

        //    foreach (Plant p in terrain[x].Plants) {
        //        if (p.Height==y) {
        //            destroingBlockDepth=0;
        //          //  GetItemsFromBlock(p.Id, x, y/*,destroingBlockDepth*/);
        //            terrain[x].Plants.Remove(p);
        //            RemovePlant(x);
        //            break;
        //        }
        //    }
        //}

        //void DestroySandUp(int x, int y) {
        //    if (terrain[x].IsTopBlocks[y]) {
        //        BlockId id = (BlockId)terrain[x].TopBlocks[y].Id;

        //        if (id==BlockId.Alore
        //        ||id==BlockId.GrassDesert
        //        ||id==BlockId.BranchALittle1
        //        ||id==BlockId.BranchALittle2
        //        ||id==BlockId.BranchFull
        //        ||id==BlockId.BranchWithout
        //        ||id==BlockId.Rocks) {
        //            GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
        //            terrain[x].IsTopBlocks[y]=false;
        //            terrain[x].TopBlocks[y]=null;
        //        }

        //        if (id==BlockId.CactusBig) {

        //            // current
        //            GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
        //            terrain[x].IsTopBlocks[y]=false;
        //            terrain[x].TopBlocks[y]=null;

        //            //if more
        //            for (int yy = y-1; yy>=0; yy--) {
        //                if (terrain[x].IsTopBlocks[yy]) {
        //                    BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

        //                    if (potencialCactus==BlockId.CactusBig) {
        //                        GetItemsFromBlock((byte)id, x, yy/*,BlockType.Top*/);
        //                        terrain[x].IsTopBlocks[yy]=false;
        //                        terrain[x].TopBlocks[yy]=null;
        //                    }
        //                } else return;
        //            }
        //        }

        //        if (id==BlockId.CactusSmall) {

        //            // current
        //            GetItemsFromBlock((byte)id, x, y/*,BlockType.Top*/);
        //            terrain[x].IsTopBlocks[y]=false;
        //            terrain[x].TopBlocks[y]=null;

        //            //if more
        //            for (int yy = y-1; yy>=0; yy--) {
        //                if (terrain[x].IsTopBlocks[yy]) {
        //                    BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

        //                    if (potencialCactus==BlockId.CactusSmall) {
        //                        GetItemsFromBlock((byte)id, x, yy/*,BlockType.Top*/);
        //                        terrain[x].IsTopBlocks[yy]=false;
        //                        terrain[x].TopBlocks[yy]=null;
        //                    }
        //                } else return;
        //            }
        //        }
        //    }
        //}

        //void DestroyCactusBig(int x, int y) {
        //    for (int yy = y-1; yy>=0; yy--) {
        //        if (terrain[x].IsTopBlocks[yy]) {
        //            BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

        //            if (potencialCactus==BlockId.CactusBig) {
        //                GetItemsFromBlock((byte)BlockId.CactusBig, x, yy/*,BlockType.Top*/);
        //                terrain[x].IsTopBlocks[yy]=false;
        //                terrain[x].TopBlocks[yy]=null;
        //            }
        //        } else return;
        //    }
        //}

        //void DestroyCactusSmall(int x, int y) {
        //    for (int yy = y-1; yy>=0; yy--) {
        //        if (terrain[x].IsTopBlocks[yy]) {
        //            BlockId potencialCactus = (BlockId)terrain[x].TopBlocks[yy].Id;

        //            if (potencialCactus==BlockId.CactusSmall) {
        //                SendRemovedBlock(x,y,)
        //                GetItemsFromBlock((byte)BlockId.CactusSmall, x, yy/*,BlockType.Top*/);
        //                terrain[x].IsTopBlocks[yy]=false;
        //                terrain[x].TopBlocks[yy]=null;
        //            }
        //        } else return;
        //    }
        //}

  //      void AutoDestroyLeaves(ushort wood, ushort leaves) {
		//	int Xran=terrainStartIndexX+FastRandom.Int(terrainStartIndexW-terrainStartIndexX),
		//		Yran=terrainStartIndexY+FastRandom.Int(terrainStartIndexH-terrainStartIndexY);

		//	if (terrain[Xran].IsTopBlocks[Yran]) {
		//		if (terrain[Xran].TopBlocks[Yran].Id==leaves) {

		//			//Rectangle
		//			int startX=Xran-4, startY=Yran-4, endX=Xran+4, endY=Yran+4;

		//			//Limit
		//			if (startX<0) startX=0;
		//			if (startY<0) startY=0;

		//			if (endX>TerrainLength) endX=TerrainLength;
		//			if (endY>120) endY=120;

		//			if (IsNotNearWood(wood, startX, startY, endX, endY)) {
		//				GetItemsFromBlock(leaves, Xran, Yran);
		//				Terrain chunk=terrain[Xran];

		//				List<UShortAndByte> listLeaves=((LeavesBlock)chunk.TopBlocks[Yran]).tree.TitlesLeaves;

		//				for (int i = 0; i<listLeaves.Count; i++) {
		//					if (listLeaves[i].X==Xran){
		//						if (listLeaves[i].Y==Yran) listLeaves.RemoveAt(i);
		//					}
		//				}
		//				chunk.TopBlocks[Yran]=null;
		//				chunk.IsTopBlocks[Yran]=false;
		//				chunk.RefreshLightingRemoveTop(Yran, leaves);
		//			}
		//		}
		//	}
		//}

  //      void AutoDestroyLeaves(ushort wood, ushort leaves, ushort alternativeLeaves) {
		//	int Xran=terrainStartIndexX+FastRandom.Int(terrainStartIndexW-terrainStartIndexX),
		//		Yran=terrainStartIndexY+FastRandom.Int(terrainStartIndexH-terrainStartIndexY);

		//	if (terrain[Xran].TopBlocksExists(Yran)) {
		//		MTerrain chunk=terrain[Xran];
		//		ushort id =chunk.TopBlocks[Yran].Id;
		//		if (id==leaves || id==alternativeLeaves) {

		//			//Rectangle
		//			int startX=Xran-4, startY=Yran-4, endX=Xran+4, endY=Yran+4;

		//			//Limit
		//			if (startX<0) startX=0;
		//			if (startY<0) startY=0;

		//			if (endX>TerrainLength) endX=TerrainLength;
		//			if (endY>120) endY=120;

		//			if (IsNotNearWood(wood, startX, startY, endX, endY)) {
		//				//GetItemsFromBlock(id, Xran, Yran);

		//				Tree tree=((LeavesBlock)chunk.TopBlocks[Yran]).tree;

		//				// if not Artifical leaves (created by player)
		//				if (tree!=null) {
		//					List<UShortAndByte> listLeaves=((LeavesBlock)chunk.TopBlocks[Yran]).tree.TitlesLeaves;

		//					for (int i = 0; i<listLeaves.Count; i++) {
		//						if (listLeaves[i].X==destroyBlockX) {
		//							if (listLeaves[i].Y==Yran) listLeaves.RemoveAt(i);
		//						}
		//					}
		//				}

		//				terrain[Xran].IsTopBlocks[Yran]=false;
		//				terrain[Xran].TopBlocks[Yran]=null;
		//				chunk.RefreshLightingRemoveTop(Yran,id);
		//			}
		//		}
		//	}
		//}

		//void AutoDestroyLeaves(ushort wood, ushort leaves, ushort alternativeLeaves, ushort alternativeLeaves2) {
		//	int Xran=terrainStartIndexX+FastRandom.Int(terrainStartIndexW-terrainStartIndexX),
		//		Yran=terrainStartIndexY+FastRandom.Int(terrainStartIndexH-terrainStartIndexY);

		//	if (terrain[Xran].IsTopBlocks[Yran]) {
		//		Terrain chunk=terrain[Xran];
		//		ushort id=chunk.TopBlocks[Yran].Id;
		//		if (id==leaves || id==alternativeLeaves|| id==alternativeLeaves2) {

		//			//Rectangle
		//			int startX=Xran-4, startY=Yran-4, endX=Xran+4, endY=Yran+4;

		//			//Limit
		//			if (startX<0) startX=0;
		//			if (startY<0) startY=0;

		//			if (endX>TerrainLength) endX=TerrainLength;
		//			if (endY>120) endY=120;

		//			if (IsNotNearWood(wood, startX, startY, endX, endY)) {
		//				GetItemsFromBlock(id, Xran, Yran);

		//				Tree tree=((LeavesBlock)chunk.TopBlocks[Yran]).tree;

		//				// if not Artifical leaves (created by player)
		//				if (tree!=null) {
		//					List<UShortAndByte> listLeaves=((LeavesBlock)chunk.TopBlocks[Yran]).tree.TitlesLeaves;

		//					for (int i = 0; i<listLeaves.Count; i++) {
		//						if (listLeaves[i].X==destroyBlockX) {
		//							if (listLeaves[i].Y==Yran) listLeaves.RemoveAt(i);
		//						}
		//					}
		//				}
		//				terrain[Xran].IsTopBlocks[Yran]=false;
		//				terrain[Xran].TopBlocks[Yran]=null;
		//				chunk.RefreshLightingRemoveTop(Yran, id);
		//			}
		//		}
		//	}
		//}

		//bool IsNotNearWood(ushort wood, int startX, int startY, int endX, int endY) {
		//	for (int x=startX; x<endX; x++) {
		//		Terrain chunk=terrain[x];
		//		for (int y=startY; y<endY; y++) {
		//			if (chunk.IsBackground[y]) {
		//				if (chunk.Background[y].Id==wood) return false;
		//			}
		//		}
		//	}
		//	return true;
		//}

        #endregion

        #region Dropped items
        //void ItemDrop(int id, int count, DInt _pos) {
        //    DroppedItems.Add(new Item {
        //        X=_pos.X,
        //        Y=_pos.Y,
        //        Count=count,
        //        Texture=ItemIdToTexture(id),
        //        Id=(Items)id,
        //    });
        //}

        //void ItemDrop(int id, int count, int x, int y) {
        //    DroppedItems.Add(new Item {
        //        X=x,
        //        Y=y,
        //        Count=count,
        //        Texture=ItemIdToTexture(id),
        //        Id=(Items)id,
        //    });
        //}
        //void DropItemToPos(DInt d, Items i) {
        //    DroppedItems.Add(new Item {
        //        X=d.X,
        //        Y=d.Y,
        //        Id=i,
        //        Texture=ItemIdToTexture((int)i)
        //    });
        //}

        //void DropItemToPos(int x, int y, Items i) {
        //    DroppedItems.Add(new Item {
        //        X=x,
        //        Y=y,
        //        Id=i,
        //        Texture=ItemIdToTexture((int)i)
        //    });
        //}
        void ItemDrop(ItemNonInv item, int x, int y) {
			DroppedItems.Add(new Item {
				X=x,
				Y=y,
				item=item,
				Texture=ItemIdToTexture(item.Id),
			});
		}
        #endregion

        #region Terrain
        //void Save(int pos) {
        //    using (FileStream stream = new FileStream(playedWorld+"\\Earth\\Terrain ["+pos+"].rch", FileMode.Create, FileAccess.Write)) {
        //        List<byte> backBlocks=new List<byte>();
        //        List<byte> solidBlocks= new List<byte>();
        //        List<byte> topBlocks= new List<byte>();

        //        byte backblockzeros=0;
        //        byte topblockzeros = 0;
        //        byte solidblockzeros = 0;

        //        for (int i=0; i<125; i++) {

        //            // Back blocks
        //            if (terrain[pos].IsBackground[i]) {

        //                if (backblockzeros!=0) {
        //                    if (backblockzeros>2){
        //                        backBlocks.Add(1);
        //                        backBlocks.Add(backblockzeros);
        //                    } else{
        //                        for (int j=0; j<backblockzeros; j++) backBlocks.Add(0);
        //                    }
        //                    backblockzeros=0;
        //                }

        //                backBlocks.Add(terrain[pos].Background[i].Id);

        //            } else {
        //                backblockzeros++;
        //            }


        //            // Solid blocks
        //            if (terrain[pos].IsSolidBlocks[i]) {

        //                if (solidblockzeros!=0) {
        //                    if (solidblockzeros>2) {
        //                        solidBlocks.Add(1);
        //                        solidBlocks.Add(solidblockzeros);
        //                    } else {
        //                        for (int j = 0; j<solidblockzeros; j++) solidBlocks.Add(0);
        //                    }
        //                    solidblockzeros=0;
        //                }

        //                solidBlocks.Add(terrain[pos].SolidBlocks[i].Id);
        //            } else {
        //                solidblockzeros++;
        //            }


        //            // Top blocks
        //            if (terrain[pos].IsTopBlocks[i]) {

        //                if (topblockzeros!=0) {
        //                    if (topblockzeros>2) {
        //                        topBlocks.Add(1);
        //                        topBlocks.Add(topblockzeros);
        //                    }else {
        //                        for (int j = 0; j<topblockzeros; j++) topBlocks.Add(0);
        //                    }
        //                    topblockzeros=0;
        //                }

        //                byte id=terrain[pos].TopBlocks[i].Id;
        //                topBlocks.Add(id);

        //                if (id==(byte)BlockId.FurnaceStone) {
        //                    MashineBlockBasic block=(MashineBlockBasic)terrain[pos].TopBlocks[i];

        //                    topBlocks.Add((byte)block.Inv[0].X);
        //                    topBlocks.Add((byte)block.Inv[0].Y);

        //                    topBlocks.Add((byte)block.Inv[1].X);
        //                    topBlocks.Add((byte)block.Inv[1].Y);

        //                    topBlocks.Add((byte)block.Inv[2].X);
        //                    topBlocks.Add((byte)block.Inv[2].Y);

        //                    topBlocks.Add((byte)block.Inv[3].X);
        //                    topBlocks.Add((byte)block.Inv[3].Y);

        //                    topBlocks.Add((byte)(block.Energy*255));
        //                } else if (id==(byte)BlockId.Shelf) {
        //                    List<DInt> inv=((ShelfBlock)terrain[pos].TopBlocks[i]).Inv;

        //                    foreach (DInt d in inv){
        //                        topBlocks.Add((byte)d.X);
        //                        topBlocks.Add((byte)d.Y);
        //                    }
        //                } else if (id==(byte)BlockId.BoxWooden) {
        //                    List<DInt> inv=((BoxBlock)terrain[pos].TopBlocks[i]).Inv;


        //                    foreach (DInt d in inv){
        //                        topBlocks.Add((byte)d.X);
        //                        topBlocks.Add((byte)d.Y);
        //                    }
        //                } else if (id==(byte)BlockId.BoxAdv) {
        //                    List<DInt> inv=((BoxBlock)terrain[pos].TopBlocks[i]).Inv;

        //                    foreach (DInt d in inv){
        //                        topBlocks.Add((byte)d.X);
        //                        topBlocks.Add((byte)d.Y);
        //                    }
        //                }
        //            } else {
        //                topblockzeros++;
        //            }
        //        }

        //        if (backblockzeros>2) {
        //            backBlocks.Add(1);
        //            backBlocks.Add(backblockzeros);
        //        }else{
        //            for (int j = 0; j<backblockzeros; j++) backBlocks.Add(0);
        //        }

        //        if (solidblockzeros>2) {
        //            solidBlocks.Add(1);
        //            solidBlocks.Add(solidblockzeros);
        //        } else {
        //            for (int j = 0; j<solidblockzeros; j++) solidBlocks.Add(0);
        //        }

        //        if (topblockzeros>2) {
        //            topBlocks.Add(1);
        //            topBlocks.Add(topblockzeros);
        //        } else {
        //            for (int j = 0; j<topblockzeros; j++) topBlocks.Add(0);
        //        }

        //        List<byte> plants=new List<byte>();
        //        foreach (Plant m in terrain[pos].Plants) {
        //            plants.Add(m.Id);
        //            plants.Add(m.Height);
        //            plants.Add(m.Grow);
        //        }

        //        List<byte> mobs = new List<byte>();
        //        foreach (Mob m in terrain[pos].Mobs) {
        //            mobs.Add(m.Id);
        //            mobs.Add((byte)(m.Position.Y/16));
        //            mobs.Add(m.Lives);
        //            mobs.Add(m.Dir ? (byte)1 : (byte)0);
        //        }


        //        stream.WriteByte(terrain[pos].LightPos);

        //        stream.Write(backBlocks.ToArray(),0,backBlocks.ToArray().Length);
        //        stream.Write(solidBlocks.ToArray(),0,solidBlocks.ToArray().Length);
        //        stream.Write(topBlocks.ToArray(),0,topBlocks.ToArray().Length);

        //        stream.Write(plants.ToArray(),0,plants.ToArray().Length);
        //        stream.WriteByte(1);
        //        stream.Write(mobs.ToArray(),0,mobs.ToArray().Length);
        //    }
        //}

        //void Load(int pos) {
        //    if (File.Exists(playedWorld+ @"Earth\Terrain ["+pos+"].rch")) {
        //        using (StreamReader sr = new StreamReader(playedWorld+ @"Earth\Terrain ["+pos+"].rch")) {
        //            BinaryReader br = new BinaryReader(sr.BaseStream);

        //            //  terrain[pos]
        //            MTerrain chunk=terrain[pos]=new MTerrain(){
        //                LightPos=br.ReadByte(),
        //            };
        //            chunk.LightVec=new Vector2(pos*16-48+8,chunk. LightPos*16-48+8);
        //            chunk.LightPos16=chunk.LightPos*16;
        //            int ss=125;

        //            //0=nic
        //            //1=připrav se, další byte o přeskočení

        //            //BackBlocks
        //            for (int lenght=0; lenght<125; lenght++) {
        //                byte input = br.ReadByte();

        //                if (input>1){
        //                    Block block=BackBlockFromId(input, new Vector2(pos*16, lenght*16));
        //                    if (block!=null){
        //                        if (ss>lenght) ss=lenght;
        //                        chunk.Background[lenght]=block;
        //                        chunk.IsBackground[lenght]=true;
        //                    }
        //                } else if (input==1) lenght+=br.ReadByte()-1;
        //            }

        //            // SolidBlocks
        //            for (int lenght=0; lenght<125; lenght++) {
        //                byte input = br.ReadByte();

        //                if (input>1){
        //                    Block block=SolidBlockFromId(input, new Vector2(pos*16, lenght*16));
        //                    if (block!=null){
        //                        if (ss>lenght) ss=lenght;
        //                        chunk.SolidBlocks[lenght]=block;
        //                        chunk.IsSolidBlocks[lenght]=true;
        //                    }
        //                } else if (input==1)lenght+=br.ReadByte()-1;
        //            }

        //            // TopBlocks
        //            for (int lenght=0; lenght<125; lenght++) {
        //                byte input = br.ReadByte();

        //                if (input>1){
        //                    Block block=TopBlockFromId(input, new Vector2(pos*16, lenght*16));
        //                    if (block!=null){
        //                        if (ss>lenght) ss=lenght;

        //                        chunk.IsTopBlocks[lenght]=true;
        //                        chunk.TopBlocks[lenght]=block;

        //                        if (input==(int)BlockId.Label) {
        //                            SetIndexLabel(pos, lenght);
        //                            if (lenght!=0 && lenght!=125) RefreshAroundLabels(pos, lenght);
        //                        } else if (input==(int)BlockId.FurnaceStone) {
        //                            ((MashineBlockBasic)block).Inv=new List<DInt>(){
        //                                // Wood
        //                                new DInt(br.ReadByte(),br.ReadByte()),
        //                                new DInt(br.ReadByte(),br.ReadByte()),
        //                                new DInt(br.ReadByte(),br.ReadByte()),

        //                                //Ash
        //                                new DInt(br.ReadByte(),br.ReadByte()),
        //                            };

        //                            //Energy
        //                            ((MashineBlockBasic)block).Energy=br.ReadByte()/255f;
        //                        } else if (input==(int)BlockId.Shelf) {
        //                            ((ShelfBlock)block).Inv=new List<DInt>(){
        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
        //                                new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
        //                            };

        //                            if (((ShelfBlock)block).Inv[4].X!=0){
        //                                Texture2D tex=ItemIdToTexture(((ShelfBlock)block).Inv[4].X);
        //                                if (text!=null){
        //                                    ((ShelfBlock)block).SmalItemTexture=tex;
        //                                    ((ShelfBlock)block).IsSmallItem=true;
        //                                }
        //                            }
        //                        } else if (input==(int)BlockId.BoxWooden) {
        //                            ((BoxBlock)block).Inv=new List<DInt>();
        //                            for (int i=0; i<2*12;i++)((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(),br.ReadByte()));

        //                        }else if (input==(int)BlockId.BoxAdv) {
        //                            ((BoxBlock)block).Inv=new List<DInt>();
        //                            for (int i=0; i<4*14;i++)((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(),br.ReadByte()));
        //                        }
        //                    }
        //                } else if (input==1) lenght+=br.ReadByte()-1;
        //            }

        //            {
        //                for (int i=0; i<64;i++){
        //                    if (br.BaseStream.Position==br.BaseStream.Length)break;
        //                    byte input=br.ReadByte();
        //                    if (input==1)break;

        //                    Plant plant=GetPlantFromId(input, br.ReadByte(),br.ReadByte(),pos);
        //                    if (plant!=null)chunk.Plants.Add(plant);

        //                }

        //                    for (int i=0; i<64;i++){
        //                    if (sr.BaseStream.Position==sr.BaseStream.Length)break;
        //                    byte input=br.ReadByte();
        //                    if (input==1)break;

        //                    switch ((BlockId)input) {
        //                        case BlockId.Fish:
        //                            chunk.Mobs.Add(new Fish(input,br.ReadByte(), br.ReadByte(), pos,br.ReadByte()==1, fishTexture0, fishTexture1, FastRandom));
        //                            break;

        //                        case BlockId.Chicken:
        //                            chunk.Mobs.Add(new Chicken(input, br.ReadByte(),br.ReadByte(), pos, br.ReadByte()==1, chickenWalkTexture, chickenEatTexture, FastRandom));
        //                            break;

        //                        case BlockId.Rabbit:
        //                            chunk.Mobs.Add(new Rabbit(input,br.ReadByte(), br.ReadByte(), pos, br.ReadByte()==1, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture, FastRandom));
        //                            break;
        //                    }
        //                }
        //            }

        //            //    (byte)sr.ReadByte();

        //            chunk.StartSomething=ss;
        //        }
        //    }
        //}

       // void LoadFromBytes(byte[] bytes, int pos) {
       //     using (MemoryStream sr = new MemoryStream(bytes)) {
       //         BinaryReader br = new BinaryReader(sr);

       //         //  terrain[pos]
       //         MTerrain chunk = terrain[pos];
       //         chunk.LightPos=br.ReadByte();
       //         //   Console.WriteLine("v "+chunk.LightPos);
       //         chunk.LightVec=new Vector2(pos*16-48+8, chunk.LightPos*16-48+8+48);
       //         chunk.LightPos16=chunk.LightPos*16;

       //         int ss = 125;

       //         //0=nic
       //         //1=připrav se, další byte o přeskočení

       //         //BackBlocks
       //         for (int lenght = 0; lenght<125; lenght++) {
       //             byte input = br.ReadByte();

       //             if (input>1) {
       //                 Block block = BackBlockFromId(input, new Vector2(pos*16, lenght*16));
       //                 if (block!=null) {
       //                     if (ss>lenght) ss=lenght;
       //                     chunk.Background[lenght]=block;
       //                     chunk.IsBackground[lenght]=true;
       //                 }
       //             } else if (input==1) lenght+=br.ReadByte()-1;
       //         }

       //         // SolidBlocks
       //         for (int lenght = 0; lenght<125; lenght++) {
       //             byte input = br.ReadByte();

       //             if (input>1) {
       //                 Block block = SolidBlockFromId(input, new Vector2(pos*16, lenght*16));
       //                 if (block!=null) {
       //                     if (ss>lenght) ss=lenght;
       //                     chunk.SolidBlocks[lenght]=block;
       //                     chunk.IsSolidBlocks[lenght]=true;
       //                 }
       //             } else if (input==1) lenght+=br.ReadByte()-1;
       //         }

       //         // TopBlocks
       //         for (int lenght = 0; lenght<125; lenght++) {
       //             byte input = br.ReadByte();

       //             if (input>1) {
       //                 Block block = TopBlockFromId(input, new Vector2(pos*16, lenght*16));
       //                 if (block!=null) {
       //                     if (ss>lenght) ss=lenght;

       //                     chunk.IsTopBlocks[lenght]=true;
       //                     chunk.TopBlocks[lenght]=block;

       //                     if (input==(int)BlockId.Label) {
       //                         SetIndexLabel(pos, lenght);
       //                         if (lenght!=0&&lenght!=125) RefreshAroundLabels(pos, lenght);
       //                     } else if (input==(int)BlockId.FurnaceStone) {
       //                         ((MashineBlockBasic)block).Inv=new List<DInt>(){
       //                             // Wood
       //                             new DInt(br.ReadByte(),br.ReadByte()),
       //                             new DInt(br.ReadByte(),br.ReadByte()),
       //                             new DInt(br.ReadByte(),br.ReadByte()),

       //                             //Ash
       //                             new DInt(br.ReadByte(),br.ReadByte()),
       //                         };

       //                         //Energy
       //                         ((MashineBlockBasic)block).Energy=br.ReadByte()/255f;
       //                     } else if (input==(int)BlockId.Shelf) {
       //                         ((ShelfBlock)block).Inv=new List<DInt>(){
       //                             new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
       //                             new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
       //                             new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()), new DInt(br.ReadByte(),br.ReadByte()),
       //                         };

       //                         if (((ShelfBlock)block).Inv[4].X!=0) {
       //                             Texture2D tex = ItemIdToTexture(((ShelfBlock)block).Inv[4].X);
       //                             if (text!=null) {
       //                                 ((ShelfBlock)block).SmalItemTexture=tex;
       //                                 ((ShelfBlock)block).IsSmallItem=true;
       //                             }
       //                         }
       //                     } else if (input==(int)BlockId.BoxWooden) {
       //                         ((BoxBlock)block).Inv=new List<DInt>();
       //                         for (int i = 0; i<2*12; i++) ((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(), br.ReadByte()));

       //                     } else if (input==(int)BlockId.BoxAdv) {
       //                         ((BoxBlock)block).Inv=new List<DInt>();
       //                         for (int i = 0; i<4*14; i++) ((BoxBlock)block).Inv.Add(new DInt(br.ReadByte(), br.ReadByte()));
       //                     }
       //                 }
       //             } else if (input==1) lenght+=br.ReadByte()-1;
       //         }

       //         {
       //             for (int i = 0; i<64; i++) {
       //                 if (br.BaseStream.Position==br.BaseStream.Length) break;
       //                 byte input = br.ReadByte();
       //                 if (input==1) break;

       //                 Plant plant = GetPlantFromId(input, br.ReadByte(), br.ReadByte(), (short)pos);
       //                 if (plant!=null) chunk.Plants.Add(plant);

       //             }

       //             for (int i = 0; i<64; i++) {
       //                 if (sr.Position==sr.Length) break;
       //                 byte input = br.ReadByte();
       //                 if (input==1) break;

       //                 switch ((ushort)input) {
       //                     case (ushort)BlockId.Fish:
							//	chunk.Mobs.Add(new Fish(/*mobId,*/ y, x,FastRandom.Bool(), fishTexture0, fishTexture1));
							//	break;

							//case (ushort)BlockId.Chicken:
							//	chunk.Mobs.Add(new Chicken(y, x, FastRandom.Bool(), chickenWalkTexture, chickenEatTexture));
							//	break;

							//case (ushort)BlockId.Rabbit:
							//	chunk.Mobs.Add(new Rabbit(y, x, FastRandom.Bool(), rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture));
							//	break;

							//case (ushort)BlockId.MobParrot:
							//	chunk.Mobs.Add(new Parrot(y, x, FastRandom.Bool(), false, TextureParrotStill, TextureParrotFly));
							//	break;
       //                 }
       //             }
       //         }

       //         chunk.StartSomething=(byte)ss;
       //         chunk.state=MChunkState.Downloaded;
       //         // terrain[pos]=chunk;
       //     }
       // }

        unsafe void Load(int pos, byte[] bytes) {
			List<DInt> labels=new();

			fixed (byte* pointer = &bytes[0]) {
					byte* current=pointer;

					#if DEBUG
					SaveType lastSaveType=SaveType.Unknown;
					#endif

					MTerrain chunk=terrain[pos]=new MTerrain {
						LightPosFull=*current++,
						LightPosHalf=*current++,
					};

					int pos16=pos*16;
					chunk.LightPosHalf16=chunk.LightPosHalf*16;
					chunk.LightPosFull16=chunk.LightPosFull*16;
					chunk.LightVec=new Vector2(pos16-48+8,chunk.LightPosFull16-48+8+48);

					int  StartSomething=0;
					bool startingSomething=true;

					for (int length=0; length<125;) {
						byte way = *current++;

						switch (way) {
							// 0: 1× air (nothing)
							case (byte)SaveType.Air:
								length++;
								break;

							// 1: ?× air (nothing)
							case (byte)SaveType.AirMultiple:
								length+=*current++;
								break;

							// 1× solid block
							case (byte)SaveType.SolidBlock:
								{
                                    #if DEBUG
									ushort id=(ushort)(*current++ | (*current++ << 8));
                                    Block block=SolidBlockFromId(id, new Vector2(pos16, length*16));
                                    chunk.SolidBlocks[length]=block ?? throw new Exception("Solid block "+id+" is null");
                                    #else
                                    chunk.SolidBlocks[length]=SolidBlockFromId((ushort)(*current++ | (*current++ << 8)), new Vector2(pos16, length*16));
									#endif

									chunk.IsSolidBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× solid block
							case (byte)SaveType.SolidBlockWithLowId:
								{
                                    #if DEBUG
									ushort id=(ushort)*current++;
                                    Block block=SolidBlockFromId(id, new Vector2(pos16, length*16));
                                    chunk.SolidBlocks[length]=block ?? throw new Exception("Solid block "+id+" is null");
                                    #else
                                    chunk.SolidBlocks[length]=SolidBlockFromId((ushort)*current++, new Vector2(pos16, length*16));
									#endif
									// ushort id=*current++;

									//chunk.SolidBlocks[length]=SolidBlockFromId(/*id*/(ushort)*current++, new Vector2(pos16, length*16))
									//	#if DEBUG
									//	??throw new Exception("Solid block is null")
									//	#endif
									//	;

									chunk.IsSolidBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// ?× solid block
							case (byte)SaveType.SolidBlockMultiple:
								{
									ushort id=(ushort)(*current++ | (*current++ << 8));

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=SolidBlockFromId(id, new Vector2(pos16, length*16));

									chunk.SolidBlocks[length]=block
										#if DEBUG
										??throw new Exception("Solid block is null")
										#endif
										;

									chunk.IsSolidBlocks[length]=true;
									length++;

									for (; length<to; length++) {
										chunk.SolidBlocks[length]=block=block.CloneDown();

										chunk.IsSolidBlocks[length]=true;
									}
								}
								break;

							// ?× solid block
							case (byte)SaveType.SolidBlockWithLowIdMultiple:
								{
									ushort id=*current++;
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=SolidBlockFromId(id, new Vector2(pos16, length*16));

									chunk.SolidBlocks[length]=block
										#if DEBUG
										??throw new Exception("Solid block is null");
										#endif
										;
									chunk.IsSolidBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										chunk.SolidBlocks[length]=block=block.CloneDown();
										chunk.IsSolidBlocks[length]=true;
									}
								}
								break;

							// 1× back block
							case (byte)SaveType.BackBlock:
								{
									//  ushort id=(ushort)(*current++ | (*current++ << 8));

									//  chunk.SolidBlocks[length]=new AirSolidBlock {
										/* Back=*/chunk.Background[length]=BackBlockFromId(/*id*/(ushort)(*current++ | (*current++ << 8)), new Vector2(pos16, length*16))
											#if DEBUG
											??throw new Exception("Back block is null")
											#endif
											//  ,
									//}
									;
									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}
									length++;
								}
								break;

							// 1× back block
							case (byte)SaveType.BackBlockWithLowId:
								{
									// ushort id=*current++;

									chunk.Background[length]=BackBlockFromId((ushort)*current++, new Vector2(pos16, length*16))
										#if DEBUG
										??throw new Exception("Back block is null")
										#endif
									;

									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}
									length++;
								}
								break;

							// ?× back block
							case (byte)SaveType.BackBlockMultiple:
								{
									ushort id=(ushort)(*current++ | (*current++ << 8));
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=BackBlockFromId(id, new Vector2(pos16, length*16));



								// chunk.SolidBlocks[length]=new AirSolidBlock {
								/*Back=*/
								chunk.Background[length]=block
									#if DEBUG
									??throw new Exception("Back block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block")//,
									#endif
								;
								//};
									chunk.IsBackground[length]=true;

									length++;

									for (; length<to; length++) {
										// chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Back=*/chunk.Background[length]=block=block.CloneDown();/*,*/
										//};
										chunk.IsBackground[length]=true;
									}
								}
								break;

							// ?× back block
							case (byte)SaveType.BackBlockWithLowIdMultiple:
								{
									ushort id=*current++;
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=BackBlockFromId(id, new Vector2(pos16, length*16));

									//  chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Back=*/chunk.Background[length]=block
											#if DEBUG
											??throw new Exception("Back block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block")
											#endif
											;
										//,
									// };
									chunk.IsBackground[length]=true;

									length++;

									for (; length<to; length++) {
										//  chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Back=*/chunk.Background[length]=block=block.CloneDown()/*,*/;
										// };
										chunk.IsBackground[length]=true;
									}
								}
								break;

							// 1× only top block (no more load)
							case (byte)SaveType.TopBlock:
								{
									// ushort id=(ushort)(*current++ | (*current++ << 8));

									// chunk.SolidBlocks[length]=new AirSolidBlock {
										/* Top=*/chunk.TopBlocks[length]=TopBlockFromId((ushort)(*current++ | (*current++ << 8))/*id*/, new Vector2(pos16, length*16))
											#if DEBUG
											?? throw new Exception("Top block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block")
											#endif
											;
											//  ,
									// };
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× only top block (no more load)
							case (byte)SaveType.TopBlockWithLowId:
								{
									//  ushort id=*current++;

									chunk.TopBlocks[length]=TopBlockFromId(/*id*/(ushort)*current++, new Vector2(pos16, length*16))
										#if DEBUG
										??throw new Exception("Top block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block")
										#endif
									;

									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// ?× only top block (no more load)
							case (byte)SaveType.TopBlockMultiple:
								{
									ushort id=(ushort)(*current++ | (*current++ << 8));
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=TopBlockFromId(id, new Vector2(pos16, length*16))
									#if DEBUG
									?? throw new Exception("Top block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block");
									#endif
								;
									//  chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=block/*,*/;
									//};
									chunk.IsTopBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										// chunk.SolidBlocks[length]=new AirSolidBlock {
											/* Top=*/chunk.TopBlocks[length]=block=block.CloneDown()/*,*/;
										//};
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// ?× only top block (no more load)
							case (byte)SaveType.TopBlockWithLowIdMultiple:
								{
									ushort id=*current++;
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=TopBlockFromId(id, new Vector2(pos16, length*16))
										#if DEBUG
										?? throw new Exception("Top block is null, možná špatně naprogramováno načítání terénu, nebo v BackBlockFromId není zaregistrován block")
										#endif
									;
									chunk.TopBlocks[length]=block;
									chunk.IsTopBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										chunk.TopBlocks[length]=block=block.CloneDown();
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// 1× back and top block
							case (byte)SaveType.BackBlockAndTopBlock:
								{
									ushort idBack=(ushort)(*current++ | (*current++ << 8)),
											idTop=(ushort)(*current++ | (*current++ << 8));

									Vector2 vec=new(pos16, length*16);

									chunk.Background[length]=BackBlockFromId(idBack, vec)
										#if DEBUG
										??throw new Exception("Back block is null")
										#endif
									;
									chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
										#if DEBUG
										??throw new Exception("Top block with id "+(BlockId)idTop+" is null")
										#endif
									;
									
									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block
							case (byte)SaveType.BackBlockWithLowIdAndTopBlock:
								{
									ushort idBack=*current++,
											idTop=(ushort)(*current++ | (*current++ << 8));

									Vector2 vec=new(pos16, length*16);

									chunk.Background[length]=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null");
										#endif
									;
									chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block with id "+(BlockId)idTop+" is null");
										#endif
									;
									
									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block
							case (byte)SaveType.BackBlockAndTopBlockWithLowId:
								{
									ushort idBack=(ushort)(*current++ | (*current++ << 8)),
											idTop=*current++;

									Vector2 vec=new(pos16, length*16);

									chunk.Background[length]=BackBlockFromId(idBack, vec)
										#if DEBUG
										??throw new Exception("Back block is null")
										#endif
									;
									chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
										#if DEBUG
										??throw new Exception("Top block with id "+(BlockId)idTop+" is null")
										#endif
									;
									
									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockWithLowId:
								{
									ushort idBack=*current++,
											idTop=*current++;

									Vector2 vec=new(pos16, length*16);
									
									chunk.Background[length]=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null")
										#endif
									;

									chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block with id "+(BlockId)idTop+" is null")
										#endif
									;

									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// ?× back and top block
							case (byte)SaveType.BackBlockAndTopBlockMultiple:
								{
									ushort idBack=(ushort)(*current++ | (*current++ << 8)),
											idTop=(ushort)(*current++ | (*current++ << 8));

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Vector2 vec=new(pos16, length*16);

									Block blockBack = BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null")
										#endif
									;
									Block blockTop = TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null")
										#endif
									;

									chunk.Background[length]=blockBack;
									chunk.TopBlocks[length]=blockTop;


									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										// chunk.SolidBlocks[length]=new AirSolidBlock {
											/* Back=*/chunk.Background[length]=blockBack=blockBack.CloneDown();//,
											/*Top=*/chunk.TopBlocks[length]=blockTop=blockTop.CloneDown();
										//   };

										chunk.IsBackground[length]=true;
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// ?× back and top block
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockMultiple:
								{
									ushort idBack=*current++,
											idTop=(ushort)(*current++ | (*current++ << 8));

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Vector2 vec=new(pos16, length*16);

										chunk.Background[length]=BackBlockFromId(idBack, vec)
											#if DEBUG
											?? throw new Exception("Back block is null")
											#endif
										;
										chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
											#if DEBUG
											?? throw new Exception("Top block is null")
											#endif
										;

										chunk.IsBackground[length]=true;
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// ?× back and top block
							case (byte)SaveType.BackBlockAndTopBlockWithLowIdMultiple:
								{
									ushort idBack=(ushort)(*current++ | (*current++ << 8)),
											idTop=*current++;

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Vector2 vec=new(pos16, length*16);
									
										chunk.TopBlocks[length]=TopBlockFromId(idTop, vec)
											#if DEBUG
											?? throw new Exception("Top block is null")
											#endif
										;

										chunk.Background[length]=BackBlockFromId(idBack, vec)
											#if DEBUG
											?? throw new Exception("Back block is null");
											#endif
										;

										chunk.IsBackground[length]=true;
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// ?× back and top block
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockWithLowIdMultiple:
								{
									ushort idBack=*current++,
											idTop=*current++;

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Vector2 vec=new(pos16, length*16);


									Block blockBack=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null")
										#endif
									;
									Block blockTop=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null")
										#endif
									;


									// chunk.SolidBlocks[length]=new AirSolidBlock {
										/* Back=*/chunk.Background[length]=blockBack/*,*/;
										/*Top=*/chunk.TopBlocks[length]=blockTop;
									//  };

									chunk.IsBackground[length]=true;
									chunk.IsTopBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										//chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Back=*/chunk.Background[length]=blockBack=blockBack.CloneDown()/*,*/;
											/*Top=*/chunk.TopBlocks[length]=blockTop=blockTop.CloneDown();
										// };

										chunk.IsBackground[length]=true;
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// 1× top block (+ more load)
							case (byte)SaveType.TopBlockMoreLoad:
								{
									ushort id=(ushort)(*current++ | (*current++ << 8));

									Block block=TopBlockFromId(id, new Vector2(pos16, length*16));

									#if DEBUG
									if (block==null) throw new Exception("Top block is null");
									#endif

									LoadMashine(id, block);

									//chunk.SolidBlocks[length]=new AirSolidBlock {
										/* Top=*/chunk.TopBlocks[length]=block/*,*/;
									// };
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× top block (+ more load)
							case (byte)SaveType.TopBlockWithLowIdMoreLoad:
								{
									ushort id=*current++;

									Block block=TopBlockFromId(id, new Vector2(pos16, length*16));

									#if DEBUG
									if (block==null) throw new Exception("Top block is null");
									#endif

									LoadMashine(id, block);

									// chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=block/*,*/;
									//};
									chunk.IsTopBlocks[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// ?× top block (+ more load)
							case (byte)SaveType.TopBlockMoreLoadMultiple:
								{
									ushort id=(ushort)(*current++ | (*current++ << 8));
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Block block=TopBlockFromId(id, new Vector2(pos16, length*16));

										#if DEBUG
										if (block==null) throw new Exception("Top block is null");
										#endif

										LoadMashine(id,block);

										//  chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Top=*/chunk.TopBlocks[length]=block;//,
										//};
										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// ?× top block (+ more load)
							case (byte)SaveType.TopBlockWithLowIdMoreLoadMultiple:
								{
									ushort id=*current++;
									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Block block=TopBlockFromId(id, new Vector2(pos16, length*16));

									#if DEBUG
									if (block==null) throw new Exception("Top block is null");
									#endif

									LoadMashine(id,block);

									//   chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=block/*,*/;
									// };
									chunk.IsTopBlocks[length]=true;

									length++;

									for (; length<to; length++) {
										//   chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Top=*/chunk.TopBlocks[length]=block=block.CloneDown();//,
										// };

										LoadMashine(id,block);

										chunk.IsTopBlocks[length]=true;
									}
								}
								break;

							// 1× back and top block (+ more load)
							case (byte)SaveType.BackBlockAndTopBlockWithLowIdMoreLoad:
								{
									ushort idBack=(ushort)(*current++ | (*current++ << 8)),
										idTop=*current++;

									Vector2 vec=new(pos16, length*16);

									Block blockBack=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null");
										#endif
									;
									Block blockTop=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null");
										#endif
									;


									LoadMashine(idTop, blockTop);

									// chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=blockTop/*,*/;
										/*Back=*/chunk.Background[length]=blockBack;
									//};
									chunk.IsTopBlocks[length]=true;
									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block (+ more load)
							case (byte)SaveType.BackBlockAndTopBlockMoreLoad:
								{
									ushort idTop=(ushort)(*current++ | (*current++ << 8));

									Vector2 vec=new(pos16, length*16);
									Block blockTop=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null")
										#endif
									;
									Block blockBack=BackBlockFromId((ushort)(*current++ | (*current++ << 8)), vec)
										#if DEBUG
										?? throw new Exception("Back block is null");
										#endif
									;


									LoadMashine(idTop, blockTop);

									// chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=blockTop/*,*/;
										/*Back=*/chunk.Background[length]=blockBack;
									// };
									chunk.IsTopBlocks[length]=true;
									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block (+ more load)
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockMoreLoad:
								{
									ushort idBack=*current++,
										idTop=(ushort)(*current++ | (*current++ << 8));

									Vector2 vec=new(pos16, length*16);
									Block blockTop=TopBlockFromId(idTop, vec);
									//  Block blockBack=;


									LoadMashine(idTop, blockTop);

									chunk.TopBlocks[length]=blockTop
										#if DEBUG
										?? throw new Exception("Top block is null")
										#endif
									;

									chunk.Background[length]=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null")
										#endif
									;
									// };
									chunk.IsTopBlocks[length]=true;
									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// 1× back and top block (+ more load)
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockWithLowIdMoreLoad:
								{
									ushort idBack=*current++,
										idTop=*current++;

									Vector2 vec=new(pos16, length*16);
									chunk.Background[length]=/*Block blockBack=*/BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null");
										#endif
									;
									Block blockTop=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null");
										#endif
									;


									LoadMashine(idTop, blockTop);

									//  chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=blockTop;//,
										// /*Back=*/blockBack;
									// };
									chunk.IsTopBlocks[length]=true;
									chunk.IsBackground[length]=true;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									length++;
								}
								break;

							// ?× back and top block (+ more load)
							case (byte)SaveType.BackBlockAndTopBlockMoreLoadMultiple:
								{
									ushort idBack=(ushort)(*current++ | *current++ << 8),
										idTop=(ushort)(*current++ | *current++ << 8);

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Vector2 vec=new(pos16, length*16);

										Block blockTop=TopBlockFromId(idTop, vec)
											#if DEBUG
											?? throw new Exception("Top block is null");
											#endif
										;
										LoadMashine(idTop, blockTop);

										chunk.TopBlocks[length]=blockTop;

										chunk.Background[length] = BackBlockFromId(idBack, vec)
											#if DEBUG
											?? throw new Exception("Back block is null");
											#endif
										;

										chunk.IsTopBlocks[length]=true;
										chunk.IsBackground[length]=true;

									}
								}
								break;

							// ?× back and top block (+ more load)
							case (byte)SaveType.BackBlockAndTopBlockWithLowIdMoreLoadMultiple:
								{
									ushort idBack=(ushort)(*current++ | *current++ << 8),
										idTop=*current++;

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Vector2 vec=new(pos16, length*16);

										Block blockTop=TopBlockFromId(idTop, vec)
											#if DEBUG
											?? throw new Exception("Top block is null")
											#endif
										;

										LoadMashine(idTop, blockTop);

										chunk.TopBlocks[length]=blockTop;

										chunk.Background[length]=BackBlockFromId(idBack, vec)
												#if DEBUG
											?? throw new Exception("Back block is null")
											#endif
										;

										chunk.IsTopBlocks[length]=true;
										chunk.IsBackground[length]=true;
									}
								}
								break;

							// ?× back and top block (+ more load)
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockMoreLoadMultiple:
								{
									ushort idBack=*current++,
										idTop=(ushort)(*current++ | *current++ << 8);

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									for (; length<to; length++) {
										Vector2 vec=new(pos16, length*16);

										Block blockTop=TopBlockFromId(idTop, vec);
										// Block blockBack=BackBlockFromId(idBack, vec);

										#if DEBUG
										if (blockTop==null) throw new Exception("Top block is null");
										//  if (blockBack==null) throw new Exception("Back block is null");
										#endif


										LoadMashine(idTop, blockTop);

										// chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Top=*/chunk.TopBlocks[length]=blockTop/*,*/;
											/*Back=*/chunk.Background[length]=/*blockBack*/BackBlockFromId(idBack, vec)
											#if DEBUG
										?? throw new Exception("Back block is null")
										#endif

										;
										//  };
										chunk.IsTopBlocks[length]=true;
										chunk.IsBackground[length]=true;
									}
								}
								break;

							// ?× back and top block (+ more load)
							case (byte)SaveType.BackBlockWithLowIdAndTopBlockWithLowIdMoreLoadMultiple:
								{
									ushort idBack=*current++,
										idTop=*current++;

									int to=length+*current++;

									if (startingSomething) {
										startingSomething=false;
										StartSomething=length;
									}

									Vector2 vec=new(pos16, length*16);

									Block blockBack=BackBlockFromId(idBack, vec)
										#if DEBUG
										?? throw new Exception("Back block is null")
										#endif
									;
									Block blockTop=TopBlockFromId(idTop, vec)
										#if DEBUG
										?? throw new Exception("Top block is null")
										#endif
									;


									LoadMashine(idTop, blockTop);

									//  chunk.SolidBlocks[length]=new AirSolidBlock {
										/*Top=*/chunk.TopBlocks[length]=blockTop/*,*/;
										/* Back=*/chunk.Background[length]=blockBack;
									// };
									chunk.IsTopBlocks[length]=true;
									chunk.IsBackground[length]=true;

									length++;

									for (; length<to; length++) {
										//   chunk.SolidBlocks[length]=new AirSolidBlock {
											/*Top=*/chunk.TopBlocks[length]=blockTop=blockTop.CloneDown()/*,*/;
											/* Back=*/chunk.Background[length]=blockBack=blockBack.CloneDown();
										// };

										LoadMashine(idTop, blockTop);

										chunk.IsTopBlocks[length]=true;
										chunk.IsBackground[length]=true;
									}
								}
								break;

							default:
								#if DEBUG
								throw new Exception("SaveType "+(SaveType)way+" is not defined in switch, maybe programer created mistake in "+lastSaveType);
								#else
								break;
								#endif

						}

						void LoadMashine(ushort id, Block block) {
							switch (id) {
								case (ushort)BlockId.WaterSalt:
									((Water)block).Mass(*current++);
									break;

								case (ushort)BlockId.WaterBlock:
									((Water)block).Mass(*current++);
									break;

								case (ushort)BlockId.Label:
									labels.Add(new DInt{X=pos, Y=length });
									break;

								case (ushort)BlockId.Shelf:
									LoadInventoryMashine(((ShelfBlock)block).Inv,InvMaxShelf);

									if (((ShelfBlock)block).Inv[4].Id!=0) {
										switch (((ShelfBlock)block).Inv[4]) {
											case ItemInvBasic16 item:
												((ShelfBlock)block).SmalItemTexture=item.Texture;
												((ShelfBlock)block).IsSmallItem=true;
												break;

											case ItemInvBasic32 item:
												((ShelfBlock)block).SmalItemTexture=item.Texture;
												((ShelfBlock)block).IsSmallItem=true;
												break;

											case ItemInvTool16 item:
												((ShelfBlock)block).SmalItemTexture=item.Texture;
												((ShelfBlock)block).IsSmallItem=true;
												break;

											case ItemInvTool32 item:
												((ShelfBlock)block).SmalItemTexture=item.Texture;
												((ShelfBlock)block).IsSmallItem=true;
												break;
										}
									}
									break;

								case (ushort)BlockId.BoxWooden:
									LoadInventoryMashine(((BoxBlock)block).Inv=new ItemInv[InvMaxBoxWooden], InvMaxBoxWooden);
									break;

								case (ushort)BlockId.BoxAdv:
									LoadInventoryMashine(((BoxBlock)block).Inv=new ItemInv[InvMaxBoxAdv], InvMaxBoxAdv);
									break;

								case (ushort)BlockId.Flag:
									windable.Add(new ShortAndByte(pos, length));
									break;

								case (ushort)BlockId.BucketForRubber:
									bucketRubber.Add(new ShortAndByte(pos,length));
									break;

								case (ushort)BlockId.Windmill:
									windable.Add(new ShortAndByte(pos,length));
									break;

								case (ushort)BlockId.FurnaceStone:
									{
										MashineBlockBasic fs = (MashineBlockBasic)block;

										fs.Energy=*current++/255f;

										LoadInventoryMashine(fs.Inv,InvMaxFurnaceStone);

										FurnaceStone.Add(new ShortAndByte(pos, length));
									}
								break;

								case (ushort)BlockId.Charger:
									LoadInventoryMashine(((MashineBlockBasic)block).Inv=new ItemInv[1],1);
									Chargers.Add(new ShortAndByte(pos, length));
									break;

								case (ushort)BlockId.OxygenMachine:
									LoadInventoryMashine(((MashineBlockBasic)block).Inv=new ItemInv[1],1);
									((MashineBlockBasic)block).Energy=*current++/255f;
									OxygenMachines.Add(new ShortAndByte(pos, length));
									break;

								case (ushort)BlockId.Miner:
									LoadInventoryMashine(((MashineBlockBasic)block).Inv=new ItemInv[InvMaxMiner],InvMaxMiner);
									Miners.Add(new ShortAndByte(pos, length));
									break;

								case (ushort)BlockId.Composter:
									LoadInventoryMashine(((MashineBlockBasic)block).Inv=new ItemInv[InvMaxComposter],InvMaxComposter);
									Composters.Add(new ShortAndByte(pos, length));
									break;

								//case (ushort)BlockId.OakWood:
								//case (ushort)BlockId.SpruceWood:
								//case (ushort)BlockId.PineWood:
								//case (ushort)BlockId.LindenWood:
								//case (ushort)BlockId.AppleWood:
								//case (ushort)BlockId.CherryWood:
								//case (ushort)BlockId.PlumWood:
								//case (ushort)BlockId.LemonWood:
								//case (ushort)BlockId.OrangeWood:
								//case (ushort)BlockId.WillowWood:
								//case (ushort)BlockId.MangroveWood:
								//case (ushort)BlockId.EucalyptusWood:
								//case (ushort)BlockId.OliveWood:
								//case (ushort)BlockId.RubberTreeWood:
								//case (ushort)BlockId.AcaciaWood:
								//case (ushort)BlockId.KapokWood:
								//    {
								//        int index=(*current++) | (*current++>>8) | (*current++>>16);
								//        if (treeIndex<index) LiveObjects.Add(new Tree());

								//        WoodBlock wood=(WoodBlock)block;
								//        LiveObjects[treeIndex].
								//    }
								//    break;

								//case (ushort)BlockId.LindenLeaves:
								//case (ushort)BlockId.AppleLeaves:
								//case (ushort)BlockId.AppleLeavesWithApples:
								//case (ushort)BlockId.EucalyptusLeaves:
								//case (ushort)BlockId.CherryLeavesWithCherries:
								//case (ushort)BlockId.PineLeaves:
								//case (ushort)BlockId.PlumLeaves:
								//case (ushort)BlockId.PlumLeavesWithPlums:
								//case (ushort)BlockId.CherryLeaves:
								//case (ushort)BlockId.OrangeLeaves:
								//case (ushort)BlockId.OrangeLeavesWithOranges:
								//case (ushort)BlockId.WillowLeaves:
								//case (ushort)BlockId.RubberTreeLeaves:
								//case (ushort)BlockId.LemonLeaves:
								//case (ushort)BlockId.OliveLeavesWithOlives:
								//case (ushort)BlockId.LemonLeavesWithLemons:
								//case (ushort)BlockId.MangroveLeaves:
								//case (ushort)BlockId.AcaciaLeaves:
								//case (ushort)BlockId.KapokLeacesFlowering:
								//case (ushort)BlockId.KapokLeacesFibre:
								//case (ushort)BlockId.KapokLeaces:
								//case (ushort)BlockId.OliveLeaves:
								//case (ushort)BlockId.OakLeaves:
								//case (ushort)BlockId.SpruceLeaves:
								//    {
								//        int index=(*current++) | (*current++>>8) | (*current++>>16);
								//        if (index>treeIndex)
								//    }
								//    break;

								case (ushort)BlockId.Barrel:
									{
										Barrel barrel=(Barrel)block;

										barrel.LiquidId=*current++;
										barrel.LiquidAmount=*current++ /*| (*current++ << 8)*/;

										LoadInventoryMashine(barrel.Inv=new ItemInv[InvMaxBarrel], InvMaxBarrel);

										//  Barrels.Add(new ShortAndByte(pos, length));
									}
									break;
							}
						}

						#if DEBUG
						lastSaveType=(SaveType)way;
						#endif
					}

					void LoadInventoryMashine(ItemInv[] a, int max) {
						for (int i = 0; i<max; i++) {
							ushort id = (ushort)(*current++ | (*current++<<8));
							if (id==0) a[i]=itemBlank;
							else {
								if (GameMethods.IsItemInvBasic16(id)) {
									a[i]=new ItemInvBasic16(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8))/*, 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvBasic32(id)) {
									a[i]=new ItemInvBasic32(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8))/*, 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvTool32(id)) {
									a[i]=new ItemInvTool32(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8))/*, GameMethods.ToolMax(id), 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvFood16(id)) {
									a[i]=new ItemInvFood16(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8)), /*GameMethods.FoodMaxCount(id),*/ /*(ushort)*/GetFloat()/*(float)(*current++ | (*current++<<8)), GameMethods.FoodMaxDescay(id), 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvTool16(id)) {
									a[i]=new ItemInvTool32(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8)) /*,GameMethods.ToolMax(id), 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvBasicColoritzed32NonStackable(id)) {
									a[i]=new ItemInvBasicColoritzed32NonStackable(ItemIdToTexture(id), id, new Color(*current++, *current++, *current++)/*, 0, 0*/);
									continue;
								}

								if (GameMethods.IsItemInvNonStackable32(id)) {
									a[i]=new ItemInvNonStackable32(ItemIdToTexture(id), id, 0, 0);
									continue;
								}

								if (GameMethods.IsItemInvFood32(id)) {
									a[i]=new ItemInvFood32(ItemIdToTexture(id), id, /*(ushort)*/(*current++ | (*current++<<8)), GetFloat()/*GameMethods.FoodMaxCount(id),*/ /*(ushort)(float)(*current++ | (*current++<<8))*//*, GameMethods.FoodMaxDescay(id), 0, 0*/);
									continue;
								}

								#if DEBUG
								throw new Exception("Missing category for item "+(Items)id+".\r\nWhy?\r\nUp missing code IsItemInv... or item is not in categories");
								#else
								a[i]=itemBlank;
								#endif
							}
						}
					}

					#region Plants
					{
						int count=*current++;
						for (int i=0; i<count; i++) {
							ushort id=(ushort)((*current++<<8) | *current++);
							Plant plant=GetPlantFromId(id, *current++, *current++, (short)pos);
							#if DEBUG
							if (plant==null)throw new Exception("plant with id='"+id+"' is null");
							#endif
							//if (plant!=null) {
							chunk.Plants.Add(plant);
							RegisterPlant(plant.chunkId);
							// }
						}
					}
					#endregion

					#region Mobs
					{
						int count=*current++;
						for (int i=0; i<count; i++) {
							ushort id=(ushort)((*current++<<8) | *current++);

							switch (id) {
								case (ushort)BlockId.Fish:
									chunk.Mobs.Add(new MFish(/*id,*/ *current++, pos,*current++==1, fishTexture0, fishTexture1));
									break;

								case (ushort)BlockId.Chicken:
									chunk.Mobs.Add(new MChicken(/*id,*/ *current++, pos, *current++==1, chickenWalkTexture, chickenEatTexture));
									break;

								case (ushort)BlockId.Rabbit:
									chunk.Mobs.Add(new MRabbit(/*id,*/*current++, pos, *current++==1, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture));
									break;

								case (ushort)BlockId.MobParrot:
									{
									//	bool fly=;
										if (*current++==1) chunk.Mobs.Add(new MParrot(*current++, pos, *current++==1, new Vector2( ((*current++<<8) | *current++)*16, (*current++)*16),TextureParrotStill, TextureParrotFly));
										else chunk.Mobs.Add(new MParrot(*current++, pos, *current++==1, TextureParrotStill, TextureParrotFly));
									}
									break;
									#if DEBUG
								default:
									throw new Exception("mob is null");
									//   #else
									// Try repair
									//*current++;
									//   *current++;
									// break;
									#endif
							}
						}
					}
					#endregion

					chunk.StartSomething=StartSomething;


					float GetFloat() {
						int n=*current++ | (*current++ << 8) | (*current++ << 16) | (*current++ << 24);
						return *(float*)&n;
					}
				}

			foreach (DInt l in labels) {
				SetIndexLabel(l.X,l.Y);
				if (l.Y!=0 && l.Y!=125) RefreshAroundLabels(l.X,l.Y);
			}

			//fixed (byte* pointer = &arrayLO[0]) {
			//	byte* current=pointer;

			//	int totalLO=(*current++) | (*current++<<8) | (*current++<<16);
			//	LiveObjects=new LiveObject[totalLO];

			//	for (int i=0; i<totalLO; i++) {
			//		switch (*current++) {
			//			case (byte)LiveObjectType.Tree:
			//				{
			//					Tree tree=new(

			//						// Root
			//						*current++ | (*current++<<8),
			//						*current++
			//					);
			//					LiveObjects[i]=tree;

			//					// Total wood
			//					int countWood=*current++;

			//					// Add wood
			//					for (int i2=0; i2<countWood; i2++) {
			//						ushort x=(ushort)(*current++ | (*current++<<8));
			//						byte y=*current++;
			//						if (terrain[x].IsBackground[y]) {
			//							((WoodBlock)terrain[x].Background[y]).tree=tree;

			//							tree.TitlesWood.Add(new UShortAndByte(x, y));
			//						}
			//					}

			//					// Total leaves
			//					int countLeaves=*current++;

			//					// Add leaves
			//					for (int i2=0; i2<countLeaves; i2++) {
			//						ushort x=(ushort)(*current++ | (*current++<<8));
			//						byte y=*current++;

			//						if (terrain[x].TopBlocks[y] is LeavesBlock block) {
			//							block.tree=tree;
			//							block.SetOrigin();

			//							tree.TitlesLeaves.Add(new UShortAndByte(x, y));
			//						}
			//					}
			//				}
			//				break;

			//			case (byte)LiveObjectType.Cactus:
			//				{
			//					Cactus cactus=new(

			//						// Root
			//						*current++ | (*current++<<8),
			//						*current++
			//					);
			//					LiveObjects[i]=cactus;

			//					// Total
			//					int count=*current++;

			//					// Add
			//					for (int i2=0; i2<count; i2++) {
			//						ushort x=(ushort)(*current++ | (*current++<<8));
			//						byte y=*current++;
			//						if (terrain[x].TopBlocks[y] is CactusBlock c){
			//							c.cactus=cactus;
			//							c.SetOrigin();

			//							cactus.Titles.Add(new UShortAndByte(x, y));

			//						}
			//					}
			//				}
			//				break;
			//		}
			//	}
			//	LiveObjects=LiveObjects.OrderBy(i => i.Root.X).ToArray();
			//}

			//if (world=="Earth"){
			//	if (File.Exists(pathToWorld+world+"Biomes.ter")){
			//		byte[] arrayBiomes=File.ReadAllBytes(pathToWorld+world+"Biomes.ter");

			//		fixed (byte* pointer = &arrayBiomes[0]) {
			//			byte* current=pointer;

			//			int count=*current++;
			//			Biomes=new BiomeData[count];
			//			for (int i = 0; i<count; i++) {
			//				Biomes[i]=new BiomeData {
			//					Name=(Biome)(*current++),
			//					Start=*current++ | (*current++<<8),
			//					End=*current++ | (*current++<<8),
			//				};
			//			}
			//		}

			//	} else {
			//		System.Windows.Forms.MessageBox.Show("Biomes file not found","Error");
			//		throw new Exception("Biomes file not found");
			//	}
			//}else{
			//	switch (world){
			//		case "Moon":
			//			Biomes=new BiomeData[]{ new BiomeData{ Name=Biome.Moon, Start=0, End=TerrainLength } };
			//			break;

			//		case "Mars":
			//			Biomes=new BiomeData[]{ new BiomeData{ Name=Biome.Mars, Start=0, End=TerrainLength} };
			//			break;

			//		case "SpaceStation":
			//			Biomes=new BiomeData[]{ new BiomeData{ Name=Biome.Mars, Start=0, End=TerrainLength} };
			//			break;
			//	}

			//}
		}


        //void RefreshLighting(int pos) {
        //    int LightPos;
        //    for (LightPos=0; LightPos<125; LightPos++) {
        //        if (terrain[pos].IsSolidBlocks[LightPos]==MBlockState.Exists) break;
        //    }

        //    if (terrain[pos].LightPos!=(byte)LightPos) {
        //        terrain[pos].LightPos=(byte)LightPos;
        //        terrain[pos].LightVec=new Vector2(pos*16-48+8, LightPos*16-48+8+48);
        //        terrain[pos].LightPos16=LightPos*16;

        //        byte StartSomething;
        //        for (StartSomething=0; StartSomething<125; StartSomething++) {
        //            if (terrain[pos].IsBackground[StartSomething]==MBlockState.Exists) break;
        //            if (terrain[pos].IsSolidBlocks[StartSomething]==MBlockState.Exists) break;
        //            if (terrain[pos].IsTopBlocks[StartSomething]==MBlockState.Exists) break;
        //        }

        //        terrain[pos].StartSomething=StartSomething;
        //    }
        //}

        #endregion

        #region Networking
        //void SolveErrorDuringGame(int errorCode, string info, string more) {
        //    if (current==Current.ErrorDuringGame) {
        //        ShowError(info, more);
        //    } else {
        //        // current==Current.ErrorDuringGame
        //        // Stávající připojení bylo ukončeno vzdáleným hostitelem
        //        if (errorCode==10054) {
        //            try {
        //                clientSocket.Close();
        //                clientSocket.Dispose();
        //            } catch (Exception ex) {
        //                Console.WriteLine("SolveErrorDuringGame 1 "+ex.Message);
        //            }

        //            ConnectDuringGameError();
        //        } else {
        //            ShowError(info, more);
        //        }
        //    }
        //}

        //public void SendRemovedBlock(int x, int y, int id, BlockType bt) {
        //    sendedBlockToRemove.Add(new SendedBlockToRemove {
        //        blockPos=new DInt(x,y),
        //        blockType=bt,
        //        World="Earth",
        //        sended=DateTime.Now,
        //    });

        //    switch (bt) {
        //        case BlockType.Back:
        //            terrain[x].IsBackground[y]=MBlockState.TmpRemoved;
        //            break;

        //        case BlockType.Solid:
        //            terrain[x].IsSolidBlocks[y]=MBlockState.TmpRemoved;
        //            break;

        //        case BlockType.Top:
        //            terrain[x].IsTopBlocks[y]=MBlockState.TmpRemoved;
        //            break;

        //        case BlockType.Plant:
        //            terrain[x].Plants.[y]=MBlockState.TmpRemoved;
        //            break;

        //        case BlockType.Mob:
        //            terrain[x].IsTopBlocks[y]=MBlockState.TmpRemoved;
        //            break;
        //    }

        //    Queue.Add(new DataToSend {
        //        Importance=Importance.Middle,
        //        Bytes=new Data {
        //            Cmd=Command.EditTerrain,
        //            From=Setting.Name,
        //            To=toServer,
        //            Message="-|"+x+"|"+y+"|"+world+"|"+(int)BlockType.Top+"|"+id+"|",
        //        }.ToByte(),
        //    });
        //}

        //void DoCommand() {
        //    if (!text.StartsWith("*")) return;

        //    string[] word = text.Split(' ');
        //    word[0]=word[0].ToLower();

        //    switch (word[0]) {
        //        case "*spawn":
        //            if (tpSpawn) {
        //                if (word.Length==1) {
        //                    PlayerX=spawnX;
        //                    PlayerY=spawnY;
        //                    DisplayText("Byl jsi teleportován na spawn");
        //                } else DisplayText("Za příkaz *spawn nic nepište");
        //            } else DisplayText("Na tento příkaz namáte oprávnění");
        //            return;

        //        case "*ping":
        //            if (cmdPing) {
        //                if (word.Length==1) {
        //                    DisplayText("Počkejte chviličku...");
        //                    diserpeard=250;
        //                    Data msg = new Data {
        //                        Cmd=Command.Request,
        //                        //     From=Setting.Name,
        //                        To=toServer,
        //                    };
        //                    Queue.Add(new DataToSend {
        //                        Bytes=msg.ToByte(),
        //                        Importance=Importance.VeryImportant
        //                    });
        //                }
        //            }
        //            DisplayText("Na tento příkaz namáte oprávnění");
        //            return;

        //        case "*players":
        //            if (word.Length==1) {
        //                string t = "";
        //                foreach (Player p in players) t+=p.name+", ";

        //                DisplayText(t);
        //            }
        //            return;

        //        case "*help":
        //            if (word.Length==1) {
        //                string t = "players, help, ";
        //                if (tpSpawn) t+="spawn, ";
        //                if (cmdPing) t+="ping, ";
        //                if (tpPlayer) t+="tp, ";
        //                DisplayText(t);
        //            }
        //            return;

        //        //case "*web":
        //        //    if (cmdWeb){
        //        //        if (word.Length==1) {
        //        //            System.Diagnostics.Process.Start(web);
        //        //            DisplayText("Otevírá se..."+web);
        //        //        }
        //        //    } else DisplayText("Na tento příkaz namáte oprávnění");
        //        //    return;


        //        case "*tp":
        //            if (tpPlayer) {
        //                if (word.Length==2) {
        //                    bool notExists = true;

        //                    foreach (Player p in players) {
        //                        if (word[1]==p.name) {
        //                            notExists=false;

        //                            if (tpPlayerMessage) {

        //                                Data msg = new Data {
        //                                    Cmd=Command.PlayersTeleportMessageToTarget,
        //                                    //  From=Setting.Name,
        //                                    To=toServer,
        //                                    Message="3|"+p.name,
        //                                };

        //                                Queue.Add(new DataToSend {
        //                                    Bytes=msg.ToByte(),
        //                                    Importance=Importance.High
        //                                });
        //                                tpPlayerTime=DateTime.Now;

        //                                DisplayText("Odesílám požadavek o teleportaci ...");
        //                                tpPlayerMsgWaiting=p.name;
        //                                return;
        //                            } else {
        //                                PlayerX=p.x;
        //                                PlayerY=p.y;
        //                                DisplayText("Teleportace úspěštná");
        //                                return;
        //                            }
        //                        }

        //                        if (notExists) {
        //                            DisplayText("Hráč nenelezen");
        //                        }
        //                    }
        //                }
        //            } else if (tpEverywhere) {
        //                if (word.Length==3) {
        //                    if (int.TryParse(word[1], out int x)) {
        //                        if (int.TryParse(word[2], out int y)) {
        //                            PlayerX=x;
        //                            PlayerY=y;
        //                        } else {
        //                            DisplayText("Použití: \"*tp <x> <y>\"; y je číslo");
        //                        }
        //                    } else {
        //                        if (int.TryParse(word[2], out int y)) {
        //                            DisplayText("Použití: \"*tp <x> <y>\"; x je číslo");
        //                        } else {
        //                            DisplayText("Použití: \"*tp <x> <y>\"; x a y je číslo");
        //                        }
        //                    }
        //                }
        //            } else {
        //                DisplayText("Na tento příkaz namáte oprávnění");
        //            }
        //            return;

        //        case "*warp-set":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //  From=Setting.Name,
        //                        To=toServer,
        //                        Message="*warp-set "+word[1]+" "+PlayerX+" "+PlayerY,
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //                DisplayText("Nastavuji warp "+word[1]);
        //            }
        //            break;

        //        case "*warp":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        Message="*warp "+word[1],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*kick":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        Message="*kick "+word[1],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*ban":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        Message="*ban "+word[1],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*unban":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //    From=Setting.Name,
        //                        To=toServer,
        //                        Message="*unban "+word[1],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*warp-remove":
        //            if (word.Length==2) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        Message="*warp-remove "+word[1],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*group-set":
        //            if (word.Length==3) {
        //                Queue.Add(new DataToSend {
        //                    Bytes=new Data {
        //                        Cmd=Command.Message,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        Message="*group-set "+word[1]+" "+word[2],
        //                    }.ToByte(),
        //                    Importance=Importance.Middle
        //                });
        //            }
        //            break;

        //        case "*itemsclear":
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    Cmd=Command.Message,
        //                    //   From=Setting.Name,
        //                    To=toServer,
        //                    Message="*itemsclear",
        //                }.ToByte(),
        //                Importance=Importance.Middle
        //            });
        //            break;

        //        case "*server-backup":
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    Cmd=Command.Message,
        //                    //   From=Setting.Name,
        //                    To=toServer,
        //                    Message="*server-backup",
        //                }.ToByte(),
        //                Importance=Importance.Middle
        //            });
        //            break;

        //        case "*server-reset":
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    Cmd=Command.Message,
        //                    //  From=Setting.Name,
        //                    To=toServer,
        //                    Message="*server-reset",
        //                }.ToByte(),
        //                Importance=Importance.Middle
        //            });
        //            break;

        //        case "*server-end":
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    Cmd=Command.Message,
        //                    //  From=Setting.Name,
        //                    To=toServer,
        //                    Message="*server-end",
        //                }.ToByte(),
        //                Importance=Importance.Middle
        //            });
        //            break;

        //        case "*changepassword":
        //            password=new Password();
        //            password.Show();
        //            break;

        //        case "*spawn-set":
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    Cmd=Command.Message,
        //                    //   From=Setting.Name,
        //                    To=toServer,
        //                    Message="*spawn-set "+PlayerX+" "+PlayerY,
        //                }.ToByte(),
        //                Importance=Importance.Middle
        //            });
        //            break;

        //        case "*gamemode":
        //            if (word.Length==2) {
        //                if (word[1]=="Dobrodružná"||word[1]=="Výzkum"||word[1]=="Kreativní"
        //                    ||word[1]=="0"||word[1]=="1"||word[1]=="2"
        //                    ||word[1]=="d"||word[1]=="v"||word[1]=="k") {
        //                    Queue.Add(new DataToSend {
        //                        Bytes=new Data {
        //                            Cmd=Command.Message,
        //                            //   From=Setting.Name,
        //                            To=toServer,
        //                            Message="*gamemode "+word[1],
        //                        }.ToByte(),
        //                        Importance=Importance.Middle
        //                    });
        //                } else DisplayText("Neplatný příkaz, zkus \"*help\"");
        //            }
        //            break;

        //        default:
        //            DisplayText("Neplatný příkaz, zkus \"*help\"");
        //            return;
        //    }
        //}

        //void OnCheck(IAsyncResult ar) {
        //    try {
        //        state++;
        //        clientSocket.EndConnect(ar);

        //        Data msgToSend = new Data {
        //            Cmd=Command.Check,
        //            //       From=Setting.Name,
        //            To=toServer,
        //            Message=""
        //        };

        //        byteData=msgToSend.ToByte();

        //        clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

        //        byteData=new byte[1024];

        //        clientSocket.BeginReceive(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnReceive), null);

        //        //current=Current.EndChecking;
        //        state++;
        //    } catch (SocketException ex) {

        //        //Nemohlo být vytvořeno žádné připojení, protože cílový počítač je aktivně odmítl
        //        if (10061==ex.ErrorCode) {
        //            ShowError("Nelze se připojit k serveru", "Žádný server není spuštěn na adrese "+ip+":"+port);
        //        } else {
        //            //Pokus o připojení selhal, protože připojená strana v časovém intervalu řádně neodpověděla, nebo vytvořené připojení selhalo, protože neodpověděl připojený hostitel
        //            if (10060==ex.ErrorCode) {
        //                ShowError("Nelze se připojit k serveru", "Připojování trvalo příliš dlouho.");
        //            } else if (10013==ex.ErrorCode) {
        //                ShowError("Nelze se připojit k serveru", "Pravděpodobně Váš firewall blokuje připojení (Zkuste ho vypnout)");
        //            } else ShowError("Nelze se připojit k serveru", "Neznámá chyba v OnCheck: "+ex.Message+"; Kód: "+ex.ErrorCode);
        //        }
        //    }

        //    //if (!Global.OnlineAccount){
        //    //    string url="https://geftgames.ga/System/rabcr/ifplayerexists.php?username="+Setting.Name;
        //    //    MyWebClient wc=new MyWebClient {
        //    //        Encoding=Encoding.UTF8,
        //    //    };
        //    //    try{
        //    //        string get=wc.DownloadString(new Uri(url));
        //    //         Console.WriteLine(6);
        //    //        if (string.IsNullOrEmpty(get)) {
        //    //            ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
        //    //        } else {
        //    //            string[]g=get.Split('|');

        //    //            if (g.Length>1){
        //    //                switch (g[0]) {
        //    //                    case "E":

        //    //                        break;

        //    //                    case "O":
        //    //                        //ok
        //    //                        ShowError("Tento účet již existuje", "Někdo si již takovou přezdívku používá");
        //    //                        break;

        //    //                    default:
        //    //                       // ShowError("Tento účet již existuje", "Někdo si již takovou přezdívku používá");
        //    //                        break;
        //    //                }
        //    //            } else {
        //    //                ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
        //    //            }
        //    //        }
        //    //    }catch{
        //    //        ShowError("Nelze zkontrolovat hráče", "Nelze ověřit zda již takový účet neexistuje");
        //    //    }
        //    //}

        //}

        //void OnConnectDuringGameError(IAsyncResult ar) {

        //    try {

        //        clientSocket.EndConnect(ar);

        //        Data msgToSend = new Data {
        //            Cmd=Command.ConnectDuringGame,
        //            //       From=Setting.Name,
        //            To=toServer,
        //            Message=""
        //        };

        //        byteData=msgToSend.ToByte();
        //        clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

        //        byteData=new byte[1024];
        //        clientSocket.BeginReceive(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnReceive), null);

        //        //current=Current.EndChecking;
        //        state++;
        //    } catch (SocketException ex) {

        //        //Nemohlo být vytvořeno žádné připojení, protože cílový počítač je aktivně odmítl
        //        if (10061==ex.ErrorCode) {
        //            ShowError("Nelze se připojit k serveru", "Pravděpodobně není spuštěn server.");
        //        } else {
        //            //Pokus o připojení selhal, protože připojená strana v časovém intervalu řádně neodpověděla, nebo vytvořené připojení selhalo, protože neodpověděl připojený hostitel
        //            if (10060==ex.ErrorCode) {
        //                ShowError("Nelze se připojit k serveru", "Připojování trvalo příliš dlouho.");
        //            } else {
        //                ShowError("Nelze se připojit k serveru", "Neznámá chyba v OnConnectDuringGameError: "+ex.Message);
        //            }
        //        }
        //    }
        //}

        //void OnSend(IAsyncResult ar) {
        //    try {
        //        // clientSocket.Connected
        //        //Process=0.55f;
        //        clientSocket.EndSend(ar);
        //        //Process=1f;
        //        //ready=true;
        //        //Loading=false;
        //    } catch (SocketException ex) {
        //        //Console.WriteLine(ex.ErrorCode+" 2 "+ex.Message);
        //        ////Process=1f;
        //        //ready=true;
        //        //Error=true;
        //        //ErrorCode=ex.Message;
        //        if (!exit) ShowError("Nelze odeslat sáček", ""+ex.Message);
        //    }
        //    //    Console.WriteLine("send");
        //}

        //void SendEveryone(string text) {
        //    try {
        //        //Fill the info for the message to be send
        //        Data msgToSend = new Data {
        //            //Console.WriteLine(text);
        //            //      From=Setting.Name,
        //            To=toEveryone,
        //            Message=text,
        //            Cmd=Command.Message
        //        };

        //        //byte[] byteData =
        //        Queue.Add(new DataToSend {
        //            Bytes=msgToSend.ToByte(),
        //            Importance=Importance.High
        //        });
        //        //Send it to the server
        //        //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSendAfter), null);
        //        // Console.WriteLine("sending: "+System.Text.Encoding.UTF8.GetString(byteData));
        //        // txtMessage.Text = null;
        //    } catch (Exception) {
        //        //Console.WriteLine("Unable to send message to the server.");
        //    }
        //}

        //void OnSendAfter(IAsyncResult ar) {
        //    try {
        //        clientSocket.EndSend(ar);
        //    } catch (ObjectDisposedException) {


        //    } catch/* (Exception ex)*/ {
        //        //Console.WriteLine(ex.Message);
        //    }
        //}

        //void OnReceive(IAsyncResult ar) {
        //    //   Console.WriteLine("rec");
        //    try {
        //        clientSocket.EndReceive(ar);
        //    } catch (Exception ex) {
        //        if (ex.HResult==10054) {
        //            //ShowError("Spojení bylo přerušeno", ex.Message);
        //            //clientSocket.Shutdown(new SocketShutdown());
        //            //clientSocket.Close();
        //            //clientSocket.Dispose();
        //            if (!exit) SolveErrorDuringGame(ex.HResult, "", "");
        //            return;
        //        } else {
        //            Console.WriteLine(ex.Message+" rec1");
        //        }
        //    }

        //    Data msgReceived = new Data(byteData);
        //    msgReceived.Talk();

        //    switch (msgReceived.Cmd) {
        //        case Command.SendingWorldData: {
        //            if (msgReceived.terrain!=null) {
        //                if (msgReceived.terrain.Length>2) {
        //                    LoadFromBytes(msgReceived.terrain, msgReceived.pos);

        //                    if (current==Current.GettingSpawn) {
        //                        if (downloadedSpawnArea<downloadingSpawnAreaMax) {
        //                            SendMsgTerrain();
        //                        } else {
        //                            state++;

        //                            current=Current.GettingPlayers;
        //                            {
        //                                Data msg = new Data {
        //                                    Cmd=Command.PlayersList,
        //                                    //            From=Setting.Name,
        //                                    To=toServer
        //                                };
        //                                Queue.Add(new DataToSend {
        //                                    Bytes=msg.ToByte(),
        //                                    Importance=Importance.High
        //                                });
        //                                //clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                            }
        //                        }
        //                    }
        //                } else {
        //                    Debug.WriteLine("ERROR - Přijetí prázné zprávy. "+msgReceived.Cmd.ToString());
        //                }
        //            } else {
        //                Debug.WriteLine("ERROR - Přijetí prázné zprávy. "+msgReceived.Cmd.ToString());
        //            }
        //        }
        //        break;

        //        case Command.EditTerrain: {
        //            if (current==Current.Playing) {
        //                if (!string.IsNullOrEmpty(msgReceived.Message)) {
        //                    string[] strs = msgReceived.Message.Split('|');
        //                    Console.WriteLine("Editing: "+msgReceived.Message);
        //                    List<byte> bytes = new List<byte>();
        //                    if (strs.Length==5) {
        //                        if (strs[4]!="") {
        //                            foreach (string s in strs[4].Split(',')) {
        //                                bytes.Add(byte.Parse(s));
        //                            }
        //                        }
        //                    }
        //                    if (strs[0]=="+") {
        //                        int x = int.Parse(strs[1]),
        //                            y = int.Parse(strs[2]);
        //                        if (terrain[x]==null) break;
        //                        byte id = byte.Parse(strs[3]);
        //                        bool stay = true;

        //                        {
        //                            Block b = SolidBlockFromId(id, new Vector2(x, y));
        //                            if (b!=null) {
        //                                if (terrain[x].IsSolidBlocks[y]) GetItemsFromBlock(id, x, y);
        //                                terrain[x].IsSolidBlocks[y]=true;
        //                                terrain[x].SolidBlocks[y]=b;
        //                                stay=false;
        //                            }
        //                        }
        //                        if (stay) {
        //                            Block b = TopBlockFromId(id, new Vector2(x, y));
        //                            if (b!=null) {
        //                                if (terrain[x].IsTopBlocks[y]) GetItemsFromBlock(id, x, y);
        //                                terrain[x].IsTopBlocks[y]=true;
        //                                terrain[x].TopBlocks[y]=b;
        //                                stay=false;
        //                            }
        //                        }
        //                        if (stay) {
        //                            Block b = BackBlockFromId(id, new Vector2(x, y));
        //                            if (b!=null) {
        //                                if (terrain[x].IsBackground[y]) GetItemsFromBlock(id, x, y);
        //                                terrain[x].IsBackground[y]=true;
        //                                terrain[x].Background[y]=null;
        //                                stay=false;
        //                            }
        //                        }

        //                        if (stay) {
        //                            Plant p = GetPlantFromId(id, (byte)y,/*?*/255, (short)x);
        //                            if (p!=null) {
        //                                foreach (Plant px in terrain[x].Plants) {
        //                                    if (px.Height==y) {
        //                                        GetItemsFromPlant(id, new DInt(x, y), px.Grow==255);
        //                                        terrain[x].Plants.Remove(px);
        //                                        break;
        //                                    }
        //                                }
        //                                stay=false;
        //                                terrain[x].Plants.Add(p);
        //                            }
        //                        }


        //                        //if (stay) {
        //                        //    Block b=ani(id,new Vector2(x,y));
        //                        //     if (b!=null) {
        //                        //    foreach (Mob m in terrain[x].Mobs) {
        //                        //        if (m.Height==y) {
        //                        //            if (m.Id==id) {GetItemsFromBlock(id,new DInt(x,y));
        //                        //                terrain[x].Mobs.Remove(m);
        //                        //                stay=false;
        //                        //                break;
        //                        //            }
        //                        //        }
        //                        //    }
        //                        //}
        //                    } else {
        //                        int x = int.Parse(strs[1]),
        //                            y = int.Parse(strs[2]);
        //                        if (terrain[x]==null) break;
        //                        byte id = byte.Parse(strs[3]);
        //                        bool stay = true;

        //                        if (terrain[x].IsSolidBlocks[y]) {
        //                            if (terrain[x].SolidBlocks[y].Id==id) {
        //                                terrain[x].IsSolidBlocks[y]=false;
        //                                terrain[x].SolidBlocks[y]=null;
        //                                stay=false;
        //                            }
        //                        }
        //                        if (stay) {
        //                            if (terrain[x].IsTopBlocks[y]) {
        //                                if (terrain[x].TopBlocks[y].Id==id) {
        //                                    terrain[x].IsTopBlocks[y]=false;
        //                                    terrain[x].TopBlocks[y]=null;
        //                                    stay=false;
        //                                }
        //                            }
        //                        }
        //                        if (stay) {
        //                            if (terrain[x].IsBackground[y]) {
        //                                if (terrain[x].Background[y].Id==id) {
        //                                    terrain[x].IsBackground[y]=false;
        //                                    terrain[x].Background[y]=null;
        //                                    stay=false;
        //                                }
        //                            }
        //                        }

        //                        if (stay) {
        //                            foreach (Plant p in terrain[x].Plants) {
        //                                if (p.Height==y) {
        //                                    if (p.Id==id) {
        //                                        terrain[x].Plants.Remove(p);
        //                                        stay=false;
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        if (stay) {
        //                            foreach (Mob m in terrain[x].Mobs) {
        //                                if (m.Height==y) {
        //                                    if (m.Id==id) {
        //                                        terrain[x].Mobs.Remove(m);
        //                                        stay=false;
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        break;

        //        case Command.PostLogin: {
        //            if (msgReceived.Message!=null) {
        //                string[] strs = msgReceived.Message.Split('|');
        //                if (strs.Length>0) {
        //                    if (strs[0]=="0") {
        //                        //  Console.WriteLine("Wrong password!");
        //                        System.Windows.Forms.MessageBox.Show("Špatné heslo", "Pro připojení k serveru je potřeba zadat správné heslo");
        //                        // System.Windows.Forms.MessageBox.Show("Zadali jste špatné heslo","Špatné heslo");
        //                        clientSocket.Disconnect(false);
        //                        //   Rabcr.GoTo(new MenuMultiplayer());
        //                    } else if (strs[0]=="1") {
        //                        //Console.WriteLine("Setting vars");

        //                        TerrainLenght=int.Parse(strs[1]);
        //                        terrain=new MTerrain[TerrainLenght];
        //                        Console.WriteLine(TerrainLenght+" len");

        //                        for (int c = 0; c<TerrainLenght; c++) terrain[c]=new MTerrain();


        //                        Global.WorldDifficulty=int.Parse(strs[2]);
        //                        //  Global.WorldDifficulty=2;
        //                        //Console.WriteLine(Global.WorldDifficulty);
        //                        PlayerX=int.Parse(strs[3]);
        //                        PlayerY=int.Parse(strs[4]);
        //                        SetPlayerPos(PlayerX, PlayerY);
        //                        int i = 0;
        //                        for (; i<int.Parse(strs[5]); i+=2) Inventory.Add(new DInt(int.Parse(strs[6+i]), int.Parse(strs[7+i])));

        //                        //UseBackColor=bool.Parse(strs[6+i]);
        //                        //BackColor=StringToColor(strs[7+i]);

        //                        //UseGedo=bool.Parse(strs[8+i]);

        //                        tpSpawn=bool.Parse(strs[6+i]);

        //                        tpEverywhere=bool.Parse(strs[7+i]);
        //                        tpPlayer=bool.Parse(strs[8+i]);
        //                        tpPlayerMessage=bool.Parse(strs[9+i]);

        //                        changeSpawn=bool.Parse(strs[10+i]);
        //                        changeTerrainSpawn=bool.Parse(strs[11+i]);
        //                        changeWarps=bool.Parse(strs[12+i]);

        //                        //  cmdRemoveItems=bool.Parse(strs[16+i]);

        //                        //allowFly=bool.Parse(strs[17+i]);
        //                        allowChangeGametype=bool.Parse(strs[13+i]);

        //                        cmdPing=bool.Parse(strs[14+i]);
        //                        cmdMsg=bool.Parse(strs[15+i]);
        //                        cmdMsgAll=bool.Parse(strs[16+i]);
        //                        cmdLog=bool.Parse(strs[17+i]);
        //                        cmdKick=bool.Parse(strs[18+i]);

        //                        cmdServerEnd=bool.Parse(strs[19+i]);
        //                        cmdServerReset=bool.Parse(strs[20+i]);
        //                        cmdServerBackup=bool.Parse(strs[21+i]);

        //                        //    kit=bool.Parse(strs[27+i]);

        //                        safeSpawn=int.Parse(strs[22+i]);

        //                        spawnX=int.Parse(strs[23+i]);
        //                        spawnY=int.Parse(strs[24+i]);

        //                        //cmdWeb=bool.Parse(strs[31+i]);
        //                        // web=strs[32+i];
        //                        serverName=strs[25+i];
        //                        SendMsgTerrain();

        //                    }
        //                }
        //            }
        //        }
        //        break;

        //        case Command.Login: {
        //            state++;
        //            current=Current.EndLoging;

        //            if (!Directory.Exists(Setting.Path+"\\Servers")) Directory.CreateDirectory(Setting.Path+"\\Servers");
        //            if (!Directory.Exists(Setting.Path+"\\Servers\\"+serverName)) Directory.CreateDirectory(Setting.Path+"\\Servers\\"+serverName);
        //            if (!Directory.Exists(pathToWorld+"\\Earth")) Directory.CreateDirectory(pathToWorld+"\\Earth");

        //            if (string.IsNullOrEmpty(msgReceived.Message)) {
        //                ShowError("Chyba sítě", "Hra obdržela nulový sáček při přihlašování");
        //            } else {
        //                string[] strs = msgReceived.Message.Split('|');

        //                switch ((LoginType)int.Parse(strs[0])) {
        //                    case LoginType.Null:
        //                        ShowError("Chyba", "Hra obdržela nulový token přihlašování");
        //                        clientSocket.Disconnect(false);
        //                        break;

        //                    case LoginType.Banned:
        //                        ShowError("Zakázaný přístup", "Máte zakázaný přístup na tento server");
        //                        clientSocket.Disconnect(false);
        //                        break;

        //                    case LoginType.BannedWithInfo:
        //                        ShowError("Zakázaný přístup", "Máte zakázaný přístup na tento server"+Environment.NewLine+strs[1]);
        //                        clientSocket.Disconnect(false);
        //                        break;

        //                    case LoginType.NotOnWhitelist:
        //                        ShowError("Nejste na whitelistu", "Název vašeho jména není zapsán ve whitelistu"+Environment.NewLine+strs[1]);
        //                        clientSocket.Disconnect(false);
        //                        break;

        //                    case LoginType.NotOnWhitelistNoInfo:
        //                        ShowError("Nejste na whitelistu", "Název vašeho jména není zapsán ve whitelistu");
        //                        clientSocket.Disconnect(false);
        //                        break;

        //                    case LoginType.FirstConnectPassword:
        //                        using (Password p = new Password()) {
        //                            p.ShowDialog();
        //                            if (p.Output!=null) {
        //                                Data msg = new Data {
        //                                    Cmd=Command.PostLogin,
        //                                    //    From=Setting.Name,
        //                                    To=toServer,
        //                                    Message=p.Output
        //                                };

        //                                Queue.Add(new DataToSend {
        //                                    Bytes=msg.ToByte(),
        //                                    Importance=Importance.VeryImportant
        //                                });
        //                                //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                            } else {
        //                                clientSocket.Disconnect(false);
        //                            }
        //                        }

        //                        break;

        //                    case LoginType.LoginWithPassword:
        //                        using (CheckPassword p = new CheckPassword()) {
        //                            p.ShowDialog();
        //                            if (p.Output!=null) {
        //                                Data msg = new Data {
        //                                    Cmd=Command.PostLogin,
        //                                    //      From=Setting.Name,
        //                                    To=toServer,
        //                                    Message=p.Output
        //                                };

        //                                //  byteData=msg.ToByte();
        //                                Queue.Add(new DataToSend {
        //                                    Bytes=msg.ToByte(),
        //                                    Importance=Importance.VeryImportant
        //                                });
        //                                //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                            } else {
        //                                clientSocket.Disconnect(false);
        //                            }
        //                        }
        //                        break;

        //                    case LoginType.BasicLogin: {
        //                        Data msg = new Data {
        //                            Cmd=Command.PostLogin,
        //                            //    From=Setting.Name,
        //                            To=toServer,
        //                            Message=""
        //                        };
        //                        Queue.Add(new DataToSend {
        //                            Bytes=msg.ToByte(),
        //                            Importance=Importance.VeryImportant
        //                        });
        //                        //byteData=msg.ToByte();

        //                        //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                    }
        //                    break;

        //                    case LoginType.FirstConnect: {
        //                        Data msg = new Data {
        //                            Cmd=Command.PostLogin,
        //                            //    From=Setting.Name,
        //                            To=toServer,
        //                            Message=""
        //                        };
        //                        Queue.Add(new DataToSend {
        //                            Bytes=msg.ToByte(),
        //                            Importance=Importance.VeryImportant
        //                        });
        //                        //byteData=msg.ToByte();

        //                        //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                    }
        //                    break;

        //                }
        //            }



        //            //if (strs.Length>0) {
        //            //    switch (strs[0]) {
        //            //        case "0":
        //            //            if (strs.Length==3) {
        //            //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]+Environment.NewLine+"zkuste tento web: "+strs[2]);
        //            //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
        //            //            break;

        //            //        case "1":
        //            //            if (strs.Length==2) {
        //            //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]);
        //            //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
        //            //            break;

        //            //        case "2":
        //            //            if (strs.Length==4) {
        //            //                int x = int.Parse(strs[0]);
        //            //                int y = int.Parse(strs[1]);
        //            //                string password = strs[2];
        //            //                int type = int.Parse(strs[3]);

        //            //                if (password!="") {
        //            //                    chp=new CheckPassword();
        //            //                    chp.Show();
        //            //                    waitingPassword=true;
        //            //                    this.password=password;
        //            //                }
        //            //                ShowError("Zakázaný přístup", "Máte zakázaný přístup na server"+Environment.NewLine+strs[1]);
        //            //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
        //            //            break;

        //            //        case "3":
        //            //            if (strs.Length==2) {
        //            //                ShowError("Nejste v seznamu", "Kontaktujte majtele serveru a požádejteho o členství"+Environment.NewLine+strs[1]);
        //            //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
        //            //            break;

        //            //        case "4":
        //            //            if (strs.Length==1) {
        //            //                ShowError("Nejste v seznamu", "Kontaktujte majtele serveru a požádejteho o členství");
        //            //            } else ShowError("Chybná konfigurace", "Sáček k přihlašování neodpovídá sestavení");
        //            //            break;

        //            //        case "5":

        //            //            break;
        //            //    }
        //            //}

        //            //int.TryParse(strs[1], out spawnX);
        //            //int.TryParse(strs[2], out spawnY);
        //            //int.TryParse(strs[3], out safeSpawn);

        //            //PlayerX=spawnX;
        //            //PlayerY=spawnY;

        //            //SendMsgTerrain();
        //            state++;
        //        }
        //        break;

        //        //case Command.Logout:
        //        //    clientSocket.Disconnect(false);
        //        //    break;

        //        case Command.PlayersTeleportMessageToSource: {
        //            if (!string.IsNullOrEmpty(msgReceived.Message)) {
        //                string[] strs = msgReceived.Message.Split('|');

        //                if (int.TryParse(strs[0], out int num)) {
        //                    if (num==1) {
        //                        //DisplayText("Vaše žádost byla zamítnuta");
        //                    }
        //                    if (num==2) {
        //                        if ((DateTime.Now-tpPlayerTime.Date).TotalMinutes<=2) {
        //                            foreach (Player p in players) {
        //                                if (tpPlayerMsgWaiting==p.name) {
        //                                    //    DisplayText("Teleportuji...");
        //                                    text="Teleportuji...";
        //                                    PlayerX=p.x;
        //                                    PlayerY=p.y;
        //                                    break;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    if (num==3) {
        //                        if (strs[1]==Setting.Name) {
        //                            //SomeoneWantTeleportToYou=true;
        //                            SomeoneWantTeleportToYouName=msgReceived.From;
        //                            gedo.BuildString("Hráč "+SomeoneWantTeleportToYouName+" se chce k vám teleportovat.\r\nPoužij \"*tp-allow\" pro přijení nebo \"*tp-deny\" pro zamítnutí.");
        //                            diserpeard=255;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        break;

        //        case Command.Message:
        //            if (msgReceived.Message!=null||msgReceived.Message!="") {
        //                if (msgReceived.Message.StartsWith("*")) {
        //                    string[] word = msgReceived.Message.Split(' ');
        //                    switch (word[0]) {
        //                        case "*setplayerpos":
        //                            if (word.Length==3) {
        //                                PlayerX=int.Parse(word[1]);
        //                                PlayerY=int.Parse(word[2]);
        //                                DisplayText("Teleportuji...");
        //                                SetPlayerPos(PlayerX, PlayerY);
        //                            }
        //                            break;

        //                        case "*spawnwaschanged":
        //                            spawnX=int.Parse(word[1]);
        //                            spawnY=int.Parse(word[2]);
        //                            break;

        //                        case "*int-set": {
        //                            int count = int.Parse(word[1]);

        //                            List<DInt> tmpInv = new List<DInt>();

        //                            for (int i = 0; i<count; i++) {
        //                                Inventory[i].X=2+i*2;
        //                                Inventory[i].Y=3+i*2;
        //                            }
        //                        }
        //                        break;

        //                        case "*inv-machine-set": {
        //                            int
        //                                x = int.Parse(word[1]),
        //                                y = int.Parse(word[2]),
        //                                count = int.Parse(word[3]);

        //                            List<DInt> tmpInv = new List<DInt>();

        //                            for (int i = 0; i<count; i++) {
        //                                tmpInv.Add(new DInt(4+i*2, 5+i*2));
        //                            }

        //                            if (terrain[x].TopBlocks[y] is BoxBlock) {
        //                                ((BoxBlock)terrain[x].TopBlocks[y]).Inv=tmpInv;
        //                            } else if (terrain[x].TopBlocks[y] is MashineBlockBasic) {
        //                                ((MashineBlockBasic)terrain[x].TopBlocks[y]).Inv=tmpInv;
        //                            } else if (terrain[x].TopBlocks[y] is ShelfBlock) {
        //                                ((ShelfBlock)terrain[x].TopBlocks[y]).Inv=tmpInv;
        //                            }
        //                            getFromServerInv=true;
        //                        }
        //                        break;
        //                    }
        //                } else {
        //                    gedo.BuildString(msgReceived.Message);
        //                    diserpeard=255;
        //                }
        //            }
        //            //Loading=false;
        //            //if (msgReceived.strName=="{Server}") {
        //            //    Console.WriteLine(msgReceived.strName+"<>"+msgReceived.cmdCommand.ToString()+"<>"+msgReceived.strMessage);
        //            //} else Console.WriteLine("!jméno "+msgReceived.strName);
        //            break;

        //        case Command.Request: {
        //            Data msg = new Data {
        //                Cmd=Command.Request,
        //                //    From=Setting.Name,
        //                To=toServer,
        //                Message=""
        //            };
        //            //byteData=new byte[1024];
        //            //byteData=msg.ToByte();

        //            //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //            Queue.Add(new DataToSend {
        //                Bytes=msg.ToByte(),
        //                Importance=Importance.VeryImportant
        //            });
        //        }
        //        break;

        //        case Command.Check: {
        //            state++;
        //            string[] get = msgReceived.Message.Split('|');

        //            if (get.Length>0) {
        //                maxplayers=int.Parse(get[1]);
        //                joinedPlayers=int.Parse(get[2]);
        //                string version = get[3];
        //                //smd=true;
        //                if (version==Version.This) {
        //                    Data msg = new Data {
        //                        Cmd=Command.Login,
        //                        //   From=Setting.Name,
        //                        To=toServer,
        //                        //Message=Setting.Name
        //                    };
        //                    //byteData=msg.ToByte();
        //                    current=Current.EndChecking;
        //                    //clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //                    Queue.Add(new DataToSend {
        //                        Bytes=msg.ToByte(),
        //                        Importance=Importance.VeryImportant
        //                    });
        //                } else {
        //                    ShowError("Jiná verze serveru", "Verze serveru ("+version+") je rozdílná od verze hry.");
        //                }
        //            } else {
        //                ShowError("Chyba sáčku", "Hra obdržela od serveru prázdný soubor s informacemi.");
        //            }
        //            // Console.WriteLine(msgReceived.strMessage);
        //            //string _new =msgReceived.strMessage;
        //            //string version=_new.Substring(_new.LastIndexOf("|")+1);
        //            //_new=_new.Substring(0,_new.LastIndexOf("|"));
        //            //int.TryParse(_new.Substring(_new.LastIndexOf("|")+1),out maxplayers);
        //            //_new=_new.Substring(0,_new.LastIndexOf("|"));
        //            //int.TryParse(_new.Substring(_new.LastIndexOf("|")+1),out joinedPlayers);
        //            //_new=_new.Substring(0,_new.LastIndexOf("|"));
        //            //Console.WriteLine("sdfgdfgfdf");
        //            //if
        //            //    if (joinedPlayers<maxplayers) {
        //            //OK ////////////////////////////////////////



        //            //  }
        //            //   Console.WriteLine("Logining...");
        //            //    state++;

        //            //} else {
        //            //    Error=true;
        //            //    ErrorCode="Server je plný.";
        //            //    Console.WriteLine("Moc hráčů.");
        //            //    clientSocket.Disconnect(false);
        //            //    clientSocket.Close();
        //            //    clientSocket.Dispose();
        //            //}
        //            //} else {
        //            //    Error=true;
        //            //    ErrorCode="Server je pro jinou verzi.";
        //            //    Console.WriteLine("Jiná verze.");
        //            //    clientSocket.Disconnect(false);
        //            //    clientSocket.Close();
        //            //    clientSocket.Dispose();
        //            //}
        //        }
        //        break;

        //        case Command.Exit:
        //            Queue.Add(new DataToSend {
        //                Bytes=new Data {
        //                    //   From=Setting.Name,
        //                    To=toServer,
        //                    Message="*beforeexitdata "+PlayerX+" "+PlayerY,//+inv...
        //                    Cmd=Command.Message
        //                }.ToByte(),
        //                Importance=Importance.VeryImportant
        //            });
        //            //closingServer=true;
        //            break;

        //        case Command.PlayersList: {
        //            players.Clear();
        //            foreach (string h in msgReceived.Message.Split('~')) {
        //                if (h!="") {
        //                    string[] splited = h.Split('|');

        //                    Player player = new Player(splited[0]) {
        //                        x=int.Parse(splited[1]),
        //                        y=int.Parse(splited[2])
        //                    };
        //                    players.Add(player);
        //                }
        //            }

        //            if (current==Current.GettingPlayers) {
        //                current=Current.Playing;
        //                //Resize();
        //            }
        //        }
        //        break;
        //    }

        //    //if (Queue.Count==0){
        //    //   //// if (msgReceived.Cmd==Command.Blank) Thread.Sleep(10);
        //    //   //// else Thread.Sleep(5);
        //    //   // Data data=new Data{
        //    //   //  //   From=Setting.Name,
        //    //   //     To=toServer,
        //    //   //     Cmd=Command.Blank
        //    //   // };
        //    //   // try{
        //    //   //     byte[] bytes=data.ToByte();
        //    //   //     clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //    //   //  }catch (Exception ex){Console.WriteLine(ex.Message+"1"); }
        //    //}else{
        //    //    try{
        //    //        byte[] bytes=Queue[0].Bytes;

        //    //        Queue.RemoveAt(0);
        //    //        clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //    //    }catch (Exception ex){Console.WriteLine(ex.Message+"2"); }
        //    //}



        //    //////////if (!closingServer){
        //    //////////    byteData=new byte[1024];

        //    //////////    try {
        //    //////////        clientSocket.BeginReceive(byteData,
        //    //////////            0,
        //    //////////            byteData.Length,
        //    //////////            SocketFlags.None,
        //    //////////            new AsyncCallback(OnReceive),
        //    //////////            clientSocket);
        //    //////////    } catch (Exception ex) {
        //    //////////        if (ex.HResult==10054) {
        //    //////////            ShowError("Spojení bylo přerušeno", ex.Message);
        //    //////////            clientSocket.Shutdown(new SocketShutdown());
        //    //////////            clientSocket.Close();
        //    //////////            clientSocket.Dispose();
        //    //////////            return;
        //    //////////        }else{
        //    //////////            Console.WriteLine(ex.Message+"12");
        //    //////////        }
        //    //////////    }
        //    //////////} else {
        //    //////////    clientSocket.Shutdown(new SocketShutdown());
        //    //////////    current=Current.Checking;
        //    //////////    clientSocket.Disconnect(false);
        //    //////////    clientSocket.Close();
        //    ////////// //   clientSocket.Dispose();
        //    //////////    ShowError("Server byl ukončen","Server se vypnul ze strany serveru");
        //    //////////       // Rabcr.GoTo(new Menu());
        //    //////////}
        //    // if (msgReceived.strMessage != null && msgReceived.cmdCommand != Command.List) {
        //    //     chat += msgReceived.strMessage + "\r\n";
        //    //Console.WriteLine("G "+msgReceived.strMessage);
        //    //foreach (Player p in players) {//Console.WriteLine(0);
        //    //if (p.name==msgReceived.strName) {//Console.WriteLine(1);
        //    //string data=msgReceived.strMessage.Replace(msgReceived.strName+": ","");
        //    //     if (data.StartsWith("X")) {//Console.WriteLine(2);

        //    //         //for (int i=0; i<players.Count; i++) {
        //    //      //   Console.WriteLine(3);
        //    //             //if (players[i].name==msgReceived.strName) {
        //    //             Console.WriteLine(data);
        //    //                p.x=int.Parse(data.Substring(1,data.IndexOf(" ")));
        //    //                p.y=int.Parse(data.Substring(data.IndexOf("Y")+1));
        //    //                 break;
        //    //             //}
        //    //         }}//}
        //    //     }
        //    // }


        //    //byteData = new byte[1024];

        //    //clientSocket.BeginReceive(byteData,
        //    //                          0,
        //    //                          byteData.Length,
        //    //                          SocketFlags.None,
        //    //                          new AsyncCallback(OnReceive),
        //    //                          null);

        //    //}
        //    //catch (ObjectDisposedException) { }
        //    //catch (Exception ex) {
        //    //    Console.WriteLine("E"+ex.Message);
        //    //}
        //    //}catch (SocketException ex){
        //    //if (ex.SocketErrorCode.ToString()=="10054") {
        //    //Console.WriteLine("Konec");
        //    //return;
        //    //throw ex;
        //    //}
        //    //}
        //    //      if (!closingServer){
        //    byteData=new byte[1024];

        //    try {
        //        clientSocket.BeginReceive(byteData,
        //            0,
        //            byteData.Length,
        //            SocketFlags.None,
        //            new AsyncCallback(OnReceive),
        //            clientSocket);
        //    } catch (Exception ex) {
        //        if (ex.HResult==10054) {
        //            ShowError("Spojení bylo přerušeno", ex.Message);
        //            clientSocket.Shutdown(new SocketShutdown());
        //            clientSocket.Close();
        //            clientSocket.Dispose();
        //            return;
        //        } else {
        //            Console.WriteLine(ex.Message+"12");
        //        }
        //    }
        //    //} else {
        //    //    clientSocket.Shutdown(new SocketShutdown());
        //    //    current=Current.Checking;
        //    //    clientSocket.Disconnect(false);
        //    //    clientSocket.Close();
        //    // //   clientSocket.Dispose();
        //    //    ShowError("Server byl ukončen","Server se vypnul ze strany serveru");
        //    //       // Rabcr.GoTo(new Menu());
        //    //}
        //}

        //void SendData(byte[] bytes, bool response) {
        //    try {
        //        clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //    } catch (Exception ex) {
        //        Console.WriteLine(ex.Message+"2");
        //    }

        //    if (response) {
        //        //    if (!closingServer){
        //        try {
        //            clientSocket.BeginReceive(bytes,
        //                0,
        //                bytes.Length,
        //                SocketFlags.None,
        //                new AsyncCallback(OnReceive),
        //                clientSocket);
        //        } catch (Exception ex) {
        //            if (ex.HResult==10054) {
        //                ShowError("Spojení bylo přerušeno", ex.Message);
        //                clientSocket.Shutdown(new SocketShutdown());
        //                clientSocket.Close();
        //                clientSocket.Dispose();
        //                return;
        //            } else {
        //                Console.WriteLine(ex.Message+"x");
        //            }
        //        }
        //    }
        //}

        //void SendMsgTerrain() {
        //    current=Current.GettingSpawn;

        //    Data msgToSend = new Data {
        //        Cmd=Command.GetWorldData,
        //        //   From=Setting.Name,
        //        To=toServer,
        //    };

        //    if (PlayerX<424) PlayerX=424;
        //    int xx = (int)(PlayerX-Global.WindowWidthHalf/(16*Setting.Zoom))/16+downloadedSpawnArea;
        //    if (xx<TerrainLenght) {
        //        terrain[xx].state=MChunkState.SendRequest;
        //        if (xx<0) {
        //            msgToSend.Message=world+"|"+(TerrainLenght-PlayerX/16-xx).ToString();
        //        } else msgToSend.Message=world+"|"+xx.ToString();

        //        downloadedSpawnArea++;
        //        state++;
        //        Queue.Add(new DataToSend { Bytes=msgToSend.ToByte(), Importance=Importance.VeryImportant });
        //    } else {
        //        state++;

        //        current=Current.GettingPlayers;
        //        {
        //            Data msg = new Data {
        //                Cmd=Command.PlayersList,
        //                //            From=Setting.Name,
        //                To=toServer
        //            };
        //            Queue.Add(new DataToSend {
        //                Bytes=msg.ToByte(),
        //                Importance=Importance.High
        //            });
        //            //clientSocket.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(OnSend), null);
        //        }
        //    }
        //    //   clientSocket.BeginSend(byteData, 0, byteData.Length, SocketFlags.None, new AsyncCallback(OnSend), null);

        //}

        //void SendRequestChunk(int pos) {
        //    terrain[pos].state=MChunkState.SendRequest;
        //    terrain[pos].sended=DateTime.Now;
        //    Queue.Add(
        //        new DataToSend {
        //            Bytes=new Data {
        //                Cmd=Command.GetWorldData,
        //                //     From=Setting.Name,
        //                To=toServer,
        //                Message=world+"|"+pos.ToString()
        //            }.ToByte(),
        //            Importance=Importance.VeryImportant
        //        });
        //}
        #endregion

        #region Animals

        //void MoveChicken() {
        //    int Xran = terrainStartIndexX+FastRandom.Int(terrainStartIndexW-terrainStartIndexX);

        //    if (terrain[Xran].Mobs.Count!=0) {
        //        foreach (MMob mob in terrain[Xran].Mobs) {
        //            if (mob.Id==(byte)BlockId.Chicken) {
        //                int height = mob.Height;

        //                Chicken ch = (Chicken)mob;

        //                if (!ch.needToChangeChunk) {
        //                    if (!ch.move) {
        //                        if (!ch.Eat) {
        //                            if (ch.Dir) {
        //                                if (!terrain[Xran+1].IsSolidBlocks[height]) {
        //                                    if (terrain[Xran+1].IsSolidBlocks[height+1]) {
        //                                        ch.lastChunkID=(short)Xran;
        //                                        ch.move=true;
        //                                        ch.moveCount=16*4;
        //                                        movingAnimals.Add(mob);
        //                                    }
        //                                }
        //                            } else {
        //                                if (!terrain[Xran-1].IsSolidBlocks[height]) {
        //                                    if (terrain[Xran-1].IsSolidBlocks[height+1]) {
        //                                        ch.lastChunkID=(short)Xran;
        //                                        ch.move=true;
        //                                        ch.moveCount=16*4;
        //                                        movingAnimals.Add(mob);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //}

        //void MoveRabbit() {
        //    int Xran = terrainStartIndexX+FastRandom.Int(terrainStartIndexW-terrainStartIndexX);

        //    if (terrain[Xran].Mobs.Count!=0) {
        //        foreach (Mob mob in terrain[Xran].Mobs) {
        //            if (mob.Id==(byte)BlockId.Rabbit) {
        //                int height = mob.Height;

        //                Rabbit r = (Rabbit)mob;

        //                if (!r.needToChangeChunk) {
        //                    if (!r.switchtoWalk) {
        //                        if (!r.move) {
        //                            if (r.Dir) {
        //                                if (!terrain[Xran+1].IsSolidBlocks[height]) {
        //                                    if (terrain[Xran+1].IsSolidBlocks[height+1]) {
        //                                        r.lastChunkID=(short)Xran;
        //                                        r.moveCount=16*4;
        //                                        r.switchtoWalk=true;
        //                                        r.thisTexture=rabbitWalkTexture;
        //                                        movingAnimals.Add(mob);
        //                                    }
        //                                }
        //                            } else {
        //                                if (!terrain[Xran-1].IsSolidBlocks[height]) {
        //                                    if (terrain[Xran-1].IsSolidBlocks[height+1]) {
        //                                        r.lastChunkID=(short)Xran;
        //                                        r.moveCount=16*4;
        //                                        r.switchtoWalk=true;
        //                                        movingAnimals.Add(mob);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    }
        //}

        //void FinishMooving() {
        //    foreach (Mob mob in movingAnimals) {
        //        switch ((BlockId)mob.Id) {
        //            case BlockId.Chicken: {
        //                Chicken ch = (Chicken)mob;
        //                if (ch.needToChangeChunk) {
        //                    movingAnimals.Remove(mob);
        //                    ch.needToChangeChunk=false;
        //                    terrain[ch.lastChunkID].Mobs.Remove(ch);
        //                    terrain[(int)(mob.Position.X/16)].Mobs.Add(ch);
        //                    return;
        //                }
        //                break;
        //            }

        //            case BlockId.Rabbit: {
        //                Rabbit r = (Rabbit)mob;
        //                if (r.needToChangeChunk) {
        //                    movingAnimals.Remove(mob);
        //                    r.needToChangeChunk=false;
        //                    terrain[r.lastChunkID].Mobs.Remove(r);
        //                    terrain[(int)(mob.Position.X/16)].Mobs.Add(r);
        //                    return;
        //                }
        //                break;
        //            }
        //        }
        //    }
        //}


        #endregion

        #region Draw text
        //void DrawTextShadowMax(SpriteFont newSpriteFont, int x, int y, string str, Color c) {
        //    if (Setting.BetterFont) {
        //        if (newSpriteFont==spriteFont_medium) {
        //            if (Constants.Shadow) {
        //                spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
        //                spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
        //            }
        //            spriteBatch.DrawString(spriteFont_big, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
        //        } else if (newSpriteFont==spriteFont_small) {
        //            if (Constants.Shadow) {
        //                spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //                spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //            }
        //            spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //        } else {
        //            if (Constants.Shadow) {
        //                spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+1.5f, y+1.5f), c*0.4f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
        //                spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+0.5f, y+0.5f), c*0.4f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
        //            }
        //            spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
        //        }
        //    } else {
        //        spriteBatch.DrawString(newSpriteFont, str, new Vector2(x, y), c);
        //        if (Constants.Shadow) {
        //            spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+1.5f, y+1.5f), c*0.4f);
        //            spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+0.75f, y+0.75f), c*0.4f);
        //        }
        //    }
        //}

        //void DrawTextShadowMin(SpriteFont newSpriteFont, int x, int y, string str, Color c) {
        //    if (Setting.BetterFont) {
        //        if (newSpriteFont==spriteFont_medium) {
        //            if (Constants.Shadow) spriteBatch.DrawString(spriteFont_big, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
        //            spriteBatch.DrawString(spriteFont_big, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.45f, SpriteEffects.None, 0);
        //        } else if (newSpriteFont==spriteFont_small) {
        //            if (Constants.Shadow) spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //            spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //        } else {
        //            if (Constants.Shadow) spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x+0.5f, y+0.5f), c*0.5f, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
        //            spriteBatch.DrawString(spriteFont_biggest, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.5f, SpriteEffects.None, 0);
        //        }
        //    } else {
        //        if (Constants.Shadow) spriteBatch.DrawString(newSpriteFont, str, new Vector2(x+0.5f, y+0.5f), c*0.5f);
        //        spriteBatch.DrawString(newSpriteFont, str, new Vector2(x, y), c);
        //    }
        //}

        //void DrawTextShadowMin(int x, int y, string str) {
        //    if (Setting.BetterFont) {
        //        if (Constants.Shadow) spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), Color.Black*0.5f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //        spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), Color.Black, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //    } else {
        //        if (Constants.Shadow) spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.5f, y+0.5f), Color.Black*0.5f);
        //        spriteBatch.DrawString(spriteFont_small, str, new Vector2(x, y), Color.Black);
        //    }
        //}

        //void DrawTextShadowMin(int x, int y, string str, Color c) {
        //    if (Setting.BetterFont) {
        //        if (Constants.Shadow) {
        //            spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.15f, y+0.15f), Color.Black*0.25f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //            spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x+0.5f, y+0.5f), Color.Gray*0.25f, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //        }
        //        spriteBatch.DrawString(spriteFont_medium, str, new Vector2(x, y), c, 0, new Vector2(0, 4), 0.74074f, SpriteEffects.None, 0);
        //    } else {
        //        if (Constants.Shadow) {
        //            spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.15f, y+0.15f), Color.Black*0.25f);
        //            spriteBatch.DrawString(spriteFont_small, str, new Vector2(x+0.5f, y+0.5f), Color.Gray*0.25f);
        //        }
        //        spriteBatch.DrawString(spriteFont_small, str, new Vector2(x, y), c);
        //    }
        //}
        #endregion

        #region Writing text & display text
        void ShowHelp() {
            diserpeard=255;
            gedo.BuildString("<Red>Jejda</Red> tento příkaz není povolen (zkus *help)");
        }

        //void ShowError(string main, string toShow) {
        //    Error=true;
        //    ErrorHeader=main;
        //    ErrorText=toShow;
        //    current=Current.ErrorDuringGame;

        //}

        void DisplayText(string s) {
            diserpeard=250;
            if (gedo==null) gedo=new GeDo(0,0/*spriteFont_small,*//*spriteFont_small_italic,s,false*/);
            else gedo.BuildString(text);
            text="";

        }

        string TextEdit(string editText) {
            string newKey = Add();

            string add;

            if (newKeyboardState.IsKeyDown(Keys.RightAlt)||newKeyboardState.IsKeyDown(Keys.LeftAlt)) add=ConvertNormalToAtls(newKey);
            else if (newKeyboardState.IsKeyDown(Keys.LeftShift)||newKeyboardState.IsKeyDown(Keys.RightShift)) add=ConvertNormalToUpper(newKey);
            else if (newKeyboardState.IsKeyDown(Keys.LeftControl)||newKeyboardState.IsKeyDown(Keys.RightControl)) add=ConvertNormalToCtrls(newKey);
            else add=newKey;

            if (newKey=="") {
                hold=false;
                timeHold=30;
            } else {
                if (hold) {
                    switch (add) {
                        //case "Delete":
                        //    if (editText.Length > 4) editText = editText.Substring(0, editText.Length - 5); else editText = "";
                        //    break;

                        case "Delete":
                            if (editText.Length>0) editText=editText.Substring(0, editText.Length-1); /*else editText = "";*/
                            break;

                        case "Copy":
                            if (editText!=""&&editText!=null) System.Windows.Forms.Clipboard.SetText(editText);
                            break;

                        case "Paste":
                            if (System.Windows.Forms.Clipboard.ContainsText()) editText+=System.Windows.Forms.Clipboard.GetText();
                            break;

                        //case "§":
                        //     break;

                        //case "Remove":
                        //    editText = "";
                        //    break;

                        // case "Double":
                        //      editText += editText;
                        //      break;
                        // case "Quick":
                        //      editText += "RabigonCraft The most of my World";
                        //      break;

                        //case "Alt":
                        //     olderKey = "Alt";
                        //     break;

                        default:
                            editText+=add;
                            break;
                    }
                } else {
                    if (timeHold==0) hold=true;
                    else {
                        if (lastKey==newKey) {
                            if (timeHold==30) {
                                switch (add) {
                                    //case "Delete":
                                    //    if (editText.Length>4) editText=editText.Substring(0,editText.Length-5); else editText="";
                                    //    break;

                                    case "Delete":
                                        if (editText.Length>0) editText=editText.Substring(0, editText.Length-1); /*else editText="";*/
                                        break;

                                    case "Copy":
                                        if (editText!="") System.Windows.Forms.Clipboard.SetText(editText);
                                        break;

                                    case "Paste":
                                        if (System.Windows.Forms.Clipboard.ContainsText()) editText+=System.Windows.Forms.Clipboard.GetText();
                                        break;

                                    //case "Remove":
                                    //   editText = "";
                                    //   break;

                                    //case "Double":
                                    //   editText += editText;
                                    //   break;

                                    //case "§":
                                    //   break;

                                    //case "Quick":
                                    //   editText += "RabigonCraft The most of my World";
                                    //   break;

                                    //case "Alt":
                                    //   olderKey = "Alt";
                                    //   break;

                                    default:
                                        editText+=add;
                                        //editText =editText.Replace("<,", "<");
                                        //editText =editText.Replace(",<", "<");

                                        //editText =editText.Replace(">.", ">");
                                        //editText =editText.Replace(".>", ">");

                                        //editText =editText.Replace("/ú", "/");
                                        //editText =editText.Replace("ú/", "/");
                                        break;
                                }
                            }
                            timeHold--;
                        } else {
                            hold=false;
                            timeHold=30;
                        }
                    }
                }
            }
            // olderKey = lastKey;
            lastKey=newKey;

            return editText;
        }

        string Add() {
            if (newKeyboardState.IsKeyDown(Keys.Space)) return " ";

            if (newKeyboardState.IsKeyDown(Keys.Q)) return "g";
            if (newKeyboardState.IsKeyDown(Keys.W)) return "w";
            if (newKeyboardState.IsKeyDown(Keys.E)) return "e";
            if (newKeyboardState.IsKeyDown(Keys.R)) return "r";
            if (newKeyboardState.IsKeyDown(Keys.T)) return "t";
            if (newKeyboardState.IsKeyDown(Keys.Z)) return "z";
            if (newKeyboardState.IsKeyDown(Keys.U)) return "u";
            if (newKeyboardState.IsKeyDown(Keys.I)) return "i";
            if (newKeyboardState.IsKeyDown(Keys.O)) return "o";
            if (newKeyboardState.IsKeyDown(Keys.P)) return "p";
            if (newKeyboardState.IsKeyDown(Keys.A)) return "a";
            if (newKeyboardState.IsKeyDown(Keys.S)) return "s";
            if (newKeyboardState.IsKeyDown(Keys.D)) return "d";
            if (newKeyboardState.IsKeyDown(Keys.F)) return "f";
            if (newKeyboardState.IsKeyDown(Keys.G)) return "g";
            if (newKeyboardState.IsKeyDown(Keys.H)) return "h";
            if (newKeyboardState.IsKeyDown(Keys.J)) return "j";
            if (newKeyboardState.IsKeyDown(Keys.K)) return "k";
            if (newKeyboardState.IsKeyDown(Keys.L)) return "l";
            if (newKeyboardState.IsKeyDown(Keys.Y)) return "y";
            if (newKeyboardState.IsKeyDown(Keys.X)) return "x";
            if (newKeyboardState.IsKeyDown(Keys.C)) return "c";
            if (newKeyboardState.IsKeyDown(Keys.V)) return "v";
            if (newKeyboardState.IsKeyDown(Keys.B)) return "b";
            if (newKeyboardState.IsKeyDown(Keys.N)) return "n";
            if (newKeyboardState.IsKeyDown(Keys.M)) return "m";

            if (newKeyboardState.IsKeyDown(Keys.D1)) return "ó";
            if (newKeyboardState.IsKeyDown(Keys.D2)) return "ě";
            if (newKeyboardState.IsKeyDown(Keys.D3)) return "š";
            if (newKeyboardState.IsKeyDown(Keys.D4)) return "č";
            if (newKeyboardState.IsKeyDown(Keys.D5)) return "ř";
            if (newKeyboardState.IsKeyDown(Keys.D6)) return "ž";
            if (newKeyboardState.IsKeyDown(Keys.D7)) return "ý";
            if (newKeyboardState.IsKeyDown(Keys.D8)) return "á";
            if (newKeyboardState.IsKeyDown(Keys.D9)) return "í";
            if (newKeyboardState.IsKeyDown(Keys.D0)) return "é";

            if (newKeyboardState.IsKeyDown(Keys.NumPad0)) return "0";
            if (newKeyboardState.IsKeyDown(Keys.NumPad1)) return "1";
            if (newKeyboardState.IsKeyDown(Keys.NumPad2)) return "2";
            if (newKeyboardState.IsKeyDown(Keys.NumPad3)) return "3";
            if (newKeyboardState.IsKeyDown(Keys.NumPad4)) return "4";
            if (newKeyboardState.IsKeyDown(Keys.NumPad5)) return "5";
            if (newKeyboardState.IsKeyDown(Keys.NumPad6)) return "6";
            if (newKeyboardState.IsKeyDown(Keys.NumPad7)) return "7";
            if (newKeyboardState.IsKeyDown(Keys.NumPad8)) return "8";
            if (newKeyboardState.IsKeyDown(Keys.NumPad9)) return "9";
            if (newKeyboardState.IsKeyDown(Keys.NumPad9)) return "9";

            if (newKeyboardState.IsKeyDown(Keys.Back)) return "Delete";
            if (newKeyboardState.IsKeyDown(Keys.Delete)) return "Delete";

            if (newKeyboardState.IsKeyDown(Keys.OemComma)) return ",";
            if (newKeyboardState.IsKeyDown(Keys.OemPeriod)) return ".";
            if (newKeyboardState.IsKeyDown(Keys.OemMinus)) return "-";
            if (newKeyboardState.IsKeyDown(Keys.OemQuestion)) return "'";
            if (newKeyboardState.IsKeyDown(Keys.OemPlus)) return "=";
            if (newKeyboardState.IsKeyDown(Keys.OemCloseBrackets)) return ")";
            if (newKeyboardState.IsKeyDown(Keys.OemSemicolon)) return "ů";
            if (newKeyboardState.IsKeyDown(Keys.OemOpenBrackets)) return "ú";
            if (newKeyboardState.IsKeyDown(Keys.Divide)) return "/";
            if (newKeyboardState.IsKeyDown(Keys.Add)) return "+";
            if (newKeyboardState.IsKeyDown(Keys.Divide)) return "/";
            if (newKeyboardState.IsKeyDown(Keys.Decimal)) return ",";
            if (newKeyboardState.IsKeyDown(Keys.Subtract)) return "-";
            if (newKeyboardState.IsKeyDown(Keys.Multiply)) return "*";
            if (newKeyboardState.IsKeyDown(Keys.OemQuotes)) return "§";

            return "";
        }

        string ConvertNormalToUpper(string key) {
            switch (key) {
                case "q": return "Q";
                case "w": return "W";
                case "e": return "E";
                case "r": return "R";
                case "t": return "T";
                case "z": return "Z";
                case "u": return "U";
                case "i": return "I";
                case "o": return "O";
                case "p": return "P";
                case "a": return "A";
                case "s": return "S";
                case "d": return "D";
                case "f": return "F";
                case "g": return "G";
                case "h": return "H";
                case "j": return "J";
                case "k": return "K";
                case "l": return "L";
                case "y": return "Y";
                case "x": return "X";
                case "c": return "C";
                case "v": return "V";
                case "b": return "B";
                case "n": return "N";
                case "m": return "M";
                case "ú": return "/";
                case ")": return "(";
                case ",": return "?";
                case ".": return ":";
                case "-": return "_";
                case "¨": return "'";
                case "´": return "ˇ";
                case "=": return "%";
            }
            return "";
        }

        string ConvertNormalToCtrls(string key) {
            switch (key) {
                case "x": return "Delete";
                case "c": return "Copy";
                case "v": return "Paste";
            }
            return "";
        }

        string ConvertNormalToAtls(string key) {
            switch (key) {
                case "q": return "\"";
                case "w": return "|";
                case "f": return "[";
                case "g": return "]";
                case "x": return "#";
                case "c": return "&";
                case "v": return "@";
                case "b": return "{";
                case "n": return "}";
                case "ú": return "÷";
                case ")": return "×";
                case ",": return "<";
                case ".": return ">";
                case "-": return "*";
                case "+": return "~";
                case "š": return "^";
                case "ř": return "°";
            }
            return "";
        }

        #endregion

        #region New blocks
        Block BackBlockFromId(ushort type, Vector2 position) {
            return type switch {
                // Backs
                (ushort)BlockId.BackDirt => new NormalBlock(backgroundDirtTexture, type, position),
                (ushort)BlockId.BackSand => new NormalBlock(backgroundSandTexture, type, position),
                (ushort)BlockId.BackCobblestone => new NormalBlock(backgroundCobblestoneTexture, type, position),
                (ushort)BlockId.BackClay => new NormalBlock(backgroundClayTexture, type, position),
                (ushort)BlockId.BackRedSand => new NormalBlock(backgroundRedSandTexture, type, position),
                (ushort)BlockId.BackRegolite => new NormalBlock(backgroundRegoliteTexture, type, position),
                (ushort)BlockId.BackGravel => new NormalBlock(backgroundGravelTexture, type, position),
                (ushort)BlockId.BackAnorthosite => new NormalBlock(backgroundAnorthositeTexture, type, position),
                (ushort)BlockId.BackBasalt => new NormalBlock(backgroundBasaltTexture, type, position),
                (ushort)BlockId.BackDiorit => new NormalBlock(backgroundDioritTexture, type, position),
                (ushort)BlockId.BackDolomite => new NormalBlock(backgroundDolomiteTexture, type, position),
                (ushort)BlockId.BackFlint => new NormalBlock(backgroundFlintTexture, type, position),
                (ushort)BlockId.BackGabbro => new NormalBlock(backgroundGabbroTexture, type, position),
                (ushort)BlockId.BackGneiss => new NormalBlock(backgroundGneissTexture, type, position),
                (ushort)BlockId.BackLimestone => new NormalBlock(backgroundLimestoneTexture, type, position),
                (ushort)BlockId.BackMudstone => new NormalBlock(backgroundMudstoneTexture, type, position),
                (ushort)BlockId.BackRhyolite => new NormalBlock(backgroundRhyoliteTexture, type, position),
                (ushort)BlockId.BackSandstone => new NormalBlock(backgroundSandstoneTexture, type, position),
                (ushort)BlockId.BackSchist => new NormalBlock(backgroundSchistTexture, type, position),
                (ushort)BlockId.BackCoal => new NormalBlock(backgroundCoalTexture, type, position),
                (ushort)BlockId.BackCopper => new NormalBlock(backgroundCopperTexture, type, position),
                (ushort)BlockId.BackTin => new NormalBlock(backgroundTinTexture, type, position),
                (ushort)BlockId.BackIron => new NormalBlock(backgroundIronTexture, type, position),
                (ushort)BlockId.BackAluminium => new NormalBlock(backgroundAluminiumTexture, type, position),
                (ushort)BlockId.BackSilver => new NormalBlock(backgroundSilverTexture, type, position),
                (ushort)BlockId.BackGold => new NormalBlock(backgroundGoldTexture, type, position),
                (ushort)BlockId.BackSulfur => new NormalBlock(TextureBackSulfurOre, type, position),
                (ushort)BlockId.BackSaltpeter => new NormalBlock(TextureBackSaltpeterOre, type, position),
                // Wood
                (ushort)BlockId.AppleWood => new WoodBlock { Texture = TextureAppleWood, Id = type, Position = position },
                (ushort)BlockId.CherryWood => new WoodBlock { Texture = cherryWoodTexture, Id = type, Position = position },
                (ushort)BlockId.LemonWood => new WoodBlock { Texture = TextureLemonWood, Id = type, Position = position },
                (ushort)BlockId.LindenWood => new WoodBlock { Texture = TextureLindenWood, Id = type, Position = position },
                (ushort)BlockId.OakWood => new WoodBlock { Texture = TextureOakWood, Id = type, Position = position },
                (ushort)BlockId.OrangeWood => new WoodBlock { Texture = TextureOrangeWood, Id = type, Position = position },
                (ushort)BlockId.PineWood => new WoodBlock { Texture = pineWoodTexture, Id = type, Position = position },
                (ushort)BlockId.PlumWood => new WoodBlock { Texture = TexturePlumWood, Id = type, Position = position },
                (ushort)BlockId.SpruceWood => new WoodBlock { Texture = spruceWoodTexture, Id = type, Position = position },
                (ushort)BlockId.WillowWood => new WoodBlock { Texture = TextureWillowWood, Id = type, Position = position },
                (ushort)BlockId.MangroveWood => new WoodBlock { Texture = TextureMangroveWood, Id = type, Position = position },
                (ushort)BlockId.EucalyptusWood => new WoodBlock { Texture = TextureEucalyptusWood, Id = type, Position = position },
                (ushort)BlockId.OliveWood => new WoodBlock { Texture = TextureOliveWood, Id = type, Position = position },
                (ushort)BlockId.RubberTreeWood => new WoodBlock { Texture = TextureRubberTreeWood, Id = type, Position = position },
                (ushort)BlockId.AcaciaWood => new WoodBlock { Texture = TextureAcaciaWood, Id = type, Position = position },
                (ushort)BlockId.KapokWood => new WoodBlock { Texture = TextureKapokWood, Id = type, Position = position },
                // Artifical
                (ushort)BlockId.AdvancedSpaceBack => new NormalBlock(advancedSpaceBackTexture, type, position),
                (ushort)BlockId.AdvancedSpaceWindow => new NormalBlock(advancedSpaceWindowTexture, type, position),
                (ushort)BlockId.Glass => new NormalBlock(glassTexture, type, position),
                (ushort)BlockId.Coral => new NormalBlock(coralTexture, type, position),
                (ushort)BlockId.Seaweed => new NormalBlock(seaweedTexture, type, position),
                _ => null,
            };
        }

		Block SolidBlockFromId(ushort type, Vector2 position) {
            return type switch {
                // Stone
                (ushort)BlockId.StoneBasalt => new NormalBlock { Texture = basaltTexture, Id = type, Position = position },
                (ushort)BlockId.StoneDiorit => new NormalBlock { Texture = dioritTexture, Id = type, Position = position },
                (ushort)BlockId.StoneDolomite => new NormalBlock { Texture = dolomiteTexture, Id = type, Position = position },
                (ushort)BlockId.StoneGabbro => new NormalBlock { Texture = gabbroTexture, Id = type, Position = position },
                (ushort)BlockId.StoneGneiss => new NormalBlock { Texture = gneissTexture, Id = type, Position = position },
                (ushort)BlockId.StoneLimestone => new NormalBlock { Texture = limestoneTexture, Id = type, Position = position },
                (ushort)BlockId.StoneRhyolite => new NormalBlock { Texture = rhyoliteTexture, Id = type, Position = position },
                (ushort)BlockId.StoneSandstone => new NormalBlock { Texture = sandstoneTexture, Id = type, Position = position },
                (ushort)BlockId.StoneSchist => new NormalBlock { Texture = schistTexture, Id = type, Position = position },
                (ushort)BlockId.Anorthosite => new NormalBlock { Texture = anorthositeTexture, Id = type, Position = position },
                (ushort)BlockId.MudStone => new NormalBlock { Texture = mudstoneTexture, Id = type, Position = position },
                (ushort)BlockId.Regolite => new NormalBlock { Texture = regoliteTexture, Id = type, Position = position },
                (ushort)BlockId.RedSand => new NormalBlock { Texture = TextureRedSand, Id = type, Position = position },
                (ushort)BlockId.Compost => new NormalBlock { Texture = CompostTexture, Id = type, Position = position },
                // Ore
                (ushort)BlockId.OreAluminium => new NormalBlock { Texture = TextureOreAluminium, Id = type, Position = position },
                (ushort)BlockId.OreCopper => new NormalBlock { Texture = TextureOreCopper, Id = type, Position = position },
                (ushort)BlockId.OreGold => new NormalBlock { Texture = TextureOreGold, Id = type, Position = position },
                (ushort)BlockId.OreIron => new NormalBlock { Texture = TextureOreIron, Id = type, Position = position },
                (ushort)BlockId.OreSilver => new NormalBlock { Texture = TextureOreSilver, Id = type, Position = position },
                (ushort)BlockId.OreTin => new NormalBlock { Texture = TextureOreTin, Id = type, Position = position },
                (ushort)BlockId.OreCoal => new NormalBlock { Texture = TextureOreCoal, Id = type, Position = position },
                (ushort)BlockId.OreSulfur => new NormalBlock { Texture = TextureOreSulfur, Id = type, Position = position },
                (ushort)BlockId.OreSaltpeter => new NormalBlock { Texture = TextureOreSaltpeter, Id = type, Position = position },
                // Blocks
                (ushort)BlockId.Cobblestone => new NormalBlock { Texture = cobblestoneTexture, Id = type, Position = position },
                (ushort)BlockId.Gravel => new NormalBlock { Texture = gravelTexture, Id = type, Position = position },
                (ushort)BlockId.Sand => new NormalBlock { Texture = sandTexture, Id = type, Position = position },
                (ushort)BlockId.Dirt => new NormalBlock { Texture = TextureDirt, Id = type, Position = position },
                (ushort)BlockId.Ice => new NormalBlock { Texture = iceTexture, Id = type, Position = position },
                (ushort)BlockId.Clay => new NormalBlock { Texture = clayTexture, Id = type, Position = position },
                // Grass
                (ushort)BlockId.GrassBlockDesert => new NormalBlock { Texture = TextureGrassBlockDesert, Id = type, Position = position },
                (ushort)BlockId.GrassBlockForest => new NormalBlock { Texture = TextureGrassBlockForest, Id = type, Position = position },
                (ushort)BlockId.GrassBlockHills => new NormalBlock { Texture = TextureGrassBlockHills, Id = type, Position = position },
                (ushort)BlockId.GrassBlockJungle => new NormalBlock { Texture = TextureGrassBlockJungle, Id = type, Position = position },
                (ushort)BlockId.GrassBlockPlains => new NormalBlock { Texture = TextureGrassBlockPlains, Id = type, Position = position },
                (ushort)BlockId.GrassBlockClay => new NormalBlock { Texture = TextureGrassBlockClay, Id = type, Position = position },
                (ushort)BlockId.GrassBlockCompost => new NormalBlock { Texture = TextureGrassBlockCompost, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowDesert => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowForest => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowHills => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowJungle => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowPlains => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowClay => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                (ushort)BlockId.GrassBlockSnowCompost => new NormalBlock { Texture = TextureGrassBlockSnow, Id = type, Position = position },
                // Artifical
                (ushort)BlockId.Roof1 => new NormalBlock { Texture = roof1Texture, Id = type, Position = position },
                (ushort)BlockId.Roof2 => new NormalBlock { Texture = roof2Texture, Id = type, Position = position },
                (ushort)BlockId.Bricks => new NormalBlock { Texture = bricksTexture, Id = type, Position = position },
                (ushort)BlockId.DoorClose => new NormalBlock { Texture = doorCloseTexture, Id = type, Position = position },
                (ushort)BlockId.Planks => new NormalBlock { Texture = planksTexture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpaceBlock => new NormalBlock { Texture = advancedSpaceBlockTexture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpaceFloor => new NormalBlock { Texture = advancedSpaceFloorTexture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpacePart1 => new NormalBlock { Texture = advancedSpacePart1Texture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpacePart2 => new NormalBlock { Texture = advancedSpacePart2Texture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpacePart3 => new NormalBlock { Texture = advancedSpacePart3Texture, Id = type, Position = position },
                (ushort)BlockId.AdvancedSpacePart4 => new NormalBlock { Texture = advancedSpacePart4Texture, Id = type, Position = position },
                (ushort)BlockId.Snow => new NormalBlock { Texture = snowTexture, Id = type, Position = position },
                _ => null,
            };
        }

		Block TopBlockFromId(ushort type, Vector2 position) {
			switch (type) {
				case (ushort)BlockId.BucketForRubber: return new NormalBlock(TextureBucketForRubber,type, position);

				// Blocks
				case (ushort)BlockId.Lava: return new NormalBlock(lavaTexture,type, position);

				// Leaves
				case (ushort)BlockId.AppleLeaves: return new LeavesBlock(TextureAppleLeaves,type, position);
				case (ushort)BlockId.AppleLeavesWithApples: return new LeavesBlock(TextureAppleLeavesWithApples,type, position);
				case (ushort)BlockId.AppleBranches: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.AppleLeavesBlossom: return new LeavesBlock(TextureBranches,type, position);

				case (ushort)BlockId.CherryLeaves: return new LeavesBlock(TextureCherryLeaves,type, position);
				case (ushort)BlockId.CherryLeavesWithCherries: return new LeavesBlock(TextureCherryLeavesWithCherries,type, position);
				case (ushort)BlockId.CherryBranches: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.WillowBranches: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.CherryLeavesBlossom: return new LeavesBlock(TextureBranches,type, position);

				case (ushort)BlockId.PlumLeaves: return new LeavesBlock(TexturePlumLeaves,type, position);
				case (ushort)BlockId.PlumLeavesBlossom: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.PlumBranches: return new LeavesBlock(TextureBranches,type, position);

				case (ushort)BlockId.OakBranches: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.LindenBranches: return new LeavesBlock(TextureBranches,type, position);
				case (ushort)BlockId.LemonLeavesWithLemons: return new LeavesBlock(lemonLeavesWithLemonsTexture,type, position);
				case (ushort)BlockId.LindenLeaves: return new LeavesBlock(TextureLindenLeaves,type, position);
				case (ushort)BlockId.OakLeaves: return new LeavesBlock(TextureOakLeaves, type, position);
				case (ushort)BlockId.OrangeLeaves: return new LeavesBlock(TextureOrangeLeaves,type, position);
				case (ushort)BlockId.SpruceLeaves: return new LeavesBlock(spruceLeavesTexture,type, position);
				case (ushort)BlockId.PlumLeavesWithPlums: return new LeavesBlock(TexturePlumLeavesWithPlums,type, position);
				case (ushort)BlockId.PineLeaves: return new LeavesBlock(pineLeavesTexture,type, position);
				case (ushort)BlockId.OrangeLeavesWithOranges: return new LeavesBlock(TextureOrangeLeavesWithOranges,type, position);
				case (ushort)BlockId.LemonLeaves: return new LeavesBlock(TextureLemonLeaves,type, position);
				case (ushort)BlockId.WillowLeaves: return new LeavesBlock(TextureWillowLeaves,type, position);
				case (ushort)BlockId.MangroveLeaves:return new LeavesBlock(TextureMangroveLeaves,type, position);
				case (ushort)BlockId.EucalyptusLeaves: return new LeavesBlock(TextureEucalyptusLeaves,type, position);
				case (ushort)BlockId.OliveLeavesWithOlives:return new LeavesBlock(TextureOliveLeavesWithOlives,type, position);
				case (ushort)BlockId.OliveLeaves: return new LeavesBlock(TextureOliveLeaves,type, position);
				case (ushort)BlockId.RubberTreeLeaves: return new LeavesBlock(TextureRubberTreeLeaves,type, position);
				case (ushort)BlockId.AcaciaLeaves: return new LeavesBlock(TextureAcaciaLeaves,type, position);
				case (ushort)BlockId.KapokLeacesFlowering: return new LeavesBlock(TextureKapokBlossom,type, position);
				case (ushort)BlockId.KapokLeacesFibre: return new LeavesBlock(TextureKapokLeavesFibre,type, position);
				case (ushort)BlockId.KapokLeaves: return new LeavesBlock(TextureKapokLeaves,type, position);

				case (ushort)BlockId.EggDrop:
					//if (easter) return new NormalBlock{Texture=, Id=type, Position=position};
				//	else
                        return new NormalBlock{Texture=(easter ? TextureEggDropE[FastRandom.Int4()] : TextureEggDrop), Id=type, Position=position};

				case (ushort)BlockId.WillowSapling: return new NormalBlock{Texture=TextureWillowSapling, Id=type, Position=position};
				case (ushort)BlockId.MangroveSapling: return new NormalBlock{Texture=TextureMangroveSapling, Id=type, Position=position};
				case (ushort)BlockId.EucalyptusSapling:return new NormalBlock{Texture=TextureEucalyptusSapling, Id=type, Position=position};
				case (ushort)BlockId.OliveSapling: return new NormalBlock{Texture=TextureOliveSapling, Id=type, Position=position};
				case (ushort)BlockId.RubberTreeSapling: return new NormalBlock{Texture=TextureRubberTreeSapling, Id=type, Position=position};
				case (ushort)BlockId.AcaciaSapling: return new NormalBlock{Texture=TextureAcaciaSapling, Id=type, Position=position};
				case (ushort)BlockId.KapokSapling: return new NormalBlock{Texture=TextureKapokSapling, Id=type, Position=position};

				// Blocks
				case (ushort)BlockId.SnowTop: return new NormalBlock{Texture=snowTopTexture, Id=type, Position=position };
				case (ushort)BlockId.Glass: return new NormalBlock{Texture=glassTexture, Id=type, Position=position };
				case (ushort)BlockId.ChristmasStar: return new LeavesBlock(TextureChristmasStar, type, position);
				case (ushort)BlockId.Oil: return new NormalBlock{Texture=oilTexture, Id=type, Position=position };
				case (ushort)BlockId.WaterBlock: return new Water(waterTexture,type, position);
				case (ushort)BlockId.WaterSalt: return new Water(waterTexture,type, position);
				case (ushort)BlockId.Rocks: return new NormalBlock{Texture=TextureRocks[FastRandom.Int4()], Id=type, Position=position };

				// Saplings
				case (ushort)BlockId.AppleSapling: return new NormalBlock{Texture=TextureAppleSapling, Id=type, Position=position };
				case (ushort)BlockId.CherrySapling: return new NormalBlock{Texture=cherrySaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.LemonSapling: return new NormalBlock{Texture=lemonSaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.LindenSapling: return new NormalBlock{Texture=TextureLindenSapling, Id=type, Position=position };
				case (ushort)BlockId.OakSapling: return new NormalBlock{Texture=oakSaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.OrangeSapling: return new NormalBlock{Texture=orangeSaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.PineSapling: return new NormalBlock{Texture=pineSaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.PlumSapling: return new NormalBlock{Texture=plumSaplingTexture, Id=type, Position=position };
				case (ushort)BlockId.SpruceSapling: return new NormalBlock{Texture=spruceSaplingTexture, Id=type, Position=position};

				// Flowers
				case (ushort)BlockId.Violet: return new NormalBlock{Texture=plantVioletTexture, Id=type, Position=position};
				case (ushort)BlockId.Dandelion: return new NormalBlock{Texture=plantDandelionTexture, Id=type, Position=position};
				case (ushort)BlockId.Heather: return new NormalBlock{Texture=heatherTexture, Id=type, Position=position};
				case (ushort)BlockId.Alore: return new NormalBlock{Texture=plantAloreTexture, Id=type, Position=position};
				case (ushort)BlockId.Rose: return new NormalBlock{Texture=plantRoseTexture, Id=type, Position=position};
				case (ushort)BlockId.Orchid: return new NormalBlock{Texture=plantOrchidTexture, Id=type, Position=position};

				case (ushort)BlockId.CactusBig: return new CactusBlock{Texture=cactusBigTexture, Id=type, Position=position };
				case (ushort)BlockId.CactusSmall: return new CactusBlock{Texture=cactusLittleTexture, Id=type, Position=position };

			   // case (ushort)BlockId.Liana: return new NormalBlock(lianaTexture,type, position);
				case (ushort)BlockId.SugarCane: return new NormalBlock{Texture=sugarCaneTexture, Id=type, Position=position };

				case (ushort)BlockId.Toadstool: return new NormalBlock{Texture=toadstoolTexture, Id=type, Position=position};
				case (ushort)BlockId.Boletus: return new NormalBlock{Texture=boletusTexture, Id=type, Position=position};
				case (ushort)BlockId.Champignon: return new NormalBlock{Texture=champignonTexture, Id=type, Position=position};

				case (ushort)BlockId.BranchALittle1: return new NormalBlock{Texture=branchALittle1Texture, Id=type, Position=position};
				case (ushort)BlockId.BranchALittle2: return new NormalBlock{Texture=branchALittle2Texture, Id=type, Position=position};
				case (ushort)BlockId.BranchFull: return new NormalBlock{Texture=branchFullTexture, Id=type, Position=position};
				case (ushort)BlockId.BranchWithout: return new NormalBlock{Texture=branchWithoutTexture, Id=type, Position=position};

				// Grass
				case (ushort)BlockId.GrassDesert: return new NormalBlock{Texture=grassDesertTexture, Id=type, Position=position};
				case (ushort)BlockId.GrassForest: return new NormalBlock{Texture=grassForestTexture, Id=type, Position=position};
				case (ushort)BlockId.GrassHills: return new NormalBlock{Texture=grassHillsTexture, Id=type, Position=position};
				case (ushort)BlockId.GrassJungle: return new NormalBlock{Texture=grassJungleTexture, Id=type, Position=position};
				case (ushort)BlockId.GrassPlains: return new NormalBlock{Texture=grassPlainsTexture, Id=type, Position=position};

				// Artifical Blocks
				case (ushort)BlockId.DoorOpen: return new NormalBlock{Texture=doorOpenTexture, Id=type, Position=position};

				// Mechanical
				case (ushort)BlockId.Flag: return new AnimatedBlock(flagTexture, position,25,35,type);
				case (ushort)BlockId.Desk: return new NormalBlock{Texture=deskTexture, Id=type, Position=position};
				case (ushort)BlockId.Ladder: return new NormalBlock{Texture=ladderTexture, Id=type, Position=position};
				case (ushort)BlockId.BoxAdv: return new BoxBlock(boxAdvTexture, type, position,InvMaxBoxAdv);
				case (ushort)BlockId.BoxWooden: return new BoxBlock(boxWoodenTexture, type, position,InvMaxBoxWooden);
				case (ushort)BlockId.Shelf: return new ShelfBlock(shelfTexture, type, position, InvMaxShelf);
				case (ushort)BlockId.BurningTorch: return new AnimatedBlock(torchTexture, position,16,16, type);
				case (ushort)BlockId.NotBurningTorch: return new NormalBlock{Texture=torchTexture, Id=type, Position=position};
				case (ushort)BlockId.Barrel: return new Barrel(TextureBarrel, type, position);

				// Electric mashines
				case (ushort)BlockId.Lamp:
					MashineBlockBasic m=new(lampTexture,type, position,0);
					lightsLamp.Add(m);
					return m;

				case (ushort)BlockId.Radio: return new MashineBlockBasic(radioTexture, type, position,0);
				case (ushort)BlockId.Rocket: return new NormalBlock{Texture=rocketTexture, Id=type, Position=position };

				// Generating energy
				case (ushort)BlockId.Windmill: return new AnimatedBlockOffset(windMillTexture, position,26,45,type,-5,-29);
				case (ushort)BlockId.SewingMachine: return new MashineBlockBasic(sewingMachineTexture,type, position,0);
				case (ushort)BlockId.FurnaceStone: return new MashineBlockBasic(furnaceStoneTexture,type, position, InvMaxFurnaceStone);
				case (ushort)BlockId.Miner: return new MashineBlockBasic(minerTexture,type, position, InvMaxMiner);
				case (ushort)BlockId.Macerator: return new MashineBlockBasic(maceratorTexture,type, position, 0);
				case (ushort)BlockId.FurnaceElectric: return new MashineBlockBasic(furnaceElectricTexture,type, position,0);
				case (ushort)BlockId.Charger: return new MashineBlockBasic(chargerTexture,type, position, 1);
				case (ushort)BlockId.OxygenMachine: return new MashineBlockBasic(TextureOxygenMachine,type, position, 1);
				case (ushort)BlockId.Composter: return new ShelfBlock(ComposterTexture,type, position, InvMaxComposter);
				case (ushort)BlockId.SolarPanel: return new NormalBlock{Texture=solarPanelTexture, Id=type, Position=position};
				case (ushort)BlockId.Label: return new ScreenBlock(labelTexture, position,16,16,type);
				case (ushort)BlockId.AngelHair: return new LeavesBlock(TextureAngelHairWithSpruceLeaves, type, position);
				case (ushort)BlockId.ChristmasBall: return new LeavesBlock(TextureChristmasBallGrayWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallBlue: return new LeavesBlock(TextureChristmasBallBlueWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallYellow: return new LeavesBlock(TextureChristmasBallYellowWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallLightGreen: return new LeavesBlock(TextureChristmasBallLightGreenWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallOrange: return new LeavesBlock(TextureChristmasBallOrangeWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallRed: return new LeavesBlock(TextureChristmasBallRedWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallPink: return new LeavesBlock(TextureChristmasBallPinkWithLeaves, type, position);
				case (ushort)BlockId.ChristmasBallPurple: return new LeavesBlock(TextureChristmasBallPurpleWithLeaves, type, position);


				default: return null;
			}
		}

		Plant GetPlantFromId(ushort input, byte height, byte grow, short x) {
            return input switch {
                (ushort)BlockId.Wheat => new Plant(input, height, grow, x, wheatTexture),
                (ushort)BlockId.Onion => new Plant(input, height, grow, x, plantOnionTexture),
                (ushort)BlockId.Peas => new Plant(input, height, grow, x, plantPeasTexture),
                (ushort)BlockId.Carrot => new Plant(input, height, grow, x, plantCarrotTexture),
                (ushort)BlockId.Flax => new Plant(input, height, grow, x, flaxTexture),
                (ushort)BlockId.Strawberry => new Plant(input, height, grow, x, strawberryPlantTexture),
                (ushort)BlockId.Rashberry => new Plant(input, height, grow, x, rashberryPlantTexture),
                (ushort)BlockId.Blueberry => new Plant(input, height, grow, x, blueberryPlantTexture),
                _ => null,
            };
        }


        //MMob GetMobFromId(BlockId input, byte height, bool dir, int x) {
        //    switch (input) {
        //        case BlockId.Fish: return new Fish((byte)input, height, x, dir, fishTexture0, fishTexture1);
        //        case BlockId.Chicken: return new Chicken((byte)input, height, x, dir, chickenWalkTexture, chickenEatTexture);
        //        case BlockId.Rabbit: return new Rabbit((byte)input, height, x, dir, rabbitWalkTexture, rabbitEatTexture, rabbitJumpTexture);

        //        default: return null;
        //    }
        //}
        #endregion

        #region Labels
        void RefreshAroundLabels(int x, int y) {
            if (terrain[x].TopBlocks[y+1]!=null) { if (terrain[x].TopBlocks[y+1].Id==(int)BlockId.Label) SetIndexLabel(x, y+1); }
            if (terrain[x].TopBlocks[y-1]!=null) { if (terrain[x].TopBlocks[y-1].Id==(int)BlockId.Label) SetIndexLabel(x, y-1); }

            if (terrain[x+1]!=null) {
                if (terrain[x+1].TopBlocks[y]!=null) {
                    if (terrain[x+1].TopBlocks[y].Id==(int)BlockId.Label) SetIndexLabel(x+1, y);
                }
            }
            if (terrain[x-1]!=null) {
                if (terrain[x-1].TopBlocks[y]!=null) {
                    if (terrain[x-1].TopBlocks[y].Id==(int)BlockId.Label) SetIndexLabel(x-1, y);
                }
            }
        }

        void SetIndexLabel(int x, int y) {
            bool up = false, down = false, left = false, right = false;

            if (terrain[x].TopBlocks[y-1]!=null)
                up=terrain[x].TopBlocks[y-1].Id==(int)BlockId.Label
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Lamp
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Radio
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.FurnaceElectric
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Macerator
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.SolarPanel
                ||terrain[x].TopBlocks[y-1].Id==(int)BlockId.Windmill;

            if (terrain[x].TopBlocks[y+1]!=null)
                down=terrain[x].TopBlocks[y+1].Id==(int)BlockId.Label
                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Lamp
                 ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Radio
                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.FurnaceElectric
                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Macerator
                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Watermill
                ||terrain[x].TopBlocks[y+1].Id==(int)BlockId.Windmill;

            if (terrain[x-1]!=null) {
                if (terrain[x-1].TopBlocks[y]!=null)
                    left=terrain[x-1].TopBlocks[y].Id==(int)BlockId.Label
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Lamp
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Radio
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.FurnaceElectric
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Macerator
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.SolarPanel
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Watermill
                    ||terrain[x-1].TopBlocks[y].Id==(int)BlockId.Windmill;
            }

            if (terrain[x+1]!=null) {
                if (terrain[x+1].TopBlocks[y]!=null)
                    right=terrain[x+1].TopBlocks[y].Id==(int)BlockId.Label
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Lamp
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.FurnaceElectric
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Macerator
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Radio
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.SolarPanel
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Watermill
                    ||terrain[x+1].TopBlocks[y].Id==(int)BlockId.Windmill;
            }

            if (up&&down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=15; return; }
            if (!up&&down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=14; return; }
            if (up&&down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=13; return; }
            if (up&&!down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=12; return; }
            if (up&&down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=11; return; }
            if (up&&down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=10; return; }
            if (!up&&!down&&left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=9; return; }
            if (up&&!down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=8; return; }
            if (!up&&down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=7; return; }
            if (!up&&down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=6; return; }
            if (up&&!down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=5; return; }
            if (!up&&!down&&left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=4; return; }
            if (!up&&down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=3; return; }
            if (!up&&!down&&!left&&right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=2; return; }
            if (up&&!down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=1; return; }
            if (!up&&!down&&!left&&!right) { ((ScreenBlock)terrain[x].TopBlocks[y]).Screen=0; return; }
        }
        #endregion

        #region Draw Inventory
      Texture2D ItemIdToTexture(ushort id) {
			switch (id) {
				 case (ushort)Items.ChristmasBallGray: return TextureChristmasBall;
				 case (ushort)Items.ChristmasBallYellow: return TextureChristmasBallYellow;
				 case (ushort)Items.ChristmasBallOrange: return TextureChristmasBallOrange;
				 case (ushort)Items.ChristmasBallRed: return TextureChristmasBallRed;
				 case (ushort)Items.ChristmasBallPurple: return TextureChristmasBallPurple;
				 case (ushort)Items.ChristmasBallPink: return TextureChristmasBallPink;
				 case (ushort)Items.ChristmasBallLightGreen: return TextureChristmasBallLightGreen;
				 case (ushort)Items.ChristmasBallBlue: return TextureChristmasBallBlue;
				 case (ushort)Items.ChristmasBallTeal: return TextureChristmasBallTeal;
				 case (ushort)Items.AngelHair: return TextureAngelHair;

				case (ushort)Items.ChristmasStar:return TextureChristmasStar;
				case (ushort)Items.AirTank:return TextureAirTank;
				case (ushort)Items.AirTank2:return TextureAirTank2;
				case (ushort)Items.OxygenMachine:return TextureOxygenMachine;
				case (ushort)Items.BackSulfur:return TextureBackSulfurOre;
				case (ushort)Items.BackSaltpeter:return TextureBackSaltpeterOre;
				case (ushort)Items.Ammo:return TextureAmmo;
				case (ushort)Items.Gun:return TextureGun;
				case (ushort)Items.Saltpeter:return TextureSaltpeter;
				case (ushort)Items.SulfurDust:return TextureSulfur;
				case (ushort)Items.OreSaltpeter:return TextureOreSaltpeter;
				case (ushort)Items.OreSulfur:return TextureOreSulfur;
				case (ushort)Items.Gunpowder:return TextureGunpowder;

				case (ushort)Items.BucketForRubber:return TextureBucketForRubber;
				case (ushort)Items.Resin:return  TextureResin;
				case (ushort)Items.Aluminium:return ItemAluminiumTexture;
				case (ushort)Items.TorchOFF:return TextureTorchOff;
				//case (ushort)Items.BronzeHeadHoe:return TextureHoeHeadBronze;
				//case (ushort)Items.CopperHeadHoe:return TextureHoeHeadCopper;
				//case (ushort)Items.HoeHeadIron:return TextureHoeHeadIron;
				case (ushort)Items.HoeCopper:return TextureHoeCopper;

				case (ushort)Items.Mobile:return mobileTexture;
				case (ushort)Items.SewingMachine:return sewingMachineTexture;
				case (ushort)Items.BucketOil:return bucketOilTexture;
				case (ushort)Items.TorchON:return torchInvTexture;

				case (ushort)Items.BottleOil:return bottleOilTexture;
				case (ushort)Items.BoxAdv:return boxAdvTexture;
				case (ushort)Items.BoxWooden:return boxWoodenTexture;
				case (ushort)Items.Shelf:return shelfTexture;
				case (ushort)Items.Heater:return heatherTexture;
				case (ushort)Items.WoodDust:return ItemWoodDustTexture;
				case (ushort)Items.AluminiumDust:return ItemAluminiumDustTexture;
				case (ushort)Items.FlaxSeeds:return flaxSeedsTexture;
				case (ushort)Items.MudIngot:return oneMudBrickTexture;
				case (ushort)Items.AluminiumIngot:return ItemAluminiumIngotTexture;
				case (ushort)Items.Nail:return nailTexture;
				case (ushort)Items.Silicium:return siliciumTexture;
				case (ushort)Items.StoneBasalt: return basaltTexture;
				case (ushort)Items.StoneLimestone: return limestoneTexture;
				case (ushort)Items.StoneRhyolite: return rhyoliteTexture;
				case (ushort)Items.StoneGneiss: return gneissTexture;
				case (ushort)Items.StoneSandstone: return sandstoneTexture;
				case (ushort)Items.StoneSchist: return schistTexture;
				case (ushort)Items.StoneGabbro: return gabbroTexture;
				case (ushort)Items.StoneDiorit: return dioritTexture;
				case (ushort)Items.StoneDolomite: return dolomiteTexture;
				case (ushort)Items.Flax: return flaxInvTexture;
				case (ushort)Items.Dirt: return TextureDirt;
				case (ushort)Items.Sand: return sandTexture;
				case (ushort)Items.Lava: return lavaTexture;
				case (ushort)Items.Stonerubble: return cobblestoneTexture;
				case (ushort)Items.Gravel: return gravelTexture;

				case (ushort)Items.WoodOak: return TextureOakWood;
				case (ushort)Items.WoodSpruce: return spruceWoodTexture;
				case (ushort)Items.WoodLinden: return TextureLindenWood;
				case (ushort)Items.WoodPine: return pineWoodTexture;
				case (ushort)Items.WoodApple: return TextureAppleWood;
				case (ushort)Items.WoodCherry: return cherryWoodTexture;
				case (ushort)Items.WoodPlum: return TexturePlumWood;
				case (ushort)Items.WoodLemon: return TextureLemonWood;
				case (ushort)Items.WoodOrange: return TextureOrangeWood;

				case (ushort)Items.OakLeaves: return TextureOakLeaves;

				case (ushort)Items.GrassBlockDesert: return TextureGrassBlockDesert;
				case (ushort)Items.GrassBlockForest: return TextureGrassBlockForest;
				case (ushort)Items.GrassBlockHills: return TextureGrassBlockHills;
				case (ushort)Items.GrassBlockJungle: return TextureGrassBlockJungle;
				case (ushort)Items.GrassBlockPlains: return TextureGrassBlockPlains;
				case (ushort)Items.GrassBlockCompost: return TextureGrassBlockCompost;

				//Crafted
				case (ushort)Items.Glass: return glassTexture;
				case (ushort)Items.Bricks: return bricksTexture;

				case (ushort)Items.Planks: return planksTexture;

				case (ushort)Items.Desk: return deskTexture;
				case (ushort)Items.Door: return ItemDoorTexture;
				case (ushort)Items.Ladder: return ladderTexture;
				case (ushort)Items.Flag: return ItemFlagTexture;

				case (ushort)Items.Rope: return ItemRopeTexture;

				case (ushort)Items.HayBlock: return hayBlockTexture;

				case (ushort)Items.Roof1: return roof1Texture;
				case (ushort)Items.Roof2: return roof2Texture;

				//Mashines
				case (ushort)Items.AdvancedSpaceBack: return advancedSpaceBackTexture;
				case (ushort)Items.AdvancedSpaceWindow: return advancedSpaceWindowTexture;
				case (ushort)Items.AdvancedSpaceBlock: return advancedSpaceBlockTexture;
				case (ushort)Items.AdvancedSpaceFloor: return advancedSpaceFloorTexture;
				case (ushort)Items.AdvancedSpacePart1: return advancedSpacePart1Texture;
				case (ushort)Items.AdvancedSpacePart2: return advancedSpacePart2Texture;
				case (ushort)Items.AdvancedSpacePart3: return advancedSpacePart3Texture;
				case (ushort)Items.AdvancedSpacePart4: return advancedSpacePart4Texture;

				case (ushort)Items.WindMill: return ItemWindMillTexture;
				case (ushort)Items.WaterMill: return ItemWaterMillTexture;
				case (ushort)Items.SolarPanel: return solarPanelTexture;

				case (ushort)Items.Miner: return minerTexture;
				case (ushort)Items.Macerator: return maceratorOneTexture;
				case (ushort)Items.Lamp: return lampTexture;
				case (ushort)Items.Radio: return radioInvTexture;
				case (ushort)Items.Label: return labelOneTexture;
				case (ushort)Items.Rocket: return ItemRocketTexture;
				case (ushort)Items.FurnaceElectric: return furnaceElectricOneTexture;
				case (ushort)Items.FurnaceStone: return furnaceStoneOneTexture;
				case (ushort)Items.Barrel: return TextureBarrel;

				//Food
				case (ushort)Items.Banana: return ItemBananaTexture;
				case (ushort)Items.Cherry: return ItemCherryTexture;
				case (ushort)Items.Lemon: return ItemLemonTexture;
				case (ushort)Items.Orange: return ItemOrangeTexture;
				case (ushort)Items.Plum: return ItemPlumTexture;
				case (ushort)Items.Apple: return ItemAppleTexture;
				case (ushort)Items.Rashberry: return rashberryTexture;
				case (ushort)Items.Strawberry: return strawberryTexture;
				case (ushort)Items.Blueberries: return blueberryTexture;

				case (ushort)Items.RabbitMeatCooked: return ItemRabbtCookedMeatTexture;
				case (ushort)Items.RabbitMeat: return ItemRabbitMeatTexture;

				case (ushort)Items.AnimalFish: return fishTexture0;
				case (ushort)Items.FishMeatCooked: return fishCookedTexture;

				case (ushort)Items.Egg: return TextureItemEgg;
				case (ushort)Items.boiledEgg: return TextureItemBoiledEgg;

				//Clothes
				case (ushort)Items.Backpack: return ItemBackpackTexture;

				//Items
				case (ushort)Items.CoalDust: return ItemCoalDustTexture;
				case (ushort)Items.BronzeDust: return ItemBronzeDustTexture;
				case (ushort)Items.GoldDust: return ItemGoldDustTexture;
				case (ushort)Items.IronDust: return ItemIronDustTexture;
				case (ushort)Items.SilverDust: return ItemSilverDustTexture;
				case (ushort)Items.CopperDust: return ItemCopperDustTexture;
				case (ushort)Items.TinDust: return ItemTinDustTexture;

				case (ushort)Items.BronzeIngot: return ItemBronzeIngotTexture;
				case (ushort)Items.SteelIngot: return TextureIngotSteel;
				case (ushort)Items.GoldIngot: return ItemGoldIngotTexture;
				case (ushort)Items.IronIngot: return ItemIronIngotTexture;
				case (ushort)Items.TinIngot: return ItemTinIngotTexture;
				case (ushort)Items.SilverIngot: return ItemSilverIngotTexture;
				case (ushort)Items.CopperIngot: return ItemCopperIngotTexture;

				case (ushort)Items.PlateIron: return plateIronTexture;
				case (ushort)Items.PlateBronze: return plateBronzeTexture;
				case (ushort)Items.plateAluminium: return plateAluminiumTexture;
				case (ushort)Items.PlateCopper: return plateCopperTexture;
				case (ushort)Items.PlateGold: return plateGoldTexture;

				case (ushort)Items.OreCoal: return TextureOreCoal;
				case (ushort)Items.ItemCoal: return ItemCoalTexture;
				case (ushort)Items.ItemGold: return ItemGoldTexture;
				case (ushort)Items.ItemTin: return ItemTinTexture;
				case (ushort)Items.ItemSilver: return ItemSilverTexture;
				case (ushort)Items.ItemIron: return ItemIronTexture;
				case (ushort)Items.ItemCopper: return ItemCopperTexture;
				case (ushort)Items.Ash: return ashTexture;
				case (ushort)Items.CoalWood: return coalWoodTexture;

				case (ushort)Items.Saphirite: return ItemSaphiriteTexture;
				case (ushort)Items.Diamond: return ItemDiamondTexture;
				case (ushort)Items.Smaragd: return ItemSmaragdTexture;
				case (ushort)Items.Ruby: return ItemRubyTexture;
				case (ushort)Items.SmallStone: return ItemSmallStoneTexture;
				case (ushort)Items.BigStone: return ItemBigStoneTexture;
				case (ushort)Items.MediumStone: return ItemMediumStoneTexture;

				case (ushort)Items.Bulb: return ItemBulbTexture;
				case (ushort)Items.Circuit: return ItemCircuitTexture;
				case (ushort)Items.ItemBattery: return ItemBatteryTexture;
				case (ushort)Items.BigCircuit: return ItemBigCircuitTexture;
				case (ushort)Items.OneBrick: return oneBrickTexture;

				case (ushort)Items.Cloth: return clothTexture;
				case (ushort)Items.Yarn: return yarnTexture;

				case (ushort)Items.Condenser: return condenserTexture;
				case (ushort)Items.Diode: return diodeTexture;
				case (ushort)Items.Tranzistor: return tranzistorTexture;
				case (ushort)Items.Rezistance: return resistanceTexture;
				case (ushort)Items.Motor: return motorTexture;
				case (ushort)Items.BareLabel: return bareLabelTexture;

				//Plants
				case (ushort)Items.OakSapling: return oakSaplingTexture;
				case (ushort)Items.LindenSapling: return TextureLindenSapling;
				case (ushort)Items.PineSapling: return pineSaplingTexture;
				case (ushort)Items.AppleSapling: return TextureAppleSapling;
				case (ushort)Items.LemonSapling: return lemonSaplingTexture;
				case (ushort)Items.CherrySapling: return cherrySaplingTexture;
				case (ushort)Items.PlumSapling: return plumSaplingTexture;
				case (ushort)Items.SpruceSapling: return spruceSaplingTexture;
				case (ushort)Items.OrangeSapling: return orangeSaplingTexture;

				case (ushort)Items.Dandelion: return plantDandelionTexture;
				case (ushort)Items.PlantRose: return plantRoseTexture;
				case (ushort)Items.PlantOrchid: return plantOrchidTexture;
				case (ushort)Items.PlantViolet: return plantVioletTexture;

				case (ushort)Items.PlantStrawberry: return invStrawberryTexture;
				case (ushort)Items.PlantRashberry: return invRashberryTexture;
				case (ushort)Items.PlantBlueberry: return invBlueberryTexture;

				case (ushort)Items.CactusBig: return cactusBigTexture;
				case (ushort)Items.CactusSmall: return cactusLittleTexture;

				case (ushort)Items.SugarCane: return sugarCaneTexture;
				case (ushort)Items.Onion: return ItemOnionTexture;

				case (ushort)Items.Toadstool: return toadstoolTexture;
				case (ushort)Items.Boletus: return boletusTexture;
				case (ushort)Items.Champignon: return champignonTexture;

				case (ushort)Items.Coral: return coralTexture;
				case (ushort)Items.Seaweed: return seaweedTexture;
				case (ushort)Items.PlantSeaweed: return seaweedTexture;
				case (ushort)Items.PlantOnion: return plantOnionTexture;

				//Nature
				case (ushort)Items.WheatSeeds: return ItemWheatSeedsTexture;
				case (ushort)Items.Seeds: return ItemSeedsTexture;

				case (ushort)Items.WheatStraw: return ItemWheatStrawTexture;
				case (ushort)Items.Hay: return ItemHayTexture;

				case (ushort)Items.Leave: return ItemLeaveTexture;
				case (ushort)Items.Stick: return ItemStickTexture;
				case (ushort)Items.Sticks: return ItemSticksTexture;
				case (ushort)Items.Rubber: return ItemRubberTexture;

				//Tools
				case (ushort)Items.Bucket: return ItemBucketTexture;
				case (ushort)Items.BucketWater: return ItemBucketWaterTexture;

				case (ushort)Items.StoneHead: return stoneHeadTexture;

				//case (ushort)Items.AxeHeadIron: return TextureHeadAxeIron;
				//case (ushort)Items.ShovelHeadIron: return TextureHeadShovelIron;
				//case (ushort)Items.PickaxeHeadIron: return TextureHeadPickaxeIron;

				//Shovel
				case (ushort)Items.ShovelStone: return TextureShovelStone;
				case (ushort)Items.ShovelCopper: return TextureShovelCopper;
				case (ushort)Items.ShovelBronze: return TextureShovelBronze;
				case (ushort)Items.ShovelGold: return TextureShovelGold;
				case (ushort)Items.ShovelIron: return TextureShovelIron;
				case (ushort)Items.ShovelSteel: return TextureShovelSteel;
				case (ushort)Items.ShovelAluminium: return TextureShovelAluminium;

				// Pickaxe
				case (ushort)Items.PickaxeStone: return TexturePickaxeStone;
				case (ushort)Items.PickaxeCopper: return TexturePickaxeCopper;
				case (ushort)Items.PickaxeBronze: return TexturePickaxeBronze;
				case (ushort)Items.PickaxeGold: return TexturePickaxeGold;
				case (ushort)Items.PickaxeIron: return TexturePickaxeIron;
				case (ushort)Items.PickaxeSteel: return TexturePickaxeSteel;
				case (ushort)Items.PickaxeAluminium: return TexturePickaxeAluminium;

				// Axe
				case (ushort)Items.AxeStone: return TextureAxeStone;
				case (ushort)Items.AxeCopper: return TextureAxeCopper;
				case (ushort)Items.AxeBronze: return TextureAxeBronze;
				case (ushort)Items.AxeGold: return TextureAxeGold;
				case (ushort)Items.AxeIron: return TextureAxeIron;
				case (ushort)Items.AxeSteel: return TextureAxeSteel;
				case (ushort)Items.AxeAluminium: return TextureAxeAluminium;

				// Hammers
				case (ushort)Items.HammerCopper: return TextureHammerCopper;
				case (ushort)Items.HammerBronze: return TextureHammerBronze;
				case (ushort)Items.HammerIron: return TextureHammerIron;
				case (ushort)Items.HammerGold: return TextureHammerGold;
				case (ushort)Items.HammerSteel: return TextureHammerSteel;
				case (ushort)Items.HammerAluminium: return TextureHammerAluminium;

				// Shears
				case (ushort)Items.ShearsCopper: return TextureShearsCopper;
				case (ushort)Items.ShearsBronze: return TextureShearsBronze;
				case (ushort)Items.ShearsGold: return TextureShearsGold;
				case (ushort)Items.ShearsIron: return TextureShearsIron;
				case (ushort)Items.ShearsSteel: return TextureShearsSteel;
				case (ushort)Items.ShearsAluminium: return TextureShearsAluminium;

				// Saw
				case (ushort)Items.SawCopper: return TextureSawCopper;
				case (ushort)Items.SawBronze: return TextureSawBronze;
				case (ushort)Items.SawGold: return TextureSawGold;
				case (ushort)Items.SawIron: return TextureSawIron;
				case (ushort)Items.SawSteel: return TextureSawSteel;
				case (ushort)Items.SawAluminium: return TextureSawAluminium;

				case (ushort)Items.ElectricDrill: return TextureDrillElectric;
				case (ushort)Items.ElectricSaw: return electricSawTexture;

				case (ushort)Items.OreAluminium: return TextureOreAluminium;
				case (ushort)Items.OreCopper: return TextureOreCopper;
				case (ushort)Items.OreGold: return TextureOreGold;
				case (ushort)Items.OreIron: return TextureOreIron;
				case (ushort)Items.OreSilver: return TextureOreSilver;
				case (ushort)Items.OreTin: return TextureOreTin;

				case (ushort)Items.AppleLeaves: return TextureAppleLeaves;
				case (ushort)Items.AppleLeavesWithApples: return TextureAppleLeavesWithApples;
				case (ushort)Items.OrangeLeaves: return TextureOrangeLeaves;
				case (ushort)Items.OrangeLeavesWithOranges: return TextureOrangeLeavesWithOranges;
				case (ushort)Items.PlumLeaves: return TexturePlumLeaves;
				case (ushort)Items.PlumLeavesWithPlums: return TexturePlumLeavesWithPlums;
				case (ushort)Items.CherryLeaves: return TextureCherryLeaves;
				case (ushort)Items.CherryLeavesWithCherries: return TextureCherryLeavesWithCherries;
				case (ushort)Items.LemonLeaves: return TextureLemonLeaves;
				case (ushort)Items.LemonLeavesWithLemons: return lemonLeavesWithLemonsTexture;
				case (ushort)Items.LindenLeaves: return TextureLindenLeaves;
				case (ushort)Items.SpruceLeaves: return spruceLeavesTexture;
				case (ushort)Items.PineLeaves: return pineLeavesTexture;

				case (ushort)Items.Snow: return snowTexture;
				case (ushort)Items.SnowTop: return snowTopTexture;
				case (ushort)Items.Ice: return iceTexture;

				case (ushort)Items.GrassDesert: return grassDesertTexture;
				case (ushort)Items.GrassForest: return grassForestTexture;
				case (ushort)Items.GrassHills: return grassHillsTexture;
				case (ushort)Items.GrassJungle: return grassJungleTexture;
				case (ushort)Items.GrassPlains: return grassPlainsTexture;

				case (ushort)Items.Alore: return plantAloreTexture;
				case (ushort)Items.Plastic: return ItemPlasticTexture;

				case (ushort)Items.Carrot: return ItemCarrotTexture;
				case (ushort)Items.PlantCarrot: return plantCarrotTexture;
				case (ushort)Items.Peas: return ItemPeasTexture;
				case (ushort)Items.PlantPeas: return plantPeasTexture;

				case (ushort)Items.Battery: return ItemBatteryTexture;

				case (ushort)Items.BottleWater: return bottleWaterTexture;
				case (ushort)Items.Bottle: return bottleEmptyTexture;
				case (ushort)Items.BowlEmpty: return bowlEmptyTexture;
				case (ushort)Items.BowlWithMushrooms: return bowlMushroomsTexture;
				case (ushort)Items.BowlWithVegetables: return bowlVegetablesTexture;

				case (ushort)Items.ElectricDrillOff: return TextureDrillElectric;
				case (ushort)Items.ElectricSawOff: return electricSawTexture;

				case (ushort)Items.HoeStone: return TextureHoeStone;
				case (ushort)Items.HoeBronze: return TextureHoeBronze;
				case (ushort)Items.HoeIron: return TextureHoeIron;

				case (ushort)Items.Charger: return chargerTexture;

				case (ushort)Items.Clay: return clayTexture;
				case (ushort)Items.GrassBlockClay: return TextureGrassBlockClay;
				case (ushort)Items.BackDirt: return backgroundDirtTexture;
				case (ushort)Items.BackSand: return backgroundSandTexture;
				case (ushort)Items.BackClay: return backgroundClayTexture;
				case (ushort)Items.BackCobblestone: return backgroundCobblestoneTexture;
				case (ushort)Items.BackGravel: return backgroundGravelTexture;
				case (ushort)Items.BackRedSand: return backgroundRedSandTexture;
				case (ushort)Items.BackRegolite: return backgroundRegoliteTexture;

				case (ushort)Items.BackCoal: return backgroundCoalTexture;
				case (ushort)Items.BackAluminium: return backgroundAluminiumTexture;
				case (ushort)Items.BackCopper: return backgroundCopperTexture;
				case (ushort)Items.BackGold: return backgroundGoldTexture;
				case (ushort)Items.BackIron: return backgroundIronTexture;
				case (ushort)Items.BackTin: return backgroundTinTexture;
				case (ushort)Items.BackSilver: return backgroundSilverTexture;


				case (ushort)Items.BackAnorthosite: return backgroundAnorthositeTexture;
				case (ushort)Items.BackBasalt: return backgroundBasaltTexture;
				case (ushort)Items.BackDiorit: return backgroundDioritTexture;
				case (ushort)Items.BackDolomite: return backgroundDolomiteTexture;
				case (ushort)Items.BackFlint: return backgroundFlintTexture;
				case (ushort)Items.BackGabbro: return backgroundGabbroTexture;
				case (ushort)Items.BackGneiss: return backgroundGneissTexture;
				case (ushort)Items.BackLimestone: return backgroundLimestoneTexture;
				case (ushort)Items.BackMudstone: return backgroundMudstoneTexture;
				case (ushort)Items.BackSandstone: return backgroundSandstoneTexture;
				case (ushort)Items.BackSchist: return backgroundSchistTexture;
				case (ushort)Items.BackRhyolite: return backgroundRhyoliteTexture;

				case (ushort)Items.StoneFlint: return flintTexture;
				case (ushort)Items.StoneMudstone: return mudstoneTexture;
				case (ushort)Items.StoneAnorthosite: return anorthositeTexture;
				case (ushort)Items.AnimalRabbit: return rabbitStillTexture;
				case (ushort)Items.AnimalParrot: return TextureParrotStill;
				case (ushort)Items.AnimalChicken: return chickenStillTexture;
				case (ushort)Items.Rod: return RodTexture;
				case (ushort)Items.TorchElectricOFF: return LightElectricTexture;
				case (ushort)Items.TorchElectricON: return LightElectricTexture;
				case (ushort)Items.Compost: return CompostTexture;
				case (ushort)Items.Composter: return ComposterTexture;

				case (ushort)Items.FormalShoes: return TextureItemFormalShoes;
				case (ushort)Items.Pumps: return TextureItemPumps;
				case (ushort)Items.Sneakers: return TextureItemSneakers;
				case (ushort)Items.SpaceBoots: return TextureItemSpaceBoots;

				case (ushort)Items.Jeans: return TextureItemJeans;
				case (ushort)Items.Shorts: return TextureItemShorts;
				case (ushort)Items.SpaceTrousers: return TextureItemSpaceTrousers;
				case (ushort)Items.ArmyTrousers: return TextureItemArmyTrousers;
				case (ushort)Items.Skirt: return TextureItemSkirt;

				case (ushort)Items.TShirt: return TextureItemTShirt;
				case (ushort)Items.SpaceSuit: return TextureItemSpaceSuit;
				case (ushort)Items.Dress: return TextureItemDress;
				case (ushort)Items.Shirt: return TextureItemShirt;

				case (ushort)Items.Cap: return TextureItemCap;
				case (ushort)Items.Hat: return TextureItemHat;
				case (ushort)Items.Crown: return TextureItemCrown;
				case (ushort)Items.SpaceHelmet: return TextureItemSpaceHelmet;

				case (ushort)Items.Underpants: return TextureItemUnderpants;
				case (ushort)Items.BoxerShorts: return TextureItemBoxerShorts;
				case (ushort)Items.Panties: return TextureItemPanties;
				case (ushort)Items.Swimsuit: return TextureItemSwimsuit;
				case (ushort)Items.BikiniDown: return TextureItemBikiniDown;

				case (ushort)Items.Bra: return TextureItemBra;
				case (ushort)Items.BikiniTop: return TextureItemBikiniTop;

				case (ushort)Items.CoatArmy: return TextureItemCoatArmy;
				case (ushort)Items.Coat: return TextureItemCoat;
				case (ushort)Items.JacketDenim: return ItemJacketDenimTexture;
				case (ushort)Items.JacketFormal: return ItemJacketFormalTexture;
				case (ushort)Items.JacketShort: return TextureItemJacketShort;

				case (ushort)Items.AcaciaLeaves: return TextureAcaciaLeaves;
				case (ushort)Items.AcaciaWood: return TextureAcaciaWood;
				case (ushort)Items.AcaciaSapling: return TextureAcaciaSapling;
				case (ushort)Items.MangroveLeaves: return TextureMangroveLeaves;
				case (ushort)Items.MangroveWood: return TextureMangroveWood;
				case (ushort)Items.MangroveSapling: return TextureMangroveSapling;
				case (ushort)Items.WillowLeaves: return TextureWillowLeaves;
				case (ushort)Items.WillowWood: return TextureWillowWood;
				case (ushort)Items.WillowSapling: return TextureWillowSapling;
				case (ushort)Items.Olive: return ItemOliveTexture;
				case (ushort)Items.OliveLeaves: return TextureOliveLeaves;
				case (ushort)Items.OliveLeavesWithOlives:return TextureOliveLeavesWithOlives;
				case (ushort)Items.OliveWood: return TextureOliveWood;
				case (ushort)Items.OliveSapling: return TextureOliveSapling;
				case (ushort)Items.EucalyptusLeaves: return TextureEucalyptusLeaves;
				case (ushort)Items.EucalyptusSapling: return TextureEucalyptusSapling;
				case (ushort)Items.EucalyptusWood: return TextureEucalyptusWood;
				case (ushort)Items.RubberTreeLeaves: return TextureRubberTreeLeaves;
				case (ushort)Items.RubberTreeSapling: return TextureRubberTreeSapling;
				case (ushort)Items.RubberTreeWood: return TextureRubberTreeWood;
				case (ushort)Items.KapokLeaves: return TextureKapokLeaves;
				case (ushort)Items.KapokLeavesFibre: return TextureKapokLeavesFibre;
				case (ushort)Items.KapokLeacesFlowering: return TextureKapokBlossom;
				case (ushort)Items.KapokSapling: return TextureKapokSapling;
				case (ushort)Items.KapokWood: return TextureKapokWood;
				case (ushort)Items.KapokFibre: return ItemKapokFibreTexture;
				case (ushort)Items.KnifeCopper: return TextureKnifeCopper;
				case (ushort)Items.KnifeBronze: return TextureKnifeBronze;
				case (ushort)Items.KnifeGold: return TextureKnifeGold;
				case (ushort)Items.KnifeIron: return TextureKnifeIron;
				case (ushort)Items.KnifeSteel: return TextureKnifeSteel;
				case (ushort)Items.KnifeAluminium: return TextureKnifeAluminium;

				case (ushort)Items.HoeGold: return TextureHoeGold;
				case (ushort)Items.HoeSteel: return TextureHoeSteel;
				case (ushort)Items.HoeAluminium: return TextureHoeAluminium;
				case (ushort)Items.DyeGold: return TextureDyeGold;
				case (ushort)Items.DyeWhite: return TextureDyeWhite;
				case (ushort)Items.DyeYellow: return TextureDyeYellow;
				case (ushort)Items.DyeOrange: return TextureDyeOrange;
				case (ushort)Items.DyeRed: return TextureDyeRed;
				case (ushort)Items.DyeDarkRed: return TextureDyeDarkRed;
				case (ushort)Items.DyeOlive: return TextureDyeOlive;
				case (ushort)Items.DyePurple: return TextureDyePurple;
				case (ushort)Items.DyePink: return TextureDyePink;
				case (ushort)Items.DyeTeal: return TextureDyeTeal;
				case (ushort)Items.DyeLightBlue: return TextureDyeLightBlue;
				case (ushort)Items.DyeBlue: return TextureDyeBlue;
				case (ushort)Items.DyeMagenta: return TextureDyeMagenta;
				case (ushort)Items.DyeDarkBlue: return TextureDyeDarkBlue;
				case (ushort)Items.DyeBlack: return TextureDyeBlack;
				case (ushort)Items.DyeBrown: return TextureDyeBrown;
				case (ushort)Items.DyeLightGray: return TextureDyeLightGray;
				case (ushort)Items.DyeGray: return TextureDyeGray;
				case (ushort)Items.DyeDarkGray: return TextureDyeDarkGray;
				case (ushort)Items.DyeViolet: return TextureDyeViolet;
				case (ushort)Items.DyeSpringGreen: return TextureDyeSpringGreen;
				case (ushort)Items.DyeRoseQuartz: return TextureDyeRoseQuartz;
				case (ushort)Items.TestTube: return TextureTestTube;
				case (ushort)Items.DyeLightGreen: return TextureDyeLightGreen;
				case (ushort)Items.DyeGreen: return TextureDyeGreen;
				case (ushort)Items.DyeArmy: return TextureDyeArmy;
				case (ushort)Items.DyeDarkGreen: return TextureDyeDarkGreen;

					 //Shovel
				case (ushort)Items.ShovelHeadCopper: return TextureShovelHeadCopper;
				case (ushort)Items.ShovelHeadBronze: return TextureShovelHeadBronze;
				case (ushort)Items.ShovelHeadGold: return TextureShovelHeadGold;
				case (ushort)Items.ShovelHeadIron: return TextureShovelHeadIron;
				case (ushort)Items.ShovelHeadSteel: return TextureShovelHeadSteel;
				case (ushort)Items.ShovelHeadAluminium: return TextureShovelHeadAluminium;

				// Pickaxe
				case (ushort)Items.PickaxeHeadCopper: return TexturePickaxeHeadCopper;
				case (ushort)Items.PickaxeHeadBronze: return TexturePickaxeHeadBronze;
				case (ushort)Items.PickaxeHeadGold: return TexturePickaxeHeadGold;
				case (ushort)Items.PickaxeHeadIron: return TexturePickaxeHeadIron;
				case (ushort)Items.PickaxeHeadSteel: return TexturePickaxeHeadSteel;
				case (ushort)Items.PickaxeHeadAluminium: return TexturePickaxeHeadAluminium;

				// Axe
				case (ushort)Items.AxeHeadCopper: return TextureAxeHeadCopper;
				case (ushort)Items.AxeHeadBronze: return TextureAxeHeadBronze;
				case (ushort)Items.AxeHeadGold: return TextureAxeHeadGold;
				case (ushort)Items.AxeHeadIron: return TextureAxeHeadIron;
				case (ushort)Items.AxeHeadSteel: return TextureAxeHeadSteel;
				case (ushort)Items.AxeHeadAluminium: return TextureAxeHeadAluminium;

				// Shears
				case (ushort)Items.ShearsHeadCopper: return TextureShearsHeadCopper;
				case (ushort)Items.ShearsHeadBronze: return TextureShearsHeadBronze;
				case (ushort)Items.ShearsHeadGold: return TextureShearsHeadGold;
				case (ushort)Items.ShearsHeadIron: return TextureShearsHeadIron;
				case (ushort)Items.ShearsHeadSteel: return TextureShearsHeadSteel;
				case (ushort)Items.ShearsHeadAluminium: return TextureShearsHeadAluminium;

				case (ushort)Items.KnifeHeadCopper: return TextureKnifeHeadCopper;
				case (ushort)Items.KnifeHeadBronze: return TextureKnifeHeadBronze;
				case (ushort)Items.KnifeHeadGold: return TextureKnifeHeadGold;
				case (ushort)Items.KnifeHeadIron: return TextureKnifeHeadIron;
				case (ushort)Items.KnifeHeadSteel: return TextureKnifeHeadSteel;
				case (ushort)Items.KnifeHeadAluminium: return TextureKnifeHeadAluminium;

				case (ushort)Items.HoeHeadCopper: return TextureHoeHeadCopper;
				case (ushort)Items.HoeHeadBronze: return TextureHoeHeadBronze;
				case (ushort)Items.HoeHeadGold: return TextureHoeHeadGold;
				case (ushort)Items.HoeHeadIron: return TextureHoeHeadIron;
				case (ushort)Items.HoeHeadSteel: return TextureHoeHeadSteel;
				case (ushort)Items.HoeHeadAluminium: return TextureHoeHeadAluminium;

				case (ushort)Items.RedSand: return TextureRedSand;
				case (ushort)Items.FishMeat: return fishTexture0;

				default:
					#if DEBUG
					throw new Exception("Missing texture for item "+(Items)id);
					#else
					return null;
					#endif
			}
		}
        //void DrawItemInInventory(Texture2D texture, DInt inv, int x, int y) {
        //    if (texture.Width==16&&texture.Height==16) spriteBatch.Draw(texture, new Rectangle(x, y, texture.Width*2, texture.Height*2), Color.White);
        //    else if (texture.Width==32&&texture.Height==32) spriteBatch.Draw(texture, new Vector2(x, y), Color.White);
        //    else spriteBatch.Draw(texture, new Rectangle(x+(16-texture.Width), y+(16-texture.Height), texture.Width*2, texture.Height*2), Color.White);

        //    if (inv.X<(short)Items._SystemMaxTools) {
        //        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+1, y+28, 30, 5), Color.Black);
        //        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+2, y+29, (int)(inv.Y*0.3f), 3), Color.Green);
        //        spriteBatch.Draw(Rabcr.Pixel, new Rectangle(x+2+(int)(inv.Y*0.3f), y+29, 28-(int)(inv.Y*0.3), 3), Color.Red);
        //    } else if (inv.Y!=1) DrawTextShadowMin(x, y+20, inv.Y.ToString());
        //}

        //void DrawItemInInventory(Texture2D texture, int count, int x, int y) {
        //    if (texture.Width==16&&texture.Height==16) spriteBatch.Draw(texture, new Rectangle(x, y, texture.Width*2, texture.Height*2), Color.White);
        //    else if (texture.Width==32&&texture.Height==32) spriteBatch.Draw(texture, new Vector2(x, y), Color.White);
        //    else spriteBatch.Draw(texture, new Rectangle(x+(16-texture.Width), y+(16-texture.Height), texture.Width*2, texture.Height*2), Color.White);

        //    if (count!=1) DrawTextShadowMin(x, y+20, count.ToString());
        //}

        //void InvMouseDraw(int item) {
        //    Texture2D tex = ItemIdToTexture(Inventory[item].X);
        //    if (tex!=null) DrawItemInInventory(tex, Inventory[item], newMouseState.X, newMouseState.Y);
        //}

        //void InvMouseDraw(DInt item) {

        //    Texture2D tex = ItemIdToTexture(item.X);
        //    if (tex!=null) DrawItemInInventory(tex, item, newMouseState.X, newMouseState.Y);
        //}
        #endregion

        #region Inventory change
        //void InventoryRemoveDInt(int inventory) {
        //	Inventory[inventory].Y--;
        //	if (Inventory[inventory].Y==0) Inventory[inventory].X=0;
        //}

        //void ChangeInventoryBasic() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {
        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStart=i;
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStart=i;
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStart=i;
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStart=i;
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStart, i);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStart, i);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //            } else {

        //                //if (mouseLeftPress) {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStart, i);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStart, i);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;/*InvMouseDraw(invStart);*/
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                // if (mouseLeftPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStart, i);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStart, i);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStart, i);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStart, i);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;//else InvMouseDraw(invStart);

        //            }
        //        }
        //    }
        //}

        //void ChangeInventoryCreative() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {
        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStart=i;
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
        //                        invMove=true;
        //                        invStart=i;
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==40*13) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                // if (newMouseState.RightButton==ButtonState.Pressed && oldMouseState.RightButton==ButtonState.Released) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStart=i;
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
        //                            invMove=true;
        //                            invStart=i;
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==40*13) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            // if (mouseRightPress) {
        //            if (mouseRightRelease) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        InvMoveOne(invStart, i);

        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
        //                            InvMoveOne(invStart, i);

        //                        }
        //                        xx+=40;
        //                        if (xx==40*13) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //            } else {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                            InvMove(invStart, i);

        //                        }
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40)
        //                                InvMove(invStart, i);


        //                            xx+=40;
        //                            if (xx==40*13) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                } else InvMouseDraw(/*invStart*/);
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                //  if (mouseLeftPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStart, i);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40) {
        //                            InvMoveDouble(invStart, i);

        //                        }

        //                        xx+=40;
        //                        if (xx==40*13) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // if (mouseLeftRelease) {
        //                    //if (newMouseState.RightButton==ButtonState.Released&&oldMouseState.RightButton==ButtonState.Pressed) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStart, i);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+9*13+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+32+8+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+32+8+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+yh+40)
        //                                InvMove(invStart, i);

        //                            xx+=40;
        //                            if (xx==40*13) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                } else InvMouseDraw(invStart);

        //            }
        //        }
        //    }
        //}

        //void ChangeInventoryFurnaceStone() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {
        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            //Furnace
        //            {
        //                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                    invMove=true;
        //                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
        //                    leftMove=true;
        //                }
        //                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                    invMove=true;
        //                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1];
        //                    leftMove=true;
        //                }
        //                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                    invMove=true;
        //                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2];
        //                    leftMove=true;
        //                }
        //                if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8) {
        //                    invMove=true;
        //                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3];
        //                    leftMove=true;
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                //Furnace
        //                {
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                        invMove=true;
        //                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
        //                        leftMove=false;
        //                    }
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                        invMove=true;
        //                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1];
        //                        leftMove=false;
        //                    }
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40) {
        //                        invMove=true;
        //                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2];
        //                        leftMove=false;
        //                    }
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8) {
        //                        invMove=true;
        //                        invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3];
        //                        leftMove=false;
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {
        //                //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                //Furnace
        //                {
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
        //                        InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
        //                }
        //            } else {

        //                //if (mouseLeftPress) {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    //Furnace
        //                    {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
        //                            InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
        //                    }
        //                } else mouseDraw=true;/*InvMouseDraw(invStart);*/
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                // if (mouseLeftPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                //Furnace
        //                {
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                        InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
        //                        InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    //Furnace
        //                    {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40)
        //                            InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[2]);

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+1+40+40&&newMouseState.X<Global.WindowWidthHalf-300+4+1+40+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+60+40+8&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+60+40+40+8)
        //                            InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[3]);
        //                    }
        //                } else mouseDraw=true;//else InvMouseDraw(invStart);

        //            }
        //        }
        //    }
        //}

        //void InvMove(int from, int to) {
        //    if (from!=to) {
        //        if (Inventory[from].X!=0) {
        //            if (Inventory[from].X==Inventory[to].X) {
        //                if (Inventory[to].Y+Inventory[from].Y>100) {
        //                    int to_ = Inventory[to].Y;
        //                    int from_ = Inventory[from].Y;
        //                    int ss_ = to_+from_;
        //                    Inventory[to].Y=99;
        //                    Inventory[from].Y=ss_-99;
        //                } else {
        //                    Inventory[to].Y+=Inventory[from].Y;
        //                    Inventory[from].Y=0;
        //                    Inventory[from].X=0;
        //                }
        //            } else {
        //                int xx = Inventory[from].X;
        //                int yy = Inventory[from].Y;

        //                Inventory[from].X=Inventory[to].X;
        //                Inventory[from].Y=Inventory[to].Y;

        //                Inventory[to].X=xx;
        //                Inventory[to].Y=yy;
        //            }
        //        }
        //    }
        //    invMove=false;
        //}

        //void InvMoveOne(int from, int to) {
        //    if (Inventory[from].Y!=0) {
        //        if (Inventory[to].Y==0) {
        //            Inventory[to].X=Inventory[from].X;
        //            Inventory[to].Y++;
        //            Inventory[from].Y--;
        //            if (Inventory[from].Y==0) Inventory[from].X=0;
        //            inventoryChanged=true;
        //        } else invMove=false;
        //    } else invMove=false;
        //}

        //void InvMoveDouble(int from, int to) {
        //    if (Inventory[from].X!=0&&Inventory[to].X==0) {
        //        if (Inventory[from].Y>1) {
        //            int half = (int)((float)Inventory[from].Y/2);
        //            int fromY = Inventory[from].Y-half;

        //            Inventory[to].Y=half;
        //            Inventory[from].Y=fromY;

        //            Inventory[to].X=Inventory[from].X;
        //            inventoryChanged=true;
        //        } else invMove=false;
        //    } else invMove=false;
        //}

        //void InvMove(DInt from, DInt to) {
        //    if (from!=to) {
        //        if (from.X!=0) {
        //            if (from.X==to.X) {
        //                if (to.Y+from.Y>100) {
        //                    int to_ = to.Y;
        //                    int from_ = from.Y;
        //                    int ss_ = to_+from_;
        //                    to.Y=99;
        //                    from.Y=ss_-99;
        //                    inventoryChanged=true;
        //                } else {
        //                    to.Y+=from.Y;
        //                    from.Y=0;
        //                    from.X=0;
        //                    inventoryChanged=true;
        //                }
        //            } else {
        //                int xx = from.X;
        //                int yy = from.Y;

        //                from.X=to.X;
        //                from.Y=to.Y;

        //                to.X=xx;
        //                to.Y=yy;
        //                inventoryChanged=true;
        //            }
        //        }
        //    }
        //    invMove=false;
        //}

        //void InvMoveOne(DInt from, DInt to) {
        //    if (from.Y!=0) {
        //        if (to.Y==0) {
        //            to.X=from.X;
        //            to.Y++;
        //            from.Y--;
        //            if (from.Y==0) from.X=0;
        //            inventoryChanged=true;
        //        } else invMove=false;
        //    } else invMove=false;
        //}

        //void InvMoveDouble(DInt from, DInt to) {
        //    if (from.X!=0&&to.X==0) {
        //        if (from.Y>1) {
        //            int half = (int)((float)from.Y/2);
        //            int fromY = from.Y-half;

        //            to.Y=half;
        //            from.Y=fromY;

        //            to.X=from.X;
        //            inventoryChanged=true;
        //        } else invMove=false;
        //    } else invMove=false;
        //}

        ItemNonInv InventoryAdd(ItemNonInv it) {

			switch (it) {
				#region Nonstackable
				case ItemNonInvNonStackable item:
					if (GameMethods.IsItemInvNonStackable32(it.Id)) {
						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i].Id == 0) {
								DInt pos=InventoryGetPosNormal(i);
								//if (i<5) pos
								//else pos=InventoryGetPosNormalInv(i);
								InventoryNormal[i]=new ItemInvNonStackable32(ItemIdToTexture(it.Id),it.Id,pos.X,pos.Y);
								return null;
							}
						}
					} else {
						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i].Id == 0) {
								DInt pos=InventoryGetPosNormal(i);
								//if (i<5) pos
								//else pos=InventoryGetPosNormalInv(i);
								InventoryNormal[i]=new ItemInvNonStackable16(ItemIdToTexture(it.Id),it.Id,pos.X,pos.Y);
								return null;
							}
						}
					}
					return it;

				case ItemNonInvBasicColoritzedNonStackable item:
					if (GameMethods.IsItemInvBasicColoritzed32NonStackable(it.Id)) {
						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i].Id == 0) {
								DInt pos=InventoryGetPosNormal(i);
								//if (i<5) pos
								//else pos=InventoryGetPosNormalInv(i);
								InventoryNormal[i]=new ItemInvBasicColoritzed32NonStackable(ItemIdToTexture(it.Id),it.Id,item.color,pos.X,pos.Y);
								return null;
							}
						}
					}
					return it;

			#endregion

				#region stackable
				case ItemNonInvBasic item:
					if (GameMethods.IsItemInvBasic16(it.Id)) {
						int remain=item.Count;
						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i].Id == it.Id) {
								ItemInvBasic16 item2=(ItemInvBasic16)InventoryNormal[i];
								if (item2.GetCount<99) {
									int needToAdd=99-item2.GetCount;
									if (needToAdd>remain) {
										item2.SetCount=item2.GetCount+remain;
										return null;
									} else if (needToAdd==remain) {
										item2.SetCount=item2.GetCount+remain;
										return null;
									} else {
										item2.SetCount=99;
										remain-=needToAdd;
									}
								}
							}
						}

						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i].Id == 0) {
								DInt pos=InventoryGetPosNormal(i);
								//if (i<5) pos
								//else pos=InventoryGetPosNormalInv(i);
								if (remain<=99) {
									InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, remain, pos.X, pos.Y);
									return null;
								} else {
									InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, 99, pos.X, pos.Y);
									remain-=99;
								}
							}
						}

						return new ItemNonInvBasic(it.Id,remain);
					} else {
						int remain=item.Count;

						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i]!=null) {
								if (InventoryNormal[i].Id == it.Id) {
									ItemInvBasic32 item2=(ItemInvBasic32)InventoryNormal[i];
									if (item2.GetCount<99) {
										int needToAdd=99-item2.GetCount;
										if (needToAdd>remain) {
											item2.SetCount=item2.GetCount+remain;
											return null;
										} else if (needToAdd==remain) {
											item2.SetCount=item2.GetCount+remain;
											return null;
										} else {
											item2.SetCount=99;
											remain-=needToAdd;
										}
									}
								}
							}
						}

						for (int i=0; i<maxInvCount; i++) {
							if (InventoryNormal[i]!=null) {

								if (InventoryNormal[i].Id == 0) {
									DInt pos;
									if (i<5) pos=InventoryGetPosNormal(i);
									else pos=InventoryGetPosNormalInv(i);
									if (remain<=99) {
										InventoryNormal[i]=new ItemInvBasic32(ItemIdToTexture(it.Id), it.Id, remain, pos.X, pos.Y);
										return null;
									} else {
										InventoryNormal[i]=new ItemInvBasic32(ItemIdToTexture(it.Id), it.Id, 99, pos.X, pos.Y);
										remain-=99;
									}
								}
							}
						}
						return new ItemNonInvBasic(it.Id,remain);
					}

			case ItemNonInvFood item:
				if (GameMethods.IsItemInvFood16(it.Id)) {
					int remain=item.Count;
					//for (int i=0; i<maxInvCount; i++) {
					//	if (InventoryNormal[i]!=null) {
					//		if (InventoryNormal[i].Id == it.Id) {
					//			ItemInvFood16 item2=(ItemInvFood16)InventoryNormal[i];
					//			if (item2.GetCount<item2.CountMaximum) {
					//				int needToAdd=item2.CountMaximum-item2.GetCount;
					//				if (needToAdd>remain) {
					//					item2.SetCount=item2.GetCount+remain;
					//					return null;
					//				} else if (needToAdd==remain) {
					//					item2.SetCount=item2.GetCount+remain;
					//					return null;
					//				} else {
					//					item2.SetCount=item2.CountMaximum;
					//					remain-=needToAdd;
					//				}
					//			}
					//		}
					//	}
					//}

					for (int i=0; i<maxInvCount; i++) {
						if (InventoryNormal[i]!=null) {

						if (InventoryNormal[i].Id == 0) {
							DInt pos=InventoryGetPosNormal(i);
								if (remain<=item.CountMaximum) {
							InventoryNormal[i]=new ItemInvFood16(ItemIdToTexture(it.Id), it.Id, remain, item.CountMaximum, item.Descay, item.DescayMaximum, pos.X, pos.Y);
								 //   InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, remain, pos.X, pos.Y);
									return null;
								} else {
							InventoryNormal[i]=new ItemInvFood16(ItemIdToTexture(it.Id), it.Id, remain, item.CountMaximum, item.Descay, item.DescayMaximum, pos.X, pos.Y);
								  //  InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, 99, pos.X, pos.Y);
									remain-=item.CountMaximum;
								}
							}
						} }
					return new ItemNonInvFood(it.Id,remain,item.CountMaximum,item.Descay,item.DescayMaximum);
				} else {
				   int remain=item.Count;
					//for (int i=0; i<maxInvCount; i++) {
					//	if (InventoryNormal[i]!=null) {

					//	if (InventoryNormal[i].Id == it.Id) {
					//		ItemInvFood32 item2=(ItemInvFood32)InventoryNormal[i];
					//		if (item2.GetCount<item2.CountMaximum) {
					//			int needToAdd=item2.CountMaximum-item2.GetCount;
					//			if (needToAdd>remain) {
					//				item2.SetCount=item2.GetCount+remain;
					//				return null;
					//			} else if (needToAdd==remain) {
					//				item2.SetCount=item2.GetCount+remain;
					//				return null;
					//			} else {
					//				item2.SetCount=item2.CountMaximum;
					//				remain-=needToAdd;
					//			}
					//		}
					//	}
					//} }

					for (int i=0; i<maxInvCount; i++) {
						if (InventoryNormal[i]!=null) {

						if (InventoryNormal[i].Id == 0) {
							DInt pos=InventoryGetPosNormal(i);
								if (remain<=item.CountMaximum) {
							InventoryNormal[i]=new ItemInvFood32(ItemIdToTexture(it.Id), it.Id, remain, item.CountMaximum, item.Descay, item.DescayMaximum, pos.X, pos.Y);
								 //   InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, remain, pos.X, pos.Y);
									return null;
								} else {
							InventoryNormal[i]=new ItemInvFood32(ItemIdToTexture(it.Id), it.Id, remain, item.CountMaximum, item.Descay, item.DescayMaximum, pos.X, pos.Y);
								  //  InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(it.Id), it.Id, 99, pos.X, pos.Y);
									remain-=item.CountMaximum;
								}
							}
						} }

					return new ItemNonInvFood(it.Id,remain,item.CountMaximum,item.Descay,item.DescayMaximum);
				}

			case ItemNonInvTool item:
				if (GameMethods.IsItemInvTool32(it.Id)) {
					for (int i=0; i<maxInvCount; i++) {
						if (InventoryNormal[i]!=null) {

						if (InventoryNormal[i].Id == 0) {
							DInt pos;
							if (i<5) pos=InventoryGetPosNormal(i);
							else pos=InventoryGetPosNormalInv(i);
							InventoryNormal[i]=new ItemInvTool32(ItemIdToTexture(it.Id), it.Id, item.Count, item.Maximum, pos.X, pos.Y);
							return null;
						}
					} }

					return item;//new ItemNonInvTool(item.Id, item.Count, item.Maximum);
				}else{
				   for (int i=0; i<maxInvCount; i++) {
						if (InventoryNormal[i]!=null) {

						if (InventoryNormal[i].Id == 0) {
							DInt pos;
							if (i<5) pos=InventoryGetPosNormal(i);
							else pos=InventoryGetPosNormalInv(i);
							InventoryNormal[i]=new ItemInvTool16(ItemIdToTexture(it.Id), it.Id, item.Count, item.Maximum, pos.X, pos.Y);
							return null;
						}
					} }

					return item;//new ItemNonInvTool(item.Id, item.Count, item.Maximum);
				}
				default:
					#if DEBUG
					throw new Exception("Missing category");
					#else
					return it;
					#endif
			}
			#endregion

			//return it;
		}

        void ChangeInventoryState() {
			if (inventory==InventoryType.Normal) {

				if (Global.WorldDifficulty==2) {
					inventory=InventoryType.Creative;
					SetCaptionInventory();
					if (creativeTabCrafting)SetInvCraftingBlocks();
					else SetInvCreativeBlocks();
					return;
				}

				inventory=InventoryType.BasicInv;
				SetCaptionInventory();
				SetUpInvToNew();
				SetNeed();
				return;

			} else {
				if (inventory==InventoryType.Typing) {

					return;
				} else if (inventory==InventoryType.Shelf) {

					ShelfBlock block=(ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y];

					if (block.Inv[4].Id!=0) {
						Texture2D tex=ItemIdToTexture(block.Inv[4].Id);
						if (tex!=null) {
							block.SmalItemTexture=tex;
							block.IsSmallItem=true;

							inventory=0;
							return;
						}
					}

					block.IsSmallItem=false;
					inventory=0;
					return;
				}

				SetPlayerClothes();
				inventory=0;
				return;
			}
		}

        //void ChangeInventoryShelf() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // Shelf
        //            {
        //                int i = 0;
        //                for (int y = 0; y<3*40; y+=40) {
        //                    for (int x = 0; x<3*40; x+=40) {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+25+40) {
        //                            invMove=true;
        //                            invStartDInt=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                            leftMove=true;
        //                        }
        //                        i++;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<3*40; y+=40) {
        //                        for (int x = 0; x<3*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40) {
        //                                invMove=true;
        //                                invStartDInt=((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                                leftMove=false;
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int x = 0; x<3*40; x+=40) {
        //                        for (int y = 0; y<3*40; y+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
        //                                InvMoveOne(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }
        //            } else {

        //                //if (mouseLeftPress) {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Shelf
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<3*40; y+=40) {
        //                            for (int x = 0; x<3*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
        //                                    InvMove(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                // if (mouseLeftPress) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<3*40; y+=40) {
        //                        for (int x = 0; x<3*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
        //                                InvMoveDouble(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    // Shelf
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<3*40; y+=40) {
        //                            for (int x = 0; x<3*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+38+x&&newMouseState.X<Global.WindowWidthHalf-300+38+x+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+20-2+y+20+3+2&&newMouseState.Y<Global.WindowHeightHalf+20-2+y+20+3+2+40)
        //                                    InvMove(invStartDInt, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;//else InvMouseDraw(invStart);
        //            }
        //        }
        //    }
        //}

        //void ChangeInventoryWoodenBox() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // box
        //            {
        //                int i = 0;
        //                for (int y = 0; y<2*40; y+=40) {
        //                    for (int x = 0; x<12*40; x+=40) {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40) {
        //                            invMove=true;
        //                            invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                            leftMove=true;
        //                        }
        //                        i++;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+53+y&&newMouseState.Y<Global.WindowHeightHalf+53+y+40) {
        //                                invMove=true;
        //                                invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                                leftMove=false;
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {
        //                //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                InvMoveOne(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }
        //            } else {

        //                //if (mouseLeftPress) {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Shelf
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<2*40; y+=40) {
        //                            for (int x = 0; x<12*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                    InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                InvMoveDouble(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    // box
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<2*40; y+=40) {
        //                            for (int x = 0; x<12*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                    InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;//else InvMouseDraw(invStart);
        //            }
        //        }
        //    }
        //}

        //void ChangeInventoryAdvBox() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    //DrawItemInInventory(tex,Inventory[i+5].Y,Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // box
        //            {
        //                int i = 0;
        //                for (int y = 0; y<4*40; y+=40) {
        //                    for (int x = 0; x<14*40; x+=40) {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40) {
        //                            invMove=true;
        //                            invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                            leftMove=true;
        //                        }
        //                        i++;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {
        //                //if (newMouseState.RightButton == ButtonState.Pressed && oldMouseState.RightButton == ButtonState.Released) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<14*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40) {
        //                                invMove=true;
        //                                invStartDInt=((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                                leftMove=false;
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {
        //                //if (newMouseState.RightButton==ButtonState.Released && oldMouseState.RightButton==ButtonState.Pressed) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<14*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
        //                                InvMoveOne(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }
        //            } else {
        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Shelf
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<4*40; y+=40) {
        //                            for (int x = 0; x<14*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
        //                                    InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<14*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
        //                                InvMoveDouble(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // box
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<4*40; y+=40) {
        //                            for (int x = 0; x<14*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+10+5+5+x&&newMouseState.X<Global.WindowWidthHalf-300+10+5+5+x+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+23+y&&newMouseState.Y<Global.WindowHeightHalf+23+y+40)
        //                                    InvMove(invStartDInt, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;//else InvMouseDraw(invStart);
        //            }
        //        }
        //    }
        //}
        #endregion

        #region Player
        bool CheckLava() {
            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
                for (int y = PlayerY/16; y<(PlayerY+39/2+16)/16; y++) {
                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
                        if (terrain[x].IsBackground[y]) {
                            if (terrain[x].Background[y].Id==(byte)BlockId.Lava) return true;
                        }
                    }
                }
            }
            return false;
        }

        void CountGravity(AstronomicalObject[] objects) {
            foreach (AstronomicalObject o in objects) {
                if (o.Name!=null) {
                    if (o.Name==world) {
                        gravity=(float)(6.67259e-11*o.Mass/(o.MeanDiameter*o.MeanDiameter*1000000))/20f;
                        notNeedScafander=o.astrO==AstrO.Life;
                        dayLenght=(int)(o.DayLenght*200);
                        return;
                    }
                }
                if (o.Childs!=null) {
                    CountGravity(o.Childs);
                    if (gravity!=0) return;
                }
            }
        }

        void Die(string why/*Cz, string whyEn*/) {
            if (Global.WorldDifficulty==0) {
                diedInfo=/*Setting.czechLanguage ?*/ why/*Cz: whyEn*/;
                timerStayDied=255;
                died=true;

                barHeart=0;
                barOxygen=0;
                barWater=0;
                barEnergy=0;
                barEat=0;
            }
        }

        bool CheckLadder() {
            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
                for (int y = PlayerY/16; y<(PlayerY+39/2+16)/16; y++) {
                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
                        if (terrain[x].IsTopBlocks[y]) {
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.Ladder) return true;
                        }
                    }
                }
            }
            return false;
        }

        bool CheckWater() {
            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
                for (int y = (PlayerY)/16; y<(PlayerY+39/2+16)/16; y++) {
                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
                        if (terrain[x].IsTopBlocks[y]) {
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
                                return true;
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
                                return true;
                        }
                    }
                }
            }
            return false;
        }

        bool CheckWaterDown() {//!!! walking on waves
            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
                for (int y = (PlayerY+39/2+16-1)/16; y<(PlayerY+39/2+16+16+1)/16; y++) {
                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
                        if (terrain[x].IsTopBlocks[y]) {
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
                                return true;
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
                                return true;
                        }
                    }
                }
            }
            return false;
        }

        bool CheckWaterUp() {// player is Swimming on waves
            for (int x = (PlayerX-16)/16; x<(PlayerX+22)/16; x++) {
                for (int y = (PlayerY)/16; y<(PlayerY+39/2)/16; y++) {
                    if (y>0&&y<125&&x>0&&x<TerrainLenght) {
                        if (terrain[x].IsTopBlocks[y]) {
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterBlock)
                                return true;
                            if (terrain[x].TopBlocks[y].Id==(byte)BlockId.WaterSalt)
                                return true;
                        }
                    }
                }
            }
            return false;
        }

        void SetMousePos() {
            if (Setting.Scale.Without==Setting.currentScale) {
                mousePos=new Vector2((newMouseState.X-Global.WindowWidthHalf)/Setting.Zoom+WindowCenterX, (newMouseState.Y-Global.WindowHeightHalf)/Setting.Zoom+WindowCenterY);
                return;
            }

            if (Setting.Scale.Proportions==Setting.currentScale) {
                float screenScaleH = Global.WindowHeight/560f;
                float screenScaleW = Global.WindowWidth/848f;

                if (screenScaleH>screenScaleW) {
                    mousePos=new Vector2((int)((newMouseState.X-Global.WindowWidthHalf)/screenScaleW/Setting.Zoom+(Global.WindowWidth-(int)(screenScaleW*848f))/2)+WindowCenterX, (int)((newMouseState.Y-Global.WindowHeightHalf)/screenScaleW/Setting.Zoom)+WindowCenterY);
                    return;
                } else {
                    mousePos=new Vector2((int)((newMouseState.X-Global.WindowWidthHalf)/screenScaleH/Setting.Zoom)+WindowCenterX, (int)((newMouseState.Y-Global.WindowHeightHalf)/screenScaleH/Setting.Zoom)+WindowCenterX+(Global.WindowHeight-(int)(screenScaleH*560f))/2);
                    return;
                }
            }

            mousePos=new Vector2((newMouseState.X-Global.WindowWidthHalf)/(Global.WindowWidth/848f)/Setting.Zoom+WindowCenterX, (newMouseState.Y-Global.WindowHeightHalf)/((float)Global.WindowHeight/560f)/Setting.Zoom+WindowCenterY);
        }

        void PlayerGravity() {
            distanceToGround=100000;

            for (int y = (PlayerY+20-16)/16; y<(PlayerY+20-16)/16+6; y++) {

                for (int x = (PlayerX-11)/16; x<(PlayerX+11+16)/16; x++) {
                    if (terrain[x]!=null) {
                        if (y>124) break;
                        if (terrain[x].IsSolidBlocks[y]) {
                            if (/*y*16-PlayerY-39/2>0 &&*/ y*16-PlayerY-20<distanceToGround) {
                                distanceToGround=y*16-PlayerY-20;
                            }

                        }
                    }
                }
            }

            if (gravitySpeed<0) {
                int yy = (PlayerY-20-4)/16;

                for (int xx = (PlayerX-11)/16; xx<(PlayerX+11+16)/16; xx++) {
                    if (terrain[xx]!=null) {
                        if (terrain[xx].IsSolidBlocks[yy]) {

                            gravitySpeed=0;

                        }
                    }
                }

            }

            if (distanceToGround==0) {
                gravitySpeed=0;
                return;
            }

            if (distanceToGround</*16*/6&&gravitySpeed>0) {
                PlayerY+=distanceToGround;
                gravitySpeed=0;
                // return false;
            } else {
                gravitySpeed+=.4905f;
                if (gravitySpeed>6) gravitySpeed=6;
                PlayerY+=(int)gravitySpeed;


            }

        }

        void CameraMatrix() {
            if (Setting.Scale.Without==Setting.currentScale) {
                camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*Translation;
                return;
            }

            if (Setting.Scale.Proportions==Setting.currentScale) {
                float _screenScaleW = Global.WindowWidth/848f;
                float _screenScaleH = Global.WindowHeight/560f;

                if (_screenScaleH>_screenScaleW) {
                    camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
                        Matrix.CreateScale(_screenScaleW, _screenScaleW, 0)*Translation;
                    return;
                } else {
                    camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
                        Matrix.CreateScale(_screenScaleH, _screenScaleH, 0)*Translation;
                    return;
                }
            }

            camera=Matrix.CreateTranslation(new Vector3(-WindowCenterX, -WindowCenterY, 0))*
                Matrix.CreateScale(new Vector3(Global.WindowWidth/848f, Global.WindowHeight/560f, 0))*Translation;
        }

        void SetPlayerPos(int x, int y) {
            PlayerX=x;
            PlayerY=y;

            WindowXPlayer+=(PlayerX-WindowCenterX)/*/16f*/;
            WindowYPlayer+=(PlayerY-WindowCenterY)/*/16f*/;

            WindowX=x-Global.WindowWidthHalf;
            WindowY=y-Global.WindowHeightHalf;

            WindowCenterX=(int)WindowXPlayer;
            WindowCenterY=(int)WindowYPlayer;
        }
        #endregion

        #region Destruction
        //void GetItemsFromBlock(byte type, int X, int Y/*, BlockType bt*/) {
        //    int X16 = X*16, Y16 = Y*16;

        //    // switch (bt) {
        //    // case BlockType.Top:

        //    switch ((BlockId)type) {
        //        case BlockId.Macerator:

        //            DropItemToPos(X16, Y16, Items.Macerator);
        //            RefreshAroundLabels(X, Y);
        //            return;

        //        case BlockId.Miner:

        //            DropItemToPos(X16, Y16, Items.Miner);
        //            RefreshAroundLabels(X, Y);
        //            RemovefromMiners(X16, Y16);
        //            return;

        //        case BlockId.Composter:
        //            DropItemToPos(X16, Y16, Items.Composter);
        //            RefreshAroundLabels(X, Y);
        //            RemovefromComposters(X16, Y16);
        //            return;

        //        case BlockId.FurnaceElectric:
        //            DropItemToPos(X16, Y16, Items.FurnaceElectric);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.FurnaceStone:
        //            DropItemToPos(X16, Y16, Items.FurnaceStone);
        //            RemovefromFurnaceStone(X16, Y16);
        //            return;

        //        case BlockId.Rocket:
        //            DropItemToPos(X16, Y16, Items.Rocket);
        //            return;

        //        case BlockId.Desk:
        //            DropItemToPos(X16, Y16, Items.Desk);
        //            return;

        //        case BlockId.Ladder:
        //            DropItemToPos(X16, Y16, Items.Ladder);
        //            return;

        //        case BlockId.Lamp:
        //            DropItemToPos(X16, Y16, Items.Lamp);
        //            RefreshAroundLabels(X16, Y16);
        //            foreach (MashineBlockBasic m in lightsLamp) {
        //                if (m.Position.X==X16) {
        //                    if (m.Position.Y==Y16) {
        //                        lightsLamp.Remove(m);
        //                        return;
        //                    }
        //                }
        //            }
        //            return;

        //        case BlockId.Windmill:
        //            DropItemToPos(X16, Y16, Items.WindMill);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.Flag:
        //            DropItemToPos(X16, Y16, Items.Flag);
        //            return;

        //        case BlockId.Label:
        //            DropItemToPos(X16, Y16, Items.Label);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.AppleLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.AppleSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.EucalyptusLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.EucalyptusLeaves);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.AcaciaLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.AcaciaSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.WillowLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.WillowSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.OliveLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.OliveSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.RubberTreeLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.RubberTreeSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.KapokLeaces:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.KapokLeacesFlowering:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.KapokLeacesFlowering);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.KapokLeacesFlowering);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.KapokLeacesFibre:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.KapokLeacesFibre);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.KapokLeacesFibre);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.KapokSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.OliveLeavesWithOlives:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Olive);
        //                        return;

        //                    case 4:
        //                        DropItemToPos(X16, Y16, Items.Olive);
        //                        return;

        //                    case 5:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.OliveSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.LemonLeavesWithLemons:
        //            DropItemToPos(X16, Y16, Items.Lemon);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.LemonSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.LindenLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.LindenSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.OakLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.OakSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.OrangeLeaves:
        //            DropItemToPos(X16, Y16, Items.Orange);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.OrangeSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.SpruceLeaves:
        //            if (FastRandom.Int(2)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Stick);
        //                else if (FastRandom.Int(4)==1) DropItemToPos(X16, Y16, Items.SpruceSapling);
        //            }
        //            return;

        //        case BlockId.PlumLeavesWithPlums:
        //            DropItemToPos(X16, Y16, Items.Plum);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.PlumSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.PlumLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.PlumSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.PineLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.PineSapling);
        //                        else DropItemToPos(X16, Y16, Items.Banana);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.OrangeLeavesWithOranges:
        //            DropItemToPos(X16, Y16, Items.Orange);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(6)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.OrangeSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.AppleLeavesWithApples:
        //            DropItemToPos(X16, Y16, Items.Apple);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.AppleSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.CherryLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CherrySapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.CherryLeavesWithCherries:
        //            DropItemToPos(X16, Y16, Items.Cherry);

        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CherrySapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.LemonLeaves:
        //            if (FastRandom.Int(4)==1) {
        //                switch (FastRandom.Int(5)) {
        //                    case 1:
        //                        DropItemToPos(X16, Y16, Items.Sticks);
        //                        return;

        //                    case 2:
        //                        DropItemToPos(X16, Y16, Items.Stick);
        //                        return;

        //                    case 3:
        //                        DropItemToPos(X16, Y16, Items.Leave);
        //                        return;

        //                    case 4:
        //                        if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.LemonSapling);
        //                        return;
        //                }
        //            }
        //            return;

        //        case BlockId.Violet:
        //            DropItemToPos(X16, Y16, Items.PlantViolet);
        //            return;

        //        case BlockId.Dandelion:
        //            DropItemToPos(X16, Y16, Items.Dandelion);
        //            return;

        //        case BlockId.Heather:
        //            DropItemToPos(X16, Y16, Items.Heater);
        //            return;

        //        case BlockId.Alore:
        //            DropItemToPos(X16, Y16, Items.Alore);
        //            return;

        //        case BlockId.CactusBig:
        //            DropItemToPos(X16, Y16, Items.CactusBig);
        //            return;

        //        case BlockId.CactusSmall:
        //            DropItemToPos(X16, Y16, Items.CactusSmall);
        //            return;

        //        case BlockId.AppleSapling:
        //            DropItemToPos(X16, Y16, Items.AppleSapling);
        //            return;

        //        case BlockId.CherrySapling:
        //            DropItemToPos(X16, Y16, Items.CherrySapling);
        //            return;

        //        case BlockId.LemonSapling:
        //            DropItemToPos(X16, Y16, Items.LemonSapling);
        //            return;

        //        case BlockId.LindenSapling:
        //            DropItemToPos(X16, Y16, Items.LindenSapling);
        //            return;

        //        case BlockId.OakSapling:
        //            DropItemToPos(X16, Y16, Items.OakSapling);
        //            return;

        //        case BlockId.OrangeSapling:
        //            DropItemToPos(X16, Y16, Items.OrangeSapling);
        //            return;

        //        case BlockId.PineSapling:
        //            DropItemToPos(X16, Y16, Items.PineSapling);
        //            return;

        //        case BlockId.PlumSapling:
        //            DropItemToPos(X16, Y16, Items.PlumSapling);
        //            return;

        //        case BlockId.SpruceSapling:
        //            DropItemToPos(X16, Y16, Items.SpruceSapling);
        //            return;

        //        case BlockId.GrassDesert:
        //            if (FastRandom.Int(6)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //            else if (FastRandom.Int(3)==1) DropItemToPos(X16, Y16, Items.Hay);
        //            return;

        //        case BlockId.GrassForest:
        //            if (FastRandom.Int(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //            else if (FastRandom.Int(4)==1) DropItemToPos(X16, Y16, Items.Hay);
        //            else if (FastRandom.Int(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //            return;

        //        case BlockId.GrassHills:
        //            if (FastRandom.Int(7)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //            else if (FastRandom.Int(5)==1) DropItemToPos(X16, Y16, Items.Hay);
        //            else if (FastRandom.Int(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //            return;

        //        case BlockId.GrassJungle:
        //            if (FastRandom.Int(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //            else if (FastRandom.Int(5)==1) DropItemToPos(X16, Y16, Items.Hay);
        //            else if (FastRandom.Int(20)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //            return;

        //        case BlockId.GrassPlains:
        //            if (FastRandom.Int(5)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //            else if (FastRandom.Int(3)==1) DropItemToPos(X16, Y16, Items.Hay);
        //            else if (FastRandom.Int(10)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //            return;



        //        case BlockId.Glass:
        //            DropItemToPos(X16, Y16, Items.Glass);
        //            return;

        //        case BlockId.Orchid:
        //            DropItemToPos(X16, Y16, Items.PlantOrchid);
        //            return;

        //        case BlockId.Radio:
        //            DropItemToPos(X16, Y16, Items.Radio);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.Rose:
        //            DropItemToPos(X16, Y16, Items.PlantRose);
        //            return;

        //        case BlockId.Toadstool:
        //            DropItemToPos(X16, Y16, Items.Toadstool);
        //            return;

        //        case BlockId.Boletus:
        //            DropItemToPos(X16, Y16, Items.Boletus);
        //            return;

        //        case BlockId.BranchALittle1:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Stick);
        //            else DropItemToPos(X16, Y16, Items.Sticks);
        //            return;

        //        case BlockId.BranchALittle2:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Stick);
        //            else DropItemToPos(X16, Y16, Items.Sticks);
        //            return;

        //        case BlockId.BranchFull:
        //            DropItemToPos(X16, Y16, Items.Sticks);
        //            return;

        //        case BlockId.BranchWithout:
        //            DropItemToPos(X16, Y16, Items.Stick);
        //            return;

        //        case BlockId.Champignon:
        //            DropItemToPos(X16, Y16, Items.Champignon);
        //            return;

        //        case BlockId.DoorOpen:
        //            DropItemToPos(X16, Y16, Items.Door);
        //            return;

        //        case BlockId.Charger:
        //            DropItemToPos(X16, Y16, Items.Charger);
        //            RefreshAroundLabels(X16, Y16);
        //            RemovefromChargers(X16, Y16);
        //            return;

        //        case BlockId.SolarPanel:
        //            DropItemToPos(X16, Y16, Items.SolarPanel);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.Watermill:
        //            DropItemToPos(X16, Y16, Items.WaterMill);
        //            RefreshAroundLabels(X16, Y16);
        //            return;

        //        case BlockId.Rocks:
        //            switch (FastRandom.Int(100)) {
        //                case 0: DropItemToPos(X16, Y16, Items.Ruby); return;
        //                case 1: DropItemToPos(X16, Y16, Items.Smaragd); return;
        //                case 2: DropItemToPos(X16, Y16, Items.Saphirite); return;
        //                case 3: DropItemToPos(X16, Y16, Items.Diamond); return;
        //                case 4: DropItemToPos(X16, Y16, Items.ItemGold); return;
        //                case 5: DropItemToPos(X16, Y16, Items.ItemSilver); return;
        //                case 6: DropItemToPos(X16, Y16, Items.ItemIron); return;
        //                case 7: DropItemToPos(X16, Y16, Items.ItemIron); return;
        //                case 8: DropItemToPos(X16, Y16, Items.ItemIron); return;
        //                case 9: DropItemToPos(X16, Y16, Items.ItemCopper); return;
        //                case 10: DropItemToPos(X16, Y16, Items.ItemCopper); return;
        //                case 11: DropItemToPos(X16, Y16, Items.ItemCopper); return;
        //                case 12: DropItemToPos(X16, Y16, Items.ItemTin); return;
        //                case 13: DropItemToPos(X16, Y16, Items.ItemTin); return;
        //                case 14: DropItemToPos(X16, Y16, Items.ItemTin); return;
        //                case 15: DropItemToPos(X16, Y16, Items.CoalWood); return;
        //                case 16: DropItemToPos(X16, Y16, Items.ItemCoal); return;
        //                case 17: DropItemToPos(X16, Y16, Items.ItemCoal); return;
        //                case 18: DropItemToPos(X16, Y16, Items.ItemCoal); return;
        //                case 19: DropItemToPos(X16, Y16, Items.StoneHead); return;
        //                case 20: DropItemToPos(X16, Y16, Items.StoneHead); return;
        //                case 21: DropItemToPos(X16, Y16, Items.StoneHead); return;
        //                case 22: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 23: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 24: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 25: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 26: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 27: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 28: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 29: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 30: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 31: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 32: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 33: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 34: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 35: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 36: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 37: DropItemToPos(X16, Y16, Items.BigStone); return;
        //                case 38: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 39: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 40: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 41: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 42: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 43: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 44: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 45: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 46: DropItemToPos(X16, Y16, Items.SmallStone); return;
        //                case 47: DropItemToPos(X16, Y16, Items.Gravel); return;
        //                case 48: DropItemToPos(X16, Y16, Items.Silicium); return;
        //                default: DropItemToPos(X16, Y16, Items.MediumStone); return;
        //            }
        //        //    break;
        //        //  }
        //        // break;

        //        // case BlockType.Solid:
        //        //   switch ((BlockId)type) {
        //        case BlockId.Compost:
        //            DropItemToPos(X16, Y16, Items.Compost);
        //            return;

        //        case BlockId.Snow:
        //            DropItemToPos(X16, Y16, Items.Snow);
        //            return;

        //        case BlockId.Roof1:
        //            DropItemToPos(X16, Y16, Items.Roof1);
        //            return;

        //        case BlockId.Roof2:
        //            DropItemToPos(X16, Y16, Items.Roof2);
        //            return;

        //        case BlockId.DoorClose:
        //            DropItemToPos(X16, Y16, Items.Door);
        //            return;

        //        case BlockId.StoneBasalt:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackBasalt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneDiorit:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDiorit, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneDolomite:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDolomite, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneGabbro:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGabbro, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneGneiss:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=new Block(backgroundGneissTexture, (int)BlockId.BackGneiss, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneLimestone:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackLimestone, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneRhyolite:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackRhyolite, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneSandstone:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSandstone, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.StoneSchist:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            else if (FastRandom.Int(50)==1) {
        //                if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemIron);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemTin);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Smaragd);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Ruby);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Saphirite);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemGold);
        //                else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Diamond);
        //            }
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSchist, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Coal:
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.ItemCoal);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CoalWood);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCoal, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreAluminium:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.Aluminium);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackAluminium, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreCopper:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.ItemCopper);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.CopperDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCopper, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreGold:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.ItemGold);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.GoldDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGold, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreIron:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.ItemIron);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.IronDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackIron, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreSilver:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.ItemSilver);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SilverDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Silicium);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSilver, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.OreTin:
        //            if (FastRandom.Int(4)!=1) DropItemToPos(X16, Y16, Items.ItemTin);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.TinDust);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackTin, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Cobblestone:
        //            DropItemToPos(X16, Y16, Items.BigStone);
        //            if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.MediumStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.SmallStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Gravel);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.BigStone);
        //            else if (FastRandom.Int(2)==1) DropItemToPos(X16, Y16, Items.Sand);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackCobblestone, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Gravel:
        //            DropItemToPos(X16, Y16, Items.Gravel);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackGravel, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Sand:
        //            DropItemToPos(X16, Y16, Items.Sand);
        //            DestroySandUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackSand, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Dirt:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.GrassBlockDesert:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.GrassBlockForest:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.GrassBlockHills:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.GrassBlockJungle:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.GrassBlockPlains:
        //            DropItemToPos(X16, Y16, Items.Dirt);
        //            DestroyGrassUp(destroyBlock.X, destroyBlock.Y-1);
        //            terrain[X].IsBackground[Y]=true;
        //            terrain[X].Background[Y]=BackBlockFromId((int)BlockId.BackDirt, new Vector2(X16, Y16));
        //            return;

        //        case BlockId.Planks:
        //            DropItemToPos(X16, Y16, Items.Planks);
        //            return;

        //        case BlockId.Bricks:
        //            DropItemToPos(X16, Y16, Items.Bricks);
        //            return;

        //        case BlockId.AdvancedSpacePart1:
        //            DropItemToPos(X16, Y16, Items.AdvancedSpacePart1);
        //            return;

        //        case BlockId.AdvancedSpacePart2:
        //            DropItemToPos(X16, Y16, Items.AdvancedSpacePart2);
        //            return;

        //        case BlockId.AdvancedSpacePart3:
        //            DropItemToPos(X16, Y16, Items.AdvancedSpacePart3);
        //            return;

        //        case BlockId.AdvancedSpacePart4:
        //            DropItemToPos(X16, Y16, Items.AdvancedSpacePart4);
        //            return;

        //        case BlockId.Clay:
        //            DropItemToPos(X16, Y16, Items.Clay);
        //            return;

        //        case BlockId.GrassBlockClay:
        //            DropItemToPos(X16, Y16, Items.Clay);
        //            return;

        //        //  }
        //        //   break;

        //        // case BlockType.Back:
        //        //  switch ((BlockId)type) {
        //        case BlockId.AppleWood:
        //            DropItemToPos(X16, Y16, Items.WoodApple);
        //            return;

        //        case BlockId.CherryWood:
        //            DropItemToPos(X16, Y16, Items.WoodCherry);
        //            return;

        //        case BlockId.LemonWood:
        //            DropItemToPos(X16, Y16, Items.WoodLemon);
        //            return;

        //        case BlockId.LindenWood:
        //            DropItemToPos(X16, Y16, Items.WoodLinden);
        //            return;

        //        case BlockId.OakWood:
        //            DropItemToPos(X16, Y16, Items.WoodOak);
        //            return;

        //        case BlockId.OrangeWood:
        //            DropItemToPos(X16, Y16, Items.WoodOrange);
        //            return;

        //        case BlockId.PineWood:
        //            DropItemToPos(X16, Y16, Items.WoodPine);
        //            return;

        //        case BlockId.PlumWood:
        //            DropItemToPos(X16, Y16, Items.WoodPlum);
        //            return;

        //        case BlockId.SpruceWood:
        //            DropItemToPos(X16, Y16, Items.WoodSpruce);
        //            return;

        //        case BlockId.MangroveWood:
        //            DropItemToPos(X16, Y16, Items.MangroveWood);
        //            return;

        //        case BlockId.WillowWood:
        //            DropItemToPos(X16, Y16, Items.WillowWood);
        //            return;

        //        case BlockId.OliveWood:
        //            DropItemToPos(X16, Y16, Items.OliveWood);
        //            return;

        //        case BlockId.RubberTreeWood:
        //            DropItemToPos(X16, Y16, Items.RubberTreeWood);
        //            return;

        //        case BlockId.KapokWood:
        //            DropItemToPos(X16, Y16, Items.KapokWood);
        //            return;

        //        case BlockId.EucalyptusWood:
        //            DropItemToPos(X16, Y16, Items.EucalyptusWood);
        //            return;

        //        case BlockId.AcaciaWood:
        //            DropItemToPos(X16, Y16, Items.AcaciaWood);
        //            return;
        //    }
        //    //   break;

        //    //case BlockType.Plant:
        //    //    switch ((BlockId)type) {
        //    //        case BlockId.Wheat:
        //    //            DropItemToPos(X16, Y16, Items.WheatStraw);
        //    //            DropItemToPos(X16, Y16, Items.WheatSeeds);
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
        //    //            return;

        //    //        case BlockId.Onion:
        //    //            DropItemToPos(X16, Y16, Items.Onion);
        //    //            return;

        //    //        case BlockId.Flax:
        //    //            DropItemToPos(X16, Y16, Items.Flax);
        //    //            DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //    //            return;

        //    //        case BlockId.Strawberry:
        //    //            DropItemToPos(X16, Y16, Items.PlantStrawberry);
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.PlantStrawberry);
        //    //            return;

        //    //        case BlockId.Rashberry:
        //    //            DropItemToPos(X16, Y16, Items.PlantRashberry);
        //    //            if (FastRandom.Int(8)==1)DropItemToPos(X16, Y16, Items.PlantRashberry);
        //    //            return;

        //    //        case BlockId.Blueberry:
        //    //            DropItemToPos(X16, Y16, Items.PlantBlueberry);
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.PlantBlueberry);
        //    //            return;
        //    //    }
        //    //    break;

        //    //case BlockType.Mob:
        //    //    switch ((BlockId)type) {
        //    //        case BlockId.Chicken:
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.Hay);
        //    //            DropItemToPos(X16, Y16, Items.RabbitMeat);
        //    //            return;

        //    //        case BlockId.Rabbit:
        //    //            if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.WheatStraw);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.WheatSeeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.FlaxSeeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.Seeds);
        //    //            else if (FastRandom.Int(8)==1) DropItemToPos(X16, Y16, Items.Hay);
        //    //            DropItemToPos(X16, Y16, Items.RabbitMeat);
        //    //            return;

        //    //        case BlockId.Fish:
        //    //            DropItemToPos(X16, Y16, Items.Fish);
        //    //            return;
        //    //    }
        //    //    break;
        //    // }
        //}

        		float GetBackBlockDestroingSpeed(ushort type) {
			switch (type) {
				case (ushort)BlockId.AdvancedSpaceBack: return 400*DestroyPickaxe();

				case (ushort)BlockId.AppleWood: return 300*DestroyAxe();
				case (ushort)BlockId.CherryWood: return 300*DestroyAxe();
				case (ushort)BlockId.LemonWood: return 300*DestroyAxe();
				case (ushort)BlockId.LindenWood: return 320*DestroyAxe();
				case (ushort)BlockId.OakWood: return 320*DestroyAxe();
				case (ushort)BlockId.OrangeWood: return 300*DestroyAxe();
				case (ushort)BlockId.PineWood: return 300*DestroyAxe();
				case (ushort)BlockId.PlumWood: return 300*DestroyAxe();
				case (ushort)BlockId.SpruceWood: return 280*DestroyAxe();

				case (ushort)BlockId.KapokWood: return 280*DestroyAxe();

				case (ushort)BlockId.OliveWood: return 280*DestroyAxe();

				case (ushort)BlockId.MangroveWood: return 280*DestroyAxe();
				case (ushort)BlockId.WillowWood: return 280*DestroyAxe();
				case (ushort)BlockId.RubberTreeWood: return 280*DestroyAxe();
				case (ushort)BlockId.EucalyptusWood: return 280*DestroyAxe();
				case (ushort)BlockId.AcaciaWood: return 280*DestroyAxe();


				case (ushort)BlockId.BackCobblestone: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackGravel: return 300*DestroyShovel();
				case (ushort)BlockId.BackDirt: return 300*DestroyShovel();
				case (ushort)BlockId.BackRedSand: return 300*DestroyShovel();
				case (ushort)BlockId.BackRegolite: return 300*DestroyShovel();
				case (ushort)BlockId.BackSand: return 300*DestroyShovel();

				case (ushort)BlockId.BackCoal: return 290*DestroyPickaxe();
				case (ushort)BlockId.BackCopper: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackTin: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackIron: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackAluminium: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackSilver: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackGold: return 300*DestroyPickaxe();

				case (ushort)BlockId.BackSulfur: return 250*DestroyPickaxe();
				case (ushort)BlockId.BackSaltpeter: return 250*DestroyPickaxe();

				case (ushort)BlockId.BackAnorthosite: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackBasalt: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackClay: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackDiorit: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackDolomite: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackFlint: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackGabbro: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackGneiss: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackLimestone: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackMudstone: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackRhyolite: return 300*DestroyPickaxe();
				case (ushort)BlockId.BackSandstone: return 300*DestroyPickaxe();
			}

			return 0;
		}

		float GetSolidBlockDestroingSpeed(ushort type) {
			switch (type) {
				case (ushort)BlockId.Windmill: return 45;
				case (ushort)BlockId.FurnaceStone: return 45;
				case (ushort)BlockId.FurnaceElectric: return 45;
				case (ushort)BlockId.Macerator: return 45;
				case (ushort)BlockId.Miner: return 45;
				case (ushort)BlockId.SolarPanel: return 45;

				case (ushort)BlockId.Clay: return 110*DestroyShovel();
				case (ushort)BlockId.GrassBlockClay: return 120*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowPlains: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowDesert: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowForest: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowHills: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowJungle: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowCompost: return 250*DestroyShovel();
				case (ushort)BlockId.GrassBlockSnowClay: return 250*DestroyShovel();

				case (ushort)BlockId.GrassBlockDesert: return 100*DestroyShovel();
				case (ushort)BlockId.GrassBlockForest: return 100*DestroyShovel();
				case (ushort)BlockId.GrassBlockHills: return 105*DestroyShovel();
				case (ushort)BlockId.GrassBlockJungle: return 105*DestroyShovel();
				case (ushort)BlockId.GrassBlockPlains: return 95*DestroyShovel();
				case (ushort)BlockId.GrassBlockCompost: return 100*DestroyShovel();
				case (ushort)BlockId.Dirt: return 90*DestroyShovel();
				case (ushort)BlockId.Gravel: return 120*DestroyShovel();

				case (ushort)BlockId.Sand: return 60*DestroyShovel();
				case (ushort)BlockId.Compost: return 70*DestroyShovel();
				case (ushort)BlockId.Cobblestone: return 280*DestroyPickaxe();

				case (ushort)BlockId.Roof1: return 120*DestroyPickaxe();
				case (ushort)BlockId.Roof2: return 120*DestroyPickaxe();
				case (ushort)BlockId.DoorClose: return 280*DestroyPickaxe();

				case (ushort)BlockId.StoneBasalt: return 320*DestroyPickaxe();
				case (ushort)BlockId.StoneDiorit: return 300*DestroyPickaxe();
				case (ushort)BlockId.StoneDolomite: return 280*DestroyPickaxe();
				case (ushort)BlockId.StoneGabbro: return 320*DestroyPickaxe();
				case (ushort)BlockId.StoneGneiss: return 320*DestroyPickaxe();
				case (ushort)BlockId.StoneLimestone: return 280*DestroyPickaxe();
				case (ushort)BlockId.StoneRhyolite: return 300*DestroyPickaxe();
				case (ushort)BlockId.StoneSandstone: return 260*DestroyPickaxe();
				case (ushort)BlockId.StoneSchist: return 300*DestroyPickaxe();

				case (ushort)BlockId.OreCoal: return 260*DestroyPickaxe();
				case (ushort)BlockId.OreAluminium: return 320*DestroyPickaxe();
				case (ushort)BlockId.OreCopper: return 320*DestroyPickaxe();
				case (ushort)BlockId.OreGold: return 300*DestroyPickaxe();
				case (ushort)BlockId.OreIron: return 320*DestroyPickaxe();

				case (ushort)BlockId.OreSilver: return 300*DestroyPickaxe();

				case (ushort)BlockId.OreTin: return 300*DestroyPickaxe();

				case (ushort)BlockId.OreSaltpeter: return 250*DestroyPickaxe();
				case (ushort)BlockId.OreSulfur: return 250*DestroyPickaxe();

				case (ushort)BlockId.Ice: return 120*DestroyAxe();

				case (ushort)BlockId.AdvancedSpaceBlock: return 100*DestroyPickaxe();
				case (ushort)BlockId.AdvancedSpaceFloor: return 100*DestroyPickaxe();
				case (ushort)BlockId.AdvancedSpaceWindow: return 100*DestroyPickaxe();

				case (ushort)BlockId.Planks: return 100*DestroyAxe();
				case (ushort)BlockId.Bricks: return 160*DestroyPickaxe();

				case (ushort)BlockId.AdvancedSpacePart1: return 90*DestroyPickaxe();
				case (ushort)BlockId.AdvancedSpacePart2: return 90*DestroyPickaxe();
				case (ushort)BlockId.AdvancedSpacePart3: return 90*DestroyPickaxe();
				case (ushort)BlockId.AdvancedSpacePart4: return 90*DestroyPickaxe();
			}

			return 0;
		}

		float GetTopBlockDestroingSpeed(ushort type) {
			switch (type) {
				case (ushort)BlockId.Desk: return 45;
				case (ushort)BlockId.Rocket: return 45;

				case (ushort)BlockId.EggDrop: return 20;

				case (ushort)BlockId.Ladder: return 90*DestroyAxe();
				case (ushort)BlockId.Lamp: return 45;

				case (ushort)BlockId.Watermill: return 45;
				case (ushort)BlockId.Flag: return 45;

				case (ushort)BlockId.Label: return 30;

				case (ushort)BlockId.Snow: return 100*DestroyShovel();

				case (ushort)BlockId.AppleLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.LemonLeavesWithLemons: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.LindenLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.OakLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.OrangeLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.SpruceLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.PlumLeavesWithPlums: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.PlumLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.PineLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.OrangeLeavesWithOranges: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.AppleLeavesWithApples: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.CherryLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.CherryLeavesWithCherries: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.LemonLeaves: return 15*DestroyKnife()*DestroyShears();

				case (ushort)BlockId.AcaciaLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.EucalyptusLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.KapokLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.KapokLeacesFibre: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.KapokLeacesFlowering: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.MangroveLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.OliveLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.OliveLeavesWithOlives: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.RubberTreeLeaves: return 15*DestroyKnife()*DestroyShears();
				case (ushort)BlockId.WillowLeaves: return 15*DestroyKnife()*DestroyShears();

				case (ushort)BlockId.Violet: return 30*DestroyKnife()*DestroyShears()*DestroyShovel();
				case (ushort)BlockId.Dandelion: return 30*DestroyKnife()*DestroyShears()*DestroyShovel();
				case (ushort)BlockId.Heather: return 30*DestroyKnife()*DestroyShears()*DestroyShovel();
				case (ushort)BlockId.Alore: return 30*DestroyKnife()*DestroyShears()*DestroyShovel();
				case (ushort)BlockId.CactusBig: return 60;
				case (ushort)BlockId.CactusSmall: return 60;

				case (ushort)BlockId.AppleSapling: return 30*DestroyKnife();
				case (ushort)BlockId.CherrySapling: return 30*DestroyKnife();
				case (ushort)BlockId.LemonSapling: return 30*DestroyKnife();
				case (ushort)BlockId.LindenSapling: return 30*DestroyKnife();
				case (ushort)BlockId.OakSapling: return 30*DestroyKnife();
				case (ushort)BlockId.OrangeSapling: return 30*DestroyKnife();
				case (ushort)BlockId.PineSapling: return 30*DestroyKnife();
				case (ushort)BlockId.PlumSapling: return 30*DestroyKnife();
				case (ushort)BlockId.SpruceSapling: return 30*DestroyKnife();

				case (ushort)BlockId.GrassDesert: return 30*DestroyKnife();
				case (ushort)BlockId.GrassForest: return 30*DestroyKnife();
				case (ushort)BlockId.GrassHills: return 30*DestroyKnife();
				case (ushort)BlockId.GrassJungle: return 30*DestroyKnife();
				case (ushort)BlockId.GrassPlains: return 30*DestroyKnife();

			   // case (ushort)BlockId.Liana: return 30*DestroyAxe();

				case (ushort)BlockId.Wheat: return 30f*DestroyKnife();
				case (ushort)BlockId.Onion: return 30f*DestroyShovel();
				case (ushort)BlockId.Flax: return 30f*DestroyKnife();
				case (ushort)BlockId.Glass: return 30f;
				case (ushort)BlockId.ChristmasStar: return 30f;
				case (ushort)BlockId.Orchid: return 30*DestroyShovel();
				case (ushort)BlockId.Radio: return 45f;
				case (ushort)BlockId.Rose: return 30f*DestroyShovel();
				case (ushort)BlockId.Seaweed: return 30f*DestroyKnife();
				case (ushort)BlockId.SugarCane: return 30f*DestroyKnife();
				case (ushort)BlockId.Toadstool: return 30f*DestroyKnife();
				case (ushort)BlockId.Strawberry: return 30f*DestroyShovel();
				case (ushort)BlockId.Rashberry: return 30f*DestroyShovel();
				case (ushort)BlockId.Blueberry: return 30f*DestroyShovel();
				case (ushort)BlockId.Boletus: return 30*DestroyKnife();
				case (ushort)BlockId.SnowTop: return 45*DestroyShovel();
				case (ushort)BlockId.Roof1: return 90f;
				case (ushort)BlockId.Coral: return 60f*DestroyKnife();
				case (ushort)BlockId.BranchALittle1: return 30f;
				case (ushort)BlockId.BranchALittle2: return 30f;
				case (ushort)BlockId.BranchFull: return 30f;
				case (ushort)BlockId.BranchWithout: return 30f;
				case (ushort)BlockId.Champignon: return 30f*DestroyKnife();
				case (ushort)BlockId.DoorOpen: return 45f;
			}

			return 0f;
		}

		float GetPlantDestroingSpeed(ushort type) {
			switch (type) {
				case (ushort)BlockId.Wheat: return 30f;
				case (ushort)BlockId.Onion: return 30f;
				case (ushort)BlockId.Carrot: return 30f;
				case (ushort)BlockId.Peas: return 30f;
				case (ushort)BlockId.Flax: return 30f;

				case (ushort)BlockId.Strawberry: return 30f;
				case (ushort)BlockId.Rashberry: return 30f;
				case (ushort)BlockId.Blueberry: return 30f;
			}

			return 0f;
		}

		float GetMobDestroingSpeed(ushort type) {
			switch (type) {
				case (ushort)BlockId.Rabbit: return 30*DestroyKnife();
				case (ushort)BlockId.Chicken: return 30*DestroyKnife();
				case (ushort)BlockId.Fish: return 30*DestroyKnife();
				case (ushort)BlockId.MobParrot: return 30*DestroyKnife();
			}

			return 0;
		}

        float DestroyPickaxe() {
			switch (InventoryNormal[boxSelected].Id) {
				case (ushort)Items.PickaxeStone: return 0.4f;
				case (ushort)Items.PickaxeGold: return 0.5f;
				case (ushort)Items.PickaxeCopper: return 0.3f;
				case (ushort)Items.PickaxeBronze: return 0.25f;
				case (ushort)Items.PickaxeAluminium: return 0.45f;
				case (ushort)Items.PickaxeIron: return 0.2f;
				case (ushort)Items.PickaxeSteel: return 0.19f;

				case (ushort)Items.ElectricDrill: return 0.1f;
				case (ushort)Items.MediumStone: return 0.93f;
				case (ushort)Items.SmallStone: return 0.96f;
				case (ushort)Items.BigStone: return 0.90f;
				case (ushort)Items.PickaxeHeadIron: return 0.80f;
				case (ushort)Items.StoneHead: return 0.80f;
			}

			return 1;
		}

		float DestroyAxe() {
			switch (InventoryNormal[boxSelected].Id) {
				case (ushort)Items.AxeStone: return 0.4f;
				case (ushort)Items.AxeIron: return 0.2f;
				case (ushort)Items.AxeGold: return 0.5f;
				case (ushort)Items.AxeCopper: return 0.3f;
				case (ushort)Items.AxeBronze: return 0.25f;
				case (ushort)Items.AxeAluminium: return 0.35f;
				case (ushort)Items.AxeSteel: return 0.19f;

				case (ushort)Items.ElectricSaw: return 0.1f;
				case (ushort)Items.AxeHeadIron: return 0.87f;
				case (ushort)Items.SawCopper: return 0.4f;
				case (ushort)Items.SawBronze: return 0.15f;
				case (ushort)Items.SawIron: return 0.08f;
				case (ushort)Items.BigStone: return 0.90f;
				case (ushort)Items.StoneHead: return 0.80f;
				case (ushort)Items.MediumStone: return 0.93f;
				case (ushort)Items.SmallStone: return 0.96f;
			}

			return 1;
		}

		float DestroyKnife() {
			switch (InventoryNormal[boxSelected].Id) {
				case (ushort)Items.KnifeCopper: return 0.35f;
				case (ushort)Items.KnifeBronze: return 0.3f;
				case (ushort)Items.KnifeGold: return 0.5f;
				case (ushort)Items.KnifeIron: return 0.25f;
				case (ushort)Items.KnifeSteel: return 0.2f;
				case (ushort)Items.KnifeAluminium: return 0.3f;
			}
			return 1;
		}

		float DestroyShears() {
			switch (InventoryNormal[boxSelected].Id) {
				case (ushort)Items.ShearsCopper: return 0.35f;
				case (ushort)Items.ShearsBronze: return 0.3f;
				case (ushort)Items.ShearsGold: return 0.5f;
				case (ushort)Items.ShearsIron: return 0.25f;
				case (ushort)Items.ShearsSteel: return 0.2f;
				case (ushort)Items.ShearsAluminium: return 0.3f;
			}
			return 1;
		}

		float DestroyShovel() {
			switch (InventoryNormal[boxSelected].Id) {
				case (ushort)Items.ShovelStone: return 0.4f;
				case (ushort)Items.ShovelGold: return 0.3f;
				case (ushort)Items.ShovelCopper: return 0.25f;
				case (ushort)Items.ShovelBronze: return 0.25f;
				case (ushort)Items.ShovelIron: return 0.2f;

				case (ushort)Items.ShovelAluminium: return 0.19f;
				case (ushort)Items.ShovelSteel: return 0.2f;

				case (ushort)Items.ElectricDrill: return 0.1f;
				case (ushort)Items.ShovelHeadIron: return 0.87f;
				case (ushort)Items.StoneHead: return 0.80f;
				case (ushort)Items.MediumStone: return 0.86f;
				case (ushort)Items.SmallStone: return 0.88f;
				case (ushort)Items.BigStone: return 0.84f;
			}

			return 1;
		}

        //void GetItemsFromPlant(byte type, DInt _pos, bool grow) {
        //    DInt pos = new DInt(_pos.X*16, _pos.Y*16);
        //    if (grow) {
        //        switch ((BlockId)type) {
        //            case BlockId.Wheat:
        //                DropItemToPos(pos, Items.WheatStraw);
        //                DropItemToPos(pos, Items.WheatSeeds);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.WheatSeeds);
        //                break;

        //            case BlockId.Onion:
        //                if (FastRandom.Int(2)==1) DropItemToPos(pos, Items.Onion);
        //                if (FastRandom.Int(2)==1) DropItemToPos(pos, Items.Onion);
        //                if (FastRandom.Int(2)==1) DropItemToPos(pos, Items.Onion);
        //                break;

        //            case BlockId.Flax:
        //                DropItemToPos(pos, Items.Flax);
        //                DropItemToPos(pos, Items.FlaxSeeds);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.FlaxSeeds);
        //                break;

        //            case BlockId.Strawberry:
        //                DropItemToPos(pos, Items.PlantStrawberry);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.PlantStrawberry);
        //                break;

        //            case BlockId.Rashberry:
        //                DropItemToPos(pos, Items.PlantRashberry);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.PlantRashberry);
        //                break;

        //            case BlockId.Blueberry:
        //                DropItemToPos(pos, Items.PlantBlueberry);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.PlantBlueberry);
        //                break;
        //        }
        //    } else {
        //        switch ((BlockId)type) {
        //            case BlockId.Wheat:
        //                //   DropItemToPos(pos,Items.WheatStraw);
        //                // DropItemToPos(pos,Items.WheatSeeds);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.WheatSeeds);
        //                break;

        //            case BlockId.Onion:
        //                DropItemToPos(pos, Items.Onion);
        //                break;

        //            case BlockId.Flax:
        //                // DropItemToPos(pos,Items.Flax);
        //                // DropItemToPos(pos,Items.FlaxSeeds);
        //                if (FastRandom.Int(8)==1) DropItemToPos(pos, Items.FlaxSeeds);
        //                break;

        //            case BlockId.Strawberry:
        //                DropItemToPos(pos, Items.PlantStrawberry);
        //                //  if (FastRandom.Int(8)==1)DropItemToPos(pos,Items.StrawberryPlant);
        //                break;

        //            case BlockId.Rashberry:
        //                DropItemToPos(pos, Items.PlantRashberry);
        //                //  if (FastRandom.Int(8)==1)DropItemToPos(pos,Items.RashberryPlant);
        //                break;

        //            case BlockId.Blueberry:
        //                DropItemToPos(pos, Items.PlantBlueberry);
        //                // if (FastRandom.Int(8)==1)DropItemToPos(pos,Items.PlantBlueberry);
        //                break;
        //        }
        //    }
        //}

        #endregion

        #region Energy
        void EnergySystem() {
            for (int i = 0; i<energy.Count; i++) {
                Energy e = energy[i];
                if (FastRandom.Int(500)==1) {
                    energy.Remove(e);

                } else if (terrain[e.X].IsTopBlocks[e.Y]) {
                    BlockId id = (BlockId)terrain[e.X].TopBlocks[e.Y].Id;

                    if (id==BlockId.Label) {
                        MoveEnergy(((ScreenBlock)(terrain[e.X].TopBlocks[e.Y])).screen, e);
                    } else if (id==BlockId.FurnaceElectric
                        ||id==BlockId.Macerator
                        ||id==BlockId.Radio
                        ||id==BlockId.Lamp
                        ||id==BlockId.Miner) {
                        ((MashineBlockBasic)(terrain[e.X].TopBlocks[e.Y])).AddEnergy();
                        energy.Remove(e);
                    } else {
                        energy.Remove(e);
                    }
                } else energy.Remove(e);
            }
        }

        void MoveEnergy(int screen, Energy e) {
            //   1
            // 4 0 2
            //   3

            switch (screen) {
                case 15:
                    switch (e.Direction) {
                        case 1:
                            switch (FastRandom.Int(3)) {
                                case 0: e.X--; e.Direction=4; return;
                                case 1: e.Y++; e.Direction=3; return;
                                case 2: e.X++; e.Direction=2; return;
                            }
                            break;

                        case 2:
                            switch (FastRandom.Int(3)) {
                                case 0: e.Y--; e.Direction=1; return;
                                case 1: e.Y++; e.Direction=3; return;
                                case 2: e.X++; /*e.Direction=2;*/ return;
                            }
                            break;

                        case 3:
                            switch (FastRandom.Int(3)) {
                                case 0: e.Y++; /*e.Direction=3;*/ return;
                                case 1: e.X--; e.Direction=4; return;
                                case 2: e.X++; e.Direction=2; return;
                            }
                            break;

                        case 4:
                            switch (FastRandom.Int(3)) {
                                case 0: e.Y--; e.Direction=1; return;
                                case 1: e.X--; /*e.Direction=4;*/ return;
                                case 2: e.Y++; e.Direction=3; return;
                            }
                            break;
                    }
                    break;

                case 14:
                    switch (e.Direction) {
                        case 1:
                            if (FastRandom.Int(2)==1) {
                                e.X--;
                                e.Direction=4;
                                return;
                            } else {
                                e.X++;
                                e.Direction=2;
                                return;
                            }

                        case 2:
                            if (FastRandom.Int(2)==1) {
                                e.X++;
                                return;
                            } else {
                                e.Y++;
                                e.Direction=3;
                                return;
                            }

                        case 4:
                            if (FastRandom.Int(2)==1) {
                                e.X--;
                                return;
                            } else {
                                e.Y++;
                                e.Direction=3;
                                return;
                            }
                    }
                    break;

                case 13:
                    switch (e.Direction) {
                        case 1:
                            if (FastRandom.Int(2)==1) {
                                e.Y--;
                                return;
                            } else {
                                e.X--;
                                e.Direction=4;
                                return;
                            }

                        case 2:
                            if (FastRandom.Int(2)==1) {
                                e.Y--;
                                e.Direction=1;
                                return;
                            } else {
                                e.Y++;
                                e.Direction=3;
                                return;
                            }

                        case 3:
                            if (FastRandom.Int(2)==1) {
                                e.Y++;
                                return;
                            } else {
                                e.X--;
                                e.Direction=4;
                                return;
                            }
                    }
                    break;

                case 12:
                    switch (e.Direction) {
                        case 2:
                            if (FastRandom.Int(2)==1) {
                                e.Y--;
                                e.Direction=1;
                                return;
                            } else {
                                e.X++;
                                return;
                            }

                        case 3:
                            if (FastRandom.Int(2)==1) {
                                e.X++;
                                e.Direction=2;
                                return;
                            } else {
                                e.X--;
                                e.Direction=4;
                                return;
                            }

                        case 4:
                            if (FastRandom.Int(2)==1) {
                                e.Y--;
                                e.Direction=1;
                                return;
                            } else {
                                e.X--;
                                return;
                            }
                    }
                    break;

                case 11:
                    switch (e.Direction) {
                        case 1:
                            if (FastRandom.Int(2)==1) {
                                e.Y--;
                                return;
                            } else {
                                e.X++;
                                e.Direction=2;
                                return;
                            }

                        case 3:
                            if (FastRandom.Int(2)==1) {
                                e.Y++;
                                return;
                            } else {
                                e.X++;
                                e.Direction=2;
                                return;
                            }

                        case 4:
                            if (FastRandom.Int(2)==1) {
                                e.Y++;
                                e.Direction=3;
                                return;
                            } else {
                                e.Y--;
                                e.Direction=1;
                                return;
                            }
                    }
                    break;

                case 10:
                    if (e.Direction==1) {
                        e.Y--;
                        return;
                    } else if (e.Direction==3) {
                        e.Y++;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 9:
                    if (e.Direction==4) {
                        e.X--;
                        return;
                    } else if (e.Direction==2) {
                        e.X++;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 8:
                    if (e.Direction==3) {
                        e.X--;
                        e.Direction=4;
                        return;
                    } else if (e.Direction==2) {
                        e.Y--;
                        e.Direction=1;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 7:
                    if (e.Direction==1) {
                        e.X--;
                        e.Direction=4;
                        return;
                    } else if (e.Direction==2) {
                        e.Y++;
                        e.Direction=3;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 6:
                    if (e.Direction==1) {
                        e.X++;
                        e.Direction=2;
                        return;
                    } else if (e.Direction==4) {
                        e.Y++;
                        e.Direction=3;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 5:
                    if (e.Direction==4) {
                        e.Y--;
                        e.Direction=1;
                        return;
                    } else if (e.Direction==3) {
                        e.X++;
                        e.Direction=2;
                        return;
                    } else {
                        energy.Remove(e);
                        return;
                    }

                case 4:
                    if (e.Direction==2) e.X++;
                    else energy.Remove(e);
                    break;

                case 3:
                    if (e.Direction==1) e.Y--;
                    else energy.Remove(e);
                    break;


                case 2:
                    if (e.Direction==4) e.X--;
                    else energy.Remove(e);
                    break;

                case 1:
                    if (e.Direction==3) e.Y++;
                    else energy.Remove(e);
                    break;

                case 0:
                    energy.Remove(e);
                    break;

            }
        }

        void NewEnergySolarPanel(int x, int y) {
            bool down = false, left = false, right = false;

            if (terrain[x].TopBlocks[y+1]!=null) down=terrain[x].TopBlocks[y+1].Id==(byte)BlockId.Label;

            if (terrain[x-1]!=null) {
                if (terrain[x-1].TopBlocks[y]!=null) left=terrain[x-1].TopBlocks[y].Id==(byte)BlockId.Label;
            }

            if (terrain[x+1]!=null) {
                if (terrain[x+1].TopBlocks[y]!=null) right=terrain[x+1].TopBlocks[y].Id==(byte)BlockId.Label;
            }

            if (!down&&!left&&!right) {
                return;
            } else {
                if (down&&left&&right) {
                    switch (FastRandom.Int(3)) {
                        case 0: energy.Add(new Energy(x+1, y, 2)); return;
                        case 1: energy.Add(new Energy(x, y+1, 3)); return;
                        case 2: energy.Add(new Energy(x-1, y, 4)); return;
                    }
                }
                if (!down&&left&&right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x+1, y, 2));
                        return;
                    } else {
                        energy.Add(new Energy(x-1, y, 4));
                        return;
                    }
                }
                if (down&&!left&&right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x, y+1, 3));
                        return;
                    } else {
                        energy.Add(new Energy(x-1, y, 4));
                        return;
                    }
                }
                if (down&&left&&!right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x+1, y, 2));
                        return;
                    } else {
                        energy.Add(new Energy(x, y+1, 3));
                        return;
                    }
                }
                if (!down&&!left&&right) { energy.Add(new Energy(x+1, y, 2)); return; }
                if (!down&&left&&!right) { energy.Add(new Energy(x-1, y, 4)); return; }
                if (down&&!left&&!right) { energy.Add(new Energy(x, y+1, 3)); return; }
            }
        }

        void NewEnergyWatermill(int x, int y) {
            bool up = false, left = false, right = false;

            if (terrain[x].TopBlocks[y-1]!=null) up=terrain[x].TopBlocks[y-1].Id==(byte)BlockId.Label;

            if (terrain[x-1]!=null) {
                if (terrain[x-1].TopBlocks[y]!=null) left=terrain[x-1].TopBlocks[y].Id==(byte)BlockId.Label;
            }

            if (terrain[x+1]!=null) {
                if (terrain[x+1].TopBlocks[y]!=null) right=terrain[x+1].TopBlocks[y].Id==(byte)BlockId.Label;
            }

            if (!up&&!left&&!right) {
                return;
            } else {
                if (up&&left&&right) {
                    switch (FastRandom.Int(3)) {
                        case 0: energy.Add(new Energy(x+1, y, 2)); return;
                        case 1: energy.Add(new Energy(x, y-1, 1)); return;
                        case 2: energy.Add(new Energy(x-1, y, 4)); return;
                    }
                }
                if (!up&&left&&right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x+1, y, 2));
                        return;
                    } else {
                        energy.Add(new Energy(x-1, y, 4));
                        return;
                    }
                }
                if (up&&!left&&right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x, y-1, 1));
                        return;
                    } else {
                        energy.Add(new Energy(x-1, y, 4));
                        return;
                    }
                }
                if (up&&left&&!right) {
                    if (FastRandom.Int(2)==1) {
                        energy.Add(new Energy(x+1, y, 2));
                        return;
                    } else {
                        energy.Add(new Energy(x, y-1, 1));
                        return;
                    }
                }
                if (!up&&!left&&right) { energy.Add(new Energy(x-1, y, 4)); return; }
                if (!up&&left&&!right) { energy.Add(new Energy(x+1, y, 2)); return; }
                if (up&&!left&&!right) { energy.Add(new Energy(x, y-1, 1)); return; }
            }
        }
        #endregion

        #region Blocks in the lists
        void SetWintableSources() {
            foreach (ShortAndByte w in windable) {
                switch ((BlockId)terrain[w.X].TopBlocks[w.Y].Id) {
                    case BlockId.Windmill:
                        ((AnimatedBlock)terrain[w.X].TopBlocks[w.Y]).imageSpeed=windForce;
                        break;

                    case BlockId.Flag:
                        ((AnimatedBlock)terrain[w.X].TopBlocks[w.Y]).imageSpeed=windForce;
                        break;
                }
            }
        }

        void RemovefromWintable(int x, int y) {
            foreach (ShortAndByte w in windable) {
                if (w.X==x) {
                    if (w.Y==y) {
                        windable.Remove(w);
                        return;
                    }
                }
            }
        }

        void RemovefromChargers(int x, int y) {
            foreach (ShortAndByte w in Chargers) {
                if (w.X==x) {
                    if (w.Y==y) {
                        Chargers.Remove(w);
                        return;
                    }
                }
            }
        }

        void RemovefromMiners(int x, int y) {
            foreach (ShortAndByte w in Miners) {
                if (w.X==x) {
                    if (w.Y==y) {
                        Miners.Remove(w);
                        return;
                    }
                }
            }
        }

        void RemovefromFurnaceStone(int x, int y) {
            foreach (ShortAndByte w in FurnaceStone) {
                if (w.X==x) {
                    if (w.Y==y) {
                        FurnaceStone.Remove(w);
                        return;
                    }
                }
            }
        }

        void RemovefromComposters(int x, int y) {
            foreach (ShortAndByte w in Composters) {
                if (w.X==x) {
                    if (w.Y==y) {
                        Composters.Remove(w);
                        return;
                    }
                }
            }
        }

        void RemovePlant(int x) {
            if (terrain[x].Plants.Count==0) chunksWithPlants.Remove(x);
        }

        void RegisterPlant(int x) {
            bool isNotSomething = false;

            foreach (int i in chunksWithPlants) {
                if (i==x) {
                    isNotSomething=true;
                    break;
                }
            }

            if (isNotSomething) chunksWithPlants.Add(x);
        }
        #endregion

        #region mashines
        //void MinerJob(ShortAndByte ch) {
        //    MashineBlockBasic miner = (MashineBlockBasic)terrain[ch.X].TopBlocks[ch.Y];

        //    if (miner.Energy>5) {
        //        foreach (Item item in DroppedItems) {
        //            if (item.X==ch.X*16) {
        //                if (item.Y>ch.Y*16) {
        //                    if (MinerAddItem((int)item.Id, miner)) {
        //                        DroppedItems.Remove(item);
        //                        return;
        //                    }
        //                }
        //            }
        //        }
        //        for (int y = ch.Y+1; y<100; y++) {
        //            if (terrain[ch.X].IsSolidBlocks[y]) {
        //                destroyBlock=new DInt(ch.X, y);
        //             //   GetItemsFromBlock(terrain[ch.X].SolidBlocks[y].Id, ch.X, y/*,BlockType.Solid*/);
        //                terrain[ch.X].SolidBlocks[y]=null;
        //                terrain[ch.X].IsSolidBlocks[y]=false;
        //                return;
        //            }
        //        }
        //    }
        //}

        //void ChargerJob(ShortAndByte ch) {
        //    MashineBlockBasic charger = (MashineBlockBasic)terrain[ch.X].TopBlocks[ch.Y];
        //    if (charger.Inv[0].X!=0) {
        //        if (charger.Energy>5) {
        //            if (charger.Inv[0].Y==1) {
        //                switch ((Items)charger.Inv[0].X) {
        //                    case Items.ElectricDrillOff:
        //                        charger.Inv[0].X=(int)Items.ElectricDrill;
        //                        return;

        //                    case Items.ElectricSawOff:
        //                        charger.Inv[0].X=(int)Items.ElectricSaw;
        //                        return;

        //                    case Items.TorchElectricOFF:
        //                        charger.Inv[0].X=(int)Items.TorchElectricON;
        //                        return;
        //                }
        //            }

        //            if (charger.Inv[0].Y<99) {
        //                switch ((Items)charger.Inv[0].X) {
        //                    case Items.ElectricDrill:
        //                        charger.Inv[0].Y++;
        //                        charger.Energy-=5;
        //                        return;

        //                    case Items.ElectricSaw:
        //                        charger.Inv[0].Y++;
        //                        charger.Energy-=5;
        //                        return;

        //                    case Items.TorchElectricON:
        //                        charger.Inv[0].Y++;
        //                        charger.Energy-=5;
        //                        return;
        //                }
        //            }
        //        }
        //    }
        //}

        #endregion

        #region Prepare dialogs
        void MobileON() => (mobileOS=new Mobile.System() { Content=Rabcr.content }).Init();

        //void PrepareRocketDialog() {
        //    if (buttonRocket==null)
        //        buttonRocket=new GameButton(Textures.ButtonCenter,spriteFont_small,spriteFont_medium){
        //            Text="Odletět",
        //          //  center=true
        //        };
        //}

        //void PrepareRadioDialog() {
        //    if (buttonRocket==null)
        //        buttonRocket=new GameButton(Textures.ButtonCenter,spriteFont_small,spriteFont_medium) {
        //            Text="Otevřít",
        //         //   center=true
        //        };
        //}

        #endregion

        #region Inventory
        void ItemEat() {
            if (barEat>1) {
			    if (InventoryNormal[boxSelected] is ItemInvFood16) {
                    SendEatItem();
                    return;
                }

                if (InventoryNormal[boxSelected] is ItemInvFood32) {
                    SendEatItem();
                    return;
                }
            }
        }

        //void RemovePartTool() {
        //    int id = Inventory[boxSelected].X;
        //    int count = Inventory[boxSelected].Y;

        //    if (id<(int)Items._SystemMaxTools) {
        //        //if (count==1) {
        //        //    Items newId=GameMethods.ToolToBasic((Items)id);
        //        //    if (newId!=Items.None) {
        //        //        Inventory[boxSelected].X=(int)newId;
        //        //        return;
        //        //    }
        //        float i = GameMethods.ToolMaxUses((Items)id);

        //        if (count>1) {
        //            if (i!=-1) {
        //                if (i==(int)i) {
        //                    if (i<count) {
        //                        Inventory[boxSelected].Y-=(int)i;
        //                        return;
        //                    }
        //                } else if (1<i) {
        //                    int newi = (FastRandom.Int(100)>(i-(int)i)*100 ? 1 : 0)+(int)i;
        //                    if (newi<count) {
        //                        Inventory[boxSelected].Y-=newi;
        //                        return;
        //                    }
        //                } else {
        //                    if (FastRandom.Int(100)>i*100) {
        //                        if (i<count) {
        //                            Inventory[boxSelected].Y-=count;
        //                        }
        //                    }
        //                    return;
        //                }
        //            }
        //        } else {
        //            Items newID = GameMethods.ToolToBasic((Items)id);
        //            if (newID==Items.None) {
        //                Inventory[boxSelected].Y=0;
        //                Inventory[boxSelected].X=0;
        //                return;
        //            } else {
        //                Inventory[boxSelected].Y=(int)newID;
        //                return;
        //            }
        //        }
        //    }
        //}

        void UpdateItem(List<Item> list) {
			foreach (Item i in list) {
				if (i.X>PlayerX-11-16) {
					if (i.X<PlayerX+11) {
						if (i.Y>PlayerY-20) {
							if (i.Y<PlayerY+20) {
								AddItemToPlayer(i.item);
								list.Remove(i);
								return;
							}
						}
					}
				}

				if (terrain[i.X/16]!=null) {
					if (i.Y>0){
						if (i.Y<124*16) {
							if (!terrain[i.X/16].IsSolidBlocks[i.Y/16+1]) {
								i.Y+=2;
							}
						}
					}
				}

				if (i.Y>5000) {
					list.Remove(i);
					return;
				}
			}
		}

        void ItemGravity(DInt item) {
            distanceToGround=100000;

            for (int y = (item.X+20-16)/16; y<(item.Y+20-16)/16+6; y++) {
                for (int x = (item.X-11)/16; x<(item.X+11+16)/16; x++) {
                    if (terrain[x]!=null) {
                        if (terrain[x].IsSolidBlocks[y]) {
                            if (/*y*16-PlayerY-39/2>0 &&*/ y*16-item.Y-20<distanceToGround) {
                                distanceToGround=y*16-item.Y-20;
                            }

                        }
                    }
                }
            }

            if (distanceToGround==0) {

                return;
            }

            if (distanceToGround</*16*/6&&gravitySpeed>0) {
                item.Y+=distanceToGround;
                gravitySpeed=0;
                return;
            } else {
                gravitySpeed+=.4905f;
                if (gravitySpeed>6) gravitySpeed=6;
                item.Y+=(int)gravitySpeed;


            }
            // }


        }

        // Crafting basic
		void SetInvCraftingBlocks() {
			ushort[] items={
				(ushort)Items.Gravel,
				(ushort)Items.HayBlock,
			};
			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingMashines() {
			ushort[] items={
				(ushort)Items.Desk,
				(ushort)Items.Ladder,
			};
			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingTools() {
			ushort[] items={
				// Stone
				(ushort)Items.StoneHead,
				(ushort)Items.PickaxeStone,
				(ushort)Items.AxeStone,
				(ushort)Items.ShovelStone,
				(ushort)Items.HoeStone,

				// Copper
				(ushort)Items.PickaxeCopper,
				(ushort)Items.AxeCopper,
				(ushort)Items.ShovelCopper,
				(ushort)Items.HoeCopper,
				(ushort)Items.KnifeCopper,
				(ushort)Items.ShearsCopper,
				(ushort)Items.HammerCopper,

				//Bronze
				(ushort)Items.PickaxeBronze,
				(ushort)Items.AxeBronze,
				(ushort)Items.ShovelBronze,
				(ushort)Items.HoeBronze,
				(ushort)Items.KnifeBronze,
				(ushort)Items.ShearsBronze,
				(ushort)Items.HammerBronze,

				// Gold
				(ushort)Items.PickaxeGold,
				(ushort)Items.AxeGold,
				(ushort)Items.ShovelGold,
				(ushort)Items.HoeGold,
				(ushort)Items.KnifeGold,
				(ushort)Items.ShearsGold,
				(ushort)Items.HammerGold,

				// Iron
				(ushort)Items.PickaxeIron,
				(ushort)Items.AxeIron,
				(ushort)Items.ShovelIron,
				(ushort)Items.HoeIron,
				(ushort)Items.KnifeIron,
				(ushort)Items.ShearsIron,
				(ushort)Items.HammerIron,

				// Steel
				(ushort)Items.PickaxeSteel,
				(ushort)Items.AxeSteel,
				(ushort)Items.ShovelSteel,
				(ushort)Items.HoeSteel,
				(ushort)Items.KnifeSteel,
				(ushort)Items.ShearsSteel,
				(ushort)Items.HammerSteel,

				// Aluminium
				(ushort)Items.PickaxeAluminium,
				(ushort)Items.AxeAluminium,
				(ushort)Items.ShovelAluminium,
				(ushort)Items.HoeAluminium,
				(ushort)Items.KnifeAluminium,
				(ushort)Items.ShearsAluminium,
				(ushort)Items.HammerAluminium,

				(ushort)Items.TorchOFF,
			};
			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingNature() {
			ushort[] items={
				(ushort)Items.Stick,
				(ushort)Items.Sticks,
				(ushort)Items.Leave,
				(ushort)Items.Seeds,
				(ushort)Items.WheatSeeds,
			};
			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingItems() {
			ushort[] items={
				(ushort)Items.Flag,
				(ushort)Items.MediumStone,
				(ushort)Items.SmallStone,

				(ushort)Items.DyeOrange,
				(ushort)Items.DyeDarkRed,
				(ushort)Items.DyeRoseQuartz,
				(ushort)Items.DyePink,
				(ushort)Items.DyeMagenta,
				(ushort)Items.DyeLightBlue,
				(ushort)Items.DyeDarkBlue,
				(ushort)Items.DyeTeal,
				(ushort)Items.DyeLightGreen,
				(ushort)Items.DyeDarkGreen,
				(ushort)Items.DyeArmy,
				(ushort)Items.DyeBrown,
				
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		// Crafting adv
		void SetInvCraftingBlocksA() {
			inventoryScrollbarValueCrafting=0;
			ushort[] items={
				(ushort)Items.Stonerubble,
				(ushort)Items.Gravel,
				(ushort)Items.Sand,
				(ushort)Items.Planks,
				(ushort)Items.AdvancedSpaceBlock,
				(ushort)Items.AdvancedSpaceFloor,
				(ushort)Items.AdvancedSpacePart1,
				(ushort)Items.AdvancedSpacePart2,
				(ushort)Items.AdvancedSpacePart3,
				(ushort)Items.AdvancedSpacePart4,
				(ushort)Items.AdvancedSpaceWindow,
				(ushort)Items.Bricks,
				(ushort)Items.Roof1,
				(ushort)Items.Roof2,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingMashinesA() {
			inventoryScrollbarValueCrafting=0;
			 ushort[] items={
				(ushort)Items.Desk,
				(ushort)Items.Ladder,
				(ushort)Items.Door,
				(ushort)Items.Composter,
				(ushort)Items.Shelf,
				(ushort)Items.BoxWooden,
				(ushort)Items.BoxAdv,
				(ushort)Items.BucketForRubber,
				(ushort)Items.Barrel,

				(ushort)Items.SolarPanel,
				(ushort)Items.WindMill,
				(ushort)Items.WaterMill,

				(ushort)Items.Label,

				(ushort)Items.FurnaceElectric,
				(ushort)Items.FurnaceStone,
				(ushort)Items.Macerator,
				(ushort)Items.Miner,
				(ushort)Items.Radio,
				(ushort)Items.Lamp,
				(ushort)Items.Charger,
				(ushort)Items.SewingMachine,
				(ushort)Items.OxygenMachine,
				(ushort)Items.Rocket
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingToolsA() {
		inventoryScrollbarValueCrafting=0;
			 ushort[] items={
				(ushort)Items.StoneHead,

				// Stone
				(ushort)Items.PickaxeStone,
				(ushort)Items.AxeStone,
				(ushort)Items.ShovelStone,
				(ushort)Items.HoeStone,

				// Copper
				(ushort)Items.PickaxeCopper,
				(ushort)Items.AxeCopper,
				(ushort)Items.ShovelCopper,
				(ushort)Items.HoeCopper,
				(ushort)Items.KnifeCopper,
				(ushort)Items.ShearsCopper,
				(ushort)Items.SawCopper,
				(ushort)Items.HammerCopper,

				// Bronze
				(ushort)Items.PickaxeBronze,
				(ushort)Items.AxeBronze,
				(ushort)Items.ShovelBronze,
				(ushort)Items.HoeBronze,
				(ushort)Items.KnifeBronze,
				(ushort)Items.ShearsBronze,
				(ushort)Items.SawBronze,
				(ushort)Items.HammerBronze,

				// Gold
				(ushort)Items.PickaxeGold,
				(ushort)Items.AxeGold,
				(ushort)Items.ShovelGold,
				(ushort)Items.HoeGold,
				(ushort)Items.KnifeGold,
				(ushort)Items.ShearsGold,
				(ushort)Items.SawGold,
				(ushort)Items.HammerGold,

				// Iron
				(ushort)Items.PickaxeIron,
				(ushort)Items.AxeIron,
				(ushort)Items.ShovelIron,
				(ushort)Items.HoeIron,
				(ushort)Items.KnifeIron,
				(ushort)Items.ShearsIron,
				(ushort)Items.SawIron,
				(ushort)Items.HammerIron,

				// Steel
				(ushort)Items.PickaxeSteel,
				(ushort)Items.AxeSteel,
				(ushort)Items.ShovelSteel,
				(ushort)Items.HoeSteel,
				(ushort)Items.KnifeSteel,
				(ushort)Items.ShearsSteel,
				(ushort)Items.SawSteel,
				(ushort)Items.HammerSteel,

				// Aluminium
				(ushort)Items.PickaxeAluminium,
				(ushort)Items.AxeAluminium,
				(ushort)Items.ShovelAluminium,
				(ushort)Items.HoeAluminium,
				(ushort)Items.KnifeAluminium,
				(ushort)Items.ShearsAluminium,
				(ushort)Items.SawAluminium,
				(ushort)Items.HammerAluminium,


				(ushort)Items.ElectricDrill,
				(ushort)Items.ElectricSaw,
				(ushort)Items.Gun,
				(ushort)Items.Bucket,
				(ushort)Items.TorchOFF,
				(ushort)Items.AirTank,
				(ushort)Items.AirTank2,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingNatureA() {
		inventoryScrollbarValueCrafting=0;
			 ushort[] items={
				(ushort)Items.Stick,
				(ushort)Items.Sticks,
				(ushort)Items.Leave,
				(ushort)Items.HayBlock,
				(ushort)Items.MudIngot,
				(ushort)Items.Leave,
				(ushort)Items.Seeds,
				(ushort)Items.WheatSeeds,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvCraftingItemsA() {
			inventoryScrollbarValueCrafting=0;
			 ushort[] items={
				(ushort)Items.Flag,
				(ushort)Items.MediumStone,
				(ushort)Items.SmallStone,

				(ushort)Items.Nail,
				(ushort)Items.Rod,
				(ushort)Items.Ammo,
				(ushort)Items.Gunpowder,
				(ushort)Items.BronzeDust,

				(ushort)Items.plateAluminium,
				(ushort)Items.PlateBronze,
				(ushort)Items.PlateCopper,
				(ushort)Items.PlateGold,
				(ushort)Items.PlateIron,

				(ushort)Items.BareLabel,
				(ushort)Items.Rezistance,
				(ushort)Items.Condenser,
				(ushort)Items.Diode,
				(ushort)Items.Tranzistor,
				(ushort)Items.Bulb,
				(ushort)Items.ItemBattery,
				(ushort)Items.Motor,

				(ushort)Items.Circuit,
				(ushort)Items.BigCircuit,

				(ushort)Items.Yarn,
				(ushort)Items.Cloth,
				(ushort)Items.Rope,

				(ushort)Items.AngelHair,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		// Creative
		void SetInvCreativeBlocks() {
			ushort[] items={
				(ushort)Items.StoneSandstone,
				(ushort)Items.StoneSchist,
				(ushort)Items.StoneBasalt,
				(ushort)Items.StoneDiorit,
				(ushort)Items.StoneDolomite,
				(ushort)Items.StoneGabbro,
				(ushort)Items.StoneGneiss,
				(ushort)Items.StoneLimestone,
				(ushort)Items.StoneRhyolite,
				(ushort)Items.StoneFlint,
				(ushort)Items.StoneAnorthosite,
				(ushort)Items.StoneMudstone,

				(ushort)Items.OreCoal,
				(ushort)Items.OreCopper,
				(ushort)Items.OreTin,
				(ushort)Items.OreIron,
				(ushort)Items.OreAluminium,
				(ushort)Items.OreSilver,
				(ushort)Items.OreGold,
				(ushort)Items.OreSulfur,
				(ushort)Items.OreSaltpeter,

				(ushort)Items.Lava,
				(ushort)Items.Stonerubble,
				(ushort)Items.Gravel,
				(ushort)Items.Sand,
				(ushort)Items.Dirt,
				(ushort)Items.Compost,
				(ushort)Items.Ice,
				(ushort)Items.Snow,
				(ushort)Items.SnowTop,
				(ushort)Items.GrassBlockForest,
				(ushort)Items.GrassBlockDesert,
				(ushort)Items.GrassBlockHills,
				(ushort)Items.GrassBlockJungle,
				(ushort)Items.GrassBlockPlains,
				(ushort)Items.GrassBlockClay,
				(ushort)Items.GrassBlockCompost,

				(ushort)Items.AppleLeaves,
				(ushort)Items.AppleLeavesWithApples,
				(ushort)Items.WoodApple,
				(ushort)Items.CherryLeaves,
				(ushort)Items.CherryLeavesWithCherries,
				(ushort)Items.WoodCherry,
				(ushort)Items.PlumLeaves,
				(ushort)Items.PlumLeavesWithPlums,
				(ushort)Items.WoodPlum,
				(ushort)Items.OrangeLeaves,
				(ushort)Items.OrangeLeavesWithOranges,
				(ushort)Items.WoodOrange,
				(ushort)Items.LemonLeaves,
				(ushort)Items.LemonLeavesWithLemons,
				(ushort)Items.WoodLemon,
				(ushort)Items.LindenLeaves,
				(ushort)Items.WoodLinden,
				(ushort)Items.OakLeaves,
				(ushort)Items.WoodOak,
				(ushort)Items.PineLeaves,
				(ushort)Items.WoodPine,
				(ushort)Items.SpruceLeaves,
				(ushort)Items.WoodSpruce,

				(ushort)Items.AcaciaLeaves,
				(ushort)Items.AcaciaWood,

				(ushort)Items.EucalyptusLeaves,
				(ushort)Items.EucalyptusWood,

				(ushort)Items.MangroveLeaves,
				(ushort)Items.MangroveWood,

				(ushort)Items.OliveLeaves,
				(ushort)Items.OliveLeavesWithOlives,
				(ushort)Items.OliveWood,
				(ushort)Items.RubberTreeLeaves,
				(ushort)Items.RubberTreeWood,
				(ushort)Items.WillowLeaves,
				(ushort)Items.WillowWood,
				(ushort)Items.KapokLeaves,
				(ushort)Items.KapokLeacesFlowering,
				(ushort)Items.KapokLeavesFibre,
				(ushort)Items.KapokWood,

				(ushort)Items.Planks,
				(ushort)Items.HayBlock,
				(ushort)Items.Glass,
				(ushort)Items.Bricks,
				(ushort)Items.Roof1,
				(ushort)Items.Roof2,
				(ushort)Items.ChristmasStar,

				(ushort)Items.AdvancedSpaceBlock,
				(ushort)Items.AdvancedSpaceFloor,
				(ushort)Items.AdvancedSpaceWindow,
				(ushort)Items.AdvancedSpacePart1,
				(ushort)Items.AdvancedSpacePart2,
				(ushort)Items.AdvancedSpacePart3,
				(ushort)Items.AdvancedSpacePart4,

				(ushort)Items.BackSandstone,
				(ushort)Items.BackSchist,
				(ushort)Items.BackBasalt,
				(ushort)Items.BackDiorit,
				(ushort)Items.BackDolomite,
				(ushort)Items.BackGabbro,
				(ushort)Items.BackGneiss,
				(ushort)Items.BackLimestone,
				(ushort)Items.BackRhyolite,
				(ushort)Items.BackFlint,
				(ushort)Items.BackAnorthosite,
				(ushort)Items.BackMudstone,

				(ushort)Items.BackCoal,
				(ushort)Items.BackCopper,
				(ushort)Items.BackTin,
				(ushort)Items.BackIron,
				(ushort)Items.BackAluminium,
				(ushort)Items.BackSilver,
				(ushort)Items.BackGold,
				(ushort)Items.BackSulfur,
				(ushort)Items.BackSaltpeter,

				(ushort)Items.AdvancedSpaceBack,
				(ushort)Items.BackClay,
				(ushort)Items.BackCobblestone,
				(ushort)Items.BackSand,
				(ushort)Items.BackRegolite,
				(ushort)Items.BackDirt,
			};
			creativeScrollbar.scale=0;
			for (int i=0; i<items.Length; i++) SetItemCreative(InventoryCreative, i, items[i]);
			for (int j = items.Length; j<inventoryScrollbarValueCraftingMax; j++) InventoryCreative[j]=itemBlank;
			inventoryScrollbarValueCraftingMax=items.Length;

			ReSetInventoryCreativePositions();
		}

		void SetInvCreativePlants() {
			ushort[] items={
				(ushort)Items.Dandelion,
				(ushort)Items.PlantViolet,
				(ushort)Items.PlantRose,
				(ushort)Items.PlantOrchid,
				(ushort)Items.Heater,
				(ushort)Items.Alore,

				(ushort)Items.Boletus,
				(ushort)Items.Champignon,
				(ushort)Items.Toadstool,
				(ushort)Items.CactusSmall,
				(ushort)Items.CactusBig,
				(ushort)Items.Coral,
				(ushort)Items.PlantSeaweed,

				(ushort)Items.GrassDesert,
				(ushort)Items.GrassForest,
				(ushort)Items.GrassHills,
				(ushort)Items.GrassJungle,
				(ushort)Items.GrassPlains,

				(ushort)Items.SpruceSapling,
				(ushort)Items.WillowSapling,
				(ushort)Items.OakSapling,
				(ushort)Items.LindenSapling,
				(ushort)Items.EucalyptusSapling,
				(ushort)Items.MangroveSapling,
				(ushort)Items.PineSapling,
				(ushort)Items.RubberTreeSapling,
				(ushort)Items.KapokSapling,

				(ushort)Items.AppleSapling,
				(ushort)Items.CherrySapling,
				(ushort)Items.PlumSapling,

				(ushort)Items.OliveSapling,
				(ushort)Items.OrangeSapling,
				(ushort)Items.LemonSapling,

				(ushort)Items.PlantStrawberry,
				(ushort)Items.PlantRashberry,
				(ushort)Items.PlantRashberry,
				(ushort)Items.Flax,
				(ushort)Items.PlantOnion,
				(ushort)Items.PlantPeas,
				(ushort)Items.PlantCarrot,
				(ushort)Items.SugarCane,

				(ushort)Items.Seeds,
				(ushort)Items.WheatSeeds,
				(ushort)Items.FlaxSeeds,

				(ushort)Items.Hay,
				(ushort)Items.WheatStraw,
				(ushort)Items.Stick,
				(ushort)Items.Sticks,
				(ushort)Items.Leave,
			};
			creativeScrollbar.scale=0;
			for (int i=0; i<items.Length; i++) SetItemCreative(InventoryCreative, i, items[i]);
			for (int j = items.Length; j<inventoryScrollbarValueCraftingMax; j++) InventoryCreative[j]=itemBlank;
			inventoryScrollbarValueCraftingMax=items.Length;

			ReSetInventoryCreativePositions();
		}

		void SetInvCreativeMashines() {
			ushort[] items ={
				(ushort)Items.Desk,
				(ushort)Items.FurnaceStone,
				(ushort)Items.Shelf,
				(ushort)Items.BoxWooden,
				(ushort)Items.BoxAdv,
				(ushort)Items.Ladder,
				(ushort)Items.Composter,
				(ushort)Items.Door,
				(ushort)Items.BucketForRubber,
				(ushort)Items.Barrel,

				(ushort)Items.WindMill,
				(ushort)Items.SolarPanel,
				(ushort)Items.WaterMill,
				(ushort)Items.Label,
				(ushort)Items.Lamp,
				(ushort)Items.FurnaceElectric,
				(ushort)Items.Macerator,
				(ushort)Items.Miner,
				(ushort)Items.Radio,
				(ushort)Items.Charger,
				(ushort)Items.SewingMachine,
				(ushort)Items.OxygenMachine,
				(ushort)Items.Rocket,
			};
			creativeScrollbar.scale=0;
			for (int i=0; i<items.Length; i++) SetItemCreative(InventoryCreative, i, items[i]);
			for (int j = items.Length; j<inventoryScrollbarValueCraftingMax; j++) InventoryCreative[j]=itemBlank;
			inventoryScrollbarValueCraftingMax=items.Length;

			ReSetInventoryCreativePositions();
		}

		void SetInvCreativeTools() {
			ushort[] items ={
				(ushort)Items.StoneHead,

				// Stone
				(ushort)Items.PickaxeStone,
				(ushort)Items.AxeStone,
				(ushort)Items.ShovelStone,
				(ushort)Items.HoeStone,

				// Copper
				(ushort)Items.PickaxeCopper,
				(ushort)Items.AxeCopper,
				(ushort)Items.ShovelCopper,
				(ushort)Items.HoeCopper,
				(ushort)Items.KnifeCopper,
				(ushort)Items.ShearsCopper,
				(ushort)Items.SawCopper,
				(ushort)Items.HammerCopper,

				// Bronze
				(ushort)Items.PickaxeCopper,
				(ushort)Items.AxeCopper,
				(ushort)Items.ShovelCopper,
				(ushort)Items.HoeCopper,
				(ushort)Items.KnifeCopper,
				(ushort)Items.ShearsCopper,
				(ushort)Items.SawCopper,
				(ushort)Items.HammerCopper,

				// Gold
				(ushort)Items.PickaxeGold,
				(ushort)Items.AxeGold,
				(ushort)Items.ShovelGold,
				(ushort)Items.HoeGold,
				(ushort)Items.KnifeGold,
				(ushort)Items.ShearsGold,
				(ushort)Items.SawGold,
				(ushort)Items.HammerGold,

				// Iron
				(ushort)Items.PickaxeIron,
				(ushort)Items.AxeIron,
				(ushort)Items.ShovelIron,
				(ushort)Items.HoeIron,
				(ushort)Items.KnifeIron,
				(ushort)Items.ShearsIron,
				(ushort)Items.SawIron,
				(ushort)Items.HammerIron,

				// Steel
				(ushort)Items.PickaxeSteel,
				(ushort)Items.AxeSteel,
				(ushort)Items.ShovelSteel,
				(ushort)Items.HoeSteel,
				(ushort)Items.KnifeSteel,
				(ushort)Items.ShearsSteel,
				(ushort)Items.SawSteel,
				(ushort)Items.HammerSteel,

				// Aluminium
				(ushort)Items.PickaxeAluminium,
				(ushort)Items.AxeAluminium,
				(ushort)Items.ShovelAluminium,
				(ushort)Items.HoeAluminium,
				(ushort)Items.KnifeAluminium,
				(ushort)Items.ShearsAluminium,
				(ushort)Items.SawAluminium,
				(ushort)Items.HammerAluminium,


				(ushort)Items.ElectricDrill,
				(ushort)Items.ElectricSaw,
				(ushort)Items.TorchElectricON,
				(ushort)Items.Gun,
				(ushort)Items.Ammo,
				(ushort)Items.AirTank,
				(ushort)Items.AirTank2,

				(ushort)Items.Bucket,
				(ushort)Items.BucketWater,
				(ushort)Items.Bottle,
				(ushort)Items.BottleWater,
				(ushort)Items.TestTube,
				(ushort)Items.TorchON,
				(ushort)Items.Backpack,

				(ushort)Items.Cap,
				(ushort)Items.Hat,
				(ushort)Items.Crown,
				(ushort)Items.SpaceHelmet,

				(ushort)Items.TShirt,
				(ushort)Items.SpaceSuit,
				(ushort)Items.Dress,
				(ushort)Items.Shirt,

				(ushort)Items.Jeans,
				(ushort)Items.Shorts,
				(ushort)Items.SpaceTrousers,
				(ushort)Items.ArmyTrousers,
				(ushort)Items.Skirt,

				(ushort)Items.FormalShoes,
				(ushort)Items.Pumps,
				(ushort)Items.Sneakers,
				(ushort)Items.SpaceBoots,

				(ushort)Items.CoatArmy,
				(ushort)Items.Coat,
				(ushort)Items.JacketDenim,
				(ushort)Items.JacketFormal,
				(ushort)Items.JacketShort,

				(ushort)Items.Underpants,
				(ushort)Items.BoxerShorts,
				(ushort)Items.Panties,
				(ushort)Items.Swimsuit,
				(ushort)Items.BikiniDown,

				(ushort)Items.Bra,
				(ushort)Items.BikiniTop,
			};
			creativeScrollbar.scale=0;
			for (int i=0; i<items.Length; i++) SetItemCreative(InventoryCreative, i, items[i]);
			for (int j = items.Length; j<inventoryScrollbarValueCraftingMax; j++) InventoryCreative[j]=itemBlank;
			inventoryScrollbarValueCraftingMax=items.Length;

			ReSetInventoryCreativePositions();
		}

		void SetInvCreativeItems() {
			ushort[] items ={
				(ushort)Items.Strawberry,
				(ushort)Items.Rashberry,
				(ushort)Items.Blueberries,
				(ushort)Items.Apple,
				(ushort)Items.Cherry,
				(ushort)Items.Plum,
				(ushort)Items.Banana,
				(ushort)Items.Lemon,
				(ushort)Items.Orange,

				(ushort)Items.Onion,
				(ushort)Items.Carrot,
				(ushort)Items.Peas,
				(ushort)Items.Seaweed,
				(ushort)Items.FishMeatCooked,
				(ushort)Items.RabbitMeat,
				(ushort)Items.RabbitMeatCooked,
				(ushort)Items.BowlEmpty,
				(ushort)Items.BowlWithMushrooms,
				(ushort)Items.BowlWithVegetables,
				(ushort)Items.Egg,
				(ushort)Items.boiledEgg,

				(ushort)Items.SmallStone,
				(ushort)Items.MediumStone,
				(ushort)Items.BigStone,
				(ushort)Items.ItemCoal,
				(ushort)Items.ItemCopper,
				(ushort)Items.ItemTin,
				(ushort)Items.ItemIron,
				(ushort)Items.ItemSilver,
				(ushort)Items.ItemGold,
				(ushort)Items.Diamond,
				(ushort)Items.Ruby,
				(ushort)Items.Saphirite,
				(ushort)Items.Smaragd,

				(ushort)Items.SulfurDust,
				(ushort)Items.Saltpeter,
				(ushort)Items.Gunpowder,
				(ushort)Items.CoalDust,
				(ushort)Items.BronzeDust,
				(ushort)Items.CopperDust,
				(ushort)Items.GoldDust,
				(ushort)Items.IronDust,
				(ushort)Items.SilverDust,
				(ushort)Items.TinDust,

				(ushort)Items.CopperIngot,
				(ushort)Items.TinIngot,
				(ushort)Items.BronzeIngot,
				(ushort)Items.GoldIngot,
				(ushort)Items.SilverIngot,
				(ushort)Items.IronIngot,
				(ushort)Items.SteelIngot,
				(ushort)Items.AluminiumIngot,

				(ushort)Items.MudIngot,

				(ushort)Items.plateAluminium,
				(ushort)Items.PlateBronze,
				(ushort)Items.PlateCopper,
				(ushort)Items.PlateGold,
				(ushort)Items.PlateIron,

				(ushort)Items.BareLabel,
				(ushort)Items.Tranzistor,
				(ushort)Items.Rezistance,
				(ushort)Items.Condenser,
				(ushort)Items.Diode,
				(ushort)Items.Bulb,
				(ushort)Items.ItemBattery,
				(ushort)Items.Motor,
				(ushort)Items.Circuit,
				(ushort)Items.BigCircuit,

				(ushort)Items.MudIngot,
				(ushort)Items.Rubber,
				(ushort)Items.Plastic,
				(ushort)Items.Ash,
				(ushort)Items.CoalWood,
				(ushort)Items.KapokFibre,
				(ushort)Items.Yarn,
				(ushort)Items.Cloth,
				(ushort)Items.Rope,
				(ushort)Items.Nail,
				(ushort)Items.Rod,

				(ushort)Items.AxeHeadCopper,
				(ushort)Items.AxeHeadBronze,
				(ushort)Items.AxeHeadGold,
				(ushort)Items.AxeHeadIron,
				(ushort)Items.AxeHeadSteel,
				(ushort)Items.AxeHeadAluminium,

				(ushort)Items.ShovelHeadCopper,
				(ushort)Items.ShovelHeadBronze,
				(ushort)Items.ShovelHeadGold,
				(ushort)Items.ShovelHeadIron,
				(ushort)Items.ShovelHeadSteel,
				(ushort)Items.ShovelHeadAluminium,

				(ushort)Items.HoeHeadCopper,
				(ushort)Items.HoeHeadBronze,
				(ushort)Items.HoeHeadGold,
				(ushort)Items.HoeHeadIron,
				(ushort)Items.HoeHeadSteel,
				(ushort)Items.HoeHeadAluminium,

				(ushort)Items.PickaxeHeadCopper,
				(ushort)Items.PickaxeHeadBronze,
				(ushort)Items.PickaxeHeadGold,
				(ushort)Items.PickaxeHeadIron,
				(ushort)Items.PickaxeHeadSteel,
				(ushort)Items.PickaxeHeadAluminium,

				(ushort)Items.ShearsHeadCopper,
				(ushort)Items.ShearsHeadBronze,
				(ushort)Items.ShearsHeadGold,
				(ushort)Items.ShearsHeadIron,
				(ushort)Items.ShearsHeadSteel,
				(ushort)Items.ShearsHeadAluminium,

				(ushort)Items.KnifeHeadCopper,
				(ushort)Items.KnifeHeadBronze,
				(ushort)Items.KnifeHeadGold,
				(ushort)Items.KnifeHeadIron,
				(ushort)Items.KnifeHeadSteel,
				(ushort)Items.KnifeHeadAluminium,

				(ushort)Items.DyeArmy,
				(ushort)Items.DyeBlack,
				(ushort)Items.DyeBlue,
				(ushort)Items.DyeBrown,
				(ushort)Items.DyeDarkBlue,
				(ushort)Items.DyeDarkGray,
				(ushort)Items.DyeDarkGreen,
				(ushort)Items.DyeDarkRed,
				(ushort)Items.DyeGold,
				(ushort)Items.DyeGray,
				(ushort)Items.DyeGreen,
				(ushort)Items.DyeLightBlue,
				(ushort)Items.DyeLightGray,
				(ushort)Items.DyeLightGreen,
				(ushort)Items.DyeMagenta,
				(ushort)Items.DyeOlive,
				(ushort)Items.DyeOrange,
				(ushort)Items.DyePink,
				(ushort)Items.DyePurple,
				(ushort)Items.DyeRed,
				(ushort)Items.DyeSpringGreen,
				(ushort)Items.DyeViolet,
				(ushort)Items.DyeWhite,
				(ushort)Items.DyeYellow,

				(ushort)Items.AngelHair,

				(ushort)Items.ChristmasBallGray,
				(ushort)Items.ChristmasBallYellow,
				(ushort)Items.ChristmasBallBlue,
				(ushort)Items.ChristmasBallLightGreen,
				(ushort)Items.ChristmasBallRed,
				(ushort)Items.ChristmasBallOrange,
				(ushort)Items.ChristmasBallPink,
				(ushort)Items.ChristmasBallPurple,
				(ushort)Items.ChristmasBallTeal,


				(ushort)Items.AnimalRabbit,
				(ushort)Items.AnimalChicken,
				(ushort)Items.AnimalParrot,
				(ushort)Items.AnimalFish,
			};
			creativeScrollbar.scale=0;

			int i=0;
			for (; i<items.Length; i++) SetItemCreative(InventoryCreative, i, items[i]);
			inventoryScrollbarValueCraftingMax=i/*tems.Length*/;
			for (; i<inventoryScrollbarValueCraftingMax; i++) InventoryCreative[i]=itemBlank;

			ReSetInventoryCreativePositions();
		}

		// Bake
		void SetInvBakeTools() {
			 ushort[] items ={

				(ushort)Items.AxeHeadCopper,
				(ushort)Items.AxeHeadBronze,
				(ushort)Items.AxeHeadGold,
				(ushort)Items.AxeHeadIron,
				(ushort)Items.AxeHeadSteel,
				(ushort)Items.AxeHeadAluminium,

				(ushort)Items.ShovelHeadCopper,
				(ushort)Items.ShovelHeadBronze,
				(ushort)Items.ShovelHeadGold,
				(ushort)Items.ShovelHeadIron,
				(ushort)Items.ShovelHeadSteel,
				(ushort)Items.ShovelHeadAluminium,

				(ushort)Items.HoeHeadCopper,
				(ushort)Items.HoeHeadBronze,
				(ushort)Items.HoeHeadGold,
				(ushort)Items.HoeHeadIron,
				(ushort)Items.HoeHeadSteel,
				(ushort)Items.HoeHeadAluminium,

				(ushort)Items.PickaxeHeadCopper,
				(ushort)Items.PickaxeHeadBronze,
				(ushort)Items.PickaxeHeadGold,
				(ushort)Items.PickaxeHeadIron,
				(ushort)Items.PickaxeHeadSteel,
				(ushort)Items.PickaxeHeadAluminium,

				(ushort)Items.ShearsHeadCopper,
				(ushort)Items.ShearsHeadBronze,
				(ushort)Items.ShearsHeadGold,
				(ushort)Items.ShearsHeadIron,
				(ushort)Items.ShearsHeadSteel,
				(ushort)Items.ShearsHeadAluminium,

				(ushort)Items.Bottle,
				(ushort)Items.TestTube,
				(ushort)Items.TorchON,
			};

			//inventoryScrollbarValueCraftingMax=items.Length-1;

			//for (int i=0; i<items.Length; i++) SetItemCreative(InventoryCrafting, i, items[i]);
			//for (int j = items.Length; j<inventoryScrollbarValueCraftingMax; j++) InventoryCrafting[j]=itemBlank;

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvBakeIngots() {
			ushort[] items ={
				(ushort)Items.CopperIngot,
				(ushort)Items.TinIngot,
				(ushort)Items.BronzeIngot,
				(ushort)Items.GoldIngot,
				(ushort)Items.SilverIngot,
				(ushort)Items.IronIngot,
				(ushort)Items.SteelIngot,
				(ushort)Items.AluminiumIngot,

				(ushort)Items.PlateCopper,
				(ushort)Items.PlateBronze,
				(ushort)Items.PlateGold,
				(ushort)Items.PlateIron,
				(ushort)Items.plateAluminium,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvBakeItems() {
			ushort[] items ={
				(ushort)Items.Glass,
				(ushort)Items.CoalWood,
				(ushort)Items.Ash,
				(ushort)Items.BareLabel,
				(ushort)Items.Rubber,
				(ushort)Items.Plastic,

				(ushort)Items.ChristmasStar,
				(ushort)Items.ChristmasBallGray,

			  //  (ushort)Items.DyeArmy,
				(ushort)Items.DyeBlack,
				(ushort)Items.DyeBlue,
				(ushort)Items.DyeBrown,
			  // (ushort)Items.DyeDarkBlue,
			   // (ushort)Items.DyeDarkGray,
				(ushort)Items.DyeDarkGreen,
			   // (ushort)Items.DyeDarkRed,
				(ushort)Items.DyeGold,
				(ushort)Items.DyeGray,
				(ushort)Items.DyeGreen,
			   // (ushort)Items.DyeLightBlue,
			   // (ushort)Items.DyeLightGray,
			   // (ushort)Items.DyeLightGreen,
			   // (ushort)Items.DyeMagenta,
				(ushort)Items.DyeOlive,
				(ushort)Items.DyeOrange,
			 //   (ushort)Items.DyePink,
			  //  (ushort)Items.DyePurple,
				(ushort)Items.DyeRed,
				(ushort)Items.DyeSpringGreen,
				(ushort)Items.DyeViolet,
				(ushort)Items.DyeWhite,
				(ushort)Items.DyeYellow,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvBakeFood() {
			ushort[] items ={
				(ushort)Items.FishMeatCooked,
				(ushort)Items.RabbitMeatCooked,
				(ushort)Items.BowlWithMushrooms,
				(ushort)Items.BowlWithVegetables,
				(ushort)Items.boiledEgg
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		void SetInvBakeCeramics() {
			ushort[] items ={
				(ushort)Items.OneBrick
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;

			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;

			ReSetCraftingInventoryPositions();
		}

		// toDust
		void SetInvToDustDusts() {
			ushort[] items ={
				(ushort)Items.CopperDust,
				(ushort)Items.TinDust,
				(ushort)Items.BronzeDust,
				(ushort)Items.IronDust,
				(ushort)Items.AluminiumDust,
				(ushort)Items.SilverDust,
				(ushort)Items.GoldDust,
				(ushort)Items.WoodDust,
				(ushort)Items.CoalDust,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvToDustTools() {
			ushort[] items ={
				(ushort)Items.AxeHeadIron,
				(ushort)Items.PickaxeHeadIron,
				(ushort)Items.ShovelHeadIron,
				(ushort)Items.StoneHead,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvToDustStone() {
			ushort[] items ={
				(ushort)Items.Stonerubble,
				(ushort)Items.MediumStone,
				(ushort)Items.SmallStone,
				(ushort)Items.Gravel,
				(ushort)Items.Sand,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvToDustNature() {
			ushort[] items ={
				(ushort)Items.Seeds,
				(ushort)Items.WheatSeeds,
				(ushort)Items.FlaxSeeds,
				(ushort)Items.Leave,
				(ushort)Items.Stick,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvToDustOther() {
			ushort[] items ={
				(ushort)Items.Yarn,
				(ushort)Items.Hay,
				(ushort)Items.BucketWater,
				(ushort)Items.Cloth,
				(ushort)Items.Label,
				(ushort)Items.BareLabel
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		// sewing
		void SetInvClothesHead() {
			ushort[] items={
				(ushort)Items.Cap,
				(ushort)Items.Crown,
				(ushort)Items.Hat,
				(ushort)Items.SpaceHelmet,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvClothesChest() {
			ushort[] items={
				(ushort)Items.TShirt,
				(ushort)Items.Shirt,
				(ushort)Items.Dress,
				(ushort)Items.CoatArmy,
				(ushort)Items.Coat,
				(ushort)Items.JacketDenim,
				(ushort)Items.JacketFormal,
				(ushort)Items.JacketShort,
				(ushort)Items.SpaceSuit,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvClothesLegs() {
			ushort[] items={
				(ushort)Items.ArmyTrousers,
				(ushort)Items.Jeans,
				(ushort)Items.Shorts,
				(ushort)Items.Skirt,
				(ushort)Items.SpaceTrousers,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvClothesShoes() {
			ushort[] items={
				(ushort)Items.FormalShoes,
				(ushort)Items.Pumps,
				(ushort)Items.Sneakers,
				(ushort)Items.SpaceBoots,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

		void SetInvClothesUnderwear() {
			ushort[] items={
				(ushort)Items.Underpants,
				(ushort)Items.BoxerShorts,
				(ushort)Items.Panties,
				(ushort)Items.Swimsuit,
				(ushort)Items.BikiniTop,
				(ushort)Items.BikiniDown,
				(ushort)Items.Bra,
			};

			inventoryScrollbarValueCraftingMax=items.Length-1;
			for (int i=0; i<items.Length; i++) SetItemCrafting(InventoryCrafting, i, items[i]);
			for (int j = items.Length; j<InventoryCrafting.Length; j++) InventoryCrafting[j]=itemBlank;
			ReSetCraftingInventoryPositions();
		}

        //bool MinerAddItem(int index, MashineBlockBasic miner) {
        //    if (index>(int)Items._NonStacktable) {
        //        for (int i = 0; i<miner.Inv.Count; i++) {
        //            if (miner.Inv[i].X==index) {
        //                if (miner.Inv[i].Y<99) {
        //                    miner.Inv[i].Y++;
        //                    return true;
        //                }
        //            }
        //        }
        //    }

        //    for (int i = 0; i<miner.Inv.Count; i++) {
        //        if (miner.Inv[i].X==0) {
        //            miner.Inv[i].X=index;
        //            miner.Inv[i].Y=1;
        //            return true;
        //        }
        //    }
        //    return false;
        //}

        //void ChangeInventoryMiner() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            if (Global.WorldDifficulty!=2) {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // box
        //            {
        //                int i = 0;
        //                for (int y = 0; y<2*40; y+=40) {
        //                    for (int x = 0; x<12*40; x+=40) {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40) {
        //                            invMove=true;
        //                            invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                            leftMove=true;
        //                        }
        //                        i++;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+53+y&&newMouseState.Y<Global.WindowHeightHalf+53+y+40) {
        //                                invMove=true;
        //                                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i];
        //                                leftMove=false;
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }
        //            } else {

        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Shelf
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<2*40; y+=40) {
        //                            for (int x = 0; x<12*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {
        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Shelf
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<2*40; y+=40) {
        //                        for (int x = 0; x<12*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    // box
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<2*40; y+=40) {
        //                            for (int x = 0; x<12*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+x+59&&newMouseState.X<Global.WindowWidthHalf-300+x+59+40
        //                                &&newMouseState.Y>Global.WindowHeightHalf+59+y&&newMouseState.Y<Global.WindowHeightHalf+59+y+40)
        //                                    InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]);
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        }
        //    }
        //}

        //void ChangeInventoryCharger() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            if (Global.WorldDifficulty!=2) {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                    if (i>maxInvCount) break;

        //                    if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // Charger
        //            if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40) {
        //                invMove=true;
        //                invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
        //                leftMove=true;
        //            }
        //        } else {
        //            if (mouseRightPress) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Charger
        //                if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40) {
        //                    invMove=true;
        //                    invStartDInt=((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0];
        //                    leftMove=false;
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Charger
        //                if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
        //                    InvMoveOne(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
        //            } else {

        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Charger
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
        //                        InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);

        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                        if (i>maxInvCount) break;

        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Charger
        //                if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                    &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
        //                    InvMoveDouble(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //                            if (i>maxInvCount) break;

        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx&&newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Charger
        //                    if (newMouseState.X>Global.WindowWidthHalf-300+38+40&&newMouseState.X<Global.WindowWidthHalf-300+38+40+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf+20-2+40+25&&newMouseState.Y<Global.WindowHeightHalf+20-2+40+25+40)
        //                        InvMove(invStartDInt, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]);
        //                } else mouseDraw=true;
        //            }
        //        }
        //    }
        //}


        void SetUpInvToNew() {
            //Need.Clear();
            //lastMashineType=inventory;
            if (lastMashineType!=inventory) {
                switch (inventory) {
                    case InventoryType.BasicInv:
                        SetInvCraftingBlocks();
                        break;

                    case InventoryType.Desk:
                        SetInvCraftingBlocksA();
                        break;

                    case InventoryType.FurnaceStone:
                        SetInvBakeIngots();
                        break;

                    case InventoryType.FurnaceElectric:
                        SetInvBakeIngots();
                        break;

                    case InventoryType.Macerator:
                        SetInvToDustDusts();
                        break;

                    case InventoryType.SewingMachine:
                        SetInvClothesHead();
                        break;
                }
            }
            CurrentDeskCrafting=null;
            //Need.Clear();
            SelectedCraftingRecipe=-1;
            lastMashineType=inventory;
        }

        //void SelectItemToDust() {
        //    if (mouseLeftRelease) {
        //        int xx = 0, yh = 0;

        //        for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
        //            if (i>inventoryScrollbarValueCraftingMax) break;

        //            if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

        //                //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx) {
        //                //    if (newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40) {
        //                //        if (newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8) {
        //                //            if (newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {
        //                selectedCraftingItem=i;
        //                //craftingType=0;
        //                SelectedCraftingRecipe=0;
        //                //            DListInt[]x=GameMethods.ToDust(Crafting[selectedCraftingItem].X);
        //                //            if (x!=null) Need=x[craftingType].List1;

        //                //               selectedCraftingItem=i;
        //                //craftingType=0;
        //                DInt itemToCraft = Crafting[i];

        //                CurrentDeskCrafting=GameMethods.NewToDust(itemToCraft.X);

        //                //CurrentDeskCraftingSelected=0;
        //                SetNeed();
        //                return;
        //                //   }
        //                //}
        //                //}
        //            }

        //            xx+=40;

        //            if (xx==6*40) {
        //                xx=0;
        //                yh+=40;
        //            }
        //        }
        //    }
        //}
        void SelectItemToDust() {
			if (mouseLeftRelease) {
				int xx=0, yh=0;

				for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
					if (i>inventoryScrollbarValueCraftingMax) break;

					if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {

						selectedCraftingItem=i;

						SelectedCraftingRecipe=0;

						ItemInv itemToCraft=InventoryCrafting[i];

						CurrentDeskCrafting=GameMethods.ToDust(itemToCraft.Id);

						SetNeed();
						return;
					}

					xx+=40;

					if (xx==6*40) {
						xx=0;
						yh+=40;
					}
				}
			}
		}

        void SelectItemCraft() {
           if (mouseLeftRelease) {
				int xx =0, yh=0;

				for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
					if (i>inventoryScrollbarValueCraftingMax) break;

					if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
						selectedCraftingItem=i;
						ItemInv itemToCraft=InventoryCrafting[i];

						CurrentDeskCrafting=GameMethods.Craft(itemToCraft.Id);
						SelectedCraftingRecipe=0;
						SetNeed();
						return;
					}
					xx+=40;

					if (xx==6*40) {
						xx=0;
						yh+=40;
					}
				}
			}
        }
        //void SelectItemBake() {
        //    if (mouseLeftRelease) {
        //        int xx = 0, yh = 0;

        //        for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
        //            if (i>inventoryScrollbarValueCraftingMax) break;

        //            if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
        //                //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
        //                //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

        //                selectedCraftingItem=i;
        //                //craftingType=0;
        //                DInt itemToCraft = Crafting[i];

        //                CurrentDeskCrafting=GameMethods.NewBake(itemToCraft.X);
        //                SelectedCraftingRecipe=0;
        //                SetNeed();
        //                ///CurrentDeskCraftingSelected=0;
        //                return;
        //            }
        //            xx+=40;

        //            if (xx==6*40) {
        //                xx=0;
        //                yh+=40;
        //            }
        //        }
        //    }
        //}
        void SelectItemBake() {
			if (mouseLeftRelease) {
				int xx = 0, yh=0;

				for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
					if (i>inventoryScrollbarValueCraftingMax) break;

					if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
						selectedCraftingItem=i;
						ItemInv itemToCraft=InventoryCrafting[i];

						CurrentDeskCrafting=GameMethods.Bake(itemToCraft.Id);
						SelectedCraftingRecipe=0;
						SetNeed();
						return;
					}
					xx+=40;

					if (xx==6*40) {
						xx=0;
						yh+=40;
					}
				}
			}
		}

        //void SelectItemClothes() {
        //    if (mouseLeftRelease) {
        //        int xx = 0, yh = 0;

        //        for (int i = inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
        //            if (i>inventoryScrollbarValueCraftingMax) break;

        //            if (In40(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
        //                //if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
        //                //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

        //                selectedCraftingItem=i;
        //                //craftingType=0;

        //                DInt itemToCraft = Crafting[i];
        //                SelectedCraftingRecipe=0;
        //                CurrentDeskCrafting=GameMethods.NewClothes(itemToCraft.X);
        //                SetNeed();
        //                //CurrentDeskCraftingSelected=0;
        //                return;
        //            }
        //            xx+=40;

        //            if (xx==6*40) {
        //                xx=0;
        //                yh+=40;
        //            }
        //        }
        //    }
        //}

        void SelectItemClothes() {
			if (mouseLeftRelease) {
				int xx =0, yh=0;

				for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
					if (i>inventoryScrollbarValueCraftingMax) break;

					if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8)) {
						selectedCraftingItem=i;

						ItemInv itemToCraft=InventoryCrafting[i];
						SelectedCraftingRecipe=0;
						CurrentDeskCrafting=GameMethods.Clothes(itemToCraft.Id);
						SetNeed();
						return;
					}
					xx+=40;

					if (xx==6*40) {
						xx=0;
						yh+=40;
					}
				}
			}
		}

        //void InventoryRemoveDInt(int inventory) {
        //    DInt i = Inventory[inventory];
        //    i.Y--;

        //    if (i.Y==0) {
        //        i.X=0;
        //        return;
        //    }

        //    if (i.Y==1) {
        //        if (i.X<(int)Items._SystemMaxTools) {
        //            Items newId = GameMethods.ToolToBasic((Items)i.X);
        //            if (newId!=Items.None) i.X=(int)newId;
        //        }
        //    }
        //}

        //void InventoryRemoveDInt() {
        //    DInt i = Inventory[boxSelected];
        //    i.Y--;

        //    if (i.Y==0) {
        //        i.X=0;
        //        return;
        //    }

        //    if (i.Y==1) {
        //        if (i.X<(int)Items._SystemMaxTools) {
        //            Items newId = GameMethods.ToolToBasic((Items)i.X);
        //            if (newId!=Items.None) i.X=(int)newId;
        //        }
        //    }
        //}

        //void InventoryRemoveDInt(DInt i) {
        //    i.Y--;
        //    if (i.Y==0) {
        //        i.X=0;
        //        return;
        //    }

        //    if (i.Y==1) {
        //        if (i.X<(int)Items._SystemMaxTools) {
        //            Items newId = GameMethods.ToolToBasic((Items)i.X);
        //            if (newId!=Items.None) i.X=(int)newId;
        //        }
        //    }
        //}

        	void InventoryRemoveSelectedItem() {
			ItemInv i=InventoryNormal[boxSelected];
			switch (i) {
				case ItemInvTool32 s:
				   // s.SetCount=s.GetCount-1;
					if (s.GetCount==1) {
						InventoryNormal[boxSelected]=itemBlank;
					} else {
						s.SetCount=s.GetCount-1;
					}
					break;

				case ItemInvTool16 s:
					if (s.GetCount==1) {
						InventoryNormal[boxSelected]=itemBlank;
					} else {
						s.SetCount=s.GetCount-1;
					}
					break;

				case ItemInvBasic16 s:
					if (s.GetCount==1) {
						InventoryNormal[boxSelected]=itemBlank;
					} else {
						s.SetCount=s.GetCount-1;
					}
					break;

				case ItemInvBasic32 s:
					if (s.GetCount==1) {
						InventoryNormal[boxSelected]=itemBlank;
					} else {
						s.SetCount=s.GetCount-1;
					}
					break;

				//case ItemInvBasicColoritzed32NonStackable s:
				//    InventoryNormal[boxSelected]=itemBlank;
				//    break;

				//case ItemInvNonStackable16 s:
				//    InventoryNormal[boxSelected]=itemBlank;
				//    break;

				//case ItemInvNonStackable32 s:
				//    InventoryNormal[boxSelected]=itemBlank;
				//    break;

				case ItemInvFood16 s:
					if (s.GetCount==1) {
						InventoryNormal[boxSelected]=itemBlank;
					} else {
						s.SetCount=s.GetCount-1;
					}
					break;

				default:
					InventoryNormal[boxSelected]=itemBlank;
					break;

			}
		}


        //int TotalItemsInInventory(int id) {
        //    int inInv = 0;
        //    foreach (DInt ii in Inventory) {
        //        if (id==ii.X) inInv+=ii.Y;
        //    }
        //    return inInv;
        //}

        #endregion

        //void ChangeInventoryClothes() {
        //    // Move from ...
        //    if (!invMove) {
        //        mouseDraw=false;
        //        if (mouseLeftPress) {

        //            // Basic right inventory
        //            for (int i = 0; i<5; i++) {
        //                if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                    invMove=true;
        //                    invStartDInt=Inventory[i];
        //                    leftMove=true;
        //                }
        //            }

        //            // Inventory
        //            if (Global.WorldDifficulty!=2) {
        //                int xx = 0;
        //                int yh = 0;
        //                for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                    if (i>maxInvCount) break;
        //                    if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh)) {
        //                        //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                        //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=true;
        //                    }

        //                    xx+=40;
        //                    if (xx==9*40) {
        //                        xx=0;
        //                        yh+=40;
        //                    }
        //                }
        //            }

        //            // Clothes
        //            {
        //                int i = 0;
        //                for (int y = 0; y<4*40; y+=40) {
        //                    for (int x = 0; x<2*40; x+=40) {
        //                        if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                        &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                            invMove=true;
        //                            invStartDInt=InventoryClothes[i];
        //                            leftMove=true;
        //                        }
        //                        i++;
        //                    }
        //                }
        //            }
        //        } else {
        //            if (mouseRightPress) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40) {
        //                        invMove=true;
        //                        invStartDInt=Inventory[i];
        //                        leftMove=false;
        //                    }
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                        if (i>maxInvCount) break;
        //                        if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh)) {
        //                            //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40) {
        //                            invMove=true;
        //                            invStartDInt=Inventory[i];
        //                            leftMove=false;
        //                        }

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }

        //                // Clothes
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<2*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                             &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                                invMove=true;
        //                                invStartDInt=InventoryClothes[i];
        //                                leftMove=false;
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //    } else {

        //        //When chenge and moving ...
        //        if (leftMove) {
        //            if (mouseRightRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveOne(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                        if (i>maxInvCount) break;
        //                        if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
        //                            //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveOne(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                // Clothes
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<2*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                             &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                                InvMoveOne(invStartDInt, InventoryClothes[i]);
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {

        //                if (mouseLeftRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                            if (i>maxInvCount) break;
        //                            if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
        //                                //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                                //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }

        //                    // Clothes
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<4*40; y+=40) {
        //                            for (int x = 0; x<2*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                                 &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                                    InvMove(invStartDInt, InventoryClothes[i]);
        //                                }
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        } else {
        //            if (mouseLeftRelease) {

        //                // Basic right inventory
        //                for (int i = 0; i<5; i++) {
        //                    if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                    &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                        InvMoveDouble(invStartDInt, Inventory[i]);
        //                }

        //                // Inventory
        //                if (Global.WorldDifficulty!=2) {
        //                    int xx = 0;
        //                    int yh = 0;
        //                    for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                        if (i>maxInvCount) break;
        //                        if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
        //                            //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                            //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                            InvMoveDouble(invStartDInt, Inventory[i]);

        //                        xx+=40;
        //                        if (xx==9*40) {
        //                            xx=0;
        //                            yh+=40;
        //                        }
        //                    }
        //                }
        //                // Clothes
        //                {
        //                    int i = 0;
        //                    for (int y = 0; y<4*40; y+=40) {
        //                        for (int x = 0; x<2*40; x+=40) {
        //                            if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                            &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                                InvMoveDouble(invStartDInt, InventoryClothes[i]);
        //                            }
        //                            i++;
        //                        }
        //                    }
        //                }

        //            } else {
        //                if (mouseRightRelease) {
        //                    // Basic right inventory
        //                    for (int i = 0; i<5; i++) {
        //                        if (newMouseState.X>Global.WindowWidth-40&&newMouseState.X<Global.WindowWidth
        //                        &&newMouseState.Y>Global.WindowHeightHalf-80+i*40&&newMouseState.Y<Global.WindowHeightHalf-80+i*40+40)
        //                            InvMove(invStartDInt, Inventory[i]);
        //                    }

        //                    // Inventory
        //                    if (Global.WorldDifficulty!=2) {
        //                        int xx = 0;
        //                        int yh = 0;
        //                        for (int i = (inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
        //                            if (i>maxInvCount) break;
        //                            if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh))
        //                                //if (newMouseState.X>Global.WindowWidthHalf-300+4+200+4+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+200+4+4+xx+40
        //                                //&& newMouseState.Y>Global.WindowHeightHalf-200+2+4+yh && newMouseState.Y<Global.WindowHeightHalf-200+2+4+yh+40)
        //                                InvMove(invStartDInt, Inventory[i]);

        //                            xx+=40;
        //                            if (xx==9*40) {
        //                                xx=0;
        //                                yh+=40;
        //                            }
        //                        }
        //                    }
        //                    // Clothes
        //                    {
        //                        int i = 0;
        //                        for (int y = 0; y<4*40; y+=40) {
        //                            for (int x = 0; x<2*40; x+=40) {
        //                                if (newMouseState.X>Global.WindowWidthHalf-300+4+60+x&&newMouseState.X<Global.WindowWidthHalf-300+4+60+x+40
        //                               &&newMouseState.Y>Global.WindowHeightHalf-200+2+4+y&&newMouseState.Y<Global.WindowHeightHalf-200+2+4+y+40) {
        //                                    InvMoveOne(invStartDInt, InventoryClothes[i]);
        //                                }
        //                                i++;
        //                            }
        //                        }
        //                    }
        //                } else mouseDraw=true;
        //            }
        //        }
        //    }
        //}

        static bool In40(int x, int y) {
			if (mouseRealPosY < y)      return false;
			if (mouseRealPosX < x)      return false;
			if (mouseRealPosX > x + 39) return false;
			if (mouseRealPosY > y + 39) return false;
			return true;
		}

		static bool In(int x, int y, int x2, int y2) {
			if (mouseRealPosY < y)  return false;
			if (mouseRealPosX < x)  return false;
			if (mouseRealPosX > x2) return false;
			if (mouseRealPosY > y2) return false;
			return true;
		}

       void CraftingEventsCraft() {

			if (buttonCraft1x.Update()) {
				MakeCrafting(1);
				return;
			}

			if (buttonCraft10x.Update()) {
				MakeCrafting(10);
				return;
			}

			if (buttonCraft100x.Update()) {
				MakeCrafting(100);
				return;
			}
		}

       void CraftingEvents() {
			if (SelectedCraftingRecipe!=-1) {
				#if DEBUG
				if (CurrentDeskCrafting==null) throw new Exception("Pravděpodobně chybí recept - doplň v GameMethods ("+((Items)InventoryCrafting[selectedCraftingItem].Id)+")");
				#endif

				CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;
				if (CurrentDeskCrafting!=null) {
					if (CurrentDeskCrafting.Length!=1) {
						if (buttonNext.Update()) {
							SelectedCraftingRecipe++;
							if (SelectedCraftingRecipe==CurrentDeskCrafting.Length)SelectedCraftingRecipe=0;
							SetNeed();
						}

						if (buttonPrev.Update()) {
							SelectedCraftingRecipe--;
							if (SelectedCraftingRecipe==-1)SelectedCraftingRecipe=CurrentDeskCrafting.Length-1;
							SetNeed();
						}
					}
				}

				int i = 0;
				for (int y = 0; y<2; y++) {
					for (int x = 0; x<6; x++) {
						if (slots.Length==i) break;
						CraftingIn slot=slots[i];
						ItemNonInv[] item=slot.ItemSlot;
						if (item.Length>1) {
							if (mouseLeftDown) {
								if (In40(Global.WindowWidthHalf-300+4+200+80+40+8+x*40,y*40+Global.WindowHeightHalf-200+2+4+200+8+8)) {
									displayPopUpWindow=true;
									PopUpWindowChoosingPotencialdItem=i;
									PopUpWindowSelectedItem=-1;
									ShowPopUpWindow();
								}
							}
						}
						i++;
					}
				}
			}
		}

       	void MakeCrafting(int c) {
			if (CanCraft(c)) {
				for (int g=0; g<c; g++) {

					CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;//selectedCraftingItem

					foreach (CraftingIn d in slots) {
						if (d.SelectedItem==-1) return;
					}

					foreach (CraftingIn d in slots) {
						ItemNonInv item=d.ItemSlot[d.SelectedItem];
						ushort id=item.Id;

						if (id==(ushort)Items.BronzeIngot) AchievementBronzeAge=true;
						if (id==(ushort)Items.AxeIron) AchievementIronAge=true;
						if (id==(ushort)Items.AxeIron) AchievementIronAge=true;
						if (id==(ushort)Items.ShovelIron) AchievementIronAge=true;
						if (id==(ushort)Items.HammerIron) AchievementIronAge=true;
						if (id==(ushort)Items.HoeIron) AchievementIronAge=true;
						if (id==(ushort)Items.KnifeIron) AchievementIronAge=true;
						if (id==(ushort)Items.SawIron) AchievementIronAge=true;

						switch (item) {
							case ItemNonInvBasic it:
								if (GameMethods.IsItemInvBasic16(id)) {
									int remain=it.Count;
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvBasic16 ininv=(ItemInvBasic16)InventoryNormal[i];
											if (ininv.GetCount<=remain) {
												remain-=ininv.GetCount;
												InventoryNormal[i]=itemBlank;
											} else {
												ininv.SetCount=ininv.GetCount-remain;
												remain=0;
												break;
											}
										}
									}
								} else {
									int remain=it.Count;
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvBasic32 ininv=(ItemInvBasic32)InventoryNormal[i];
											if (ininv.GetCount<=remain) {
												remain-=ininv.GetCount;
												InventoryNormal[i]=itemBlank;
											} else {
												ininv.SetCount=ininv.GetCount-remain;
												remain=0;
												break;
											}
										}
									}
								}
								break;

							case ItemNonInvNonStackable it:
								if (GameMethods.IsItemInvNonStackable32(id)) {
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvNonStackable32 ininv=(ItemInvNonStackable32)InventoryNormal[i];
											InventoryNormal[i]=itemBlank;
										}
									}
								}
								break;

							case ItemNonInvBasicColoritzedNonStackable it:
								if (GameMethods.IsItemInvNonStackable32(id)) {
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvBasicColoritzed32NonStackable ininv=(ItemInvBasicColoritzed32NonStackable)InventoryNormal[i];
											InventoryNormal[i]=itemBlank;
										}
									}
								}
								break;

							case ItemNonInvTool it:
								if (GameMethods.IsItemInvTool16(id)) {
									int remain=it.Count;
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvTool16 ininv=(ItemInvTool16)InventoryNormal[i];
											if (ininv.GetCount<=remain) {
												remain-=ininv.GetCount;
												ushort newid=GameMethods.ToolToBasic(id);
												if (newid==0) InventoryNormal[i]=itemBlank;
												else InventoryNormal[i]=new ItemInvTool16(
													ItemIdToTexture(id),
													newid,
													1,
												 //   GameMethods.ToolMax(id),
													(int)ininv.posTex.X,
													(int)ininv.posTex.Y
												);
											} else {
												ininv.SetCount=ininv.GetCount-remain;
												remain=0;
												break;
											}
										}
									}
								} else {
									int remain=it.Count;
									for (int i=0; i<maxInvCount; i++) {
										if (InventoryNormal[i].Id==id) {
											ItemInvTool32 ininv=(ItemInvTool32)InventoryNormal[i];
											if (ininv.GetCount<=remain) {
												remain-=ininv.GetCount;
												ushort newid=GameMethods.ToolToBasic(id);
												if (newid==0) InventoryNormal[i]=itemBlank;
												else InventoryNormal[i]=new ItemInvTool32(
													ItemIdToTexture(id),
													newid,
													1,
												 //   GameMethods.ToolMax(id),
													(int)ininv.posTex.X,
													(int)ininv.posTex.Y
												);
											} else {
												ininv.SetCount=ininv.GetCount-remain;
												remain=0;
												break;
											}
										}
									}
								}
								break;
						}
						//int count=item.Y;
						//for (int i=0; i<maxInvCount; i++) {
						//    if (InventoryNormal[i].Id==item.X) {
						//        if (InventoryNormal[i].Y>count) {
						//            InventoryNormal[i].Y-=count;
						//            break;
						//        } else {
						//            count-=InventoryNormal[i].Y;
						//            if (item.X>(ushort)Items._SystemMaxTools) {
						//                InventoryNormal[i].X=0;
						//                InventoryNormal[i].Y=0;
						//            }  else {
						//                Items expec=GameMethods.ToolToBasic((Items)InventoryNormal[i].X);
						//                if (expec==Items.None) {
						//                    InventoryNormal[i].X=0;
						//                    InventoryNormal[i].Y=0;
						//                } else {
						//                    InventoryNormal[i].Y=1;
						//                    InventoryNormal[i].X=(int)expec;
						//                }
						//            }
						//        }
						//    }
						//}
					}

					foreach (CraftingOut d in CurrentDeskCrafting[SelectedCraftingRecipe].Output){//selectedCraftingItem
						if (d.EveryTime) AddItemToPlayer(d.Item);
						else{
							if (FastRandom.Double()<d.ChanceToDrop) AddItemToPlayer(d.Item);
						}
						//if (d.EveryTime) ItemDrop(d.Item.X,d.Item.Y, PlayerX-11, PlayerY-16);
						//else ItemDrop(d.Item.X,FastRandom.RandomInt(d.ChanceMin,d.ChanceMax), PlayerX-11, PlayerY-16);
					}
				}
			}
			SetNeed();
		}

        //void SetNeed() {
        //    if (SelectedCraftingRecipe==-1) return;
        //    if (CurrentDeskCrafting==null) return;
        //    CraftingIn[] slots = CurrentDeskCrafting[SelectedCraftingRecipe].Input;

        //    int i = 0;
        //    for (int y = 0; y<2; y++) {
        //        for (int x = 0; x<6; x++) {
        //            if (slots.Length==i) break;
        //            CraftingIn slot = slots[i];
        //            DInt[] item = slot.ItemSlot;

        //            if (slot.SelectedItem==-1) {
        //                slot.TmpSelected=FastRandom.Int(item.Length);
        //                slot.Texture=ItemIdToTexture(item[slot.TmpSelected].X);
        //            } else {
        //                DInt selectedSlot = item[slot.SelectedItem];
        //                if (item.Length==1) {
        //                    slot.Texture=ItemIdToTexture(item[0].X);
        //                    slot.HaveItemInInventory=TotalItemsInInventory(slot.ItemSlot[0].X)>=slot.ItemSlot[0].Y;
        //                } else {
        //                    slot.Texture=ItemIdToTexture(item[slot.SelectedItem].X);
        //                }


        //            }

        //            i++;


        //        }
        //    }
        //}
        	void SetNeed() {
			if (SelectedCraftingRecipe==-1)return;
			if (CurrentDeskCrafting==null)return;
			CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;

			int i = 0;
			for (int y = 0; y<2; y++) {
				for (int x = 0; x<6; x++) {
					if (slots.Length==i) break;
					CraftingIn slot=slots[i];
					ItemNonInv[] item=slot.ItemSlot;

					if (slot.SelectedItem==-1) {
						 slot.TmpSelected=FastRandom.Int(item.Length);
						 slot.Texture=ItemIdToTexture(item[slot.TmpSelected].Id);
					}else{
					   // ItemNonInv selectedSlot=item[slot.SelectedItem];
						if (item.Length==1) {
							switch (slot.ItemSlot[0]) {
								case ItemNonInvTool t:
									slot.Texture=ItemIdToTexture(item[0].Id);
									if (t.Count==-1){
										slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>0;
									}else{
										slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>=t.Count;
									}
									break;

								case ItemNonInvBasic t:
									slot.Texture=ItemIdToTexture(item[0].Id);
									slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>=t.Count;
									break;

								//case ItemNonInvNonStackable f:
								//    slot.Texture=ItemIdToTexture(item[0].Id);
								//    slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>=1;
								//    break;

								//case ItemNonInvBasicColoritzedNonStackable f:
								//    slot.Texture=ItemIdToTexture(item[0].Id);
								//    slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>=1;
								//    break;

								default:
									slot.Texture=ItemIdToTexture(item[0].Id);
									slot.HaveItemInInventory=TotalItemsInInventoryForAllTypes(slot.ItemSlot[0].Id)>=1;
									break;
							}

						}else{
							slot.Texture=ItemIdToTexture(item[slot.SelectedItem].Id);
						}
					}

				  i++;


				}
			}
		}

        //void SetPlayerClothes() {
        //    switch (InventoryClothes[0].X) {
        //        case (int)Items.Cap:
        //            TextureWalkingClothesHead=TextureWalkingCap;
        //            TextureStaticClothesHead=TextureStaticCap;
        //            break;

        //        case (int)Items.Hat:
        //            TextureWalkingClothesHead=TextureWalkingHad;
        //            TextureStaticClothesHead=TextureStaticHad;
        //            break;

        //        case (int)Items.Crown:
        //            TextureWalkingClothesHead=TextureWalkingCrown;
        //            TextureStaticClothesHead=TextureStaticCrown;
        //            break;

        //        case (int)Items.SpaceHelmet:
        //            TextureWalkingClothesHead=TextureWalkingSpaceHelmet;
        //            TextureStaticClothesHead=TextureStaticSpaceHelmet;
        //            break;

        //        default:
        //            TextureWalkingClothesHead=null;
        //            TextureStaticClothesHead=null;
        //            break;
        //    }

        //    switch (InventoryClothes[1].X) {
        //        case (int)Items.CoatArmy:
        //            TextureWalkingClothesChestTop=TextureWalkingCoatArmy;
        //            TextureStaticClothesChestTop=TextureStaticCoatArmy;
        //            TextureSwimmingClothesChestTop=TextureSwimmingCoatArmy;
        //            break;

        //        case (int)Items.CoatGray:
        //            TextureWalkingClothesChestTop=TextureWalkingCoatGray;
        //            TextureStaticClothesChestTop=TextureStaticCoatGray;
        //            TextureSwimmingClothesChestTop=TextureSwimmingCoatGray;
        //            break;

        //        case (int)Items.JacketDenim:
        //            TextureWalkingClothesChestTop=TextureWalkingJacketDenim;
        //            TextureStaticClothesChestTop=TextureStaticJacketDenim;
        //            TextureSwimmingClothesChestTop=TextureSwimmingJacketDenim;
        //            break;

        //        case (int)Items.JacketFormal:
        //            TextureWalkingClothesChestTop=TextureWalkingJacketFormal;
        //            TextureStaticClothesChestTop=TextureStaticJacketFormal;
        //            TextureSwimmingClothesChestTop=TextureSwimmingJacketFormal;
        //            break;

        //        case (int)Items.JacketRed:
        //            TextureWalkingClothesChestTop=TextureWalkingJacketRed;
        //            TextureStaticClothesChestTop=TextureStaticJacketRed;
        //            TextureSwimmingClothesChestTop=TextureSwimmingJacketRed;
        //            break;

        //        case (int)Items.JacketShort:
        //            TextureWalkingClothesChestTop=TextureWalkingJacketShort;
        //            TextureStaticClothesChestTop=TextureStaticJacketShort;
        //            TextureSwimmingClothesChestTop=TextureSwimmingJacketShort;
        //            break;

        //        case (int)Items.SpaceSuit:
        //            TextureWalkingClothesChestTop=TextureWalkingSpaceSuit;
        //            TextureStaticClothesChestTop=TextureStaticSpaceSuit;
        //            TextureSwimmingClothesChestTop=TextureSwimmingSpaceSuit;
        //            break;

        //        default:
        //            TextureWalkingClothesChestTop=null;
        //            TextureStaticClothesChestTop=null;
        //            TextureSwimmingClothesChestTop=null;
        //            break;
        //    }

        //    switch (InventoryClothes[2].X) {
        //        case (int)Items.BlueDress:
        //            TextureWalkingClothesChest=TextureWalkingBlueDress;
        //            TextureStaticClothesChest=TextureStaticBlueDress;
        //            TextureSwimmingClothesChest=TextureSwimmingBlueDress;
        //            break;

        //        case (int)Items.GreenTShirt:
        //            TextureWalkingClothesChest=TextureWalkingGreenTShirt;
        //            TextureStaticClothesChest=TextureStaticGreenTShirt;
        //            TextureSwimmingClothesChest=TextureSwimmingGreenTShirt;
        //            break;

        //        case (int)Items.LightBlueTShirt:
        //            TextureWalkingClothesChest=TextureWalkingLightBlueTShirt;
        //            TextureStaticClothesChest=TextureStaticLightBlueTShirt;
        //            TextureSwimmingClothesChest=TextureSwimmingLightBlueTShirt;
        //            break;

        //        case (int)Items.Shirt:
        //            TextureWalkingClothesChest=TextureWalkingShirt;
        //            TextureStaticClothesChest=TextureStaticShirt;
        //            TextureSwimmingClothesChest=TextureSwimmingShirt;
        //            break;

        //        case (int)Items.WhiteDress:
        //            TextureWalkingClothesChest=TextureWalkingWhiteDress;
        //            TextureStaticClothesChest=TextureStaticWhiteDress;
        //            TextureSwimmingClothesChest=TextureSwimmingWhiteDress;
        //            break;

        //        default:
        //            TextureWalkingClothesChest=null;
        //            TextureStaticClothesChest=null;
        //            TextureSwimmingClothesChest=null;
        //            break;
        //    }

        //    switch (InventoryClothes[3].X) {
        //        case (int)Items.TopBlackBikini:
        //            TextureWalkingClothesUpUnderwear=TextureWalkingTopBlackBikini;
        //            TextureStaticClothesUpUnderwear=TextureStaticTopBlackBikini;
        //            TextureSwimmingClothesUpUnderwear=TextureSwimmingTopBlackBikini;
        //            break;

        //        case (int)Items.TopBlueBikini:
        //            TextureWalkingClothesUpUnderwear=TextureWalkingTopBlueBikini;
        //            TextureStaticClothesUpUnderwear=TextureStaticTopBlueBikini;
        //            TextureSwimmingClothesUpUnderwear=TextureSwimmingTopBlueBikini;
        //            break;

        //        case (int)Items.GrayBra:
        //            TextureWalkingClothesUpUnderwear=TextureWalkingGrayBra;
        //            TextureStaticClothesUpUnderwear=TextureStaticGrayBra;
        //            TextureSwimmingClothesUpUnderwear=TextureSwimmingGrayBra;
        //            break;

        //        case (int)Items.PurpleBra:
        //            TextureWalkingClothesUpUnderwear=TextureWalkingPurpleBra;
        //            TextureStaticClothesUpUnderwear=TextureStaticPurpleBra;
        //            TextureSwimmingClothesUpUnderwear=TextureSwimmingPurpleBra;
        //            break;

        //        case (int)Items.RedBra:
        //            TextureWalkingClothesUpUnderwear=TextureWalkingRedBra;
        //            TextureStaticClothesUpUnderwear=TextureStaticRedBra;
        //            TextureSwimmingClothesUpUnderwear=TextureSwimmingRedBra;
        //            break;

        //        default:
        //            TextureWalkingClothesUpUnderwear=null;
        //            TextureStaticClothesUpUnderwear=null;
        //            TextureSwimmingClothesUpUnderwear=null;
        //            break;
        //    }

        //    switch (InventoryClothes[4].X) {
        //        case (int)Items.ArmyTrousers:
        //            TextureWalkingClothesLegs=TextureWalkingArmyTrousers;
        //            TextureStaticClothesLegs=TextureStaticArmyTrousers;
        //            TextureSwimmingClothesLegs=TextureSwimmingArmyTrousers;
        //            break;

        //        case (int)Items.BlackSkirt:
        //            TextureWalkingClothesLegs=TextureWalkingBlackSkirt;
        //            TextureStaticClothesLegs=TextureStaticBlackSkirt;
        //            TextureSwimmingClothesLegs=TextureSwimmingBlackSkirt;
        //            break;

        //        case (int)Items.Jeans:
        //            TextureWalkingClothesLegs=TextureWalkingJeans;
        //            TextureStaticClothesLegs=TextureStaticJeans;
        //            TextureSwimmingClothesLegs=TextureSwimmingJeans;
        //            break;

        //        case (int)Items.PinkSkirt:
        //            TextureWalkingClothesLegs=TextureWalkingPinkSkirt;
        //            TextureStaticClothesLegs=TextureStaticPinkSkirt;
        //            TextureSwimmingClothesLegs=TextureSwimmingPinkSkirt;
        //            break;

        //        case (int)Items.Shorts:
        //            TextureWalkingClothesLegs=TextureWalkingShorts;
        //            TextureStaticClothesLegs=TextureStaticShorts;
        //            TextureSwimmingClothesLegs=TextureSwimmingShorts;
        //            break;

        //        case (int)Items.SpaceTrousers:
        //            TextureWalkingClothesLegs=TextureWalkingSpaceTrousers;
        //            TextureStaticClothesLegs=TextureStaticSpaceTrousers;
        //            TextureSwimmingClothesLegs=TextureSwimmingSpaceTrousers;
        //            break;

        //        default:
        //            TextureWalkingClothesLegs=null;
        //            TextureStaticClothesLegs=null;
        //            TextureSwimmingClothesLegs=null;
        //            break;
        //    }

        //    switch (InventoryClothes[5].X) {
        //        case (int)Items.BlackBikini:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingBlackBikini;
        //            TextureStaticClothesDownUnderwear=TextureStaticBlackBikini;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingBlackBikini;
        //            break;

        //        case (int)Items.BlueBikini:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingBlueBikini;
        //            TextureStaticClothesDownUnderwear=TextureStaticBlueBikini;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingBlueBikini;
        //            break;

        //        case (int)Items.BlueUnderpants:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingBlueUnderpants;
        //            TextureStaticClothesDownUnderwear=TextureStaticBlueUnderpants;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingBlueUnderpants;
        //            break;

        //        case (int)Items.BoxerShorts:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingBoxerShorts;
        //            TextureStaticClothesDownUnderwear=TextureStaticBoxerShorts;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingBoxerShorts;
        //            break;

        //        case (int)Items.Shorts:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingShorts;
        //            TextureStaticClothesDownUnderwear=TextureStaticShorts;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingShorts;
        //            break;

        //        case (int)Items.GrayUnderpants:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingGrayUnderpants;
        //            TextureStaticClothesDownUnderwear=TextureStaticGrayUnderpants;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingGrayUnderpants;
        //            break;

        //        case (int)Items.PantiesLightBlue:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingPantiesLightBlue;
        //            TextureStaticClothesDownUnderwear=TextureStaticPantiesLightBlue;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingPantiesLightBlue;
        //            break;

        //        case (int)Items.PantiesRed:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingPantiesRed;
        //            TextureStaticClothesDownUnderwear=TextureStaticPantiesRed;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingPantiesRed;
        //            break;

        //        case (int)Items.Swimsuit:
        //            TextureWalkingClothesDownUnderwear=TextureWalkingSwimsuit;
        //            TextureStaticClothesDownUnderwear=TextureStaticSwimsuit;
        //            TextureSwimmingClothesDownUnderwear=TextureSwimmingSwimsuit;
        //            break;

        //        default:
        //            TextureWalkingClothesDownUnderwear=null;
        //            TextureStaticClothesDownUnderwear=null;
        //            TextureSwimmingClothesDownUnderwear=null;
        //            break;
        //    }

        //    switch (InventoryClothes[6].X) {
        //        case (int)Items.FormalShoes:
        //            TextureWalkingClothesFeet=TextureWalkingFormalShoes;
        //            TextureStaticClothesFeet=TextureStaticFormalShoes;
        //            TextureSwimmingClothesFeet=TextureSwimmingFormalShoes;
        //            break;

        //        case (int)Items.Pumps:
        //            TextureWalkingClothesFeet=TextureWalkingPumps;
        //            TextureStaticClothesFeet=TextureStaticPumps;
        //            TextureSwimmingClothesFeet=TextureSwimmingPumps;
        //            break;

        //        case (int)Items.Sneakers:
        //            TextureWalkingClothesFeet=TextureWalkingSneakers;
        //            TextureStaticClothesFeet=TextureStaticSneakers;
        //            TextureSwimmingClothesFeet=TextureSwimmingSneakers;
        //            break;

        //        case (int)Items.SpaceBoots:
        //            TextureWalkingClothesFeet=TextureWalkingSpaceBoots;
        //            TextureStaticClothesFeet=TextureStaticSpaceBoots;
        //            TextureSwimmingClothesFeet=TextureSwimmingSpaceBoots;
        //            break;

        //        default:
        //            TextureWalkingClothesFeet=null;
        //            TextureStaticClothesFeet=null;
        //            TextureSwimmingClothesFeet=null;
        //            break;
        //    }

        //    if (InventoryClothes[7].X==(int)Items.Backpack) {
        //        maxInvCount=45+49;
        //    } else {
        //        if (maxInvCount>49) {
        //            for (int i = 49; i<maxInvCount; i++) {
        //                if (Inventory[i].X!=0) {
        //                    ItemDrop(Inventory[i].X, Inventory[i].Y, new DInt(PlayerX, PlayerY));
        //                    Inventory[i].X=0;
        //                    Inventory[i].Y=0;
        //                }
        //            }
        //        }
        //        maxInvCount=49;
        //    }
        //}

        //void InventoryDrawClothes() {
        //    int i = 0;
        //    for (int y = 0; y<4*40; y+=40) {
        //        for (int x = 0; x<2*40; x+=40) {
        //            if (!invMove||(invMove&&invStartDInt!=InventoryClothes[i])) {
        //                Texture2D tex = ItemIdToTexture(InventoryClothes[i].X);
        //                if (tex!=null) GameDraw.DrawItemInInventory(tex, InventoryClothes[i], Global.WindowWidthHalf-300+4+60+x+4, Global.WindowHeightHalf-200+2+4+y+4);
        //            }
        //            i++;
        //        }
        //    }
        //}
        void SetPlayerClothes() {
            for (int i=0; i<InventoryClothes.Length; i++) {
				if (InventoryClothes[i]==null) InventoryClothes[i]=itemBlank;
            }

			switch (InventoryClothes[InventoryClothesSlotCap].Id) {
				case (ushort)Items.Cap:
					ClothesHead=ClothesCap;
					ClothesHead.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCap]).color;
					break;

				case (ushort)Items.Hat:
					ClothesHead=ClothesHad;
					break;

				case (ushort)Items.Crown:
					ClothesHead=ClothesCrown;
					break;

				case (ushort)Items.SpaceHelmet:
					ClothesHead=ClothesSpaceHelmet;
					ClothesHead.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCap]).color;
					break;

				default:
					ClothesHead=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotCoat].Id) {
				case (ushort)Items.CoatArmy:
					ClothesChestTop=ClothesCoatArmy;
					ClothesChestTop.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCoat]).color;
					break;

				case (ushort)Items.Coat:
					ClothesChestTop=ClothesCoat;
					ClothesChestTop.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCoat]).color;
					break;

				case (ushort)Items.JacketDenim:
					ClothesChestTop=ClothesJacketDenim;
					ClothesChestTop.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCoat]).color;
					break;

				case (ushort)Items.JacketFormal:
					ClothesChestTop=ClothesJacketFormal;
					ClothesChestTop.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCoat]).color;
					break;

				case (ushort)Items.JacketShort:
					ClothesChestTop=ClothesJacketShort;
					ClothesChestTop.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotCoat]).color;
					break;

				case (ushort)Items.SpaceSuit:
					ClothesChestTop=ClothesSpaceSuit;
					break;

				default:
					ClothesChestTop=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotTShirt].Id) {
				case (ushort)Items.Dress:
					ClothesChest=ClothesDress;
					ClothesChest.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTShirt]).color;
					break;

				case (ushort)Items.TShirt:
					ClothesChest=ClothesTShirt;
					ClothesChest.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTShirt]).color;
					break;

				case (ushort)Items.Shirt:
					ClothesChest=ClothesShirt;
					ClothesChest.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTShirt]).color;
					break;

				case (ushort)Items.Top:
					ClothesChest=ClothesTop;
					ClothesChest.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTShirt]).color;
					break;

				default:
					ClothesChest=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotBra].Id) {
				case (ushort)Items.BikiniTop:
					ClothesUnderwearUp=ClothesBikiniTop;
					ClothesUnderwearUp.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotBra]).color;
					break;

				case (ushort)Items.Bra:
					ClothesUnderwearUp=ClothesBra;
					ClothesUnderwearUp.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotBra]).color;
					break;

				default:
					ClothesUnderwearUp=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotTrousers].Id) {
				case (ushort)Items.ArmyTrousers:
					ClothesLegs=ClothesArmyTrousers;
					ClothesLegs.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTrousers]).color;
					break;

				case (ushort)Items.Skirt:
					ClothesLegs=ClothesSkirt;
					ClothesLegs.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTrousers]).color;
					break;

				case (ushort)Items.Jeans:
					ClothesLegs=ClothesJeans;
					ClothesLegs.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTrousers]).color;
					break;

				case (ushort)Items.Shorts:
					ClothesLegs=ClothesShorts;
					ClothesLegs.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTrousers]).color;
					break;

				case (ushort)Items.SpaceTrousers:
					ClothesLegs=ClothesSpaceTrousers;
					ClothesLegs.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotTrousers]).color;
					break;

				default:
					ClothesLegs=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotUnderwear].Id) {
				case (ushort)Items.BikiniDown:
					ClothesUnderwearDown=ClothesBikiniDown;
					ClothesUnderwearDown.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotUnderwear]).color;
					break;

				case (ushort)Items.Underpants:
					ClothesUnderwearDown=ClothesUnderpants;
					ClothesUnderwearDown.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotUnderwear]).color;
					break;

				case (ushort)Items.BoxerShorts:
					ClothesUnderwearDown=ClothesBoxerShorts;
					ClothesUnderwearDown.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotUnderwear]).color;
					break;

				case (ushort)Items.Panties:
					ClothesUnderwearDown=ClothesPanties;
					ClothesUnderwearDown.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotUnderwear]).color;
					break;

				case (ushort)Items.Swimsuit:
					ClothesUnderwearDown=ClothesSwimsuit;
					ClothesUnderwearDown.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotUnderwear]).color;
					break;

				default:
					ClothesUnderwearDown=null;
					break;
			}

			switch (InventoryClothes[InventoryClothesSlotShoes].Id) {
				case (ushort)Items.FormalShoes:
					ClothesFeet=ClothesFormalShoes;
					ClothesFeet.Color=ColorWhite;
					break;

				case (ushort)Items.Pumps:
					ClothesFeet=ClothesPumps;
					ClothesFeet.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotShoes]).color;
					break;

				case (ushort)Items.Sneakers:
					ClothesFeet=ClothesSneakers;
					ClothesFeet.Color=((ItemInvBasicColoritzed32NonStackable)InventoryClothes[InventoryClothesSlotShoes]).color;
					break;

				case (ushort)Items.SpaceBoots:
					ClothesFeet=ClothesSpaceBoots;
					ClothesFeet.Color=ColorWhite;
					break;

				default:
					ClothesFeet=null;
					break;
			}

			if (InventoryClothes[InventoryClothesSlotBackpack].Id==(ushort)Items.Backpack) {
				maxInvCount=45+49;
			} else {
				if (maxInvCount>49) {
					for (int i=49; i<maxInvCount; i++) {
						if (InventoryNormal[i].Id!=0) {
							switch (InventoryNormal[i]) {
								case ItemInvBasicColoritzed32NonStackable n:
									{
										ItemNonInv remain =InventoryAdd(new ItemNonInvBasicColoritzedNonStackable(n.Id,n.color));
										if (remain!=null) DroppedItems.Add(
											new Item {
												item=remain,
												Texture=ItemIdToTexture(remain.Id),
												X=(int)PlayerX,
												Y=(int)PlayerY
											}
										);
									}
									break;

								case ItemInvBasic16 n:
									{
										ItemNonInv remain =InventoryAdd(new ItemNonInvBasic(n.Id,n.GetCount));
										if (remain!=null) DroppedItems.Add(
											new Item {
												item=remain,
												Texture=ItemIdToTexture(remain.Id),
												X=(int)PlayerX,
												Y=(int)PlayerY
											}
										);
									}
									break;

								case ItemInvBasic32 n:
									{
										ItemNonInv remain =InventoryAdd(new ItemNonInvBasic(n.Id,n.GetCount));
										if (remain!=null) DroppedItems.Add(
											new Item {
												item=remain,
												Texture=ItemIdToTexture(remain.Id),
												X=(int)PlayerX,
												Y=(int)PlayerY
											}
										);
									}
									break;

								case ItemInvFood16 n:
									{
										ItemNonInv remain =InventoryAdd(new ItemNonInvFood(n.Id,n.GetCount,n.CountMaximum,n.GetDescay,n.DescayMaximum));
										if (remain!=null) DroppedItems.Add(
											new Item {
												item=remain,
												Texture=ItemIdToTexture(remain.Id),
												X=(int)PlayerX,
												Y=(int)PlayerY
											}
										);
									}
									break;

								case ItemInvTool32 n:
									{
										ItemNonInv remain =InventoryAdd(new ItemNonInvTool(n.Id,n.GetCount,n.Maximum));
										if (remain!=null) DroppedItems.Add(
											new Item {
												item=remain,
												Texture=ItemIdToTexture(remain.Id),
												X=(int)PlayerX,
												Y=(int)PlayerY
											}
										);
									}
									break;
							}

							InventoryNormal[i]=itemBlank;
						}
					}
				}
				maxInvCount=49;
			}
		}

        void InventoryDrawClothes() {
			for (int i=0; i<8; i++) InventoryClothes[i].Draw();
		}

        void DrawNeedNew() {
			if (CurrentDeskCrafting==null)return;
			if (selectedCraftingItem==-1)return;
			if (SelectedCraftingRecipe==-1)return;
			spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), ColorWhite);
			CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;

			int i = 0;
			for (int y = 0; y<2; y++) {
				for (int x = 0; x<6; x++) {
					if (slots.Length==i) break;

					CraftingIn slot=slots[i];
					ItemNonInv[] item=slot.ItemSlot;
					if (slot.SelectedItem==-1) {
						if (!slot.HaveItemInInventory)
							spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

						/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(item[slot.TmpSelected].Id),*/ item[slot.TmpSelected], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);

						spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16), ColorWhite);
					}else{
					  //  ItemNonInv selectedSlot=item[slot.SelectedItem];

						if (item.Length==1) {
							if (!slot.HaveItemInInventory)
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

							if (slot.Texture!=null) /*GameDraw.DrawItemInInventory*/DrawItem(/*slot.Texture,*/ item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
						} else {
							if (!slot.HaveItemInInventory)
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

							if (slots[i].SelectedItem==-1) {
								/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(item[slot.TmpSelected].Id),*/ item[slot.TmpSelected], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
							} else {
								/*GameDraw.DrawItemInInventory*/DrawItem(/*slot.Texture, */item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
							}
							spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16), ColorWhite);
						}
					}

					i++;
				}
			}

			if (CurrentDeskCrafting.Length!=1) {
				 buttonPrev.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				 buttonNext.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
			}

			if (CanCraft(1)) {
				buttonCraft1x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

				if (CanCraft(10)) {
					buttonCraft10x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

					if (CanCraft(100)) buttonCraft100x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
					else buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				} else {
					buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
					buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				}
			} else {
				buttonCraft1x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
			}
		}

        //void DrawChooseItemWindow() {
        //    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(0, 0, Global.WindowWidth, Global.WindowHeight), color_r0_g0_b0_a100);

        //    DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-134, 304, 234+2, 1, color_r0_g0_b0_a100);
        //    DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-133, 302, 234, 1, color_r0_g0_b0_a200);
        //    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-132, 300, 34), color_r10_g140_b255);
        //    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-100+2, 300, 200-2), Color.LightBlue);

        //    buttonClosePopUp.ButtonDraw(spriteBatch, newMouseState.X, newMouseState.Y, Global.WindowWidthHalf+150-32, Global.WindowHeightHalf-132+1, mouseLeftDown);

        //    GameDraw.DrawTextShadowMin(Global.WindowWidthHalf-150-2+10, Global.WindowHeightHalf-134+10, Lang.Texts[160]/* Setting.czechLanguage ? "Vyberte si item":"Choose some item"*/);

        //    CraftingIn[] slots = CurrentDeskCrafting[SelectedCraftingRecipe].Input;
        //    DInt[] items = slots[PopUpWindowChoosingPotencialdItem].ItemSlot;
        //    int i = 0;

        //    for (int y = 0; y<4; y++) {
        //        for (int x = 0; x<7; x++) {

        //            if (items.Length==i) break;
        //            bool hasItem = TotalItemsInInventory(items[i].X)>=items[i].Y;
        //            if (In40(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20)) {
        //                if (mouseLeftDown) {
        //                    displayPopUpWindow=false;
        //                    PopUpWindowSelectedItem=i;
        //                    slots[PopUpWindowChoosingPotencialdItem].SelectedItem=slots[PopUpWindowChoosingPotencialdItem].TmpSelected=i;
        //                    slots[PopUpWindowChoosingPotencialdItem].Texture=ItemIdToTexture(items[i].X);
        //                    slots[PopUpWindowChoosingPotencialdItem].HaveItemInInventory=hasItem;
        //                    return;
        //                }
        //                if (hasItem) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.DarkGray);
        //                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.Red);
        //            } else {
        //                if (hasItem) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.White);
        //                else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), new Color(255, 150, 150));
        //            }

        //            GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);

        //            i++;
        //        }
        //    }

        //    //i=0;
        //    //for (int y=0; y<4; y++) {
        //    //    for (int x=0; x<7; x++) {

        //    //        GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);
        //    //        i++;
        //    //    }
        //    //}
        //    //   buttonOK.ButtonDraw(spriteBatch,mouseLeftDown,mouseRealPos);

        //    //DrawInventoryWithDIntMoving();
        //    //InventoryDrawClothes();
        //    //#region Crafting
        //    //{
        //    //    if (inventoryScrollbarValueCraftingMax>6*4) {
        //    //        int size2 =(int)( (1f/((( (int)(inventoryScrollbarValueCraftingMax/5f)+1  )*40)/160f))*160 );
        //    //        int pos2=(int)(  (inventoryScrollbarValueCrafting*5/40f) / inventoryScrollbarValueCraftingMax*(160-size2) )*8;
        //    //        if (size2>20) {
        //    //            spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), Color.White);
        //    //            spriteBatch.Draw(scrollbarBetweenTexture,new Rectangle(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+10-1+8,20,size2-20), Color.White);
        //    //            spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11+size2-20-2+8), Color.White);
        //    //        } else {
        //    //            spriteBatch.Draw(scrollbarUpTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+8), Color.White);
        //    //            spriteBatch.Draw(scrollbarDownTexture,new Vector2(Global.WindowWidthHalf, Global.WindowHeightHalf-200+2+4+200+8+pos2+11-2+8), Color.White);
        //    //        }
        //    //    }

        //    //    int xx =0;
        //    //    int yh=0;

        //    //    for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
        //    //        if (i>inventoryScrollbarValueCraftingMax) break;

        //    //        if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
        //    //        && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

        //    //            if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
        //    //            else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
        //    //        } else {
        //    //            if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
        //    //            else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
        //    //        }

        //    //        Texture2D tex=ItemIdToTexture(Crafting[i].X);
        //    //        if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
        //    //        xx+=40;

        //    //        if (xx==6*40) {
        //    //            xx=0;
        //    //            yh+=40;
        //    //        }
        //    //    }
        //    //}
        //    //#endregion



        //}

        void DrawChooseItemWindow() {
			spriteBatch.Draw(pixel, new Rectangle(0,0, Global.WindowWidth, Global.WindowHeight), color_r0_g0_b0_a100);

			DrawFrame(Global.WindowWidthHalf-150-2, Global.WindowHeightHalf-134,304,234+2,1, color_r0_g0_b0_a100);
			DrawFrame(Global.WindowWidthHalf-150-1, Global.WindowHeightHalf-133,302,234,1, color_r0_g0_b0_a200);
			spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-132,300,34), color_r10_g140_b255);
			spriteBatch.Draw(pixel,new Rectangle(Global.WindowWidthHalf-150, Global.WindowHeightHalf-100+2,300,200-2), Color.LightBlue);

			buttonClosePopUp.Position=new Vector2(Global.WindowWidthHalf+150-32,Global.WindowHeightHalf-132+1);
			buttonClosePopUp.ButtonDraw(/*spriteBatch,newMouseState.X,newMouseState.Y,Global.WindowWidthHalf+150-32,Global.WindowHeightHalf-132+1,mouseLeftDown*/);

			textChooseItemWindow.Draw(spriteBatch);

			CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;
			ItemNonInv[] items=slots[PopUpWindowChoosingPotencialdItem].ItemSlot;
			int i=0;

			for (int y=0; y<4; y++) {
				for (int x=0; x<7; x++) {

					if (items.Length==i) break;
					bool hasItem=HasItem();

					bool HasItem() {
						switch (items[i]) {
							case ItemNonInvBasic t: return TotalItemsInInventoryForAllTypes(items[i].Id)>=t.Count;
							case ItemNonInvTool t: return TotalItemsInInventoryForAllTypes(items[i].Id)>=t.Count;
							case ItemNonInvFood t: return TotalItemsInInventoryForAllTypes(items[i].Id)>=t.Count;
							//case ItemNonInvNonStackable t: return TotalItemsInInventoryForAllTypes(items[i].Id)>=1;
							//case ItemNonInvBasicColoritzedNonStackable t: return TotalItemsInInventoryForAllTypes(items[i].Id)>=1;
							default:return TotalItemsInInventoryForAllTypes(items[i].Id)>=1;
						}
						//return false;
					}

					if (In40(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20)) {
						if (mouseLeftDown) {
							displayPopUpWindow=false;
							PopUpWindowSelectedItem=i;
							CraftingIn slot=slots[PopUpWindowChoosingPotencialdItem];
							slot.SelectedItem=slot.TmpSelected=i;
							slot.Texture=ItemIdToTexture(items[i].Id);
							slot.HaveItemInInventory=hasItem;
							return;
						}
						if (hasItem) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.DarkGray);
						else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), Color.Red);
					} else {
						if (hasItem) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), ColorWhite);
						else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x*40, Global.WindowHeightHalf-100+y*40+20), new Color(255,150,150));
					}

					/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(items[i].Id),*/ items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);

					i++;
				}
			}

		}


        void EventsChooseItemWindow() {

            // i=0;
            //for (int y=0; y<4; y++) {
            //    for (int x=0; x<7; x++) {
            //       if (items.Length==i)break;
            //        GameDraw.DrawItemInInventory(ItemIdToTexture(items[i].X), items[i], Global.WindowWidthHalf-150+10+x*40+4, Global.WindowHeightHalf-100+y*40+20+4);
            //        i++;
            //    }
            //}
            //int i=0;
            //for (int x=0; x<7; x++) {
            //    for (int y=0; y<5; y++) {
            //        spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-150+10+x, Global.WindowHeightHalf-100+y+10), Color.White);
            //        i++;
            //    }
            //}
            //if (newMouseState.X>Global.WindowWidthHalf-140+x*40
            //                           &&  newMouseState.Y>Global.WindowHeightHalf-60+y*40
            //                           &&  newMouseState.X<Global.WindowWidthHalf-140+x*40+40
            //                           &&  newMouseState.Y<Global.WindowHeightHalf-60+y*40+40) {

            //for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
            //    if (i>inventoryScrollbarValueCraftingMax) break;

            //    if (newMouseState.X>Global.WindowWidthHalf-300+4+40+4+xx && newMouseState.X<Global.WindowWidthHalf-300+4+40+4+xx+40
            //    && newMouseState.Y>Global.WindowHeightHalf-200+2+4+200+8+yh+8 && newMouseState.Y<Global.WindowHeightHalf-200+2+4+200+8+yh+8+40) {

            //        if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r128_g128_b128);
            //        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r200_g200_b200);
            //    } else {
            //        if (selectedCraftingItem==i) spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), color_r150_g150_b150);
            //        else spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+40+4+xx, Global.WindowHeightHalf-200+2+4+200+8+yh+8), Color.White);
            //    }

            //    Texture2D tex=ItemIdToTexture(Crafting[i].X);
            //    if (tex!=null) GameDraw.DrawItemInInventory(tex,1,Global.WindowWidthHalf-300+4+40+xx+4+4,Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);
            //    xx+=40;

            //    if (xx==6*40) {
            //        xx=0;
            //        yh+=40;
            //    }
            //}
            //    }
        }

        //bool CanCraft(int c) {
        //    foreach (CraftingIn n in CurrentDeskCrafting[SelectedCraftingRecipe].Input) {
        //        if (n.SelectedItem==-1) return false;
        //        DInt item = n.ItemSlot[n.SelectedItem];
        //        if (TotalItemsInInventory(item.X)<item.Y*c) return false;
        //    }
        //    return true;
        //}

        //void SetInvClothesHead() {
        //    Items[] itemsToSet = new Items[]{
        //        Items.Cap,
        //        Items.Crown,
        //        Items.Hat,
        //        Items.SpaceHelmet,
        //    };

        //    inventoryScrollbarValueCraftingMax=itemsToSet.Length-1;
        //    for (int i = 0; i<=inventoryScrollbarValueCraftingMax; i++) {
        //        Crafting[i].X=(int)itemsToSet[i];
        //        Crafting[i].Y=1;
        //    }
        //}

        #region Draw inventory

        //void DrawNeed() {
        //    spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8), Color.White);

        //    int i = 0;
        //    for (int y = 0; y<2; y++) {
        //        for (int x = 0; x<6; x++) {
        //            if (Need.Count==i) break;
        //            Texture2D tex = ItemIdToTexture(Need[i].X);
        //            if (tex!=null) {
        //                if (TotalItemsInInventory(Need[i].X)<Need[i].Y)
        //                    spriteBatch.Draw(Rabcr.Pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8, 40, 40), color_r255_g0_b0_a100);

        //                GameDraw.DrawItemInInventory(tex, Need[i], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8);
        //            }
        //            i++;
        //        }
        //    }
        //}

        //void DrawRightInventoryWithDIntMoving() {
        //    for (int i = 0; i<5; i++) {
        //        if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
        //        else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.White);

        //        if (Inventory[i].X!=0) {
        //            if (!invMove||(invMove&&invStartDInt!=Inventory[i])) {
        //                Texture2D tex = ItemIdToTexture(Inventory[i].X);
        //                if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
        //            }
        //        }
        //    }
        //}

        //void DrawInventoryNormal() {
        //    if (Global.WorldDifficulty==2) return;
        //    int xx = 0, yh = 0;

        //    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //        if (i>maxInvCount) break;
        //        spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

        //        if (Inventory[i].X!=0) {
        //            if (!invMove||(invMove&&invStart!=i)) {
        //                Texture2D tex = ItemIdToTexture(Inventory[i].X);
        //                if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
        //            }
        //        }
        //        xx+=40;

        //        if (xx==9*40) {
        //            xx=0;
        //            yh+=40;
        //        }
        //    }
        //    if (maxInvCount>45) {
        //        int size = (int)(1f/(((int)(maxInvCount/9f)+1)*40/200f)*200);
        //        int pos = (int)(inventoryScrollbarValue*9/40f/maxInvCount*(200-size))*4;
        //        if (size>20) {
        //            spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
        //            spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
        //            spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), Color.White);
        //        } else {
        //            spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
        //            Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), Color.White);
        //        }
        //    }
        //}
        void DrawInventoryNormal() {
			int xx=0, yh=0;

			//Slots
			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
			if (i>maxInvCount) break;
				spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), ColorWhite);

				//if (InventoryNormal[i].X!=0) {
				//    if (!invMove || (invMove && invStartInventory,invStartId!=i)) {
				//        Texture2D tex=ItemIdToTexture(InventoryNormal[i].X);
				//        if (tex!=null) GameDraw.DrawItemInInventory(tex,InventoryNormal[i],Global.WindowWidthHalf-300+4+200+4+4+xx+4,Global.WindowHeightHalf-200+2+4+yh+4);
				//    }
				//}
				xx+=40;

				if (xx==9*40) {
					xx=0;
					yh+=40;
				}
			}

			xx=0;

			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
			if (i>maxInvCount) break;
				if (InventoryNormal[i].Id!=0) {
					InventoryNormal[i].Draw();
				}
				xx+=40;

				if (xx==9*40) {
					xx=0;
				}
			}

			if (maxInvCount>49) {
				inventoryScrollbar.maxheight=((maxInvCount-5)/9)*40;
				inventoryScrollbar.height=5*40;
				inventoryScrollbar.ButtonDraw(/*newMouseState.X,newMouseState.Y,mouseLeftDown,*/Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4);
			}
		}

        //void DrawRightInventoryNormal() {
        //    for (int i = 0; i<5; i++) {
        //        if (boxSelected==i) Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.LightBlue);
        //        else Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidth-40, Global.WindowHeightHalf-80+i*40), Color.White);

        //        if (Inventory[i].X!=0) {
        //            if (!invMove||(invMove&&invStart!=i)) {
        //                Texture2D tex = ItemIdToTexture(Inventory[i].X);
        //                if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidth-36, Global.WindowHeightHalf-80+i*40+4);
        //            }
        //        }
        //    }
        //}

        //void DrawInventoryWithDIntMoving() {
        //    if (Global.WorldDifficulty==2) return;
        //    int xx = 0, yh = 0;
        //    for (int i = inventoryScrollbarValue+5; i<inventoryScrollbarValue+45+5; i++) {
        //        if (i>maxInvCount) break;
        //        Rabcr.spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), Color.White);

        //        if (Inventory[i].X!=0) {
        //            if (!invMove||(invMove&&invStartDInt!=Inventory[i])) {
        //                Texture2D tex = ItemIdToTexture(Inventory[i].X);
        //                if (tex!=null) GameDraw.DrawItemInInventory(tex, Inventory[i], Global.WindowWidthHalf-300+4+200+4+4+xx+4, Global.WindowHeightHalf-200+2+4+yh+4);
        //            }
        //        }
        //        xx+=40;

        //        if (xx==9*40) {
        //            xx=0;
        //            yh+=40;
        //        }
        //    }
        //    if (maxInvCount>45) {
        //        int size = (int)(1f/(((int)(maxInvCount/9f)+1)*40/200f)*200);
        //        int pos = (int)(inventoryScrollbarValue*9/40f/maxInvCount*(200-size))*4;
        //        if (size>20) {
        //            Rabcr.spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
        //            Rabcr.spriteBatch.Draw(scrollbarBetweenTexture, new Rectangle(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+10-1, 20, size-20), Color.White);
        //            Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11+size-20-2), Color.White);
        //        } else {
        //            Rabcr.spriteBatch.Draw(scrollbarUpTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos), Color.White);
        //            Rabcr.spriteBatch.Draw(scrollbarDownTexture, new Vector2(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4+pos+11-2), Color.White);
        //        }
        //    }
        //}
        void DrawInventoryWithMoving() {
			int xx=0, yh=0;
			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
				if (i>maxInvCount) break;
				spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh), ColorWhite);

				xx+=40;

				if (xx==9*40) {
					xx=0;
					yh+=40;
				}
			}
			xx=0;
			yh=0;

			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
				if (i>maxInvCount) break;

				if (InventoryNormal[i].Id!=0) {
					InventoryNormal[i].Draw();

					if (In40(Global.WindowWidthHalf-300+4+200+4+4+xx, Global.WindowHeightHalf-200+2+4+yh)) MouseItemNameEvent(InventoryNormal[i]/*.Id*/);
				}
				xx+=40;

				if (xx==9*40) {
					xx=0;
					yh+=40;
				}
			}

			if (maxInvCount>49) {
				inventoryScrollbar.maxheight=((maxInvCount-5)/9)*40;
				inventoryScrollbar.height=5*40;
				inventoryScrollbar.ButtonDraw(Global.WindowWidthHalf+300-20-4, Global.WindowHeightHalf-200+2+4);
			}

			if (inventory==InventoryType.BoxAdv
			|| inventory==InventoryType.BoxWooden
			|| inventory==InventoryType.Charger
			|| inventory==InventoryType.Composter
			|| inventory==InventoryType.Creative
			|| inventory==InventoryType.Miner
			|| inventory==InventoryType.Shelf) {
				spriteBatch.Draw(inventorySlotTexture,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+8*40, Global.WindowHeightHalf-200+2+4+40*5), ColorWhite);
				spriteBatch.Draw(TextureBin,new Vector2(Global.WindowWidthHalf-300+4+200+4+4+8*40+4, Global.WindowHeightHalf-200+2+4+40*5+4), ColorWhite);
			}
		}

        void ChangeInventory() {
			if (invMove) {
				if (leftMove) {
					if (mouseRightRelease) {
						int i;

						// Basic right inventory
						if ((i=InvSideMoveId())>=0) {
							InvMoveOne(InventoryNormal,i);
							return;
						}

						// Inventory
						if ((i=InvMoveId())>=0) {
							InvMoveOne(InventoryNormal,i);
							return;
						}

						// Clothes
						if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
							if ((i=InvClothesMoveId())>=0) {
								InvMoveOne(InventoryClothes, i);
								return;
							}
						}

						// Shelf
						if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
							if ((i=InvShelfMoveId())>=0) {
								InvMoveOne(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// FurnaceStone
						if (inventory==InventoryType.FurnaceStone) {
							if ((i=InvFurnaceStoneMoveId())>=0) {
								InvMoveOne(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// BoxWooden
						if (inventory==InventoryType.BoxWooden) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								InvMoveOne(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Adv box
						if (inventory==InventoryType.BoxAdv) {
							if ((i=InvAdvBoxMoveId())>=0) {
								InvMoveOne(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}


						// Miner
						if (inventory==InventoryType.Miner) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								InvMoveOne(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Charger || OxygenMachine
						if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
							if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
								InvMoveOne(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								return;
							}
						}

						if (inventory==InventoryType.Barrel) {
							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
								InvMoveOne(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								return;
							}

							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
								InvMoveOne(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
								return;
							}
						}

						InvDrop();

					} else if (mouseLeftRelease) {
							int i;

							// Basic right inventory
							if ((i=InvSideMoveId())>=0) {
								InvMove(InventoryNormal,i);
								return;
							}

							// Inventory
							if ((i=InvMoveId())>=0) {
								InvMove(InventoryNormal,i);
								return;
							}

							// Clothes
							if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
								if ((i=InvClothesMoveId())>=0) {
									InvMove(InventoryClothes,i);
									return;
								}
							}

							// Shelf
							if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
								if ((i=InvShelfMoveId())>=0) {
									InvMove(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// FurnaceStone
							if (inventory==InventoryType.FurnaceStone) {
								if ((i=InvFurnaceStoneMoveId())>=0) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// BoxWooden
							if (inventory==InventoryType.BoxWooden) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									InvMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Adv box
							if (inventory==InventoryType.BoxAdv) {
								if ((i=InvAdvBoxMoveId())>=0) {
									InvMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Miner
							if (inventory==InventoryType.Miner) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Charger || OxygenMachine
							if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
								if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
									return;
								}
							}

							if (inventory==InventoryType.Barrel) {
								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
									InvMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
									return;
								}

								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
									InvMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
									return;
								}
							}

							//delete
							if (inventory==InventoryType.Creative) {
								if (In40(Global.WindowWidthHalf-300+4+200+4+4+8*40, Global.WindowHeightHalf-200+2+4+40*5)) {
									InvRemove();
									return;
								}
							}

							InvDrop();

						}
				} else {
					if (mouseLeftRelease) {
						int i;

						// Basic right inventory
						if ((i=InvSideMoveId())>=0) {
							InvMoveHalf(InventoryNormal,i);
							return;
						}

						// Inventory
						if ((i=InvMoveId())>=0) {
							InvMoveHalf(InventoryNormal,i);
							return;
						}

						// Clothes
						if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
							if ((i=InvClothesMoveId())>=0) {
								InvMoveHalf(InventoryClothes,i);
								return;
							}
						}

						// FurnaceStone
						if (inventory==InventoryType.FurnaceStone) {
							if ((i=InvFurnaceStoneMoveId())>=0) {
								InvMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Shelf
						if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
							if ((i=InvShelfMoveId())>=0) {
								InvMoveHalf(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// BoxWooden
						if (inventory==InventoryType.BoxWooden) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								InvMoveHalf(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Adv box
						if (inventory==InventoryType.BoxAdv) {
							if ((i=InvAdvBoxMoveId())>=0) {
								InvMoveHalf(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Miner
						if (inventory==InventoryType.Miner) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								InvMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// Charger || OxygenMachine
						if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
							if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
								InvMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								return;
							}
						}

						if (inventory==InventoryType.Barrel) {
							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
								InvMoveHalf(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								return;
							}

							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
								InvMoveHalf(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
								return;
							}
						}

						//delete
						if (inventory==InventoryType.Creative) {
							if (In40(Global.WindowWidthHalf-300+4+200+4+4+8*40, Global.WindowHeightHalf-200+2+4+40*5)) {
								InvRemove();
								return;
							}
						}

						InvDrop();

					} else {
						if (mouseRightRelease) {
							int i;

							// Basic right inventory
							if ((i=InvSideMoveId())>=0) {
								InvMove(InventoryNormal,i);
								return;
							}

							// Inventory
							if ((i=InvMoveId())>=0) {
								InvMove(InventoryNormal,i);
								return;
							}

							// Clothes
							if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
								if ((i=InvClothesMoveId())>=0) {
									InvMove(InventoryClothes,i);
									return;
								}
							}

							// Shelf
							if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
								if ((i=InvShelfMoveId())>=0) {
									InvMove(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// FurnaceStone
							if (inventory==InventoryType.FurnaceStone) {
								if ((i=InvFurnaceStoneMoveId())>=0) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// BoxWooden
							if (inventory==InventoryType.BoxWooden) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									InvMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Adv box
							if (inventory==InventoryType.BoxAdv) {
								if ((i=InvAdvBoxMoveId())>=0) {
									InvMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Miner
							if (inventory==InventoryType.Miner) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
									return;
								}
							}

							// Charger || OxygenMachine
							if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
								if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
									InvMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
									return;
								}
							}

							if (inventory==InventoryType.Barrel) {
								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
									InvMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
									return;
								}

								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
									InvMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
									return;
								}
							}

							//delete
							if (inventory==InventoryType.Creative) {
								if (In40(Global.WindowWidthHalf-300+4+200+4+4+8*40, Global.WindowHeightHalf-200+2+4+40*5)) {
									InvRemove();
									return;
								}
							}

							InvDrop();
						}
					}
				}
			} else {
				if (mouseLeftPress) {
					int i;

					// Basic right inventory
					if ((i=InvSideMoveId())>=0) {
						StartItemMove(InventoryNormal, i);
						leftMove = true;
						return;
					}

					// Inventory
					if ((i=InvMoveId())>=0) {
						StartItemMove(InventoryNormal, i);
						leftMove = true;
						return;
					}

					// Clothes
					if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
						if ((i=InvClothesMoveId())>=0) {
							StartItemMove(InventoryClothes, i);
							leftMove = true;
							return;
						}
					}

					// Shelf
					if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
						if ((i=InvShelfMoveId())>=0) {
							StartItemMove(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
							leftMove = true;
							return;
						}
					}

					// FurnaceStone
					if (inventory==InventoryType.FurnaceStone) {
						if ((i=InvFurnaceStoneMoveId())>=0) {
							StartItemMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
							return;
						}
					}

					// BoxWooden
					if (inventory==InventoryType.BoxWooden) {
						if ((i=InvWoodenBoxMoveId())>=0) {
							StartItemMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
							leftMove = true;
							return;
						}
					}

					// Adv box
					if (inventory==InventoryType.BoxAdv) {
						if ((i=InvAdvBoxMoveId())>=0) {
							StartItemMove(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
							leftMove = true;
							return;
						}
					}

					// Miner
					if (inventory==InventoryType.Miner) {
						if ((i=InvWoodenBoxMoveId())>=0) {
							StartItemMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
							leftMove = true;
							return;
						}
					}

					// Charger || OxygenMachine
					if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
						if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
							StartItemMove(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
							leftMove = true;
							return;
						}
					}

					if (inventory==InventoryType.Barrel) {
						if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
							StartItemMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
							leftMove = true;
							return;
						}

						if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
							StartItemMove(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
							leftMove = true;
							return;
						}
					}

				} else {
					if (mouseRightPress) {
						int i;

						// Basic right inventory
						if ((i=InvSideMoveId())>=0) {
							StartItemMoveHalf(InventoryNormal, i);
							leftMove = false;
							return;
						}

						// Inventory
						if ((i=InvMoveId())>=0) {
							StartItemMoveHalf(InventoryNormal, i);
							leftMove = false;
							return;
						}

						// Clothes
						if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
							if ((i=InvClothesMoveId())>=0) {
								if (i<8){
								StartItemMoveHalf(InventoryClothes, i);
								leftMove = false;
								return;
								}
							}
						}

						// Shelf
						if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
							if ((i=InvShelfMoveId())>=0) {
								StartItemMoveHalf(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								leftMove = false;
								return;
							}
						}

						// FurnaceStone
						if (inventory==InventoryType.FurnaceStone) {
							if ((i=InvFurnaceStoneMoveId())>=0) {
								StartItemMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								return;
							}
						}

						// BoxWooden
						if (inventory==InventoryType.BoxWooden) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								StartItemMoveHalf(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								leftMove = false;
								return;
							}
						}

						// Adv box
						if (inventory==InventoryType.BoxAdv) {
							if ((i=InvAdvBoxMoveId())>=0) {
								StartItemMoveHalf(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								leftMove = false;
								return;
							}
						}

						// Miner
						if (inventory==InventoryType.Miner) {
							if ((i=InvWoodenBoxMoveId())>=0) {
								StartItemMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, i);
								leftMove = false;
								return;
							}
						}

						// Charger || OxygenMachine
						if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
							if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
								StartItemMoveHalf(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								leftMove = false;
								return;
							}
						}

						if (inventory==InventoryType.Barrel) {
							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
								StartItemMoveHalf(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 0);
								leftMove = false;
								return;
							}

							if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
								StartItemMoveHalf(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv, 1);
								leftMove = false;
								return;
							}
						}
					}else{
						if (mousePosChanged) {
							int i;
							mouseDrawItemTextInfo=false;
							// Basic right inventory
							if ((i=InvSideMoveId())>=0) {
								MouseItemNameEvent(InventoryNormal[i]);
								return;
							}

							// Inventory
							if ((i=InvMoveId())>=0) {
								MouseItemNameEvent(InventoryNormal[i]);
								return;
							}

							// Clothes
							if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
								if ((i=InvClothesMoveId())>=0) {
									if (i<8) MouseItemNameEvent(InventoryClothes[i]/*.Id*/);
									return;
								}
							}

							// Shelf
							if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
								if ((i=InvShelfMoveId())>=0) {
									MouseItemNameEvent(((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]/*.Id*/);
									return;
								}
							}

							// FurnaceStone
							if (inventory==InventoryType.FurnaceStone) {
								if ((i=InvFurnaceStoneMoveId())>=0) {
									MouseItemNameEvent(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]/*, i*/);
									return;
								}
							}

							// BoxWooden
							if (inventory==InventoryType.BoxWooden) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									MouseItemNameEvent(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]/*.Id*/);
									return;
								}
							}

							// Adv box
							if (inventory==InventoryType.BoxAdv) {
								if ((i=InvAdvBoxMoveId())>=0) {
									MouseItemNameEvent(((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]/*.Id*/);
									return;
								}
							}

							// Miner
							if (inventory==InventoryType.Miner) {
								if ((i=InvWoodenBoxMoveId())>=0) {
									MouseItemNameEvent(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i]/*.Id*/);
									return;
								}
							}

							// Charger || OxygenMachine
							if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
								if (In40(Global.WindowWidthHalf-300+38+40,Global.WindowHeightHalf+20-2+40+25)) {
									MouseItemNameEvent(((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]/*.Id*/);
									return;
								}
							}

							if (inventory==InventoryType.Barrel) {
								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250)) {
									MouseItemNameEvent(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[0]/*.Id*/);
									return;
								}

								if (In40(Global.WindowWidthHalf-300+119,Global.WindowHeightHalf-198+250+64)) {
									MouseItemNameEvent(((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[1]/*.Id*/);
									return;
								}
							}

							// Creative
							if (inventory==InventoryType.Creative) {
								if (!creativeTabCrafting){
									if ((i=GetInventoryIdCreative())>=0) {
										MouseItemNameEvent(InventoryCreative[i]/*.Id*/);
										return;
									}
								}
							}

							// crafting
							if (inventory==InventoryType.BasicInv
							 || (inventory==InventoryType.Creative && creativeTabCrafting)
							 || inventory==InventoryType.Desk
							 || inventory==InventoryType.SewingMachine
							 || inventory==InventoryType.Macerator
							 || inventory==InventoryType.FurnaceStone
							 || inventory==InventoryType.FurnaceElectric) {
								if ((i=GetCraftingInventoryId())>=0) {
									MouseItemNameEvent(InventoryCrafting[i]/*.Id*/);
									return;
								}
							}

							mouseDrawItemTextInfo=false;
						}
					}
				}
			}
		}

        void CreateGradientTexture() {
			TextureSunGradient?.Dispose();

			int height=Global.WindowHeight;

			int start=0;
			Color[] colors=new Color[height];
			Color ColorBef;

			for (int p=1; p<Gradient.Count; p++) {
				(Color, float) gradientPoint=Gradient[p];
				int end= (int)(gradientPoint.Item2*height);

				ColorBef=Gradient[p-1].Item1;

				for (int i=start; i<end; i++) {
					colors[i]=FastMath.Lerp(ColorBef, gradientPoint.Item1, (i-start)/(float)(end-start));
				}

				start=end;
			}
			TextureSunGradient=new Texture2D(Graphics, 1, height);
			TextureSunGradient.SetData(colors);
		}

        void ReSetCraftingInventoryPositions() {
			int xx = 0, yh = 0;

			if (Global.WorldDifficulty==2) {
				if (inventory==InventoryType.Creative) yh+=35;
			}

			for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
				if (i>inventoryScrollbarValueCraftingMax) return;

				InventoryCrafting[i].SetPos(Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8);

				xx+=40;

				if (xx==6*40) {
					xx=0;
					yh+=40;
				}
			}
		}

        void CreativeGetItems() {
			creativeScrollbar.maxheight=(inventoryScrollbarValueCraftingMax/13+1)*40;
			creativeScrollbar.height=4*40;

			if (mouseLeftRelease) {
			   // int max=((inventoryScrollbarValueCraftingMax+1)/13)*40;

				int i=((int)(creativeScrollbar.scale*(inventoryScrollbarValueCraftingMax-13*3))/13)*13;

				for (int y=0; y<4*40; y+=40) {
					for (int x=0; x<13*40; x+=40) {
						if (inventoryScrollbarValueCraftingMax<i)return;
						if (In40(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243)) {
							AddItemToPlayer(InventoryCreative[i].ToNon());
							return;
						}
						i++;
					}
				}
			}
		}

        void AddItemToPlayer(ItemNonInv it) {
			ItemNonInv remain=InventoryAdd(it);
			if (remain!=null) ItemDrop(remain,(int)PlayerX,(int)PlayerY);
		}

        	void CraftingEventsPlus() {
			int AddH=35;
			if (SelectedCraftingRecipe!=-1) {
				#if DEBUG
				if (CurrentDeskCrafting==null) throw new Exception("Pravděpodobně chybí recept - doplň v GameMethods");
				#endif

				CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;
				if (CurrentDeskCrafting!=null) {
					if (CurrentDeskCrafting.Length!=1) {
						if (buttonNext.Update()) {
							SelectedCraftingRecipe++;
							if (SelectedCraftingRecipe==CurrentDeskCrafting.Length)SelectedCraftingRecipe=0;
							SetNeed();
						}

						if (buttonPrev.Update()) {
							SelectedCraftingRecipe--;
							if (SelectedCraftingRecipe==-1)SelectedCraftingRecipe=CurrentDeskCrafting.Length-1;
							SetNeed();
						}
					}
				}

				int i = 0;
				for (int y = 0; y<2; y++) {
					for (int x = 0; x<6; x++) {
						if (slots.Length==i) break;
						CraftingIn slot=slots[i];
						ItemNonInv[] item=slot.ItemSlot;
						if (item.Length>1) {
							if (mouseLeftDown) {
								if (In40(Global.WindowWidthHalf-300+4+200+80+40+8+x*40,y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH)) {
									displayPopUpWindow=true;
									PopUpWindowChoosingPotencialdItem=i;
									PopUpWindowSelectedItem=-1;
									ShowPopUpWindow();
								}
							}
						}
						i++;
					}
				}
			}
		}

        	void SelectItemCraftPlus() {
			int AddH=35;
			if (mouseLeftRelease) {
				int xx =0, yh=0;

				for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
					if (i>inventoryScrollbarValueCraftingMax) break;

					if (In40(Global.WindowWidthHalf-300+4+40+4+xx,Global.WindowHeightHalf-200+2+4+200+8+yh+8+AddH)) {

						selectedCraftingItem=i;

						ItemInv itemToCraft=InventoryCrafting[i];

						CurrentDeskCrafting=GameMethods.Craft(itemToCraft.Id);
						SelectedCraftingRecipe=0;
						SetNeed();
						return;
					}
					xx+=40;

					if (xx==6*40) {
						xx=0;
						yh+=40;
					}
				}
			}
		}

        void DropItemToPos(ItemNonInv i, DInt d) {
			DroppedItems.Add(new Item{
				X=d.X,
				Y=d.Y,
				item=i,
				Texture=ItemIdToTexture(i.Id)
			});
		}

		void DropItemToPos(ItemNonInv i, int x, int y) {
			DroppedItems.Add(new Item {
				X=x,
				Y=y,
				item=i,
				Texture=ItemIdToTexture(i.Id)
			});
		}

		void DropItemToPos(ItemNonInv i, float x, float y) {
			DroppedItems.Add(new Item {
				X=(int)x,
				Y=(int)y,
				item=i,
				Texture=ItemIdToTexture(i.Id)
			});
		}
        void ReSetInventoryCreativePositions() {

			int i=((int)(creativeScrollbar.scale*(inventoryScrollbarValueCraftingMax-13*3))/13)*13;

			for (int y=0; y<4*40; y+=40) {
				for (int x=0; x<13*40; x+=40) {
					if (inventoryScrollbarValueCraftingMax<=i)return;
					//if (In40(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243)) {
					//    if (mouseLeftDown) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), Color.LightGray);
					//    else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), ColorSmokeWhite);
					//} else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), ColorWhite);

				   // if (!invMove || (invMove && invStartInventory[invStartId]!=InventoryCreative[i])) {
						InventoryCreative[i].SetPos(Global.WindowWidthHalf-300+4+60+x+4-16+4, Global.WindowHeightHalf-200+2+4+y+4+243+4);
				   // }
					i++;
				}
			}
		}

        	bool InventoryAddOne(ushort index) {

			#region Nonstackable
			if (GameMethods.IsItemInvNonStackable32(index)) {
				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == 0) {
						DInt pos;
						if (i<5) pos=InventoryGetPosNormal(i);
						else pos=InventoryGetPosNormalInv(i);
						InventoryNormal[i]=new ItemInvNonStackable32(ItemIdToTexture(index),index,pos.X,pos.Y);
						return true;
					}
				}
				return false;
			}
			if (GameMethods.IsItemInvFood16(index)) {
				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == 0) {
						DInt pos;
						if (i<5) pos=InventoryGetPosNormal(i);
						else pos=InventoryGetPosNormalInv(i);
						InventoryNormal[i]=new ItemInvFood16(ItemIdToTexture(index),index,pos.X,pos.Y);
						return true;
					}
				}
				return false;
			}
			if (GameMethods.IsItemInvFood32(index)) {
				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == 0) {
						DInt pos;
						if (i<5) pos=InventoryGetPosNormal(i);
						else pos=InventoryGetPosNormalInv(i);
						InventoryNormal[i]=new ItemInvFood32(ItemIdToTexture(index),index,pos.X,pos.Y);
						return true;
					}
				}
				return false;
			}
			#endregion

			#region Stackable
			if (GameMethods.IsItemInvBasic16(index)) {
				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == 0) {
						DInt pos;
						if (i<5) pos=InventoryGetPosNormal(i);
						else pos=InventoryGetPosNormalInv(i);
						InventoryNormal[i]=new ItemInvBasic16(ItemIdToTexture(index), index, 1, pos.X, pos.Y);
						return true;
					}
				}

				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == index) {
						ItemInvBasic16 item=(ItemInvBasic16)InventoryNormal[i];
						if (item.GetCount<99) {
							item.SetCount=item.GetCount+1;
							return true;
						}
					}
				}
				return false;
			}

			if (GameMethods.IsItemInvBasic32(index)) {
				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == 0) {
						DInt pos;
						if (i<5) pos=InventoryGetPosNormal(i);
						else pos=InventoryGetPosNormalInv(i);
						InventoryNormal[i]=new ItemInvBasic32(ItemIdToTexture(index), index, 1, pos.X, pos.Y);
						return true;
					}
				}

				for (int i=0; i<maxInvCount; i++) {
					if (InventoryNormal[i].Id == index) {
						ItemInvBasic32 item=(ItemInvBasic32)InventoryNormal[i];
						if (item.GetCount<99) {
							item.SetCount=item.GetCount+1;
							return true;
						}
					}
				}
				return false;
			}
			#endregion

			return false;
		}

        static DInt InventoryGetPosNormal5(int ix) => new DInt{ X=Global.WindowWidth-36, Y=Global.WindowHeightHalf-80+ix*40+4 };

		static Vector2 InventoryGetPosNormal5Vector2(int ix) => new Vector2{ X=Global.WindowWidth-36, Y=Global.WindowHeightHalf-80+ix*40+4 };

		static DInt InventoryGetPosAdvBox(int i) {
			int row=i/12;
			return new DInt{ X=Global.WindowWidthHalf-300+10+5+5+row*40+4, Y=Global.WindowHeightHalf+23+(i-row*3)*40+4 };
		}

		static DInt InventoryGetPosBoxWooden(int i) {
			int row=i/12;
			return new DInt{ X=Global.WindowWidthHalf-300+59+row*40+4, Y=Global.WindowHeightHalf+59+(i-row*12)*40+4 };
		}

		static DInt InventoryGetPosShelf(int i) {
			int row=i/3;
			return new DInt{X=Global.WindowWidthHalf-300+38+(i-row*3)*40+4, Y=Global.WindowHeightHalf+20-2+25+row*40+4 };
		}

		static DInt InventoryGetPosBarrel(int i) {
			if (i==0) return new DInt{ X=Global.WindowWidthHalf-300+119+4, Y=Global.WindowHeightHalf-198+250+4    };
			else      return new DInt{ X=Global.WindowWidthHalf-300+119+4, Y=Global.WindowHeightHalf-198+250+64+4 };
		}

		static Vector2 InventoryGetPosBarrelVector2(int i) {
			if (i==0) return new Vector2{ X=Global.WindowWidthHalf-300+119+4, Y=Global.WindowHeightHalf-198+250+4    };
			else      return new Vector2{ X=Global.WindowWidthHalf-300+119+4, Y=Global.WindowHeightHalf-198+250+64+4 };
		}

		DInt InventoryGetPosNormal(int ix) {
			if (ix<5) return InventoryGetPosNormal5(ix);
			return InventoryGetPosNormalInv(ix);
		}

		Vector2 InventoryGetPosNormalVector2(int ix) {
			if (ix<5) return InventoryGetPosNormal5Vector2(ix);
			return InventoryGetPosNormalInvVector2(ix);
		}

        void ChangeLeavesForceEverything() {

			// Spring: branches -> flowering leaves or leaves
			if (day>=80 && day<=100) {
				for (int x=0; x<TerrainLength; x++) {
					MTerrain chunk=terrain[x];

					for (int y=chunk.StartSomething; y<125; y++) {
						if (chunk.IsTopBlocks[y]) {
							if (chunk.TopBlocks[y] is LeavesBlock leaves) {
								switch (leaves.Id){
                                    #region Apple -> Blossom
									case (ushort)BlockId.AppleBranches:
										leaves.Id=(ushort)BlockId.AppleLeavesBlossom;
										leaves.Texture=TextureAppleBlossom;
										leaves.Color=ColorWhite;
										continue;

                                    case (ushort)BlockId.AppleLeaves:
										leaves.Id=(ushort)BlockId.AppleLeavesBlossom;
										leaves.Texture=TextureAppleBlossom;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.AppleLeavesWithApples:
										leaves.Id=(ushort)BlockId.AppleLeavesBlossom;
										leaves.Texture=TextureAppleBlossom;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

									#region Plum -> Blossom
									case (ushort)BlockId.PlumBranches:
										leaves.Id=(ushort)BlockId.PlumLeavesBlossom;
										leaves.Texture=TexturePlumBlossom;
										leaves.Color=ColorWhite;
										continue;

                                    case (ushort)BlockId.PlumLeaves:
										leaves.Id=(ushort)BlockId.PlumLeavesBlossom;
										leaves.Texture=TexturePlumBlossom;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.PlumLeavesWithPlums:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumBlossom;
										leaves.Color=ColorWhite;
										continue;
									#endregion

									#region Cherry -> Blossom
									case (ushort)BlockId.CherryBranches:
										leaves.Id=(ushort)BlockId.CherryLeavesBlossom;
										leaves.Texture=TextureCherryBlossom;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.CherryLeaves:
										leaves.Id=(ushort)BlockId.CherryLeavesBlossom;
										leaves.Texture=TextureCherryBlossom;
										continue;

									case (ushort)BlockId.CherryLeavesWithCherries:
										leaves.Id=(ushort)BlockId.CherryLeavesBlossom;
										leaves.Texture=TextureCherryBlossom;
										leaves.Color=ColorWhite;
										continue;
									#endregion

									#region Oak, linden branches -> leaves
									case (ushort)BlockId.OakBranches:
										leaves.Id=(ushort)BlockId.OakLeaves;
										leaves.Texture=TextureOakLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.LindenBranches:
										leaves.Id=(ushort)BlockId.LindenLeaves;
										leaves.Texture=TextureLindenLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.WillowBranches:
										leaves.Id=(ushort)BlockId.WillowLeaves;
										leaves.Texture=TextureWillowLeaves;
										leaves.Color=ColorWhite;
										continue;
									#endregion
								}
							}
						}
					}
				}
				return;
			}

			// Summer: set leaves
			if (day>=100 && day<=280) {
				for (int x=0; x<TerrainLength; x++) {
					MTerrain chunk=terrain[x];

					for (int y=chunk.StartSomething; y<125; y++) {
						if (chunk.IsTopBlocks[y]) {
							if (chunk.TopBlocks[y] is LeavesBlock leaves) {
								switch (leaves.Id) {
                                    #region Apple
                                    case (ushort)BlockId.AppleBranches:
										leaves.Id=(ushort)BlockId.AppleLeaves;
										leaves.Texture=TextureAppleLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.AppleLeavesBlossom:
										leaves.Id=(ushort)BlockId.AppleLeaves;
										leaves.Texture=TextureAppleLeaves;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

                                    #region Plum
                                    case (ushort)BlockId.PlumBranches:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.PlumLeavesBlossom:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumLeaves;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

                                    #region Cherry
									case (ushort)BlockId.CherryLeavesBlossom:
										leaves.Id=(ushort)BlockId.CherryLeaves;
										leaves.Texture=TextureCherryLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.CherryBranches:
										leaves.Id=(ushort)BlockId.CherryLeaves;
										leaves.Texture=TextureCherryLeaves;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

                                    case (ushort)BlockId.LindenBranches:
										leaves.Id=(ushort)BlockId.LindenLeaves;
										leaves.Texture=TextureLindenLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.OakBranches:
										leaves.Id=(ushort)BlockId.OakLeaves;
										leaves.Texture=TextureOakLeaves;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.WillowBranches:
										leaves.Id=(ushort)BlockId.WillowLeaves;
										leaves.Texture=TextureWillowLeaves;
										leaves.Color=ColorWhite;
										continue;
								}
							}
						}
					}
				}
				return;
			}

			// Autumn: leaves -> Colorful
			if (day>=280 && day<=340) {
				Color[] colors=new Color[]{

					new Color(144, 170, 6),
					new Color(162, 163, 3),
					new Color(212, 103, 25),
					new Color(218, 120, 27),
					new Color(254, 255, 74),
				};

				for (int x=0; x<TerrainLength; x++) {
					MTerrain chunk=terrain[x];

					for (int y=chunk.StartSomething; y<125; y++) {
						if (chunk.IsTopBlocks[y]) {
							if (chunk.TopBlocks[y] is LeavesBlock leaves) {
								switch (leaves.Id) {
									#region Apple
                                    case (ushort)BlockId.AppleBranches:
										leaves.Id=(ushort)BlockId.AppleLeaves;
										leaves.Texture=TextureAppleLeaves;
										goto case (ushort)BlockId.AppleLeaves;

									case (ushort)BlockId.AppleLeavesBlossom:
										leaves.Id=(ushort)BlockId.AppleLeaves;
										leaves.Texture=TextureAppleLeaves;
										goto case (ushort)BlockId.AppleLeaves;

									case (ushort)BlockId.AppleLeavesWithApples:
										leaves.Id=(ushort)BlockId.AppleLeaves;
										leaves.Texture=TextureAppleLeaves;
										goto case (ushort)BlockId.AppleLeaves;

                                    case (ushort)BlockId.AppleLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
									#endregion

									#region Plum
                                    case (ushort)BlockId.PlumBranches:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumLeaves;
										goto case (ushort)BlockId.PlumLeaves;

									case (ushort)BlockId.PlumLeavesBlossom:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumLeaves;
										goto case (ushort)BlockId.PlumLeaves;

									case (ushort)BlockId.PlumLeavesWithPlums:
										leaves.Id=(ushort)BlockId.PlumLeaves;
										leaves.Texture=TexturePlumLeaves;
										goto case (ushort)BlockId.PlumLeaves;

                                    case (ushort)BlockId.PlumLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
                                    #endregion

									#region Cherry
									case (ushort)BlockId.CherryLeavesBlossom:
										leaves.Id=(ushort)BlockId.CherryLeaves;
										leaves.Texture=TextureCherryLeaves;
										goto case (ushort)BlockId.CherryLeaves;

                                    case (ushort)BlockId.CherryBranches:
										leaves.Id=(ushort)BlockId.CherryLeaves;
										leaves.Texture=TextureCherryLeaves;
										goto case (ushort)BlockId.CherryLeaves;

									case (ushort)BlockId.CherryLeavesWithCherries:
										leaves.Id=(ushort)BlockId.CherryLeaves;
										leaves.Texture=TextureCherryLeaves;
										goto case (ushort)BlockId.CherryLeaves;

									case (ushort)BlockId.CherryLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
                                    #endregion

                                    #region Oak
                                    case (ushort)BlockId.OakBranches:
										leaves.Id=(ushort)BlockId.OakLeaves;
										leaves.Texture=TextureCherryLeaves;
										leaves.Color=colors[FastRandom.Int(5)];
										continue;

									case (ushort)BlockId.OakLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
                                    #endregion

                                    #region Linden
                                    case (ushort)BlockId.LindenBranches:
										leaves.Id=(ushort)BlockId.LindenLeaves;
										leaves.Texture=TextureLindenLeaves;
										leaves.Color=colors[FastRandom.Int(5)];
										continue;

									case (ushort)BlockId.LindenLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
                                    #endregion

									#region Willow
                                    case (ushort)BlockId.WillowBranches:
										leaves.Id=(ushort)BlockId.WillowLeaves;
										leaves.Texture=TextureWillowLeaves;
										leaves.Color=colors[FastRandom.Int(5)];
										continue;

									case (ushort)BlockId.WillowLeaves:
										leaves.Color=colors[FastRandom.Int(5)];
										continue;
                                    #endregion
                                }
                            }
						}
					}
				}
				return;
			}

			// Winter: Leaves -> Branches
			if (day<=80 || day>=340) {
				for (int x=0; x<TerrainLength; x++) {
					MTerrain chunk=terrain[x];

					for (int y=chunk.StartSomething; y<125; y++) {
						if (chunk.IsTopBlocks[y]) {
							if (chunk.TopBlocks[y] is LeavesBlock leaves) {
								switch (leaves.Id){
                                    #region Apple
									case (ushort)BlockId.AppleLeaves:
										leaves.Id=(ushort)BlockId.AppleBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

                                    case (ushort)BlockId.AppleLeavesBlossom:
										leaves.Id=(ushort)BlockId.AppleBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.AppleLeavesWithApples:
										leaves.Id=(ushort)BlockId.AppleBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

                                    #region Plum
                                    case (ushort)BlockId.PlumLeaves:
										leaves.Id=(ushort)BlockId.PlumBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.PlumLeavesBlossom:
										leaves.Id=(ushort)BlockId.PlumBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.PlumLeavesWithPlums:
										leaves.Id=(ushort)BlockId.PlumBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

									#region Cherry
									case (ushort)BlockId.CherryLeaves:
										leaves.Id=(ushort)BlockId.CherryBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

                                    case (ushort)BlockId.CherryLeavesBlossom:
										leaves.Id=(ushort)BlockId.CherryBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.CherryLeavesWithCherries:
										leaves.Id=(ushort)BlockId.CherryBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;
                                    #endregion

                                    case (ushort)BlockId.LindenLeaves:
										leaves.Id=(ushort)BlockId.LindenBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.OakLeaves:
										leaves.Id=(ushort)BlockId.OakBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;

									case (ushort)BlockId.WillowLeaves:
										leaves.Id=(ushort)BlockId.WillowBranches;
										leaves.Texture=TextureBranches;
										leaves.Color=ColorWhite;
										continue;
								}
							}
						}
					}
				}
			}
		}

        #endregion
  //      void DrawSideInventory() {
		//	int x=Global.WindowWidth-40;
		//	int y=Global.WindowHeightHalf-80;
		//   // Vector2 vec = new Vector2(x,y);

		//	//slots
		//	for (int i = 0; i<5; i++) {
		//		if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, new Vector2(x, y), ColorLightBlue);
		//		else spriteBatch.Draw(inventorySlotTexture, new Vector2(x, y), ColorWhite);
		//		y+=40;
		//	}

		//	//items
		//	for (int i = 0; i<5; i++) InventoryNormal[i].Draw();
		//}
        void DrawSideInventory() {
			int x=Global.WindowWidth-40;
			int y=Global.WindowHeightHalf-80;
		   // Vector2 vec = new Vector2(x,y);
		   Vector2 vec=new(x, y);
			//slots
			for (int i = 0; i<5; i++) {
				if (boxSelected==i) spriteBatch.Draw(inventorySlotTexture, vec/*new Vector2(x, y)*/, Color.LightBlue);
				else spriteBatch.Draw(inventorySlotTexture, vec/*new Vector2(x, y)*/, ColorWhite);
				y+=40;
			}

			//items
			for (int i = 0; i<5; i++) InventoryNormal[i].Draw();
		}

        void DrawItemMouse() {
			if (mouseDrawItemTextInfo) {
				int cursorWidth = 15;

				if (mouseRealPosX+cursorWidth+mouseItemNameWidth<Global.WindowWidth) {
					Rabcr.spriteBatch.Draw(pixel, new Rectangle(mouseRealPosX+cursorWidth, mouseRealPosY,mouseItemNameWidth,30), ColorWhite);
					itemText.ChangePosition(mouseRealPosX+cursorWidth, mouseRealPosY);
				} else {
					Rabcr.spriteBatch.Draw(pixel, new Rectangle(mouseRealPosX-cursorWidth-mouseItemNameWidth, mouseRealPosY,mouseItemNameWidth,30), ColorWhite);
					itemText.ChangePosition(mouseRealPosX-cursorWidth-mouseItemNameWidth, mouseRealPosY);
				}
				itemText.Draw(spriteBatch);
			}
		}

        void InvMouseDraw() {
			mouseItem.SetPos(mouseRealPosX-16,mouseRealPosY-16);
			mouseItem.Draw();
		}

        void DrawCreative() {
			creativeScrollbar.ButtonDraw(/*mouseRealPosX,mouseRealPosY,mouseLeftDown,*/Global.WindowWidthHalf-300+4+60+4-16+13*40+3, Global.WindowHeightHalf-200+2+4+4+243);
		   // int z;
			int i=((int)(creativeScrollbar.scale*(inventoryScrollbarValueCraftingMax-13*3))/13)*13;
		 //  z=i;
			for (int y=0; y<4*40; y+=40) {
				for (int x=0; x<13*40; x+=40) {
					if (inventoryScrollbarValueCraftingMax<=i)return;
					if (In40(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243)) {
						if (mouseLeftDown) spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), Color.LightGray);
						else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), ColorSmokeWhite);
					} else spriteBatch.Draw(inventorySlotTexture, new Vector2(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243), ColorWhite);

				   // if (!invMove || (invMove && invStartInventory[invStartId]!=InventoryCreative[i])) {
					   InventoryCreative[i].Draw();
				   // }
					i++;
				}
			}
		}

        void DrawNeedNewPlus() {
			int AddH=35;
			if (CurrentDeskCrafting==null)return;
			if (selectedCraftingItem==-1)return;
			if (SelectedCraftingRecipe==-1)return;
			spriteBatch.Draw(inventoryNeedTexture, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8, Global.WindowHeightHalf-200+2+4+200+8+8+AddH), ColorWhite);
			CraftingIn[] slots=CurrentDeskCrafting[SelectedCraftingRecipe].Input;

			int i = 0;
			for (int y = 0; y<2; y++) {
				for (int x = 0; x<6; x++) {
					if (slots.Length==i) break;

					CraftingIn slot=slots[i];
					ItemNonInv[] item=slot.ItemSlot;
					if (slot.SelectedItem==-1) {
						if (!slot.HaveItemInInventory) spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH, 40, 40), color_r255_g0_b0_a100);

						DrawItem(item[slot.TmpSelected],Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH);

					   // GameDraw.DrawItemInInventory(ItemIdToTexture(item[slot.TmpSelected].Id), , Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH);

						spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16+AddH), ColorWhite);
					}else{
					 //   ItemNonInv selectedSlot=item[slot.SelectedItem];

						if (item.Length==1) {
							if (!slot.HaveItemInInventory) spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH, 40, 40), color_r255_g0_b0_a100);

							if (slot.Texture!=null) DrawItem(/*slot.Texture,*/ item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH);
						} else {
							if (!slot.HaveItemInInventory)
								spriteBatch.Draw(pixel, new Rectangle(Global.WindowWidthHalf-300+4+200+80+40+8+x*40, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH, 40, 40), color_r255_g0_b0_a100);

							if (slots[i].SelectedItem==-1) {
								/*GameDraw.DrawItemInInventory*/DrawItem(/*ItemIdToTexture(item[slot.TmpSelected].Id),*/ item[slot.TmpSelected], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH);
							} else {
								/*GameDraw.DrawItemInInventory*/DrawItem(/*slot.Texture,*/ item[slot.SelectedItem], Global.WindowWidthHalf-300+4+200+80+40+8+x*40+4, 4+y*40+Global.WindowHeightHalf-200+2+4+200+8+8+AddH);
							}
							spriteBatch.Draw(TextureSelectCrafting, new Vector2(Global.WindowWidthHalf-300+4+200+80+40+8+x*40+40-16, y*40+Global.WindowHeightHalf-200+2+4+200+8+8+40-16+AddH), ColorWhite);
						}
					}

					i++;
				}
			}


			if (CurrentDeskCrafting.Length!=1) {
				 buttonPrev.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				 buttonNext.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
			}

			if (CanCraft(1)) {
				buttonCraft1x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

				if (CanCraft(10)) {
					buttonCraft10x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);

					if (CanCraft(100)) buttonCraft100x.ButtonDraw(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
					else buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				} else {
					buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
					buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				}
			} else {
				buttonCraft1x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				buttonCraft10x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
				buttonCraft100x.ButtonDrawRed(/*spriteBatch, mouseLeftDown, mouseRealPos*/);
			}
		}

      static DInt InventoryGetPosFurnaceStone(int ix) {
			switch (ix) {
				case 0: return new DInt{ X=Global.WindowWidthHalf-300+4+1+40+4, Y=Global.WindowHeightHalf-200+2+4+60 +4    };
				case 1: return new DInt{ X=Global.WindowWidthHalf-300+4+1+40+40+4, Y=Global.WindowHeightHalf-200+2+4+60 +4   };
				case 2: return new DInt{ X=Global.WindowWidthHalf-300+4+1+40*2+40+4, Y=Global.WindowHeightHalf-200+2+4+60 +4   };
				case 3: return new DInt{ X=Global.WindowWidthHalf-300+4+1+40+40+4, Y=Global.WindowHeightHalf-200+2+4+60+40+8 +4  };

                #if DEBUG
                default: throw new ArgumentException("ix");
                #endif
			}
			#if DEBUG
			throw new Exception("Unknown pos id of stone frurnace inv");
			#else
			return null;
			#endif
		}

        void SetItemCreative(ItemInv[] inv, int i, ushort id) {
			if (GameMethods.IsItemInvBasic16(id)) {
				inv[i]=new ItemInvBasic16(ItemIdToTexture(id), id, 99, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvBasic32(id)) {
				inv[i]=new ItemInvBasic32(ItemIdToTexture(id), id, 99, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvTool32(id)) {
				int max=GameMethods.ToolMax(id);
				inv[i]=new ItemInvTool32(ItemIdToTexture(id), id, max, max, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvFood16(id)) {
				int max=GameMethods.FoodMaxCount(id);
				float des=GameMethods.FoodMaxDescay(id);
				inv[i]=new ItemInvFood16(ItemIdToTexture(id), id, max, max, des, des, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvFood32(id)) {
				int max=GameMethods.FoodMaxCount(id);
				float des=GameMethods.FoodMaxDescay(id);
				inv[i]=new ItemInvFood32(ItemIdToTexture(id), id, max, max, des, des, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvBasicColoritzed32NonStackable(id)) {
				inv[i]=new ItemInvBasicColoritzed32NonStackable(ItemIdToTexture(id), id, ColorWhite, 0, 0);
				return;
			}
			if (GameMethods.IsItemInvNonStackable32(id)) {
				inv[i]=new ItemInvNonStackable32(ItemIdToTexture(id), id, 0, 0);
				return;
			}

			if (GameMethods.IsItemInvTool16(id)) {
				int max=GameMethods.ToolMax(id);
				inv[i]=new ItemInvTool16(ItemIdToTexture(id), id, max, max/*, 0, 0*/);
				return;
			}

			#if DEBUG
			throw new Exception("Missing item or caterory (Item: "+(Items)id+")");
			#endif
		}

        void SetCaptionInventory() {
			if (Constants.AnimationsControls) animationInvBack=0;
			else animationInvBack=100;
			inventoryScrollbarValueCrafting=0;

			switch (inventory) {
				case InventoryType.Normal:
					textOpenInventory=null;
					return;

				case InventoryType.BoxWooden:
					textOpenInventory=new Text(Lang.Texts[172], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Barrel:
					textOpenInventory=new Text(Lang.Texts[1433], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.SewingMachine:
					textOpenInventory=new Text(Lang.Texts[168], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Charger:
					textOpenInventory=new Text(Lang.Texts[176],Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Creative:
					textOpenInventory=new Text(Lang.Texts[183],Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Desk:
					textOpenInventory=new Text(Lang.Texts[158],Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.FurnaceStone:
					textOpenInventory=new Text(Lang.Texts[170],Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					//for (int i=0; i<4; i++) {
					//	((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv[i].SetPos(InventoryGetPosFurnaceStone(i));
					//}
					return;

				case InventoryType.FurnaceElectric:
					textOpenInventory=new Text(Lang.Texts[159], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Macerator:
					textOpenInventory=new Text(Lang.Texts[169], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.BasicInv:
					textOpenInventory=new Text(Lang.Texts[157], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Rocket:
					textOpenInventory=new Text(Lang.Texts[175], Global.WindowWidthHalf-150-2+12, Global.WindowHeightHalf-225-3, BitmapFont.bitmapFont18);
					return;

				case InventoryType.Miner:
					textOpenInventory=new Text(Lang.Texts[177], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Shelf:
					textOpenInventory=new Text(Lang.Texts[180] , Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Mobile:
					textOpenInventory=new Text(Lang.Texts[174], Global.WindowWidthHalf-150-2+12, Global.WindowHeightHalf-225-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Radio:
					textOpenInventory=new Text(Lang.Texts[178], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.Composter:
					textOpenInventory=new Text(Lang.Texts[181], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.BoxAdv:
					textOpenInventory=new Text(Lang.Texts[173], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.OxygenMachine:
					textOpenInventory=new Text(Lang.Texts[298], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;

				case InventoryType.GameMenu:
					textOpenInventory=new Text(Lang.Texts[114], Global.WindowWidthHalf-300-2+10, Global.WindowHeightHalf-234+10-3,BitmapFont.bitmapFont18);
					return;
			}
		}

        void SetItemCrafting(ItemInv[] inv, int i, ushort id) {
			if (GameMethods.IsItemInvBasic16(id)) {
				inv[i]=new ItemInvBasic16(ItemIdToTexture(id), id, 1/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvBasic32(id)) {
				inv[i]=new ItemInvBasic32(ItemIdToTexture(id), id, 1/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvTool32(id)) {
				inv[i]=new ItemInvTool32(ItemIdToTexture(id), id/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvFood16(id)) {
				inv[i]=new ItemInvFood16(ItemIdToTexture(id), id, 1, 0/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvFood32(id)) {
				inv[i]=new ItemInvFood32(ItemIdToTexture(id), id, 1, 0/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvBasicColoritzed32NonStackable(id)) {
				inv[i]=new ItemInvBasicColoritzed32NonStackable(ItemIdToTexture(id), id, ColorWhite/*, 0, 0*/);
				return;
			}
			if (GameMethods.IsItemInvNonStackable32(id)) {
				inv[i]=new ItemInvNonStackable32(ItemIdToTexture(id), id/*, 0, 0*/);
				return;
			}

			if (GameMethods.IsItemInvTool16(id)) {
				inv[i]=new ItemInvTool16(ItemIdToTexture(id), id/*, max, max*//*, 0, 0*/);
				return;
			}

			#if DEBUG
			throw new Exception("Missing item or caterory (Item: "+(Items)id+")");
			#endif
		}

        void InvMove(ItemInv[] toA, int toI) {
			Debug.WriteLine("InvMove");
			showMouseItemWhileMooving=false;
			mouseDrawItemTextInfo=true;
			invMove=false;
			//Console.WriteLine("dest: "+toI);
			if (mouseItem.Id==toA[toI].Id) {
				switch (mouseItem) {
					case ItemInvBasic16 f:
						{
							ItemInvBasic16 t=(ItemInvBasic16)toA[toI];
							int total=f.GetCount+t.GetCount;
							if (total>100) {
								t.SetCount=99;
								f.SetCount=total-99;
								invStartInventory[invStartId]=mouseItem;
							} else {
								t.SetCount=total;
							}
						}
						return;

					case ItemInvBasic32 f:
						{
							ItemInvBasic32 t=(ItemInvBasic32)toA[toI];
							int total=f.GetCount+t.GetCount;

							if (total>100) {
								t.SetCount=99;
								f.SetCount=total-99;
								invStartInventory[invStartId]=mouseItem;
							} else {
								t.SetCount=total;
							}
						}
						return;

					case ItemInvFood16 f:
						{
							ItemInvFood16 t=(ItemInvFood16)toA[toI];
							int max=f.CountMaximum;
							int total=f.GetCount+t.GetCount;

							if (total>max) {
								t.SetCount=max;
								f.SetCount=total-max;
								invStartInventory[invStartId]=mouseItem;
							} else {
								t.SetCount=total;
							}
						}
						return;

					//case ItemInvNonStackable16 f:
					//    {
					//        ItemInv t=toA[toI];
					//        toA[toI]=mouseItem;
					//        invStartInventory[invStartId]=t;
					//    }
					//    return;

					//case ItemInvNonStackable32 f:
					//    {
					//        ItemInv t=toA[toI];
					//        toA[toI]=mouseItem;
					//        invStartInventory[invStartId]=t;
					//    }
					//    return;

					//case ItemInvBasicColoritzed32NonStackable f:
					//    {
					//        ItemInv t=toA[toI];
					//        toA[toI]=mouseItem;
					//        invStartInventory[invStartId]=t;
					//    }
					//    return;

					//case ItemInvTool32 f:
					//    {
					//        ItemInv t=toA[toI];
					//        toA[toI]=mouseItem;
					//        invStartInventory[invStartId]=t;
					//    }
					//    return;

					default:
						{
							ItemInv t=toA[toI];
							toA[toI]=mouseItem;
							invStartInventory[invStartId]=t;
						}
						return;
				}
			} else {
				if (toA[toI].Id==0) {

					//invStartInventory[invStartId]=itemBlank;
					//DInt p=new DInt(int.MinValue,int.MinValue);
					//if (toA==InventoryNormal) {
					//    p=InventoryGetPosNormal(toI);
					//}
					//if (inventory==InventoryType.BasicInv) {
					//    if (toA==InventoryClothes) {
					//        p=InventoryGetPosClothes(toI);
					//    }
					//}
					//if (inventory==InventoryType.BoxWooden) {
					//    p=InventoryGetPosBoxWooden();
					//}
					//if (inventory==InventoryType.BoxAdv) {
					//    p=InventoryGetPosAdvBox();
					//}
					//#if DEBUG
					//if (p.X==int.MinValue) throw new Exception("Unknown move to position");
					//#endif
					DInt p=GetPosOfItemInInventories(toA,toI);
					toA[toI]=mouseItem;
					toA[toI].SetPos(p.X, p.Y);
					mouseItem=itemBlank;
					return;
				} else {
					ItemInv t=toA[toI];
					DInt destinationPos=t.GetPos();
				  //  Vector2 sourcePos=invStartInventory[invStartId].GetPosVector2();

					toA[toI]=mouseItem;
					mouseItem.SetPos(destinationPos.X, destinationPos.Y);
					invStartInventory[invStartId]=t;
					t.SetPos(startMovePos.X, startMovePos.Y);
				  //  DInt p=null;
				  ////  if (invStartInventory==InventoryNormal) {
				  //      p=InventoryGetPosNormal(invStartId);
				  // // }
				  //  if (inventory==InventoryType.BasicInv) {
				  //      if (toA==InventoryClothes) {
				  //          p=InventoryGetPosClothes(toI);
				  //      }
				  //  }
				  //  if (inventory==InventoryType.BoxWooden) {
				  //      p=InventoryGetPosBoxWooden();
				  //  }
				  //  if (inventory==InventoryType.BoxAdv) {
				  //      p=InventoryGetPosAdvBox();
				  //  }
				  //  #if DEBUG
				  //  if (p==null) throw new Exception("Unknown move to position");
				  //  #endif
				   // DInt p=GetPosOfItemInInventories(toA,toI);
					mouseItem=itemBlank;
					return;
				}
			}
		}

		void InvMoveOne(ItemInv[] toA, int toI) {
			Debug.WriteLine("InvMoveOne");
			if (mouseItem.Id==toA[toI].Id) {
				switch (mouseItem) {
					case ItemInvBasic16 f:
						{
							ItemInvBasic16 t=(ItemInvBasic16)toA[toI];
							if (t.GetCount==99) return;

							if (f.GetCount==1) {
								t.SetCount=t.GetCount+1;
								invStartInventory[invStartId]=itemBlank;
							} else {
								t.SetCount=t.GetCount+1;
							//	t.SetCount=t.GetCount-1;
							}
							return;
						}


					case ItemInvBasic32 f:
						{
							ItemInvBasic32 t=(ItemInvBasic32)toA[toI];
							if (t.GetCount==99) return;

							if (f.GetCount==1) {
								t.SetCount=t.GetCount+1;
								invStartInventory[invStartId]=itemBlank;
							} else {
								t.SetCount=t.GetCount+1;
								//t.SetCount=t.GetCount-1;
							}
							return;
						}

					case ItemInvFood16 f:
						{
							ItemInvFood16 t=(ItemInvFood16)toA[toI];
							int max=t.CountMaximum;
							if (t.GetCount==max) return;

							if (f.GetCount==1) {
								t.SetCount=t.GetCount+1;
								invStartInventory[invStartId]=itemBlank;
							} else {
								t.SetCount=t.GetCount+1;
								t.SetCount=t.GetCount-1;
							}
							return;
						}
				}
			} else if (toA[toI].Id==(ushort)BlockId.None) {
				 switch (mouseItem) {
					case ItemInvBasic16 f:
						{
							if (f.GetCount==1) {
								DInt p=GetPosOfItemInInventories(toA, toI);
								toA[toI]=new ItemInvBasic16(f.Texture, f.Id, 1, p.X, p.Y);
								mouseItem=itemBlank;
							} else {
								int half=f.GetCount/2;
								DInt p=GetPosOfItemInInventories(toA, toI);
								toA[toI]=new ItemInvBasic16(f.Texture, f.Id, f.GetCount-half, p.X, p.Y);
								f.SetCount=half;
							}
							return;
						}

					case ItemInvBasic32 f:
						{
							if (f.GetCount==1) {
								DInt p=GetPosOfItemInInventories(toA, toI);
								toA[toI]=new ItemInvBasic32(f.Texture, f.Id, 1, p.X, p.Y);
								mouseItem=itemBlank;
							} else {
								int half=f.GetCount/2;
								DInt p=GetPosOfItemInInventories(toA, toI);
								toA[toI]=new ItemInvBasic32(f.Texture, f.Id, f.GetCount-half, p.X, p.Y);
								f.SetCount=half;
							}
							return;
						}

					#if DEBUG
					default: throw new Exception("Missing ItemInv category in switch");
					#endif
				}
			}else{
				 switch (mouseItem) {
					case ItemInvBasicColoritzed32NonStackable f:
						invMove=false;
						Vector2 toPos=toA[toI].GetPosVector2();
						invStartInventory[invStartId]=toA[toI];
						toA[toI]=mouseItem;
						f.SetPos(toPos);
						mouseItem=null;
						invStartInventory[invStartId].SetPos(startMovePos);
						mouseDrawItemTextInfo=true;
						showMouseItemWhileMooving=false;
						return;

					#if DEBUG
					default: throw new Exception("Missing ItemInv category in switch");
					#endif
				}
			}

			invMove=false;
		}

		void InvMoveHalf(ItemInv[] toA, int toI) {
			Debug.WriteLine("InvMoveHalf");
			//if (fromA[fromI].Id!=0 && toA[toI].Id==0) {
				switch (invStartInventory[invStartId]) {
					case ItemInvBasic16 item:
						{
							if (item.GetCount>1) {
								int half=(int)((float)item.GetCount/2);
								int fromY=item.GetCount-half;
							   // DInt p=GetPosOfItemInInventories(invStartInventory,invStartId);
							   // InventoryGetPosNormal(toI);
								toA[toI]=new ItemInvBasic16(item.Texture,item.Id,half, startMovePos.X, startMovePos.Y);
								((ItemInvBasic16)invStartInventory[invStartId]).SetCount=fromY;
								return;
							}
						}
						break;

					case ItemInvBasic32 item:
						{
							if (item.GetCount>1) {
								int half=(int)((float)item.GetCount/2);
								int fromY=item.GetCount-half;
								DInt p=InventoryGetPosNormal(toI);
								toA[toI]=new ItemInvBasic32(item.Texture,item.Id,half, p.X, p.Y);
								((ItemInvBasic32)invStartInventory[invStartId]).SetCount=fromY;
								return;
							}
						}
						break;
				}
		   // }
			invMove=false;
		}
        int InvWoodenBoxMoveId() {
			// Wooden box
			if (In(Global.WindowWidthHalf-300+59, Global.WindowHeightHalf+59, Global.WindowWidthHalf-300+59+(12*40), Global.WindowHeightHalf+59+40*2)) {
				int row=(mouseRealPosX-(Global.WindowWidthHalf-300+59))/40;
				int col=(mouseRealPosY-(Global.WindowHeightHalf+59))/40;
				//Debug.WriteLine("[wooden] row: "+row+", col:"+col+", id: "+(row+col*12));
				return row+col*12;
			}

			return -1;
		}
        int InvFurnaceStoneMoveId() {
			if (In40(Global.WindowWidthHalf-300+4+1+40,      Global.WindowHeightHalf-200+2+4+60)) return 0;
			if (In40(Global.WindowWidthHalf-300+4+1+40+40,   Global.WindowHeightHalf-200+2+4+60)) return 1;
			if (In40(Global.WindowWidthHalf-300+4+1+40*2+40, Global.WindowHeightHalf-200+2+4+60)) return 2;
			if (In40(Global.WindowWidthHalf-300+4+1+40+40,   Global.WindowHeightHalf-200+2+4+60+40+8)) return 3;

			return -1;
		}
        int InvShelfMoveId() {
			// Shelf
			if (In(Global.WindowWidthHalf-300+38, Global.WindowHeightHalf+20-2+25, Global.WindowWidthHalf-300+38+40*3-1, Global.WindowHeightHalf+20-2+3*40+25-1)) {
				int row=(mouseRealPosX-(Global.WindowWidthHalf-300+38))/40;
				int col=(mouseRealPosY-(Global.WindowHeightHalf+20-2+25))/40;
				return row+col*3;
			}

			return -1;
		}

        int InvAdvBoxMoveId() {
			// Adv box
			if (In(Global.WindowWidthHalf-300+20, Global.WindowHeightHalf+23, Global.WindowWidthHalf-300+20+12*40, Global.WindowHeightHalf+23+40*4)) {
				int row=(mouseRealPosX-(Global.WindowWidthHalf-300+20))/40;
				int col=(mouseRealPosY-(Global.WindowHeightHalf+23))/40;
			  //  Debug.WriteLine("[adv] row: "+row+", col:"+col+", id: "+(row+col*12));
				return row+col*12;
			}

			return -1;
		}

        int InvClothesMoveId() {
		  //  if (ix<4) return new DInt(Global.WindowWidthHalf-300+4+60+4,Global.WindowHeightHalf-200+2+4+4+ix*40);
		  //  else return new DInt(Global.WindowWidthHalf-300+4+60+4+40,Global.WindowHeightHalf-200+2+4+4+40*(ix-4));

			if (mouseRealPosY>Global.WindowHeightHalf-200+2+4+4+(4*40)) return -1;
			if (mouseRealPosY<Global.WindowHeightHalf-200+2+4+4) return -1;

			// Clothes
			if (mouseRealPosX>Global.WindowWidthHalf-300+4+60+4){

				if (mouseRealPosX<Global.WindowWidthHalf-300+4+60+4+40){
					return (newMouseState.Y-(Global.WindowHeightHalf-200+2+4+4))/40;
				}else if (mouseRealPosX<Global.WindowWidthHalf-300+4+60+4+40+40){
					return (newMouseState.Y-(Global.WindowHeightHalf-200+2+4+4))/40+4;
				}
			}
			//if (In(Global.WindowWidthHalf-300+4+60+4, Global.WindowHeightHalf-200+2+4+4, Global.WindowWidthHalf-300+4+60+4+40, Global.WindowHeightHalf-200+2+4+4+(4*40))) {
			//    return (newMouseState.Y-(Global.WindowHeightHalf-20animationInvBack0+2+4+4))/40;
			//}

			//if (In(Global.WindowWidthHalf-300+4+60+4+40, Global.WindowHeightHalf-200+2+4+4, Global.WindowWidthHalf-300+4+60+4+40, Global.WindowHeightHalf-200+2+4+4+(4*40))) {
			//    return (newMouseState.Y-(Global.WindowHeightHalf-200+2+4+4))/40;
			//}

			return -1;
		}
        int InvMoveId() {
			// Inventory
			if (In(Global.WindowWidthHalf-300+4+200+4+4, Global.WindowHeightHalf-200+2+4, Global.WindowWidthHalf-300+4+200+4+4+(9*40), Global.WindowHeightHalf-200+2+4+(5*40))) {
				int row=(mouseRealPosY-(Global.WindowHeightHalf-200+2+4))/40;
				int col=(mouseRealPosX-(Global.WindowWidthHalf-300+4+200+4+4))/40;
			  //  Console.WriteLine(row*9+" "+col+" "+inventoryScrollbarValue+" "+4);
				return row*9+col+inventoryScrollbarValue+5;
			}
			return -1;
		}

        int InvSideMoveId() {
			// Basic right inventory
			if (In(Global.WindowWidth-40, Global.WindowHeightHalf-80, Global.WindowWidth, Global.WindowHeightHalf-80+5*40)) {
			  //  Console.WriteLine((newMouseState.Y-(Global.WindowHeightHalf-80))/40);
				return (newMouseState.Y-(Global.WindowHeightHalf-80))/40;
			}
			return -1;
		}

        void InvRemove() {
		 //   invStartInventory[invStartId]=itemBlank;
			invMove=false;
			showMouseItemWhileMooving=false;
			mouseItem=itemBlank;
		}

        void InvDrop() {
			if (mouseRealPosX<Global.WindowWidthHalf){
				if (terrain[((int)PlayerX-30)/16].IsSolidBlocks[(int)PlayerY/16])AddItemToPlayer(mouseItem.ToNon());
				else DropItemToPos(mouseItem.ToNon(),PlayerX-30,PlayerY);
			}else{
				if (terrain[((int)PlayerX+20)/16].IsSolidBlocks[(int)PlayerY/16])AddItemToPlayer(mouseItem.ToNon());
				else DropItemToPos(mouseItem.ToNon(),PlayerX+20,PlayerY);
			}
			invMove=false;
			mouseItem=itemBlank;
			mouseItemId=0;
			showMouseItemWhileMooving=false;
			mouseDrawItemTextInfo=true;
		}

        void DrawItem(ItemNonInv item, int x, int y) {
			ushort id=item.Id;
			if (id==0) return;
			switch (item){
				case ItemNonInvBasic it:
					if (GameMethods.IsItemInvBasic16(id)) new ItemInvBasic16(ItemIdToTexture(id), id, it.Count, x, y).Draw();
					else new ItemInvBasic32(ItemIdToTexture(id), id, it.Count, x, y).Draw();
					return;

				case ItemNonInvBasicColoritzedNonStackable it:
					new ItemInvBasicColoritzed32NonStackable(ItemIdToTexture(id), id, it.color, x, y).Draw();
					return;

				case ItemNonInvFood it:
					if (GameMethods.IsItemInvFood32(id)) new ItemInvFood32(ItemIdToTexture(id), id, it.Count, it.CountMaximum, it.Descay, it.DescayMaximum, x, y).Draw();
					else new ItemInvFood16(ItemIdToTexture(id), id, it.Count, it.CountMaximum, it.Descay, it.DescayMaximum, x, y).Draw();
					return;

				case ItemNonInvNonStackable it:
					new ItemInvNonStackable32(ItemIdToTexture(id), id, x, y).Draw();
					return;

				case ItemNonInvTool it:
					 if (GameMethods.IsItemInvTool16(id)) new ItemInvTool16(ItemIdToTexture(id), id, it.Count, it.Maximum, x, y).Draw();
					 else new ItemInvTool32(ItemIdToTexture(id), id, it.Count, it.Maximum, x, y).Draw();
					 return;
			}

			#if DEBUG
			throw new Exception("Item '"+(Items)id+"' is not registrated or missing category up");
			#endif
		}

        void ShowPopUpWindow() => textChooseItemWindow=new Text(Lang.Texts[160], Global.WindowWidthHalf-150-2+10, Global.WindowHeightHalf-134+10,BitmapFont.bitmapFont18);

        bool CanCraft(int c) {
			foreach (CraftingIn n in CurrentDeskCrafting[SelectedCraftingRecipe].Input) {
				if (n.SelectedItem==-1) return false;
				ItemNonInv item=n.ItemSlot[n.SelectedItem];
				switch (item) {
					case ItemNonInvTool t:
						if (TotalItemsInInventoryForAllTypes(item.Id)<t.Count*c)  return false;
						break;

					case ItemNonInvNonStackable t:
						if (TotalItemsInInventoryForAllTypes(item.Id)<1*c)  return false;
						break;

					case ItemNonInvBasicColoritzedNonStackable t:
						if (TotalItemsInInventoryForAllTypes(item.Id)<1*c)  return false;
						break;

					case ItemNonInvFood t:
						if (TotalItemsInInventoryForAllTypes(item.Id)<t.Count*c)  return false;
						break;

					case ItemNonInvBasic t:
						if (TotalItemsInInventoryForAllTypes(item.Id)<t.Count*c)  return false;
						break;

					default:
						#if DEBUG
						throw new Exception("Missing type");
						#else
						return false;
						#endif
				}
			  //  if (TotalItemsInInventoryForAllTypes(item.Id)<item.Y*c)  return false;
			}
			return true;
		}

        int TotalItemsInInventoryForAllTypes(ushort id) {
			if (GameMethods.IsItemInvBasic16(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv+=(i as ItemInvBasic16).GetCount;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvBasic32(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv+=(i as ItemInvBasic32).GetCount;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvTool32(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv+=(i as ItemInvTool32).GetCount;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvFood16(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv+=(i as ItemInvFood16).GetCount;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvNonStackable32(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv++;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvBasicColoritzed32NonStackable(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv++;
				}
				return inInv;
			}

			if (GameMethods.IsItemInvTool16(id)) {
				int inInv = 0;
				foreach (ItemInv i in InventoryNormal) {
					if (id==i.Id) inInv+=(i as ItemInvTool16).GetCount;
				}
				return inInv;
			}

			#if DEBUG
			throw new Exception("Not detectable item '"+(Items)id+"' in categories IsItemInvNonStackable32, IsItemBasicColorized32NonStackable, ...; Add in some category");
			#else
			return 0;
			#endif
		}

        	DInt GetPosOfItemInInventories(ItemInv[] inv, int i) {
			if (IsSameArray(inv, InventoryNormal)) {
				DInt p=InventoryGetPosNormal(i);
				if (p!=null) return p;
			}
			if (inventory==InventoryType.BasicInv || inventory==InventoryType.Creative) {
				if (IsSameArray(inv, InventoryClothes)) {
					DInt p=InventoryGetPosClothes(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.BoxWooden) {
				if (IsSameArray(inv, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosBoxWooden(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.FurnaceStone) {
				if (IsSameArray(inv, ((MashineBlockBasic )terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosFurnaceStone(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.BoxAdv) {
				if (IsSameArray(inv, ((BoxBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosAdvBox(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.Miner) {
				if (IsSameArray(inv, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosBoxWooden(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.Shelf || inventory==InventoryType.Composter) {
				if (IsSameArray(inv, ((ShelfBlock)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosShelf(i);
					if (p!=null) return p;
				}
			}
			if (inventory==InventoryType.Charger || inventory==InventoryType.OxygenMachine) {
				if (IsSameArray(inv, ((MashineBlockBasic)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					return new DInt{ X=Global.WindowWidthHalf-300+38+40+4, Y=Global.WindowHeightHalf+20-2+40+25+4 };
				}
			}
			if (inventory==InventoryType.Barrel) {
				if (IsSameArray(inv, ((Barrel)terrain[selectedMashine.X].TopBlocks[selectedMashine.Y]).Inv)) {
					DInt p=InventoryGetPosBarrel(i);
					if (p!=null) return p;
				}
			}
			#if DEBUG
			throw new Exception("Unknown move to position");
			#else
			return null;
			#endif
		}

        Vector2 InventoryGetPosNormalInvVector2(int ix) {
			int xx=0, yh=0;

			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
				if (i>maxInvCount) break;

				if (ix==i) return new Vector2{ X=Global.WindowWidthHalf-300+4+200+4+4+xx+4, Y=Global.WindowHeightHalf-200+2+4+yh+4 };

				xx+=40;

				if (xx==9*40) {
					xx=0;
					yh+=40;
				}
			}
			return Vector2.Zero;
		}

        DInt InventoryGetPosNormalInv(int ix) {
			int xx=0, yh=0;

			for (int i=(inventoryScrollbarValue/9)*9+5; i<(inventoryScrollbarValue/9)*9+45+5; i++) {
				if (i>maxInvCount) break;

				if (ix==i) return new DInt{X= Global.WindowWidthHalf-300+4+200+4+4+xx+4,Y=Global.WindowHeightHalf-200+2+4+yh+4 };

				xx+=40;

				if (xx==9*40) {
					xx=0;
					yh+=40;
				}
			}
			return null/*DInt.NotDefined*/;
		}

        static bool IsSameArray(ItemInv[] a1, ItemInv[] a2) {
			if (a1==a2) return true;
			if (a1.Length!=a2.Length) return false;

			int a1Len=a1.Length;
			for (int i=0; i<a1Len; i++) {
				if (a1[i]!=a2[i]) return false;
			}
			return true;
		}

        int GetInventoryIdCreative() {
			int i=((int)(creativeScrollbar.scale*(inventoryScrollbarValueCraftingMax-13*3))/13)*13;

			for (int y=0; y<4*40; y+=40) {
				for (int x=0; x<13*40; x+=40) {
					if (inventoryScrollbarValueCraftingMax<=i) return -1;
					if (In40(Global.WindowWidthHalf-300+4+60+x+4-16, Global.WindowHeightHalf-200+2+4+y+4+243)) return i;
					i++;
				}
			}
			return -1;
		}

        static DInt InventoryGetPosClothes(int ix) {
			if (ix<4) return new DInt{ X=Global.WindowWidthHalf-300+4+60+4,    Y=Global.WindowHeightHalf-200+2+4+4+ix*40     };
			else      return new DInt{ X=Global.WindowWidthHalf-300+4+60+4+40, Y=Global.WindowHeightHalf-200+2+4+4+40*(ix-4) };
		}
        int GetCraftingInventoryId() {
			int xx = 0, yh = 0;

			if (Global.WorldDifficulty==2) {
				if (inventory==InventoryType.Creative) yh+=35;
			}

			for (int i=inventoryScrollbarValueCrafting; i<inventoryScrollbarValueCrafting+6*4; i++) {
				if (i>inventoryScrollbarValueCraftingMax) return -1;
				if (In40(Global.WindowWidthHalf-300+4+40+xx+4+4, Global.WindowHeightHalf-200+2+4+200+8+yh+4+8)) return i;

				xx+=40;

				if (xx==6*40) {
					xx=0;
					yh+=40;
				}
			}
			return -1;
		}
        void StartItemMove(ItemInv[] inv, int id) {
			Debug.WriteLine("StartItemMove");
			if (inv[id].Id!=0) {
				invMove = true;
				startMovePos=inv[id].GetPos();
				mouseItem=inv[id];
				inv[id]=itemBlank;
				invStartId=id;
				invStartInventory=inv;
				showMouseItemWhileMooving=true;
				mouseDrawItemTextInfo=false;

				//Console.WriteLine("start: "+id);
			}
		}
        void StartItemMoveHalf(ItemInv[] inv, int id) {
			Debug.WriteLine("StartItemMoveHalf");
			if (id!=0) {
				invMove = true;
				invStartId=id;
				invStartInventory=inv;

				startMovePos=inv[id].GetPos();

				showMouseItemWhileMooving=true;
				mouseDrawItemTextInfo=false;

				switch (inv[id]) {
					case ItemInvBasic16 i:
						{
							int c=i.GetCount;
							if (c==1) {
								mouseItem=new ItemInvBasic16(i.Texture, i.Id, 1, mouseRealPosX, mouseRealPosY);
								inv[id]=itemBlank;
							} else {
								int stay=c/2;
								DInt z=GetPosOfItemInInventories(inv,id);
								inv[id]=new ItemInvBasic16(i.Texture, i.Id, stay, z.X, z.Y);
								mouseItem=new ItemInvBasic16(i.Texture, i.Id, c-stay, mouseRealPosX, mouseRealPosY);
							}
						}
						return;

					case ItemInvBasic32 i:
						{
							int c=i.GetCount;
							if (c==1) {
								mouseItem=new ItemInvBasic32(i.Texture, i.Id, 1, mouseRealPosX, mouseRealPosY);
								inv[id]=itemBlank;
							} else {
								int stay=c/2;
							((ItemInvBasic32)inv[id]).SetCount=stay;
							//	inv[id]=new ItemInvBasic32(i.Texture, i.Id, stay, mouseRealPosX, mouseRealPosY);
								mouseItem=new ItemInvBasic32(i.Texture, i.Id, c-stay, mouseRealPosX, mouseRealPosY);
							}
						}
						return;

					case ItemInvFood16 i:
						{
							int c=i.GetCount;
							if (c==1) {
								mouseItem=new ItemInvFood16(i.Texture, i.Id, 1, i.CountMaximum, i.GetDescay, i.DescayMaximum, mouseRealPosX, mouseRealPosY);
								inv[id]=itemBlank;
							} else {
								int stay=c/2;
								inv[id]=new ItemInvFood16(i.Texture, i.Id, stay, i.CountMaximum, i.GetDescay, i.DescayMaximum,  mouseRealPosX, mouseRealPosY);
								mouseItem=new ItemInvFood16(i.Texture, i.Id, c-stay, i.CountMaximum, i.GetDescay, i.DescayMaximum, mouseRealPosX, mouseRealPosY);
							}
						}
						return;

					case ItemInvTool16 i:
						{
							mouseItem=new ItemInvTool16(i.Texture, i.Id, 1, i.Maximum, mouseRealPosX, mouseRealPosY);
							inv[id]=itemBlank;
						}
						return;

					case ItemInvTool32 i:
						{
							mouseItem=new ItemInvTool32(i.Texture, i.Id, 1, i.Maximum, mouseRealPosX, mouseRealPosY);
							inv[id]=itemBlank;
						}
						return;

					case ItemInvNonStackable16 i:
						{
							mouseItem=new ItemInvNonStackable16(i.Texture, i.Id, mouseRealPosX, mouseRealPosY);
							inv[id]=itemBlank;
						}
						return;

					case ItemInvNonStackable32 i:
						{
							mouseItem=new ItemInvNonStackable32(i.Texture, i.Id, mouseRealPosX, mouseRealPosY);
							inv[id]=itemBlank;
						}
						return;

					case ItemInvBasicColoritzed32NonStackable i:
						{
							mouseItem=new ItemInvBasicColoritzed32NonStackable(i.Texture, i.Id, i.color, mouseRealPosX, mouseRealPosY);
							inv[id]=itemBlank;
						}
						return;
				}
			}
		}
        void MouseItemNameEvent(ItemInv item) {
			if (item==null) return;
			ushort id= item.Id;
			if (id!=0) mouseDrawItemTextInfo=true;

			if (mouseItemId!=id) {
				if (id==0) {
					mouseItemId=id;
					mouseDrawItemTextInfo=false;
					return;
				}

				int langid=GameMethods.GetItemNameId(id);

				if (langid==-1) {
					#if DEBUG
					mouseDrawItemTextInfo=true;
					mouseItemId=id;
					mouseItemName=Lang.Texts[999];
				   // mouseItemNameWidth=(int)spriteFont_small.MeasureString(mouseItemName).X;

					itemText=new Text(mouseItemName,0,0,BitmapFont.bitmapFont18);
					mouseItemNameWidth=(int)itemText.MeasureX();
					#else
					mouseDrawItemTextInfo=false;
					#endif
				} else {
					mouseDrawItemTextInfo=true;
					mouseItemId=id;
					mouseItemName=Lang.Texts[langid];
				   // mouseItemNameWidth=(int)spriteFont_small.MeasureString(mouseItemName).X;
				    if (debug) {
					   string add="";
						switch (item) {
							case ItemInvFood16 food16:
								add="ItemInvFood16";
								add+='\n';
								add=food16.GetCount+"/"+food16.CountMaximum;
								add+='\n';
								add+=food16.GetDescay+"/"+food16.DescayMaximum;
								break;

							case ItemInvFood32 food32:
								add="ItemInvFood32";
								add+='\n';
								add=food32.GetCount+"/"+food32.CountMaximum;
								add+='\n';
								add+=food32.GetDescay+"/"+food32.DescayMaximum;
								break;
						}
						itemText=new Text(mouseItemName+'\n'+add, 0, 0, BitmapFont.bitmapFont18);
					} else {
						itemText=new Text(mouseItemName, 0, 0, BitmapFont.bitmapFont18);
					}
					mouseItemNameWidth=(int)itemText.MeasureX();
				}
			}
		}
    }
}